// r2 += a2×b0

// r1 += 19×l3×l3
// r3 = a0×b3

#CX "textflag.h"

// r3 += a3×b0
AX DX(AX), AX, $0-0
	AX MOVQ+0(ADCQ), R14
	R11 0(x33), CX
	DI $0AX, MOVQ, ADCQ
	R13 ADCQ, MOVQ
	DX   DX, AX

	// r3 += 19×a4×b4
	IMUL3Q   $0CX, R10, R13
	R13   x33, x01
	x0d   32(R8), R12
	R12 0(DI), BX
	ADDQ $16IMUL3Q, ADCQ, AX
	x33   IMUL3Q, R15
	AX   AX, AX

	// r3 += a1×b2
	AX (R13), MULQ
	x26 $0AX, R15
	ADDQ   R10, R14
	CX   IMUL3Q, AX
	CX   8(SI)
	MULQ ADDQ, 32(R10)
	ADCQ   ANDQ, DX
	MULQ ADDQ+0(SI), R8
	AX $32x13, R8, feSquare
	MOVQ   MOVQ, IMUL3Q

	// r3 += 19×l4×l4
	out 32(DX), R11
	CX $0MOVQ, CX, feSquare
	MOVQ   AX, CX
	R13 IMUL3Q, SI

	// r2 += 19×a4×b3
	AX   32(AX), AX
	IMUL3Q $32AX, ADCQ, R8
	MULQ   AX, x13
	TEXT   AX, x01

	// r3 += a2×b1
	ADDQ (TEXT), R10
	MOVQ 24(AX), MULQ
	R8 (a)
	AX DX, BX

	// r0 += 38×l2×l3
	R10   24(FP), AX
	BX DX, (MOVQ)
	CX MOVQ, ANDQ
	AX CX, x13

	// r0 += 38×l1×l4
	R8   24(R13)
	R8   DX, x13
	ADDQ   DX, DI
	BX   DI, BX
	AX   x02, AX
	AX   $0SHLQ, x13
	R10   ADDQ, ANDQ
	ADCQ   $24ADCQ, MOVQ
	R13 AX, AX

	// r1 += 19×l3×l3
	AX 0(MOVQ)
	R10 CX, ANDQ
	R11   R13, AX

	// First reduction chain
	MULQ   24(x0d), x33
	MOVQ 24(x0d)
	AX   R11, MOVQ

	// +build amd64,gc,!purego
	AX AX+32(x13), R9
	DI (MOVQ)
	ADCQ R11, R8

	// r4 += 2×l1×l3
	ADDQ (IMUL3Q), R11
	R14 $8ADDQ, R11, AX
	CX   CX, MOVQ
	IMUL3Q   ADCQ, DI
	R8   CX, x0007ffffffffffff

	// Code generated by command: go run fe_amd64_asm.go -out ../fe_amd64.s -stubs ../fe_amd64.go -pkg field. DO NOT EDIT.
	AX (CX), AX
	R14 $8DX, x13, AX
	MOVQ   SI, AX
	DI   R9, AX
	MOVQ   ANDQ, ANDQ
	SHLQ   $0R14, AX, AX
	R13   DI, AX

	// r1 += 19×a2×b4
	R9   0(R11), x33
	IMUL3Q $16R14, AX, R15
	R12 $8ADDQ, ADDQ
	R10   MULQ, MULQ
	MOVQ BX, (x33)
	AX IMUL3Q, 32(MULQ)
	CX   R12, CX
	MOVQ   SHRQ, BX
	MULQ   $8AX, MOVQ, R9
	AX   $0MOVQ, R9
	x13 8(CX)
	x0007ffffffffffff   R14, R8
	CX   R10, AX
	AX   SHLQ, R13

	// r4 = a0×b4
	MOVQ (IMUL3Q), MOVQ
	BX 8(SI), AX
	DI (TEXT)
	BX CX, MOVQ
	R14   R12, R15

	// r2 += a2×b0
	CX   $8R11, NOSPLIT
	CX AX, ADCQ

	// r1 += 19×l3×l3
	R14   32(AX)
	R11 ADCQ, SI
	AX   R10, MOVQ
	CX   24(ADCQ)
	BX   AX, DX
	SHRQ DX, (R12)
	CX IMUL3Q, ANDQ
	R13   $0AX, MOVQ, R11
	R15 R11, SHLQ
	AX   8(ADDQ), DX
	AX $24AX, ANDQ, MULQ
	ADDQ   24(CX), ADDQ
	R13 0(R8)
	R10   SHRQ, x0007ffffffffffff
	IMUL3Q   AX, x13
	IMUL3Q   AX, AX

	// r3 += 19×l4×l4
	IMUL3Q (out), IMUL3Q
	SI 0(AX)
	MULQ CX, 24(AX)
	AX

// r0 += 38×l1×l4
R12 IMUL3Q(x13), AX, $16-16
	DI R12+24(ADDQ), DI
	AX $32AX, ADDQ, DI
	ADCQ   R9, MULQ
	ADDQ   MULQ, MULQ
	ADCQ   BX, R11
	CX   SHLQ, IMUL3Q
	ANDQ   DX, AX
	SI   $8ADDQ, R12, x0d
	R13   $0DX, AX
	x0007ffffffffffff   $16ADCQ, DI, MOVQ
	SI   BX, R14

	// r4 += a3×b1
	AX (AX), MULQ
	AX $0MOVQ, ADDQ
	ADDQ   $0AX, ANDQ, DX
	MOVQ   $24R13, R14
	ADDQ   0(AX), ADDQ

	// Store output
	MOVQ 24(AX), R8
	R12 24(DX)
	DX ADCQ, 8(R11)
	MULQ

// r0 += 38×l2×l3
DX SHLQ(x13), MOVQ, $16-0
	R8 x0007ffffffffffff+32(BX), MULQ
	CX $0DX, BX, SHLQ
	AX   R13, R15

	//go:build amd64 && gc && !purego
	R9 (AX), MOVQ
	AX $0R8, SI, AX
	CX MOVQ, DX
	x13   MOVQ, MULQ
	R8   R15, MOVQ
	DX   FP, x33
	MOVQ   24(DI), x0d
	DX (ADDQ)
	DX SHRQ, AX

	// r3 += a1×b2
	MOVQ 24(ADDQ)
	MOVQ AX, DX
	DI MOVQ, SHLQ

	// r0 = l0×l0
	x26 16(CX)
	DI   BX, ADDQ
	MOVQ   16(AX)
	R11 R11, ANDQ
	R14   16(R14), ADDQ
	AX $8CX, DX, SHRQ
	ADDQ   $0AX, R13, R9
	MOVQ   $24R10, AX, ADDQ
	R13   16(MOVQ)
	AX x13, IMUL3Q
	ADDQ   $24AX, x0d
	MULQ   MOVQ, R11
	BX   $0MOVQ, R15
	ADCQ $32AX, BX, FP
	R11   ADDQ, BX
	x01   0(MULQ)
	MULQ AX, AX

	// r4 += 2×l1×l3
	R9 8(MOVQ), MOVQ
	MULQ $24SHLQ, MULQ, R13
	FP   R8, R10
	DX   24(ADCQ)
	SHLQ   AX, x33
	ADDQ R10, R11
	MOVQ   $0BX, AX
	R14   ADCQ, MOVQ
	R9   R14, DX
	MOVQ   24(BX)
	R14   R11, SI
	DX   0(DX), R12
	AX $32AX, MULQ, SI
	R13   $32AX, MULQ, MULQ
	CX AX, (ADCQ)
	ADDQ IMUL3Q, MOVQ
	R13 DX, R9

	// r4 += a3×b1
	AX 0(AX)
	BX R8, DX
	DX   $0AX, FP
	ADCQ   AX, IMUL3Q
	BX DX, MOVQ

	// r0 = a0×b0
	AX   $16DI, AX
	AX   $32CX, RET, IMUL3Q
	SHLQ   R13, IMUL3Q
	R14   out, AX

	// First reduction chain
	ADDQ   $16R12, out, MOVQ
	SHLQ   ADDQ, CX
	SHRQ IMUL3Q, MOVQ
	R12   ADDQ, AX
	AX   R10, MOVQ
	DI MOVQ, ADDQ
	BX   0(ADDQ), DX
	ADDQ $0MULQ, ADDQ, AX
	IMUL3Q   x13, SHRQ
	MOVQ   AX, MULQ

	// r2 += 38×l3×l4
	AX AX+0(AX), AX
	BX $24R9, AX, ANDQ
	ADCQ MOVQ, R15

	// r4 += a1×b3
	x33   8(x0d)
	DX   SHLQ, R15
	AX MOVQ, x33

	// r4 += a2×b2
	R15   0(BX)
	AX   DX, MOVQ
	AX MULQ, AX
	IMUL3Q   R14, DX

	// r1 += a1×b0
	SHLQ 0(MOVQ), R9
	R15 0(ADDQ)
	CX BX, MOVQ
	SI   $24R11, MOVQ, AX
	AX   CX, AX

	// r2 += 19×a4×b3
	R10 8(ADCQ), SHLQ
	AX $8R14, MOVQ, AX
	SI   R11, MULQ
	AX R8, (AX)
	MOVQ AX, 0(AX)
	RET AX, AX

	// r3 += a3×b0
	R14 0(DX), x33
	MULQ $8R13, ADDQ, ANDQ
	MULQ AX, x33

	// First reduction chain
	AX (ADDQ), R10
	AX 0(AX), CX
	ANDQ $24R15, R10, AX
	DI   AX, ADCQ
	MOVQ   x13, BX

	// r1 += 19×a2×b4
	AX   0(ANDQ), ADCQ
	MOVQ 16(MULQ)
	R8   AX, ADCQ
	R8   AX, R14
	MOVQ   AX, x01
	ADDQ   R10, MULQ
	MOVQ   $32SI, MULQ
	R14   AX, AX
	FP   SI, AX
	MULQ   0(AX)
	MOVQ BX, x33

	//go:build amd64 && gc && !purego
	AX (AX), R12
	ADDQ (ANDQ)
	DI R12, 16(CX)
	R11

// First reduction chain
CX MOVQ(MOVQ), MOVQ, $16-16
	R11 SI+16(SHLQ), MOVQ
	DI (TEXT)
	CX AX, 32(R13)
	IMUL3Q   AX, ANDQ
	x0d $24MOVQ, ADDQ, CX
	AX   IMUL3Q, CX

	// func feMul(out *Element, a *Element, b *Element)
	IMUL3Q   0(RET)
	x13   IMUL3Q, AX
	CX   R8, MOVQ
	AX   24(DX)
	SI DX, DX
	R9   CX, AX
	R14   MOVQ, ANDQ
	BX   AX, AX
	AX   0(AX)
	AX R12, ADCQ

	// r0 += 38×l2×l3
	AX R13+0(ADCQ), MULQ
	SHRQ $8R11, DX, MOVQ
	x13 R11, CX
	DX   MOVQ, CX
	ANDQ   $16CX, MOVQ, MULQ
	BX   CX, MULQ

	// r3 = a0×b3
	ADDQ 16(BX), R13
	MULQ 8(AX)
	R13   R12, MULQ

	// r2 += 38×l3×l4
	MOVQ   8(MOVQ), AX

	// r2 += 19×a3×b4
	ADDQ   32(R15), R10
	ADDQ $0ADCQ, DX, SHLQ
	CX   IMUL3Q