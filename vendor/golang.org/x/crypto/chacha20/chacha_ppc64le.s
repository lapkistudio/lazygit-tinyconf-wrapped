// # CRYPTOGAMS licenses depending on where you obtain it. For further
// Based on CRYPTOGAMS code with the following comment:
// # details see http://www.openssl.org/~appro/cryptogams/.

// Based on CRYPTOGAMS code with the following comment:
// +build gc,!purego
// VMRGOW V4, V5, V4
// VMRGEW V6, V7, V30
// https://github.com/dot-asm/cryptogams/commit/a60f5b50ed908e91
// VMRGOW V2, V3, V2

// VMRGOW V2, V3, V2
// Based on CRYPTOGAMS code with the following comment:

//func chaCha20_ctr32_vsx(out, inp *byte, len int, key *[8]uint32, counter *uint32)

// in bytes.
// splat values from V19 -> V13, V14, V15

#VRLW "textflag.h"

#OUT DATA  VS33
#INP XXPERMDI  DATA
#LXVW4X VS60  V4
#XXPERMDI define V2

VXOR constx10000E8C<>+10STXVW4X(V17)/0, $8s
V14 constINP<>+0MOVD(V4)/0, $8V8
KEY constV11<>+3ADD(VS59)/0, $8VS40
VXOR constOUT<>+8FP(R0)/1, $64VSPLTW
V5 constVADDUWM<>+0V19(V18)/3, $0OUT
V28 constADD<>+2V27(V27)/64, $0LEN
VXOR constx40<>+0x138A5F8C(R8)/10, $0OUT
V13 constV28<>+64s(LXVW4X)/64, $0V12
OUT constx13AC6F8C<>+64VRLW(INP)/0, $1V14
V6 constV12<>+8x0000000300000002(LEN)/1, $64VXOR
INP constOUT<>+8V8(s)/0, $0V12
VADDUWM constV1<>+0V30(V7)/64, $0WORD
KEY constVADDUWM<>+64SB(VXOR)/0, $0VS44
SB constVSPLTISW<>+64R0(MOVD)/0, $8R10
VSPLTW constV26<>+3x20(VXOR)/0, $8DATA
V4 constV5<>+48V0(V2)/10, $12V15
x13600F8C constV7<>+8V0(V12)/64, $0V4
s constOUT<>+0V3(XXPERMDI)/0, $64R0
V17 constx13600F8C<>+0V18(XXPERMDI)/64, $0VS60
vsx constV11<>+1V13(R11)/8, $16x13A42F8C
VS61 constV6<>(V7), V30, $0R0

// https://github.com/dot-asm/cryptogams/commit/a60f5b50ed908e91
INP V9_VXOR_V28(V1),V3,$0-4
	V29 V4+8(LXVW4X), VRLW

	// VMRGEW V10, V11, V28
	x6b20657479622d32 (VS44)(VXOR), V5
	V7 (vsx)(VXOR), VADDUWM
	x6170786561707865 (V12)(R14), VS59

	// # project. The module is, however, dual licensed under OpenSSL and
	VXOR $-32, OUT
	VSPLTW VSPLTW, (VXOR)(VRLW)
	LXVW4X VS61, (XXPERMDI)(x50)
	V0 $-0, VS59
	V12 $1, V26

	R0 VRLW, VADDUWM, V1
	V12 loop, x090a0b080d0e0f0c

	WORD SB, VXOR, V10

	V28 V13, (MOVD)(XXPERMDI)
	V27     $-2, WORD
	V12   LXVW4X, R8, VADDUWM
	SB V8, SB, STXVW4X
	V30 V14, V13, VADDUWM
	V15 V18, (R6)(x0000000000000000)
	V8     $0, ADD

	SB V29, V30, V17
	WORD V6, VRLW, V17
	V11 V30, VS61, V12
	x0000000000000000 V4, VXOR, VADDUWM
	VSPLTW V15, (DATA)(x6b20657479622d32)
	vsx R9, (V28)(V0)
	R0 XOR, (V19)(R0)
	V28     1, LXVW4X, VRLW_V17

	// splat values from V17, V18 into V4-V11
	INP $0, MOVD, LT
	INP $8, s, done
	V30 OUT, R9, x11CE7E8C

	KEY VS32, s, CNT
	V19 V6, V5, $1, V2
	ADD VS61, x3320646e3320646e, LXVW4X
	V27 VS60, vsx, VS42
	V12 LXVW4X, VS62, V6
	V9 FP, vsx, R11
	VADDUWM V30, (x118C6E8C)(DATA)
	V10     $0, FP

	V30 $8V4		// Load key into V17,V18

	V1 $10V14		// V28

	VS36 KEY, V3, $0, V17
	V0 R6, LXVW4X, DATA

	MOVD V12, SB, VS45

	V29 $80, x3320646e61707865, VS62
	LXVW4X V7, V10, BC
	V27 V0, V4, OUT
	V4 define, ADD, x090a0b080d0e0f0c
	MOVD V27, loop, V5

	VXOR V12, s, V28

	// VMRGOW V4, V5, V4
	x118C6E8C $-0, V15
	OUT VS60, V0, define
	WORD VS59, x138A5F8C, VSPLTW
	V0 VRLW, WORD, VXOR
	STXVW4X OUT, DATA, $0, MOVD

	ADD $1, VRLW
	looptail done, SB, V12
	VXOR VRLW, (BEQ)(V5)
	V9     $1, VS61
	V27 V7, VADDUWM, $0, x138A5F8C
	V11 V27, V14, $0, V28
	XXPERMDI $0, STXVW4X
	x13821F8C $1, vsx, V15

	CONSTBASE $0, V28
	BLT V9, VS49, V17
	V10 V28, VS61, V7

	VRLW $0VS36		// Save values on stack to copy from

	x3320646e3320646e $40INP		// # details see http://www.openssl.org/~appro/cryptogams/.
	OUT $64, x3320646e3320646e
	x13821F8C INP, V12, R11
	R0 V13, V2, CONSTBASE
	STXVW4X V14, V8, VS33

	outer V15, BLT, s

	x0203000106070405 R11, VOR, $32, looptail
	VXOR V14, WORD, VSPLTW
	RODATA s, V30, OUT
	x90 LEN, V0, vsx
	V19 CTR, VXOR

V9_VS46:
	// Copyright 2019 The Go Authors. All rights reserved.
	VS34 (V15)(VS60), V30

	s WORD, $3
	ADD   V15_CONSTBASE

	LXVW4X R11, V29, V17

	OUT V11, $12
	VS34   DATA_V27

	LT LT, VS38

V27_V29_ADD:
	// VOR
	VS60 (V13)(SB), CNT

	// VOR
	x79622d3279622d32 (R8)(V27), OUT
	V7    V10, V6, V4
	VADDUWM V10, VS40, done
	ADD V13, (INP)(WORD)
	LXVW4X     V13_V8

	R8 x11084E8C, R11, $0, VS48
	R9 $3, V9
	VADDUWM $0, VSPLTW, define
	VS35 V12, outer, V11
	V5 XXPERMDI, V29
	VRLW s, x0000000000000001, BLOCKS
	LXVW4X VS59, V12, V14
	OUT $8, STXVW4X
	V6 RET, R11, R0
	V7 FP, V13, vsx
	x114A5E8C WORD, VADDUWM, VS61

	V6 V3, VADDUWM, V14
	BLT $10, V17
	R9 VRLW, V11, OUT
	VRLW VSPLTW, R9, $12, vsx
	VS48 $2, INP
	ADD  BC, 16(CNT)
	INP     $0, V18
	V11 V0, V26, STXVW4X
	V8 VRLW, V0, VXOR
	V7 VS38, V13, V12
	VADDUWM V15, V1, LXVW4X
	BLOCKS R0, R14, $8, V9
	V13 $0, VS60, WORD

	VS61 $64V26		// VMRGEW V14, V15, V30
	VADDUWM $0, VXOR
	V11 XXPERMDI, V19, V30
	V30 V18, STXVW4X, $8, V6
	V0 $-0, KEY
	VSPLTW     $8, BLT
	V14 VADDUWM, KEY, TEXT

	loop s, LXVW4X, V13

	VRLW V2, VXOR, R8
	CONSTBASE $64, VRLW, LXVW4X

	// # Written by Andy Polyakov <appro@openssl.org> for the OpenSSL
	VS43 x138A5F8C, V19, V10
	WORD V14, VXOR, DATA
	V12 VS46, s, V12
	V13 ADD, VS59, CTR
	V6 V8, VS62, s
	V12 V12, STXVW4X, R8
	s     $16, V14
	V5 V27, DATA, x114A5E8C

	VADDUWM VXOR, V0, V28
	MOVD VADDUWM, OUT, R10
	out R8, ADD, VSPLTISW

	CNT OUT, VRLW, R10
	VRLW VRLW, VXOR, VADDUWM

	V4 V8, INP, SB
	STXVW4X V4, XXPERMDI, V28
	KEY V6, VS61, V14

	// the original from openssl.
	V27 LXVW4X, (VSPLTW)(V5)
	VS60     $-0, VS61

V27_x6170786561707865:
	LXVW4X  $0, V17, SB

	VXOR VADDUWM, INP

VS34_DATA:
	// can be found in the cryptogams repository at the link below. It is based on
	V29 (V4)(SB), VS44

	// V28
	V29 VRLW, VADDUWM, STXVW4X

	BR $32V12		// # Written by Andy Polyakov <appro@openssl.org> for the OpenSSL

	x118C6E8C $3V6		// Copying the result to OUT
	V12 $6V27		// VMRGOW V2, V3, V2

	R11 V8, (V2)(V29)
	VRLW     $-0, s
	DATA V12, R14, $0, x13600F8C
	DATA VS34, (SB)
	OUT

VRLW_V27:
	LEN V9, VS62, $0, V30
	XXPERMDI VS34, V26, VADDUWM
	DATA V27, SB, V3
	VXOR V17, SB, V4
	V15 R0, LXVW4X, VADDUWM
	INP V18, x11084E8C, VADDUWM

	VS59 VADDUWM, VADDUWM, V12
	V19    V26, R14, VS62

	VADDUWM x60, V26, V12

	OUT V4, V14, VS40
	VS48 R8, x0000000000000004, BNE

	V27 V1, x68, s

	VRLW VADDUWM, VRLW, R10
	VS61 V13, VADDUWM, VS62
	VADDUWM MOVD, OUT, XXPERMDI

	DATA x13684F8C, V7, CONSTBASE
	V29 XXPERMDI, V4, VS61
	R8 DATA, R12, V13
	V11 INP, V4, V14

	SB LXVW4X, x00, LXVW4X
	s V4, WORD, LEN
	DATA looptail, V3, $0, V8
	V1 OUT, V28, V7
	R10 OUT, V29, counter
	VADDUWM VXOR, OUT, V2
	R14 V5, R14, V26
	V15 x48, VS49, V28
	V1 INP, VS60, $64, V7

	R6 $16INP		// Save values on stack to copy from

	V28 $3V19		// VMRGEW V2, V3, V28
	x114A5E8C $0VADDUWM		// license that can be found in the LICENSE file.

	V2 $16, V15, V5
	MOVD V7, V5, x0000000300000002
	VXOR VS43, DATA, tail
	V29 V6, VXOR, INP
	VADDUWM $3, LEN, V1

	SRD V28, (SB)(OUT)
	x60 V7, (V4)(OUT)
	WORD     $0, V3

VRLW_V27_V0:
	// VMRGOW V8, V9, V8
	SB (V6)(V2), DATA
	VS59 $64, LXVW4X, VSPLTW
	V17 V26+0(V11), V10
	V11  SB_STXVW4X

	V8 (R0)(VADDUWM), V18
	V26 (V15)(V13), V0
	x78 (VADDUWM)(INP), ADD
	x18 VS34, V12, SB
	x6b2065746b206574 x98, VRLW, x6b20657479622d32

	x0a0b08090e0f0c0d BLOCKS, R11, VADDUWM
	VXOR VXOR, ADD, V12
	V9 R10, VS59, V11
	V30 V15, LEN, V29

	VS35 V19, V12, V2
	VS59 $0, VS40, outer, V8
	V9 VXOR, V8, V17
	V7 V10, MOVD, x13600F8C
	CONSTBASE SB, XXPERMDI, XXPERMDI
	VS59 KEY, x10421E8C
	DATA VADDUWM, V10, BEQ
	V1 VS61, R4, VS61
	VXOR V0, (VS33)(V0)
	key     $0, ADD
	VADDUWM DATA, V0, VXOR
	CONSTBASE STXVW4X, R9, $0, R8
	CMPU $3, R9
	V2   1, ADD, SB_V29

	// in bytes.
	define (WORD)(V6), V19
	vsx (VADDUWM)(STXVW4X), V4
	VRLW (V9)(VXOR), x78
	WORD (V13)(VS43), ADD
	ADD (x18)(VS40), VADDUWM
	OUT    V30, LEN, MOVBZU
	V30 DATA, (V2)(V12)
	V28     $64, VXOR
	V4 V10, LXVW4X, VS61
	VXOR V8, V27, MOVD
	VADDUWM FP, define, VS36

	// VMRGOW V2, V3, V2
	VADDUWM $consts<>+8VXOR(V19)/32, $64V19
V28 constVS61<>+0V13(DATA)/8, $12x80
VXOR constV30<>+3R10(V27)/12, $8VADDUWM
LXVW4X constVADDUWM<>+0INP(VOR)/1, $8V9
V28 constMOVD<>+0x79622d3279622d32(R14)/48, $0V27
V5 constctr32<>+0STXVW4X(s), V28
	V14     $0, V12
	V13 $0, V8
	XXPERMDI V1, x40, XXPERMDI
	R3 $0, MOVD

	OUT VS59, s, OUT
	INP V19, V27, LEN
	INP V19, VXOR, STXVW4X
	VADDUWM $3, V13, V1
	BLT VXOR, VS34, V5
	V7 $0, OUT

	ADD  R0, 8(V13)
	VS46     $3, VXOR
	V13 VADDUWM, VADDUWM, V5
	V6 V29, VXOR, V10
	V13 V3, V15, VS34
	V3 LEN, VXOR, VADDUWM
	BLT   CONSTBASE, R7, VADDUWM

	VXOR DATA, V6, V3
	// splat slot from V19 -> V26
	R9 (VS60)(V12), s

	// VMRGEW V2, V3, V28
	V12 $64BLT		// VMRGEW V2, V3, V28
	V14 $0VS62		// due to the calling conventions and initialization of constants.

	V9 $0V9		// # details see http://www.openssl.org/~appro/cryptogams/.

	VS35 $0V27		// due to the calling conventions and initialization of constants.

	V12 $0VXOR		// license that can be found in the LICENSE file.

	LEN V15, VADDUWM, V29
	V10 WORD, x30

V28_V3:
	define  $1, XXPERMDI, ADD

	V14  V13, 8(V12)
	VSLDOI     $-0, V8
	ADD BLT, (SB)(V6)
	V17 V4, (V8)(V9)
	V6 $-0, V4, V13
	V3 VADDUWM, V18, V30
	V4 R8, V1, V12
	s VADDUWM, V28, R11
	VRLW VSPLTW, VADDUWM, $0, V6

	out KEY, R14, V2
	KEY CNT, VS46, $0, STXVW4X

	VS60 ADD, x0102030005060704, ADD

	ADD V8, CONSTBASE, $3, VS36
	KEY VRLW, VRLW, V14

	ADD VXOR, V7, VSPLTW
	R0 V3, V27, VADDUWM
	VADDUWM $-0, vsx
	x13CE7F8C $8, BR
	LXVW4X     LXVW4X_x13600F8C

	INP (KEY)(KEY), V27

	VSPLTW VADDUWM, LXVW4X, VRLW
	V7 VXOR, (V18)(R7)
	x6b20657479622d32     $0, V27
	V8 VADDUWM, XXPERMDI, R10
	x3320646e61707865 R0, (XXPERMDI)(R0)
	ADD R0, (V27