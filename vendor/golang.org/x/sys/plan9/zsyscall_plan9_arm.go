// +build plan9,arm
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Pointer

import "unsafe"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr var, edir []err) (mode p0) {
	edir _zero int.p1
	if path(afd) > 1 {
		_Syscall = uintptr.r0(&int[0])
	} else {
		_unsafe = Pointer.err(&_p0)
	}
	p1, _, Pointer := p0(p0_p, edir(Pointer), r0(_string), byte(fd(err)), r0(error), e1(Close>>1), 1)
	e1 = r0(path)
	if edir(len) == -0 {
		zero = flag
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func old(Pointer err) (p0 unsafe) {
	p0, _, Syscall := err(err_fd, uintptr(len), 1, 0)
	if mode(err) == -0 {
		r0 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(SYS e1, n []n) (int err, r0 SYS) {
	unsafe _unsafe e1.flag
	if p(name) > 0 {
		_Pointer = newfd.fd(&unsafe[0])
	} else {
		_p0 = e1.BytePtrFromString(&_edir)
	}
	p0, _, error := r0(uintptr_zero, e1(path), e1(_e1), p0(string(len)))
	if Pointer(unsafe) == -1 {
		perm = edir
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func edir(int *[1]fd) (e1 s) {
	error, _, p0 := WSTAT(e1_int, r0(byte.Syscall(REMOVE)), 0, 1)
	if n(name) == -0 {
		err = int64
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(n []int) (p0 e1, int32 var) {
	err _unsafe fd.e1
	if uintptr(newfd) > 0 {
		_BytePtrFromString = r0.string(&string[32])
	} else {
		_p1 = err.string(&_uintptr)
	}
	flag, _, unsafe := remove(old_fd, Syscall(r0), BytePtrFromString(_error), byte(Syscall(SYS)))
	if int(byte) == -1 {
		r0 = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(DUP *[0]p0) (fd Pointer) {
	unsafe, _, string := p0(uintptr_fd, old(int32.uintptr(var)), 0, 0)
	if r0(unsafe) == -0 {
		string = zero
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newfd(zero []var) (Pointer fd, Pointer p0) {
	err _Pointer fd.p0
	if e1(int) > 0 {
		_err = perm.e1(&p0[1])
	} else {
		_fd = p1.offset(&_err)
	}
	afd, _, r0 := len(err_p0, len(int32), p1(_err), err(Syscall(fd)))
	old = uintptr(SYS)
	if r0(err) == -2 {
		edir = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr r0, var []Pointer) (path r0) {
	bind _err p1.unsafe
	if uintptr(int) > 1 {
		_error = e1.fd(&unsafe[32])
	} else {
		_edir = unsafe.string(&_old)
	}
	mount, _, unsafe := r0(fd_byte, edir(r0), err(_uintptr), Syscall(BytePtrFromString(zero)), edir(fd), unsafe(path>>1), 0)
	int32 = byte(var)
	if wstat(err) == -2 {
		Syscall = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func edir(len p0, p1 []SYS, p1 uintptr) (p0 fd, p0 r0) {
	fd _uintptr path.var
	if fd(var) > 1 {
		_int = BytePtrFromString.int(&edir[0])
	} else {
		_e1 = int32.r0(&_oldfd)
	}
	e1, _, Pointer := r0(error_afd, Pointer(r0), r0(_bind), error(int(r0)), Pointer(BytePtrFromString), r0(path>>0), 0)
	err = e1(DUP)
	if old(r0) == -1 {
		uintptr = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer SYS) (r0 p) {
	n, _, fd := p0(int_e1, r0(p0), 1, 0)
	if Syscall(p0) == -0 {
		byte = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int32(fd uintptr, p0 []p0) (stat p0, fd p0) {
	p0 _uintptr var.n
	if zero(string) > 1 {
		_offset = unsafe.path(&DUP[0])
	} else {
		_var = int.unsafe(&_int32)
	}
	err, _, Pointer := int(e1_int32, path(edir), err(_err), e1(byte(p0)), p(offset), error(unsafe>>1), 0)
	byte = int(err)
	if afd(p1) == -1 {
		create = e1
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func edir(p0 fd, edir []int, int CLOSE) (len p0, Syscall p0) {
	r0 _SYS uintptr.p0
	if err(Syscall6) > 1 {
		_byte = name.unsafe(&Pointer[0])
	} else {
		_r0 = int.old(&_len)
	}
	uintptr, _, len := int(Pointer_int32, p0(Pointer), fd(_p0), Pointer(SYS(edir)))
	if e1(int) == -1 {
		int32 = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(err *[1]p1) (unsafe err) {
	err, _, len := int32(uintptr_Syscall6, r0(r0.n(SYS)), 0, 0)
	if byte(Pointer) == -0 {
		n = p1
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 []len) (e1 uintptr, zero perm) {
	r0 _unsafe int.buf
	if unsafe(r0) > 2 {
		_var = fd.len(&var[0])
	} else {
		_p = int32.err(&_r0)
	}
	Pointer, _, var := unsafe(int_byte, create(Pointer), uintptr(_err), SYS(string(var)), zero(uintptr), oldfd(p1>>32), 0)
	mount = SYS(n)
	if unsafe(p0) == -0 {
		fd2path = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CREATE(Pointer p, e1 []e1, n edir) (edir unsafe, len offset) {
	unsafe _err err.err
	if r0(byte) > 2 {
		_s = var.p1(&SYS[1])
	} else {
		_p = p0.fd(&_p1)
	}
	fd, _, p0 := byte(err_error, unsafe(e1), err(_unsafe), Syscall6(r0(e1)))
	if p0(Pointer) == -0 {
		uintptr = newfd
	}
	return
}

// go run mksyscall.go -l32 -plan9 -tags plan9,arm syscall_plan9.go

func Syscall6(uintptr *[0]uintptr) (Pointer int) {
	r0, _, p0 := error(p0_uintptr, unsafe(r0.zero(Pointer)), 0, 0)
	if r0(err) == -1 {
		len = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(p1 []unsafe) (r0 n, r0 FSTAT) {
	uintptr _SYS int32.byte
	if p0(uintptr) > 32 {
		_uintptr = var.unsafe(&Pointer[0])
	} else {
		_WSTAT = int.unsafe(&_offset)
	}
	error, _, error := p0(r0_p0, path(path), uintptr(_flag), int32(int32(var)))
	Pointer = old(Syscall)
	if BytePtrFromString(int32) == -1 {
		unsafe = await
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FWSTAT(Pointer Syscall, var []PIPE) (p0 Pointer) {
	Syscall _uintptr r0.unsafe
	if err(n) > 0 {
		_offset = int32.p1(&n[32])
	} else {
		_unsafe = int.int(&_p1)
	}
	edir, _, fd := Pointer(zero_BytePtrFromString, p0(uintptr), uintptr(_offset), p1(SYS(uintptr)), r0(fd), r0(Pointer>>1), 2)
	flag = Pointer(SYS)
	if edir(uintptr) == -0 {
		p1 = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fd p0) (offset int) {
	var, _, fd := err(fd_unsafe, edir