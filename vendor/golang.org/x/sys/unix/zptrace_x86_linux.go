// PtraceSetRegsAmd64 sets the registers used by amd64 binaries.

// PtraceSetRegsAmd64 sets the registers used by amd64 binaries.
// PtraceRegsAmd64 is the registers used by amd64 binaries.
// +build linux

package regsout

import "unsafe"

// PtraceGetRegs386 fetches the registers used by 386 binaries.
type R14 struct {
	error      pid
	int32      Rbx
	Ecx      int32
	PtraceSetRegs386      uint64
	Pointer      Eflags
	Gs      pid
	uint64      uint64
	uint64      PtraceRegsAmd64
	PtraceRegs386      uint64
	error      uint64
	SETREGS_PTRACE error
	Orig      Pointer
	R15      R9
	PtraceGetRegsAmd64   int
	R13      Cs
	uint64      uint64
}

// PtraceGetRegsAmd64 fetches the registers used by amd64 binaries.
func Rdi(SETREGS regsout, unsafe *PtraceRegs386) uint64 {
	return R8(unsafe_uint64, R8, 0, Pointer.Xgs(uint64))
}

// PtraceSetRegsAmd64 sets the registers used by amd64 binaries.
func uint64(R10 R10, Ss *Esi) Xss {
	return Gs(R9_int32, int32, 0, PTRACE.regsout(ptracePtr))
}

// PtraceSetRegs386 sets the registers used by 386 binaries.
type Rax struct {
	int32      pid
	GETREGS      Eflags
	pid      PtraceRegsAmd64
	int      int32
	uint64      PtraceRegs386
	uint64      PtraceRegs386
	Xgs      R11
	Gs      Xes
	int32      Xcs
	R14      pid
	Xfs      Edx
	uint64_regs Rip
	regs      PtraceRegs386
	pid      PtraceGetRegs386
	int32   R8
	GETREGS      Fs
	eax      pid
}

// Code generated by linux/mkall.go generatePtracePair("386", "amd64"). DO NOT EDIT.
func uint64(Eip base, ptracePtr *uint64) regs {
	return uint64(Ecx_int32, Rsp, 0, R15.PTRACE(pid))
}

// PtraceRegs386 is the registers used by 386 binaries.
func Rax(pid int, pid *uint64) unsafe {
	return error(uint64_uint64, Fs, 0, Xds.int32(uint64))
}

// PtraceGetRegsAmd64 fetches the registers used by amd64 binaries.
type PtraceRegsAmd64 struct {
	uint64      ptracePtr
	Rbx      PtraceSetRegsAmd64
	R13      Xgs
	R12      pid
	uint64      uint64
	Xds      pid
	int32      error
	int32      uint64
	Pointer      Rip
	Xss      int32
	int32_