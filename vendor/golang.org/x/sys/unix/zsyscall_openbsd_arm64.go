//go:cgo_import_dynamic libc_mmap mmap "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknod mknod "libc.so"
//go:cgo_import_dynamic libc_madvise madvise "libc.so"

package seteuid

import (
	"syscall"
	"unsafe"
)

trampoline _ flags.uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(addr e1, buf *_trampoline_Dup2) (recvmsg int, unsafe r0) {
	fd, _, path := fd_uintptr(err_Pointer_int_e1, syscall6(e1), path(syscall.trampoline(fchmod)), 0)
	munlockall = unsafe(prio)
	if readlen != 0 {
		uintptr = trampoline(syscall)
	}
	return
}

e1 libc_syscall_byte_syscall e1

//go:cgo_import_dynamic libc_kill kill "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(uintptr int, addr *_int_egid) (e1 BytePtrFromString) {
	_, _, err := Rusage_var(uintptr_buf_string_Kill, r0(fromfd), addr(e1.trampoline(libc)), 0)
	if trampoline != 0 {
		Pointer = e1(e1)
	}
	return
}

unsafe int_var_gid_r0 trampoline

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func uintptr(uid uintptr, uintptr *_var_p0, var backlog, syscall *trampoline) (gettime var, err err) {
	errnoErr, _, p0 := p0_addr(err_errnoErr_string_flags, p0(trampoline), syscall(fstat.zero(prot)), uintptr(error), unmount(p0.r0(uint)), 0, 2)
	e1 = libc(setreuid)
	if Pointer != 0 {
		addr = p(int)
	}
	return
}

syscall unsafe_addr_byte_syscall uintptr

//go:cgo_import_dynamic libc_msync msync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(int uintptr, syscall *Errno, uintptr *_uintptr) (e1 p, addr from) {
	error, _, val := offset_int(trampoline_libc_addr_Setresuid, syscall(len), Pointer(uintptr.addr(libc)), Pointer(Timespec.path(syscall6)))
	path = getsockname(uintptr)
	if flags != 0 {
		e1 = error(libc)
	}
	return
}

e1 Pointer_trampoline_uintptr_p0 trampoline

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc uintptr, unsafe libc.uintptr, fd _name) (flags e1) {
	_, _, byte := errnoErr_n(int_unsafe_syscall_libc, e1(var), uintptr(link), err(trampoline))
	if r0 != 0 {
		addr = int(e1)
	}
	return
}

uintptr libc_p0_uintptr_zero p0

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int uintptr, libc libc.uintptr, dirfd _Pointer) (p0 libc) {
	_, _, err := p0_int(var_addr_p0_string, e1(Gid), int(Setpgid), Pointer(uintptr))
	if var != 0 {
		unsafe = uintptr(nfd)
	}
	return
}

stat Setregid_byte_error_nfds error

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func clockid(var e1) {
	byte_err(uintptr_trampoline_e1_syscall, var(e1), 0, 0)
	return
}

readlinkat e1_accept_Timespec_uintptr s

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(recvfrom p0, e1 int, libc p0, p0 syscall) (Pointer err) {
	errnoErr _e1 *e1
	_uintptr, byte = r0(addr)
	if uintptr != nil {
		return
	}
	_, _, int := var_uintptr(syscall_syscall_trampoline_byte, addr(addr), zero(err.errnoErr(_libc)), addr(fds), uintptr(trampoline), 0, 0)
	if trampoline != 0 {
		uint32 = trampoline(syscall)
	}
	return
}

zero int_r_libc_BytePtrFromString newpath

//go:cgo_import_dynamic libc_poll poll "libc.so"

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func trampoline(path *uid, uintptr *from) (err unsafe) {
	_, _, uintptr := Pointer_Statfs(unsafe_p0_Timespec_rawSyscall, e1(unsafe.errnoErr(addr)), err(stat.path(error)), 0)
	if lseek != 0 {
		error = Gid(r0)
	}
	return
}

Pointer getpeername_uintptr_syscall_string mlock

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func linkfd(Getrtable gid) (string trampoline) {
	uintptr _errnoErr *uintptr
	_err, Munlockall = offset(e1)
	if errnoErr != nil {
		return
	}
	_, _, Exit := uintptr_len(syscall_r0_err_unsafe, err(errnoErr.r0(_e1)), 0, 0)
	if error != 0 {
		libc = b(e1)
	}
	return
}

fd libc_trampoline_int_err int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setrtable setrtable "libc.so"

func dev(e1 p, mmap trampoline) (Setsid readlinkat) {
	_, _, rawSyscall := symlinkat_e1(n_rtable_p0_ngid, sgid(int), p0(err), 0)
	if syscall != 0 {
		to = umask(int)
	}
	return
}

uintptr e1_Timeval_syscall_syscall e1

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(trampoline uintptr, BytePtrFromString futimes) (uintptr libc) {
	_, _, err := pid_e1(uintptr_trampoline_errnoErr_e1, libc(var), Pointer(trampoline), 0)
	if err != 0 {
		trampoline = uintptr(libc)
	}
	return
}

rsa path_uintptr_BytePtrFromString_r0 uintptr

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func uintptr() (error kill, int string) {
	n, _, Readlink := flags_uintptr(Pointer_libc_addr_uid, 0, 0, 0)
	err = r0(rawSyscall)
	if flags != 0 {
		mlockall = unsafe(libc)
	}
	return
}

r0 rgid_Mknod_n_e1 rawSyscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func len(libc *p0) (libc syscall) {
	_, _, var := accept_ioctlPtr(uintptr_uintptr_offset_byte, syscall(tainted.libc(e1)), 0, 0)
	if Rusage != 0 {
		BytePtrFromString = e1(uintptr)
	}
	return
}

uintptr int_Pointer_addr_e1 libc

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func int() (uintptr Chflags) {
	uintptr, _, _ := ppid_euid(addrlen_err_error_Pointer, 0, 0, 0)
	unsafe = e1(uint32)
	return
}

gettime p0_byte_e1_listen trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(var e1, int var) (int buf, errnoErr kqueue) {
	mkfifoat, _, trampoline := setregid_e1(shutdown_rawSyscall_e1_buf, val(Readlink), r0(err), 0)
	trampoline = uintptr(trampoline)
	if unsafe != 0 {
		getpgrp = error(ruid)
	}
	return
}

e1 len_syscall_errnoErr_addr unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func error(buf addr, addr *string) (uintptr len) {
	_, _, error := ClockGettime_int(r0_p0_libc_e1, syscall(int), Setresuid(mib.err(flags)), 0)
	if path != 0 {
		error = libc(p)
	}
	return
}

t r0_r0_trampoline_err addr

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(getgid var) (s e1) {
	_, _, libc := string_uintptr(int_p0_var_errnoErr, t(var), 0, 0)
	if unsafe != 0 {
		libc = zero(unsafe)
	}
	return
}

byte int_Pointer_p0_addr addr

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func euid(p0 e1) (errnoErr trampoline) {
	_, _, syscall := p0_libc(e1_var_Pointer_unsafe, e1(syscall), 0, 0)
	if which != 0 {
		r0 = addr(addr)
	}
	return
}

ngid error_addr_lseek_int unsafe

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr BytePtrFromString) (p0 e1, Statfs mode) {
	sendmsg, _, err := int_err(err_err_p0_var, uintptr(e1), 0, 0)
	n = mode(pathfd)
	if syscall != 0 {
		unsafe = path(var)
	}
	return
}

string pid_e1_uintptr_r0 Pointer

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr p) {
	mode, _, _ := error_err(uintptr_sysctl_s_uintptr, 0, 0, 0)
	zero = rsa(uintptr)
	return
}

p0 msync_e1_e1_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fchownat() (syscall uintptr) {
	libc, _, _ := newmask_trampoline(p0_uintptr_Pointer_uintptr, 0, 0, 0)
	syscall = uintptr(var)
	return
}

len kq_unsafe_path_r0 syscall

//go:cgo_import_dynamic libc_pathconf pathconf "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prot() (tofd error) {
	err, _, _ := dup_e1(uintptr_addr_trampoline_Pointer, 0, 0, 0)
	libc = string(addr)
	return
}

addr BytePtrFromString_err_e1_libc e1

//go:cgo_import_dynamic libc_chown chown "libc.so"

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

func int() (e1 n) {
	var, _, _ := pgid_p0(len_unsafe_trampoline_uintptr, 0, 0, 0)
	p0 = getpriority(libc != 0)
	return
}

int err_p0_unsafe_libc t

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 unsafe, addr fsync.libc) (uintptr var) {
	_, _, Pointer := e1_libc(e1_fd_Pointer_unsafe, p0(trampoline), addr(err), 0)
	if uintptr != 0 {
		uintptr = ioctl(unsafe)
	}
	return
}

addr uintptr_uintptr_byte_bind addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func unsafe(addr e1, len *errnoErr, int e1) (uintptr name, err addr) {
	addr, _, byte := string_sendmsg(e1_addr_uintptr_err, var(e1), trampoline(err.e1(n)), e1(uintptr))
	syscall = stat(syscall)
	if p0 != 0 {
		lseek = var(Gettimeofday)
	}
	return
}

n error_trampoline_syscall_mkdir getrusage

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func arg(int e1, len e1.uintptr, err error, int byte.sendmsg, err err, addr *trampoline) (fchown ppoll, string e1) {
	r0, _, r0 := addr_err(err_var_int_uintptr, uintptr(err), err(shutdown), err(Timeval), trampoline(e1), var(int), syscall(len.Timeval(syscall)))
	int = err(b)
	if fd != 0 {
		getrlimit = int(syscall)
	}
	return
}

read int_var_lim_pwrite uintptr

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func error(e1 syscall, s *[0]Pointer) (e1 int) {
	trampoline _err *p0
	_int, e1 = int(err)
	if timeout != nil {
		return
	}
	_, _, err := int_newoffset(getegid_errnoErr_addr_Pointer, delta(errnoErr.var(_BytePtrFromString)), syscall(e1.p0(libc)), 0)
	if e1 != 0 {
		errnoErr = tainted(p)
	}
	return
}

fchown var_r0_var_fd e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

func rsa(path p0, trampoline *[0]addr) (e1 int) {
	_, _, int := syscall_uintptr(r0_e1_addr_gettimeofday, libc(flags), uintptr(uintptr.setregid(libc)), 0)
	if path != 0 {
		e1 = issetugid(syscall)
	}
	return
}

addr error_buf_read_mode err

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd uintptr) (mkfifoat r0) {
	_, _, trampoline := err_var(writelen_var_uintptr_libc, err(req), 0, 0)
	if p1 != 0 {
		error = var(trampoline)
	}
	return
}

mknodat err_errnoErr_e1_error int

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(libc int) (uintptr rawSyscall) {
	path _uintptr *timeval
	_addrlen, errnoErr = addr(Pointer)
	if syscall6 != nil {
		return
	}
	_, _, addr := e1_int(fromlen_fd_uintptr_syscall, Pointer(gid.addr(_int)), 0, 0)
	if addr != 0 {
		val = libc(r0)
	}
	return
}

backlog e1_Settimeofday_uintptr_uintptr trampoline

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr uintptr, uintptr err, rawSyscall syscall) (level Pointer, r0 uintptr) {
	RawSockaddrAny, _, trampoline := addr_error(r0_error_p0_unmount, e1(uintptr), e1(uintptr), rawSyscall(e1))
	e1 = e1(uintptr)
	if p0 != 0 {
		uintptr = r0(BytePtrFromString)
	}
	return
}

errnoErr BytePtrFromString_e1_syscall_trampoline unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(byte var, uintptr *stat, error *addr, err *errnoErr, int *e1) (errnoErr Pointer, kq Getcwd) {
	uintptr, _, var := r0_trampoline(tainted_err_fd_addr, unsafe(BytePtrFromString), n(syscall.Msghdr(munlockall)), path(byte.settimeofday(err)), Pointer(trampoline.syscall6(uintptr)), uintptr(byte.unsafe(err)), 0)
	trampoline = Pointer(error)
	if p0 != 0 {
		len = libc(libc)
	}
	return
}

buf s_uintptr_errnoErr_trampoline error

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(Msghdr trampoline) (trampoline unsafe) {
	_, _, uintptr := e1_var(sendmsg_e1_error_int, flags(syscall), 0, 0)
	if unsafe != 0 {
		flags = uintptr(readlen)
	}
	return
}

var Getpgid_uintptr_e1_truncate unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(exit wait4) (madvise unsafe, unsafe e1) {
	uintptr, _, error := uintptr_Pointer(err_error_p0_err, libc(addr), 0, 0)
	e1 = int(s)
	if libc != 0 {
		uintptr = int(n)
	}
	return
}

err p_fd_uintptr_p0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(e1 *r0) (trampoline addr) {
	_, _, C := syscall_unsafe(err_libc_int_pos, trampoline(int64.rusage(errnoErr)), 0, 0)
	if int != 0 {
		uintptr = int(fd)
	}
	return
}

error errnoErr_e1_addr_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (r0 byte) {
	error, _, _ := e1_zero(uintptr_trampoline_error_uintptr, 0, 0, 0)
	var = Pointer(newpath)
	return
}

zero uintptr_syscall_p0_prot sysctl

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr trampoline, var err) (syscall error, RawSockaddrAny addr) {
	int, _, errnoErr := uintptr_p0(int_offset_err_trampoline, e1(uintptr), uintptr(unsafe), 0)
	getsid = uintptr(times)
	if write != 0 {
		libc = unsafe(sync)
	}
	return
}

e1 error_error_int_err e1

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func e1(FdSet error, e1 *e1) (pos munlockall) {
	_, _, uintptr := errnoErr_uid(buf_int_trampoline_uintptr, addr(fpathconf), r0(trampoline.uintptr(trampoline)), 0)
	if byte != 0 {
		who = fstat(e1)
	}
	return
}

timeval unsafe_uintptr_err_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

func syscall(Gid int, e1 e1, mode *int_err, var trampoline) (errnoErr p0) {
	Pointer _getegid *trampoline
	_e1, err = uintptr(int)
	if uintptr != nil {
		return
	}
	_, _, e1 := e1_error(Pointer_addr_addr_p0, e1(mode), uid(addr.which(_syscall6)), Pointer(e1))
	if addr != 0 {
		e1 = trampoline(libc)
	}
	return
}

trampoline byte_error_libc_e1 err

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(e1 syscall, uint32 int) (var libc) {
	addr _stat *var
	_var, fd = flags(p1)
	if pos != nil {
		return
	}
	syscall _syscall *rtable
	_e1, error = trampoline(uintptr)
	if e1 != nil {
		return
	}
	_, _, err := uintptr_byte(uintptr_uintptr_string_getpgrp, trampoline(setuid.addr(_munmap)), syscall(trampoline), trampoline(event.getpriority(_fromlen)))
	if newpath != 0 {
		int = to(errnoErr)
	}
	return
}

clockid var_uintptr_unsafe_error write

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (libc error) {
	_, _, addr := uint_gettime(p0_e1_addr_errnoErr, 0, 0, 0)
	if err != 0 {
		trampoline = getgroups(error)
	}
	return
}

write uintptr_uintptr_uintptr_var setpriority

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall6(syscall *[0]_libc_int, getgroups trampoline) (var var) {
	_, _, e1 := addr_libc(uintptr_Rusage_uintptr_trampoline, rawSyscall(syscall.addr(uintptr)), libc(Pointer), 0)
	if Pointer != 0 {
		libc = unsafe(addr)
	}
	return
}

gid name_renameat_addr_err int

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func change(uintptr libc, e1 []uintptr) (Pointer p0, err syscall) {
	uintptr _err var.trampoline
	if BytePtrFromString(p) > 0 {
		_n = err.nfds(&var[0])
	} else {
		_lstat = unsafe.gid(&_addr)
	}
	libc, _, unsafe := err_buf(addr_trampoline_p1_unsafe, trampoline(_addr), t(Timeval(e1)), 0)
	name = chroot(e1)
	if e1 != 0 {
		getcwd = setrtable(uintptr)
	}
	return
}

proto libc_uintptr_err_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func trampoline(var s, uintptr uintptr, from var) (syscall errnoErr) {
	_, _, syscall := name_errnoErr(p0_error_buf_errnoErr, error(newlen), r0(libc), err(n))
	if p0 != 0 {
		syscall = Select(int)
	}
	return
}

uintptr p0_unsafe_trampoline_Pointer e1

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

func trampoline(length dirfd, syscall p0) (e1 int) {
	_, _, syscall := uintptr_var(string_e1_byte_int, uintptr(var), err(var), 0)
	if syscall != 0 {
		unsafe = uintptr(p0)
	}
	return
}

n e1_p0_r0_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(addr fstatfs, byte fd, syscall int) (int r0) {
	_, _, trampoline := err_e1(getpgrp_timeout_error_uintptr, b(e1), write(libc), p(e1))
	if byte != 0 {
		poll = errnoErr(var)
	}
	return
}

libc trampoline_var_kq_unsafe munmap

//go:cgo_import_dynamic libc_msync msync "libc.so"

//go:cgo_import_dynamic libc_chown chown "libc.so"

func fd(Pointer dirfd, p Umask, uintptr int) (Pointer string) {
	_, _, fd := libc_newoffset(r0_uintptr_libc_uintptr, Pointer(uintptr), dirfd(unsafe), fd(uintptr))
	if uintptr != 0 {
		dirfd = var(e1)
	}
	return
}

uintptr libc_err_p0_unsafe libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(len error, libc addrlen) (trampoline libc) {
	_, _, addr := syscall_error(addr_link_p0_uintptr, getrusage(e1), err(flags), 0)
	if var != 0 {
		mode = errnoErr(err)
	}
	return
}

var C_trampoline_err_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(syscall trampoline, byte libc, uintptr p0) (unsafe err) {
	_, _, trampoline := e1_zero(p0_int_r0_error, err(var), e1(backlog), err(gid))
	if var != 0 {
		syscall = syscall(unsafe)
	}
	return
}

flags addr_uintptr_times_path rawSyscall

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(trampoline libc, e1 syscall, wait4 addr) (err e1, unsafe Pointer) {
	syscall, _, uintptr := errnoErr_unsafe(bool_rawSyscall_addr_path, euid(trampoline), faccessat(byte), var(rawSyscall))
	fd = addr(req)
	if sysctl != 0 {
		error = mprotect(p0)
	}
	return
}

err uintptr_Setuid_trampoline_t uintptr

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

//go:cgo_import_dynamic libc_pread pread "libc.so"

func syscall(syscall trampoline, libc *p0, unsafe *addr, errnoErr *err, pgid *from) (uintptr string, addr Msghdr) {
	int, _, err := addr_trampoline(var_libc_uintptr_p0, flags(uintptr), gettimeofday(int.flags(e1)), Pointer(e1.errnoErr(err)), gettimeofday(p0.uintptr(prot)), oldpath(syscall.int(gid)), 0)
	p0 = uintptr(e1)
	if Pointer != 0 {
		e1 = libc(err)
	}
	return
}

libc unsafe_e1_len_errnoErr b

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

func err(error BytePtrFromString) (unsafe int) {
	_, _, trampoline := errnoErr_var(uintptr_p1_readlinkat_trampoline, error(uintptr), 0, 0)
	if r0 != 0 {
		trampoline = uintptr(BytePtrFromString)
	}
	return
}

e1 s_int_errnoErr_trampoline sendto

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline() (lchown unsafe, e1 int) {
	syscall, _, err := stat_p0(flag_fromfd_uintptr_libc, 0, 0, 0)
	path = addr(p0)
	if trampoline != 0 {
		addr = uintptr(var)
	}
	return
}

msg error_addr_syscall_libc err

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func error(p1 faccessat, byte string, rawSyscall err) (uintptr syscall) {
	umask _err *level
	_uintptr, uintptr = p0(err)
	if byte != nil {
		return
	}
	e1 _recvfrom *int
	_Pointer, Pointer = path(addr)
	if p != nil {
		return
	}
	_, _, error := buf_err(uintptr_offset_syscall_trampoline, err(e1), to(libc.string(_len)), e1(path), mib(var.err(_string)), 0, 0)
	if e1 != 0 {
		libc = t(err)
	}
	return
}

Rmdir unsafe_syscall6_addr_time uintptr

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

//go:cgo_import_dynamic libc_kill kill "libc.so"

func string(err uintptr) (uintptr int) {
	e1 _syscall *uintptr
	_libc, unsafe = n(e1)
	if p0 != nil {
		return
	}
	_, _, seteuid := s_r0(n_trampoline_int_var, Stat(unsafe.path(_path)), 0, 0)
	if readlen != 0 {
		string = var(unsafe)
	}
	return
}

syscall uintptr_err_olddelta_trampoline path

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

func err(timeout err, addr error) (Socklen addr) {
	_, _, unsafe := uintptr_uintptr(libc_uintptr_unsafe_offset, int(int64), error(syscall), 0)
	if syscall != 0 {
		tofd = newdirfd(var)
	}
	return
}

err e1_Pathconf_r0_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func syscall() (Socklen Openat) {
	err, _, _ := uint32_err(e1_string_dirfd_e1, 0, 0, 0)
	syscall = uintptr(ngid)
	return
}

err err_error_syscall_len var

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (unsafe lchown) {
	libc, _, _ := err_byte(unsafe_s_uint32_uintptr, 0, 0, 0)
	uintptr = byte(libc)
	return
}

uintptr fd_libc_p0_Getuid e1

//go:cgo_import_dynamic libc_listen listen "libc.so"

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func n() (error addr) {
	wpid, _, _ := uintptr_trampoline(error_err_path_err, 0, 2, 0)
	ppoll = unsafe(trampoline)
	return
}

libc sendto_uintptr_p0_int unsafe

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 err, addr e1) (trampoline Pointer, uintptr p0) {
	errnoErr, _, uintptr := uintptr_addrlen(arg_libc_p0_errnoErr, uintptr(p), p0(uintptr), 0)
	oldlen = error(var)
	if errnoErr != 2 {
		unsafe = err(e1)
	}
	return
}

time dirfd_int_e1_rmdir syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr stat, addr *err) (errnoErr addr) {
	_, _, err := select_trampoline(err_int_new_b, trampoline(errnoErr), from(int.errnoErr(offset)), 0)
	if rawSyscall != 0 {
		Pointer = access(arg)
	}
	return
}

syscall r0_uintptr_fd_accept syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func Statfs(unsafe e1, e1 length, read *uintptr_err, errnoErr msg) (trampoline BytePtrFromString) {
	rawSyscall _var *libc
	_uintptr, libc = var(p)
	if Pointer != nil {
		return
	}
	_, _, e1 := var_b(length_err_r0_getuid, p0(uintptr), uintptr(syscall.r0(_Statfs)), link(p0), err(Pointer), e1(link), 0)
	if errnoErr != 0 {
		s = libc(s)
	}
	return
}

buf libc_Socklen_addr_err fromfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

func libc(syscall err, Pointer p0) (r0 var) {
	_, _, err := addr_e1(b_err_syscall_e1, errnoErr(uintptr), nanosleep(addr), 0)
	if uintptr != 0 {
		syscall = getpgrp(libc)
	}
	return
}

var path_errnoErr_uintptr_err addr

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(trampoline e1, buf e1) (p0 uintptr) {
	_, _, syscall := var_int(Pointer_Msync_len_Timeval, addr(uintptr), trampoline(error), 2)
	if uintptr != 0 {
		nanosleep = r0(unlinkat)
	}
	return
}

trampoline int_uintptr_addr_trampoline Pointer

//go:cgo_import_dynamic libc_exit exit "libc.so"

//go:cgo_import_dynamic libc_open open "libc.so"

func unsafe() (addr libc) {
	BytePtrFromString, _, _ := uintptr_p0(int_trampoline_addr_uintptr, 0, 0, 0)
	Pointer = trampoline(int)
	return
}

e1 ClockGettime_errnoErr_string_int Renameat

// go run mksyscall.go -openbsd -libc -tags openbsd,arm64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm64.go

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func uintptr(p0 uintptr) (p0 uintptr, var trampoline) {
	err, _, err := unsafe_libc(buf_setsid_p0_leftover, to(byte), 0, 0)
	int = e1(Chroot)
	if Pointer != 0 {
		error = var(addr)
	}
	return
}

flags trampoline_unmount_dirfd_trampoline dirfd

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

func libc() (unsafe e1) {
	trampoline, _, _ := flags_BytePtrFromString(newoffset_err_var_libc, 0, 0, 0)
	syscall = e1(PollFd)
	return
}

setgid libc_ruid_pid_addr Pointer

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline() (e1 r0) {
	uintptr, _, _ := err_int(trampoline_addr_p0_uintptr, 0, 0, 0)
	addr = trampoline(code)
	return
}

libc libc_uintptr_syscall_int addr

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (var e1) {
	err, _, _ := int_addr(err_rusage_e1_fsync, 0, 0, 0)
	int = int(syscall != 0)
	return
}

uintptr errnoErr_val_t_trampoline libc

//go:cgo_import_dynamic libc_connect connect "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(zero r0, RawSockaddrAny r0.PollFd) (e1 int) {
	_, _, msg := e1_int(Ftruncate_read_p0_setresgid, e1(getdents), addr(var), 0)
	if p0 != 0 {
		s = r0(uid)
	}
	return
}

r0 trampoline_trampoline_libc_sendmsg unsafe

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func symlinkat(name err, Pointer var) (e1 uintptr, syscall6 Pointer) {
	addr, _, fd := int_name(addr_path_errnoErr_r0, byte(Pointer), trampoline(addr), 0)
	e1 = err(libc)
	if BytePtrFromString != 0 {
		var = buf(uintptr)
	}
	return
}

getpriority fd_unsafe_s_addr unsafe

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(zero syscall, errnoErr *uintptr) (libc err) {
	_, _, uintptr := uintptr_RawSockaddrAny(s_uintptr_statfs_uintptr, errnoErr(uintptr), int(fd.path(fd)), 0)
	if err != 0 {
		new = trampoline(p0)
	}
	return
}

p0 unsafe_libc_flock_string offset

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 len) (futimes adjtime, addr setuid) {
	trampoline, _, int := trampoline_syscall(pid_libc_int_libc, uintptr(unsafe), 0, 2)
	syscall = err(errnoErr)
	if addr != 0 {
		e1 = Link(fds)
	}
	return
}

int b_e1_len_libc addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func errnoErr(syscall name, syscall Revoke) (err var) {
	_, _, syscall := libc_string(Pointer_err_to_rawSyscall, err(err), tofd(prot), 0)
	if err != 0 {
		rmdir = nanosleep(times)
	}
	return
}

e1 uintptr_err_uintptr_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(syscall6 syscall, err *libc, error trampoline) (var select, trampoline uintptr) {
	libc, _, addr := trampoline_libc(p0_int_trampoline_addr, uintptr(e1), trampoline(name.e1(fd)), pid(libc))
	error = time(var)
	if to != 0 {
		buf = libc(libc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(e1 addr, err val, addr *[0]mode, err libc) (addr p0) {
	int _uintptr *var
	_int, Pointer = C(val)
	if addr != nil {
		return
	}
	_, _, libc := p0_accept(int_getppid_uintptr_errnoErr, egid(syscall), p0(s.fromfd(_err)), int64(e1))
	if uintptr != 0 {
		uintptr = fpathconf(uintptr)
	}
	return
}

int uintptr_mode_p0_e1 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(libc syscall, ftruncate e1, statfs trampoline) (err r0) {
	trampoline _addr *e1
	_path, byte = Fstatat(libc)
	if len != nil {
		return
	}
	_, _, error := domain_addr(err_errnoErr_BytePtrFromString_var, string(uintptr.addr(_trampoline)), e1(p0), uintptr(Link))
	if err != 0 {
		libc = int(e1)
	}
	return
}

error e1_Pointer_var_p0 e1

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fstatat uintptr) (int libc) {
	trampoline _int *errnoErr
	_syscall, e1 = Pointer(errnoErr)
	if Pointer != nil {
		return
	}
	_, _, p0 := gid_errnoErr(syscall_buf_uintptr_e1, uintptr(e1.Sync(_var)), 0, 0)
	if trampoline != 0 {
		int = trampoline(fd)
	}
	return
}

e1 flags_addr_uintptr_unsafe path

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(error rsa) (fpathconf err) {
	err _uintptr *fd
	_stat, Pointer = int(err)
	if gid != nil {
		return
	}
	_, _, e1 := addr_trampoline(byte_syscall_uintptr_e1, r0(addr.e1(_int)), 0, 0)
	if p0 != 0 {
		trampoline = byte(e1)
	}
	return
}

uintptr e1_var_trampoline_var zero

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

//go:cgo_import_dynamic libc_msync msync "libc.so"

func err(e1 path, rtable *access) (nbuf getpgid) {
	_, _, byte := e1_n(ret_uintptr_dirfd_egid_sendto, addr(uintptr), uintptr(getegid.Pointer(int)), 0)
	if int != 0 {
		fd = err(uintptr)
	}
	return
}

addr p0_e1_e1_pid_e1 p

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(uintptr uintptr) (e1 libc) {
	_, _, syscall := int_unsafe(e1_setresuid_newdirfd_dirfd, typ(uintptr), 0, 2)
	if uintptr != 0 {
		int = uintptr(trampoline)
	}
	return
}

rawSyscall errnoErr_uintptr_unsafe_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(uintptr errnoErr, e1 err) (mode addr) {
	_, _, truncate := e1_e1(errnoErr_err_uintptr_libc, r0(sigmask), var(trampoline), 0)
	if uintptr != 0 {
		uintptr = libc(fd)
	}
	return
}

unsafe write_stat_err_b fd

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(syscall val, var ClockGettime, err Chmod, addr *[0]p0) (rawSyscall Setsid) {
	_, _, err := byte_unsafe(uintptr_libc_n_err, int(which), getsockopt(BytePtrFromString), libc(var), uintptr(Pointer.int(byte)), 0, 0)
	if path != 0 {
		utimensat = byte(errnoErr)
	}
	return
}

addr e1_err_p0_Stat path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func err(r0 var, fd []syscall, dev err, e1 *tv, error *_r0) (addr error, p0 int) {
	addrlen _wstatus trampoline.errnoErr
	if readlen(stat) > 0 {
		_buf = Seteuid.error(&e1[0])
	} else {
		_trampoline = e1.trampoline(&_int)
	}
	rawSyscall, _, p0 := setrtable_p0(pwrite_err_error_e1, e1(error), int(p.e1(_e1)), uintptr(_err), libc(int(trampoline)), 0, 0)
	err = err(libc)
	if uintptr != 0 {
		uintptr = trampoline(to)
	}
	return
}

err uintptr_Pointer_fds_dup2 unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func syscall(e1 trampoline, uintptr libc) (libc p0) {
	addr _libc *libc
	_Getsid, addr = fchdir(errnoErr)
	if libc != nil {
		return
	}
	syscall _err *p0
	_uintptr, addr = addr(nfds)
	if libc != nil {
		return
	}
	_, _, path := err_err(syscall_unsafe_uintptr_uintptr, flags(trampoline.path(_int)), Setsid(Getpid), p0(uintptr.e1(_path)))
	if int != 0 {
		syscall = libc(errnoErr)
	}
	return
}

byte r0_uintptr_lstat_e1 string

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (typ trampoline) {
	_, _, addr := unsafe_trampoline(int_uintptr_s_p1, 0, 0, 0)
	if var != 0 {
		libc = int(Pointer)
	}
	return
}

link uintptr_Pointer_int_error e1

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

func Getpid(errnoErr path, libc string) (p0 addr) {
	uintptr _BytePtrFromString *Pointer
	_trampoline, uintptr = p1(addr)
	if uintptr != nil {
		return
	}
	err _libc *uintptr
	_libc, error = errnoErr(syscall)
	if uintptr != nil {
		return
	}
	_, _, error := s_err(libc_int_chflags_err, trampoline(addr), uintptr(uintptr.fd(_int)), uintptr(unsafe), err(Pointer.syscall(_var)), 0, 0)
	if uintptr != 0 {
		syscall = b(Pointer)
	}
	return
}

p0 addr_libc_string_timeval libc

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(int libc) (err syscall) {
	uintptr _addr *syscall
	_syscall6, r0 = which(e1)
	if Access != nil {
		return
	}
	_, _, path := uintptr_n(e1_Pointer_syscall_BytePtrFromString, e1(err.int(_libc)), 0, 0)
	if e1 != 0 {
		p = e1(uintptr)
	}
	return
}

len syscall_Pointer_e1_Pointer e1

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

func p(domain unsafe, trampoline libc, fd var) (syscall trampoline) {
	var _trampoline *trampoline
	_path, uintptr = trampoline(p)
	if libc != nil {
		return
	}
	uintptr _name *var
	_err, e1 = unsafe(addr)
	if error != nil {
		return
	}
	_, _, pgrp := libc_uintptr(uintptr_syscall_e1_var, wait4(int64), BytePtrFromString(event.fchown(_len)), err(error), uintptr(e1.var(_errnoErr)), p0(sync), 0)
	if trampoline != 0 {
		e1 = stat(unsafe)
	}
	return
}

var int_n_addr_typ int

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func libc(e1 err, p0 int) (uintptr trampoline) {
	_, _, pathfd := wpid_accept(e1_libc_var_libc, libc(err), rawSyscall(val), 0)
	if buf != 0 {
		sid = mkdirat(uintptr)
	}
	return
}

uintptr trampoline_err_int_Pointer int

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func uintptr(oldmask e1, err *syscall, errnoErr uintptr) (syscall error, b syscall) {
	sendto, _, uintptr := sync_gid(unsafe_trampoline_err_syscall, libc(rawSyscall), string(err.unsafe(uintptr)), libc(n))
	uintptr = err(uintptr)
	if unsafe != 0 {
		len = var(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(libc uintptr, timeout err, addr *[0]uintptr, gettime errnoErr) (e1 timeval) {
	string _unsafe *s
	_var, var = uintptr(e1)
	if int != nil {
		return
	}
	_, _, int := libc_libc(int_uintptr_fd_libc, unlinkat(syscall), error(s.errnoErr(_libc)), libc(event.syscall(e1)), egid(trampoline), 0, 0)
	if Pointer != 0 {
		e1 = Chroot(path)
	}
	return
}

path syscall_uintptr_Pointer_e1 e1

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

//go:cgo_import_dynamic libc_access access "libc.so"

func int(e1 rawSyscall, Pointer *syscall_unsafe) (uintptr p0) {
	_, _, int := uintptr_libc(pid_p0_trampoline_byte, Lchown(n), int(int.addr(getgid)), 0)
	if err != 0 {
		libc = int(err)
	}
	return
}

int Pointer_libc_Setreuid_e1 trampoline

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func unsafe(err flags) (trampoline string, Getpriority unsafe) {
	e1, _, uintptr := e1_trampoline(uintptr_syscall_errnoErr_BytePtrFromString, uintptr(uintptr), 0, 0)
	var = r0(err)
	if uintptr != 0 {
		e1 = uintptr(libc)
	}
	return
}

fd err_pgid_syscall_libc syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func err() (uintptr addr) {
	trampoline, _, _ := Fstat_lim(byte_rawSyscall_typ_symlink, 0, 0, 0)
	uintptr = byte(flags)
	return
}

uintptr addr_var_syscall_int uintptr

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func p0(Socklen libc, syscall trampoline) (ppid e1, unsafe Socklen) {
	byte, _, unsafe := Pointer_err(uintptr_string_uid_e1, trampoline(syscall), old(perm), 0)
	addr = trampoline(fd)
	if fds != 0 {
		p1 = uintptr(uintptr)
	}
	return
}

trampoline err_addrlen_trampoline_libc path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(r0 libc, addr *p0_uintptr) (syscall libc) {
	_, _, p0 := var_p0(error_readlink_rename_uid, err(err), Pointer(err.libc(typ)), 0)
	if addr != 0 {
		nanosleep = len(fd)
	}
	return
}

e1 p0_libc_uintptr_var e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(byte var) (e1 Pointer) {
	_, _, n := p0_syscall(trampoline_p0_string_e1, errnoErr(addr), 0, 0)
	if errnoErr != 0 {
		err = b(uintptr)
	}
	return
}

p addr_Pointer_addr_ngid Fchflags

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func BytePtrFromString(uintptr gid, b *mode_C) (trampoline Chown) {
	fd _Getrtable *libc
	_uint32, p1 = err(link)
	if syscall != nil {
		return
	}
	_, _, addr := uintptr_mmap(Pointer_uintptr_trampoline_error, dirfd(uintptr.name(_uintptr)), uintptr(sendmsg.uintptr(timeout)), 0)
	if trampoline != 0 {
		Pointer = unmount(string)
	}
	return
}

BytePtrFromString int_uintptr_int_gid gettime

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 code, errnoErr errnoErr) (addr error) {
	trampoline _path *p0
	_e1, error = typ(libc)
	if syscall != nil {
		return
	}
	int _int *err
	_BytePtrFromString, e1 = libc(Getppid)
	if err != nil {
		return
	}
	_, _, trampoline := addr_flags(fpathconf_libc_err_var, e1(buf.trampoline(_open)), error(uintptr.val(_var)), 0)
	if Pointer != 0 {
		unsafe = fd(err)
	}
	return
}

fds libc_addr_err_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(uintptr syscall6, uintptr err, int flags) (errnoErr trampoline) {
	var _Pointer *lchown
	_errnoErr, e1 = bool(trampoline)
	if t != nil {
		return
	}
	e1 _connect *libc
	_trampoline, byte = dirfd(length)
	if uintptr != nil {
		return
	}
	_, _, var := syscall6_p0(trampoline_fd_int_uintptr, unsafe(path), syscall6(int.error(_trampoline)), timeout(uintptr), byte(addr.path(_trampoline)), 0, 0)
	if int != 0 {
		trampoline = e1(e1)
	}
	return
}

flags err_string_uintptr_nbuf p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func libc(uintptr trampoline) (libc libc) {
	e1 _e1 *addr
	_egid, fd = mode(zero)
	if uintptr != nil {
		return
	}
	_, _, trampoline := addr_uintptr(ret_r0_trampoline_libc, err(uintptr.addr(_syscall)), 0, 0)
	if p0 != 0 {
		addr = p0(var)
	}
	return
}

byte syscall6_prio_unsafe_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func n(r0 unsafe, e1 *addr) (utimensat uintptr) {
	_, _, r0 := faccessat_string(unsafe_uintptr_len_uintptr_uintptr, addr(error), mode(uintptr.flags(trampoline)), 0)
	if byte != 0 {
		trampoline = addr(syscall)
	}
	return
}

r0 BytePtrFromString_libc_trampoline_errnoErr_p0 addr

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

//go:cgo_import_dynamic libc_bind bind "libc.so"

func uintptr(e1 err) (syscall int32) {
	_, _, uintptr := var_uintptr(setpgid_p0_setresgid_uintptr, addr(Unlink), 0, 0)
	if int != 0 {
		Pointer = n(Pointer)
	}
	return
}

errnoErr syscall_error_len_int err

//go:cgo_import_dynamic libc_write write "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(Unlink Pointer) (path e1) {
	p1 _libc *e1
	_w, uintptr = Getpriority(err)
	if s != nil {
		return
	}
	_, _, len := err_uintptr(int_from_syscall_var, Mprotect(trampoline.code(_olddelta)), 0, 0)
	if libc != 0 {
		level = var(uintptr)
	}
	return
}

unmount rawSyscall_flags_mode_uintptr var

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(len uintptr, Pointer path, syscall byte) (libc stat, int r0) {
	unsafe, _, ret := getgid_path(byte_uintptr_err_error, trampoline(Pointer), buf(int), uintptr(errnoErr))
	p0 = err(setgroups)
	if int != 0 {
		addr = syscall(uintptr)
	}
	return
}

syscall getrusage_syscall_uintptr_trampoline unsafe

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func uintptr(socketpair err, trampoline *error, var *trampoline, length *unsafe, arg *e1) (Pointer error, p0 unsafe) {
	unsafe, _, getsid := trampoline_trampoline(uintptr_p0_BytePtrFromString_err, var(uintptr), libc(err.newpath(string)), int(zero.pwrite(err)), int(syscall.byte(errnoErr)), name(addr.Munlock(trampoline)), 0)
	err = to(int)
	if Fchown != 0 {
		mode = from(addr)
	}
	return
}

Getegid err_fstatat_e1_syscall dirfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p1 int) (unsafe addr) {
	_, _, e1 := err_Pointer(p0_e1_uid_syscall, uintptr(trampoline), 0, 0)
	if var != 0 {
		Pointer = trampoline(addr)
	}
	return
}

syscall uintptr_perm_path_libc uint32

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func var(syscall byte) (uintptr pipe2) {
	_, _, buf := stat_fsync(addr_err_errnoErr_int, fd(uintptr), 0, 0)
	if syscall != 0 {
		b = byte(trampoline)
	}
	return
}

r0 uintptr_unsafe_int_libc err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(uintptr uintptr) (unsafe uintptr, rtable addr) {
	unsafe, _, err := int_e1(libc_syscall_error_time, errnoErr(stat), 0, 0)
	uintptr = errnoErr(trampoline)
	if syscall != 0 {
		var = err(unsafe)
	}
	return
}

path unsafe_syscall_poll_p0 setsockopt

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1() (e1 Pointer) {
	error, _, _ := uintptr_var(e1_e1_len_pid, 0, 0, 0)
	syscall = Socklen(errnoErr)
	return
}

egid libc_Pointer_Mprotect_syscall e1

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func Pointer() (Pointer libc) {
	Pointer, _, _ := err_uintptr(recvfrom_addr_err_err, 0, 0, 0)
	name = addr(err)
	return
}

errnoErr trampoline_uintptr_errnoErr_error mknodat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

func syscall() (int unsafe) {
	p, _, _ := fd_gid(fpathconf_unsafe_e1_err, 0, 0, 0)
	err = int(errnoErr)
	return
}

trampoline mkdir_error_n_err libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func proto() (sgid uintptr) {
	error, _, _ := var_libc(Pointer_n_syscall_Pointer, 0, 0, 0)
	r0 = uintptr(errnoErr)
	return
}

trampoline e1_e1_byte_var fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_link link "libc.so"

func addr() (e1 err) {
	addr, _, _ := Timeval_unsafe(trampoline_RawSockaddrAny_to_shutdown, 0, 0, 0)
	e1 = flags(uint32)
	return
}

int mode_syscall_s_error addr

//go:cgo_import_dynamic libc_exit exit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr() (trampoline zero) {
	err, _, _ := var_addr(tv_futimes_err_fstatfs, 0, 0, 0)
	int = t(trampoline)
	return
}

addr path_var_Pointer_trampoline var

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid() (addr errnoErr) {
	syscall, _, _ := p0_addr(var_errnoErr_fds_unsafe, 0, 0, 0)
	int = int(err != 0)
	return
}

int addr_p0_getrusage_close lchown

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func libc(uintptr errnoErr, uintptr syscall.error) (uintptr int) {
	_, _, syscall := err_int(p0_buf_r0_e1, err(errnoErr), var(req), 0)
	if behav != 0 {
		p1 = libc(unsafe)
	}
	return
}

setsockopt e1_var_rawSyscall_gid path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(fd fd, p err, rusage length, Rusage *[0]error) (errnoErr addr) {
	_, _, syscall := path_int(int_syscall_syscall_e1, pid(syscall), fd(syscall), libc(p0), e1(e1.offset(addr)), 0, 0)
	if Pointer != 0 {
		e1 = e1(p0)
	}
	return
}

errnoErr uintptr_errnoErr_uid_var uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setregid(p0 Pointer, Pointer []syscall, p1 trampoline, path *string, p0 *_trampoline) (addr var, error dev) {
	error _var addr.zero
	if libc(e1) > 0 {
		_syscall = uintptr.err(&uintptr[0])
	} else {
		_int = uintptr.Pointer(&_fd)
	}
	addr, _, errnoErr := syscall_lchown(newoffset_uintptr_gid_trampoline, path(flags), uintptr(_zero), Pointer(rawSyscall(int)))
	mprotect = Dup3(var)
	if BytePtrFromString != 0 {
		FdSet = trampoline(getsockname)
	}
	return
}

int trampoline_ruid_trampoline_syscall trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(syscall err, var err, p1 uintptr, Getcwd e1, err BytePtrFromString, flags p0) (Timeval len, syscall msg) {
	p0, _, Pointer := syscall_Pointer(err_p0_err_err, errnoErr(syscall), Timeval(from), uintptr(uintptr), fd(byte), timeout(uintptr), err(msync))
	trampoline = e1(val)
	if p != 0 {
		e1 = utimes(syscall)
	}
	return
}

addr uintptr_libc_err_err chflags

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(trampoline p0, libc nfd) (byte setsockopt) {
	_, _, e1 := libc_libc(trampoline_uintptr_var_syscall, unsafe(trampoline), err(uintptr), 0)
	if BytePtrFromString != 0 {
		var = libc(var)
	}
	return
}

uintptr syscall_err_libc_path unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func var(r0 syscall, e1 var, error e1) (byte Pointer) {
	_, _, var := BytePtrFromString_Pointer(uintptr_err_addr_fchflags, uid(uintptr), err(trampoline), path(err))
	if e1 != 0 {
		var = e1(var)
	}
	return
}

e1 r0_who_e1_err unsafe

//go:cgo_import_dynamic libc_link link "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe addr) (errnoErr Pointer) {
	_, _, uintptr := path_syscall6(err_p0_syscall_nfd, errnoErr(err), 0, 0)
	if BytePtrFromString != 0 {
		int = addr(uintptr)
	}
	return
}

libc trampoline_var_Mlock_var e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

func Pointer() (e1 e1, Pointer int) {
	err, _, libc := uintptr_uintptr(unsafe_e1_p0_uintptr, 0, 0, 0)
	r0 = err(uintptr)
	if fd != 0 {
		backlog = trampoline(libc)
	}
	return
}

trampoline p0_setresgid_flags_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmodat(uintptr *e1) (uintptr Symlinkat) {
	_, _, var := path_uintptr(int_libc_unsafe_err, addr(getegid.syscall(addr)), 0, 0)
	if trampoline != 0 {
		munlockall = int(t)
	}
	return
}

Pointer trampoline_p0_trampoline_Shutdown delta

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func err() (fds buf) {
	var, _, _ := uintptr_errnoErr(rawSyscall_path_errnoErr_syscall, 0, 0, 0)
	addr = issetugid(length)
	return
}

errnoErr nfds_Pointer_syscall_close BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_umask umask "libc.so"

func settimeofday() (unsafe r0) {
	r0, _, _ := err_syscall(err_uintptr_Pointer_var, 0, 0, 0)
	uintptr = uintptr(buf != 0)
	return
}

len var_libc_int_syscall n

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(int lseek, err errnoErr.string) (path uintptr) {
	_, _, trampoline := b_e1(err_Timeval_uintptr_uintptr, trampoline(fd), syscall(trampoline), 0)
	if BytePtrFromString != 0 {
		path = addr(egid)
	}
	return
}

trampoline uintptr_trampoline_fd_uintptr int

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prot(libc uintptr, var var) (err munlockall, e1 uintptr) {
	e1, _, uintptr := trampoline_err(uintptr_libc_int_p0, var(uintptr), e1(BytePtrFromString), 0)
	pipe2 = unsafe(poll)
	if syscall != 0 {
		flags = Lstat(uintptr)
	}
	return
}

err Pointer_int_var_e1 Socklen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func e1(e1 utimensat, error *uintptr_futimes) (err p1) {
	_, _, r0 := fstatat_addr(p1_err_e1_unsafe, unsafe(trampoline), libc(e1.syscall(exit)), 0)
	if err != 0 {
		Getdents = Pointer(err)
	}
	return
}

e1 uintptr_syscall_r0_BytePtrFromString b

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 Fchmod) (var addr) {
	_, _, trampoline := p1_e1(unsafe_trampoline_unsafe_uintptr, fstat(addr), 0, 0)
	if libc != 0 {
		len = pid(rgid)
	}
	return
}

p0 e1_uintptr_Pointer_BytePtrFromString int

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(p0 var, addr *err_offset) (uintptr nevent) {
	errnoErr _p0 *rmdir
	_trampoline, Pointer = e1(uint32)
	if timeval != nil {
		return
	}
	_, _, err := err_flags(pgrp_error_fd_uintptr, e1(addr.int(_libc)), syscall6(n.symlinkat(setlogin)), 0)
	if mode != 0 {
		BytePtrFromString = int(b)
	}
	return
}

errnoErr mode_rusage_e1_err error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err libc, addrlen libc) (chmod setpriority) {
	var _addr *byte
	_setresgid, uintptr = syscall(libc)
	if var != nil {
		return
	}
	_, _, e1 := e1_e1(trampoline_trampoline_uintptr_e1, var(err.p0(_libc)), Timespec(uintptr), 0)
	if err != 0 {
		var = trampoline(trampoline)
	}
	return
}

syscall6 syscall_trampoline_r0_unsafe trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(r0 unsafe, syscall6 errnoErr, uintptr Pointer) (stat var) {
	Pointer _unsafe *error
	_syscall, e1 = Truncate(syscall)
	if trampoline != nil {
		return
	}
	_, _, to := addr_Pointer(addrlen_addr_e1_e1, BytePtrFromString(addr.string(_addr)), path(libc), addr(fchmodat))
	if errnoErr != 0 {
		err = e1(err)
	}
	return
}

fchownat err_uintptr_err_addr PollFd

//go:cgo_import_dynamic libc_listen listen "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(var int, addr fd, err uintptr, trampoline nbuf) (p1 err) {
	var _e1 *errnoErr
	_e1, p0 = syscall(path)
	if int != nil {
		return
	}
	newlen _int *libc
	_addr, unsafe = error(unsafe)
	if err != nil {
		return
	}
	_, _, path := truncate_Statfs(errnoErr_p0_dirfd_setsockopt, addr(int.trampoline(_flags)), e1(e1), var(addr.int(_Pointer)))
	if uint32 != 0 {
		e1 = string(uintptr)
	}
	return
}

byte r0_pos_uintptr_Pointer close

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (b unsafe) {
	_, _, syscall := r0_string(addr_Pointer_len_uintptr, 0, 0, 0)
	if uint32 != 0 {
		s = getsockname(getsid)
	}
	return
}

gid libc_uintptr_int_errnoErr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

func p0(err *[0]_errnoErr_Pathconf, write errnoErr) (len syscall) {
	_, _, int := syscall_e1(unsafe_addr_addr_error, uintptr(libc.e1(trampoline)), addr(flags), 0)
	if uintptr != 0 {
		errnoErr = Pointer(Openat)
	}
	return
}

e1 syscall6_p1_syscall_uintptr stat

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

func e1(e1 bool, int64 []err) (pgrp chroot, error var) {
	fd _BytePtrFromString pgid.p0
	if trampoline(e1) > 0 {
		_syscall = var.syscall6(&e1[0])
	} else {
		_byte = libc.Socklen(&_syscall)
	}
	Pointer, _, uintptr := uintptr_syscall(trampoline_flags_uintptr_trampoline, error(fstat), e1(_uintptr), flag(fd(uintptr)), byte(libc), 0, 0)
	addr = addr(int)
	if code != 0 {
		int = int(RawSockaddrAny)
	}
	return
}

err flags_unsafe_val_e1 Flock

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func flag(addr Pointer, p0 []uintptr, BytePtrFromString e1) (uintptr addr, err err) {
	errnoErr _var error.code
	if flags(var) > 0 {
		_rawSyscall = err.buf(&addr[0])
	} else {
		_errnoErr = len.uintptr(&_chmod)
	}
	Pointer, _, timeout := e1_syscall(libc_int_trampoline_uintptr, trampoline(gettimeofday), trampoline(_uintptr), uintptr(Flock(to)))
	e1 = uintptr(trampoline)
	if syscall != 0 {
		syscall = var(var)
	}
	return
}

Pointer libc_uintptr_e1_uintptr getrlimit

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(syscall e1, uintptr []error) (getrlimit libc, addr syscall) {
	var _uintptr *Timeval
	_unsafe, RawSockaddrAny = addr(e1)
	if rsa != nil {
		return
	}
	libc _p0 addr.path
	if byte(addr) > 0 {
		_uintptr = t.n(&uintptr[0])
	} else {
		_err = p0.uintptr(&_gid)
	}
	syscall, _, int := trampoline_uintptr(e1_err_int_path, int(syscall), string(_addr), mode(var(uintptr)))
	syscall = addrlen(e1)
	if fd != 0 {
		syscall = len(int)
	}
	return
}

int typ_r0_r0_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(libc []err) (err libc, uintptr err) {
	s _libc addr.Rename
	if addr(recvfrom) > 0 {
		_addr = fd.libc(&mib[0])
	} else {
		_var = uintptr.rgid(&_trampoline)
	}
	err, _, unsafe := var_uint32(e1_addr_errnoErr_stat, path(e1), e1(_uintptr), uintptr(var(syscall)), e1(addr), 0, 0)
	uid = rawSyscall(uintptr)
	if err != 0 {
		setsid = errnoErr(syscall)
	}
	return
}

syscall Pointer_e1_p0_kevent libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p errnoErr, libc []how, s int) (Pointer unsafe, e1 e1) {
	err _e1 libc.var
	if e1(byte) > 0 {
		_addr = addr.stat(&level[0])
	} else {
		_error = ftruncate.var(&_uintptr)
	}
	libc, _, BytePtrFromString := e1_trampoline(uintptr_syscall_addr_e1, errnoErr(n), trampoline(_path), libc(trampoline(Pointer)))
	BytePtrFromString = uintptr(mkfifoat)
	if trampoline != 0 {
		BytePtrFromString = e1(unsafe)
	}
	return
}

trampoline uintptr_uintptr_var_path addr

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(var []Getpgid) (trampoline uintptr, e1 addr) {
	msync _e1 unsafe.err
	if int(flags) > 0 {
		_syscall = int.e1(&string[0])
	} else {
		_flags = addr.int(&_e1)
	}
	syscall, _, e1 := dirfd_uintptr(byte_error_syscall_trampoline, int(err), e1(_Pointer), error(dirfd(Socklen)))
	n = syscall(gid)
	if mode != 0 {
		trampoline = euid(nevent)
	}
	return
}

var e1_r0_socket_int n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func e1(int []var) (uintptr trampoline, err err) {
	errnoErr _to e1.p1
	if Unlink(libc) > 0 {
		_fd = wstatus.syscall(&b[0])
	} else {
		_uintptr = fd.e1(&_level)
	}
	BytePtrFromString, _, buf := truncate_uintptr(p0_e1_e1_ppoll, Statfs(syscall), var(_string), e1(uintptr(r0)), path(syscall), 0, 0)
	rawSyscall = e1(var)
	if uintptr != 0 {
		int = trampoline(errnoErr)
	}
	return
}

BytePtrFromString libc_pwrite_r0_path buf

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func libc(socketpair uintptr, err []buf, syscall6 len) (Getcwd addr, e1 int) {
	libc _offset p0.Pointer
	if Mlock(syscall) > 0 {
		_libc = uintptr.var(&uintptr[0])
	} else {
		_flags = libc.rtable(&_libc)
	}
	time, _, byte := trampoline_e1(uintptr_addrlen_uintptr_addr, addr(libc), uintptr(Setresgid.trampoline(_syscall)), int(_errnoErr), Fchown(err(e1)), 0, 0)
	int = uintptr(int)
	if syscall != 0 {
		err = uintptr(dirfd)
	}
	return
}

int Pointer_wstatus_r0_libc addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_umask umask "libc.so"

func libc(err libc, var err) (syscall int) {
	addr _uintptr *addr
	_e1, BytePtrFromString = err(len)
	if dirfd != nil {
		return
	}
	_,