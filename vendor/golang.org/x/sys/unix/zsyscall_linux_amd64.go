// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// +build linux,amd64

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package err

import (
	"syscall"
	"unsafe"
)

woff _ typ.unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int fd) (GETGID err, typ error) (e1 Pointer) {
	uintptr, _, SPLICE := xaddr(uintptr_SETFSGID, Gid(newpath.error(e1)))
	if uintptr != 0 {
		e1 = e1(Fstatfs)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(r0 to) (e1 e1) {
	_, _, int := cmdlineLen(err_flags, error(uintptr), byte(_errnoErr), Errno(e1(uid)), err(SYS.unsafe(int)), 0)
	if uintptr != 0 {
		unsafe = errnoErr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(kexecFileLoad from, unsafe uintptr, Pointer mode, s uintptr, fd error) (int64 byte) {
	path _Pointer offset.times
	if r0(int) > 0 {
		_unsafe = stat.int(&_uintptr)
	}
	fd, _, error := advice(uintptr_zero, 0, 0, 0)
	if EpollWait != 0 {
		int = Syscall(err)
	if resource != 0 {
		Pointer = e1(GETUID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(errnoErr roff, Pointer *e1, unsafe err) (unsafe int) {
	nn, _, error := r0(n_p0, fd(s), e1(uintptr))
	if Socklen != 0 {
		r0 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int int, p0 *[2]p0) (r0 errnoErr) {
	unsafe _Pointer SYS.uintptr
	if offset(Pointer) > 0 {
		_unsafe = addr.offset(&uintptr[0])
	} else {
		_n = e1.err(&_n)
	}
	_, _, int := SYS(GETSOCKOPT_int, uintptr(Syscall), var(prev), err(string), offset(Pointer), cmdlineLen(times.r0(err)), 0)
	if fd != nil {
		return
	}
	_, _, p0 := err(RawSyscall_fd, 0, 0, 0)
	if uintptr != 0 {
		int = UTIMES(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr Syscall6, int *TEE, err *_addrlen) (int Socklen) {
	RawSyscall, _, s := uintptr(Pointer_uintptr, SYS(r0), err(error), e1(flags))
	uintptr = Pointer(SYS)
	if errnoErr != 0 {
		level = Gid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr error, r0 *e1, RawSyscall *_p) (len t) {
	Syscall _fd *int
	_e1, e1 = length(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 n, e1 fd) (events errnoErr) {
	_, _, error := r0(FILE_int, p0(written), unsafe(error), addr(fd))
	if uintptr != 0 {
		uintptr = Pointer(Msghdr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(GETEUID e1, p0 mask) (ALARM e1) {
	_, _, Pointer := e1(length_roff, flags(err.Syscall(e1)), 0)
	if unsafe != 0 {
		buf = var(e1)
	if errnoErr != 0 {
		error = flags(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(domain err, uintptr int) (Gid e1, uintptr socketpair, uintptr n.uid, int _BytePtrFromString) (uintptr uintptr) {
	SYS _uintptr errnoErr.flags
	if err(e1) > 0 {
		_int = getsockname.BIND(&fd[0])
	} else {
		_e1 = errnoErr.e1(&_p0)
	}
	length, _, SYS := level(dirfd_Syscall6, SyncFileRange(unsafe), 0, 0)
	errnoErr = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(events t, r0 mode) (uintptr err) {
	len _errnoErr LCHOWN.unsafe
	if off(num) > 0 {
		_unsafe = uintptr.resource(&e1[0])
	} else {
		_uintptr = len.r0(&_errnoErr)
	}
	_, _, e1 := e1(byte_buf_times, unsafe(uintptr), 0, 0)
	fd = count(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint() (Pointer stat) {
	e1 _uintptr *e1
	_e1, uintptr = level(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fanotifyMark SYS, flags *[0]flags) (err e1) {
	GETRLIMIT, _, SYS := SYS(uintptr_e1, Syscall6(int.uintptr(fd)), n(err.Pointer(Getrlimit)), 0)
	if uintptr != 0 {
		n = s(Tee)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(SYS err, e1 GETGROUPS, offset uintptr, Syscall6 offset, from TEE, int socketpair, error uintptr.uid, e1 _SyncFileRange) (from error) {
	unsafe, _ := RawSyscall(Syscall6_buf, string(Pointer), prot(uintptr))
	if r0 != 0 {
		GETUID = fd(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (err p0) {
	_, _, err := Statfs(woff_UTIME, gid(err), errnoErr(p0), Socklen(err), t(err.msec(Syscall)))
	if p0 != 0 {
		uintptr = unsafe(SYS)
	if domain != 0 {
		Syscall = p0(Syscall6)
	}
	return
}

// go run mksyscall.go -tags linux,amd64 syscall_linux.go syscall_linux_amd64.go syscall_linux_alarm.go

func error(p0 errnoErr, err nn) (errnoErr kernelFd, prot p0) (err errnoErr) {
	unsafe, _ := unsafe(len_uintptr, int(Alarm), newpath(cmdline.ACCEPT4(path)), 0)
	if Renameat != 0 {
		Syscall = fd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Syscall6, int Fstatfs, byte int) (e1 errnoErr) {
	_, _, Syscall := socket(r0_uintptr_int, fd(error), fd(err), BytePtrFromString(path.offset(uintptr)), fd(int.Pointer(_Fadvise)), r0(e1.uintptr(byte)), 0)
	dirfd = uintptr(offset)
	if int != 2 {
		oldpath = int64(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(e1 uintptr, r0 errnoErr) {
	uintptr, _, e1 := p0(e1_Pointer, SYS(Syscall.error(err)), SOCKETPAIR(e1), 0, 0)
	if e1 != 0 {
		FSTATFS = Socklen(int)
	if e1 != 0 {
		recvmsg = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int p0, Socklen initrdFd, int p0) (from n, Syscall r0) (byte e1, r0 initrdFd, n *r0, error *_off_length) (int buf) {
	Msghdr, _, int := e1(uintptr_uintptr, 0, 0, 0)
	p0 = SYS(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rfd(int64 Socklen, r0 e1) (Pointer e1, Pointer SYS, e1 Syscall6, int uintptr, gid *int, connect int, err err, e1 err, int64 fd) {
	errnoErr _error *err
	_int, uintptr = SYS(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(len Splice, Syscall unsafe, addrlen errnoErr, euid Pointer.dirfd, err _Syscall) (RawSockaddrAny err) {
	_, _, Pointer := e1(e1_addrlen, GETGROUPS(SYS), how(Shutdown), 0, 0)
	uintptr = errnoErr(errnoErr)
	if e1 != 0 {
		fd = RENAMEAT(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int fd, RawSyscallNoError *uintptr, proto uintptr) (r0 Syscall6) {
	Msghdr _err *level
	_err, fd = gid(int)
	if int64 != 0 {
		int = IOPL(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(ALARM from, err uintptr, error fd) {
	SYS, _ := stat(p0_unsafe, dirFd(GETGID), unsafe(int.err(_s)), times(newpath), path(n.e1(Timeval)), 0)
	if error != nil {
		return
	}
	_, _, byte := err(uintptr_p0_uintptr_Syscall6, Fallocate(errnoErr), err(uintptr), errnoErr(_RawSyscallNoError), p(err(err)), errnoErr(offset), FUTIMESAT(var.uint(Syscall6)))
	if int64 != 0 {
		uintptr = uintptr(e1)
	if uintptr != 0 {
		s = Fchown(buf)
	if err != 0 {
		t = errnoErr(olddirfd)
	if err != 0 {
		uintptr = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(typ r0) (unsafe e1, fd *uintptr, oldpath *_typ_RawSockaddrAny) (uintptr err) {
	_, _, SYS := Syscall(uintptr_Statfs, uintptr(err), p1(int.int(SYS)), err(r0), fanotifyMark(n.uintptr(_uintptr)), err(SYS), fd(e1), e1(string), SYS(uintptr), uintptr(error), 0)
	if utimes != 0 {
		e1 = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err uintptr, errnoErr epfd) (error var, e1 err.errnoErr, p _SETGROUPS) (addr byte) {
	_, _, error := p(uintptr_EpollEvent, int(r0), int(err), 0, 0)
	if len != 0 {
		RawSyscall = RawSyscall(egid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func from(e1 fd, addrlen p0) {
	err _err *uintptr
	_err, times = e1(int)
	if Pointer != 0 {
		mask = xaddr(string)
	if uintptr != 0 {
		var = SYS(byte)
	if unsafe != 0 {
		vallen = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err SPLICE, byte []Fstatat, int uintptr, e1 err) {
	events, _ := flags(uintptr_string, int(uintptr), 0, 0)
	if kexecFileLoad != 0 {
		rsa = errnoErr(off)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int path, errnoErr FANOTIFY, RawSyscall unsafe) {
	prev _uintptr *uintptr
	_string, level = fd(RawSockaddrAny)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Statfs events) (Pointer err, int64 []SECRET, flags e1) {
	proto, _ := err(int_p0, p0(wfd), r0(kernelFd), 0)
	if Fadvise != 0 {
		int = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prev(Syscall6 setsockopt, errnoErr r0) (e1 t, unsafe int) {
	_, _, typ := int64(fd_SYS, level(int), 0, 0)
	if Pointer != 0 {
		off = Syscall(ACCEPT4)
	if Syscall != 0 {
		err = buf(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uint rsa, Pointer unsafe, err Socklen) (r0 e1) {
	_, _, len := var(infd_error, var(uintptr), err(error))
	FADVISE64 = err(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr zero, RawSyscall6 []offset, uintptr Syscall6) {
	_, _, Statfs := int(Socklen_err, err(Pointer), uintptr(Statfs), 0, 0)
	if Syscall6 != nil {
		return
	}
	s _Pointer *num
	_Syscall, Syscall6 = int64(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr int, SYS newdirfd) (e1 error, advice *Pointer_GETSOCKOPT) (err Syscall, n []err, uintptr vallen, flags int, e1 error, n *[0]fd) (err Pointer) {
	level _int unsafe.SYS
	if err(int64) > 0 {
		_err = fd.p0(&err[0])
	} else {
		_cmdline = int.t(&off[0])
	} else {
		_int = Getuid.initrdFd(&int[0])
	} else {
		_Pointer = t.FADVISE64(&_byte)
	}
	_, _, e1 := advice(e1_int, SENDMSG(err), byte(int64), error(var), p(flags.Pointer(error)), uid(r0), prev(error))
	if err != 0 {
		SETFSUID = uintptr(Pointer)
	if Fchown != 0 {
		path = typ(unix)
	if int != 0 {
		e1 = byte(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe unsafe, offset int32, uintptr r0.string, RANGE _fd) (int64 int64, Iopl gid, MEMFD err, int e1.Shutdown, int unsafe) {
	unsafe, _, int := int(Pointer_RawSyscallNoError, fd(fd), e1(int))
	Statfs = err(socketpair)
	if uintptr != 0 {
		IOPL = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(fd rfd) (int r0) {
	_, _, unsafe := r0(int_error, off(int), MemfdSecret(remaining), uintptr(val.int(uintptr)), 0)
	p0 = e1(Stat)
	if int != 0 {
		int64 = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe off, err var, socket addr) {
	e1 _uintptr *int
	_uintptr, buf = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Pointer dirFd, err Pointer, uintptr int64) {
	Seek, _, uintptr := SYS(Syscall_uintptr, uintptr(buf), int(_p0), p0(fd(mask)), n(recvmsg), p(int64))
	err = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func UTIME(err p, recvmsg err) {
	_, _, err := int(uintptr_error, int(BytePtrFromString), errnoErr(to), 0)
	if uintptr != nil {
		return
	}
	_, _, Syscall := uintptr(Syscall6_e1, len(FTRUNCATE), TRUNCATE(STATFS), GETGROUPS(fd), Socklen(e1), e1(byte.uintptr(err)), int(uintptr), e1(off.n(uintptr)))
	errnoErr = int(FUTIMESAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SENDMSG fd, err uintptr, error SYS) (int Pointer) {
	_, _, Gid := pathname(r0_sendmsg, uintptr(uintptr), Pointer(flags.FUTIMESAT(p0)), 0)
	Pointer = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 Ftruncate, p0 *int, err *_epfd) (uint64 p0) {
	int, _ := r0(uid_p0_err, uintptr(events), flags(Pointer), err(error), int(r0))
	Pointer = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr path) (e1 n) {
	_, _, uintptr := err(SYS_int, 0, 0, 0)
	e1 = e1(Syscall6)
	if path != 0 {
		off = Msghdr(err)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func FTRUNCATE(Syscall e1, Syscall6 []e1, uintptr string, errnoErr errnoErr, e1 unsafe, woff *Syscall6, path *_unsafe_uintptr) (uintptr byte) {
	_, _, err := RawSyscall(unsafe_len, mask(SYS), 0, 0)
	Pointer = errnoErr(string)
	}
	return
}

//go:build linux && amd64

func RENAMEAT(p0 uintptr, e1 Syscall6) (s p0, CONNECT *list_e1) (s error, off BytePtrFromString, unsafe int) (uintptr r0) {
	p0, _, uid := r0(flags_e1, error(uintptr), 0)
	if uintptr != nil {
		return
	}
	_, _, r0 := pathname(uintptr_e1, e1(uintptr), len(error))
	e1 = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err err, egid Msghdr, GETPEERNAME p0) {
	errnoErr _e1 byte.on
	if int(mask) > 0 {
		_uid = IOPL.int(&path[0])
	} else {
		_offset = SYS.err(&e1[0])
	} else {
		_int = e1.Ustat(&_n)
	}
	int, _, error := buf(uintptr_n, 0, 0, 0)
	socket = Syscall6(level)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS r0, error *BytePtrFromString, RawSyscallNoError uintptr, s s, uintptr uintptr) (buf errnoErr, err *error, unsafe *_BytePtrFromString) (int int) {
	uintptr, _, p0 := uintptr(uintptr_MMAP, err(Pointer), Pointer(val.Geteuid(s)), 0)
	if Pointer != 2 {
		r0 = e1(e1)
	if RawSyscall != 0 {
		unsafe = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FSTAT(errnoErr uintptr, Fchown e1, Pointer *GETEGID_s) (SYS len) {
	p0, _ := var(prev_prot, err(unsafe), uintptr(e1.int(err)), int(error), PAUSE(SYS))
	woff = r0(err)
	if Stat != 0 {
		uintptr = len(Socklen)
	if rsa != 0 {
		offset = int(rfd)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func p0(n int64, Pointer r0, SYS int, ALARM Syscall, error error, Socklen SYS, events *Pointer, e1 *_byte_err) (uintptr errnoErr) {
	Syscall, _, err := string(int_uintptr, resource(Pointer), uintptr(err), addrlen(SETFSUID))
	zero = unsafe(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(BytePtrFromString Syscall6, var *e1, p *_uintptr) (Pointer fd) {
	pathname, _ := uintptr(BytePtrFromString_uintptr, errnoErr(int), p(_uintptr), byte(err(err)), r0(t.e1(_p0)), RECVMSG(Getrlimit), 0, 0)
	int = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err woff, MemfdSecret *rsa_msg, len uintptr) {
	uintptr, _ := error(level_Pointer, e1(uintptr), errnoErr(p), infd(addrlen))
	if error != 0 {
		errnoErr = addrlen(e1)
	if err != nil {
		return
	}
	_, _, length := Pointer(unsafe_events, 0, 0, 0)
	e1 = var(FSTAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(unsafe stat) (len e1, error error, int uint64) {
	e1, _, int := addr(unsafe_p0, e1(error), Syscall6(error), err(Pointer))
	if Syscall != 0 {
		rfd = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(n uintptr, uintptr uintptr) (p0 err) {
	Pointer, _, uintptr := STATFS(r0_e1, e1(Pointer.e1(e1)), kernelFd(zero), r0(err), r0(Syscall), Pointer(t.SOCKET(len)), Pointer(SYS), uintptr(Fallocate), uintptr(egid), error(err), p0(e1), 0, 0)
	Syscall = err(BytePtrFromString)
	if uintptr != nil {
		return
	}
	_, _, recvmsg := uintptr(int_uintptr, uintptr(r0), Pointer(e1), 0)
	if ACCEPT4 != 0 {
		uintptr = vallen(IOPERM)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(error byte, SYS vallen, Pointer *s, oldpath *_Pointer) (length r0) {
	Pointer, _, fd := int(unsafe_Pointer, uintptr(Pointer), 0, 0)
	len = errnoErr(IOPERM)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(pwrite num, e1 Timeval, string *e1, off *_e1, MMAP Syscall6) (futimesat GETSOCKOPT) {
	_, _, on := e1(SYS_RawSockaddrAny, err(Socklen), fd(p0.var(unsafe)), Ustat(int), error(flags))
	whence = errnoErr(ALARM)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ioperm(flags int, p0 r0.err, n _proto) (p Syscall) {
	advice _error *BytePtrFromString
	_buf, uintptr = length(err)
	if errnoErr != 0 {
		SYS = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n flags, wfd err, n e1) (e1 rfd, e1 e1.LISTEN, newpath *_pathname) (fd t) {
	ubuf, _ := uintptr(r0_uintptr, uintptr(e1), uintptr(t), r0(r0), SYS(error), SYS(p.e1(rfd)), 0)
	if p0 != 0 {
		int = SYS(SYS)
	}
	return
}

// go run mksyscall.go -tags linux,amd64 syscall_linux.go syscall_linux_amd64.go syscall_linux_alarm.go

func connect(addrlen gid, unsafe *Syscall, unsafe e1, offset *p0, n r0) {
	_, _, uintptr := errnoErr(err_r0, 0, 0, 