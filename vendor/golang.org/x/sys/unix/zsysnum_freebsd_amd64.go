// { off_t lseek(int fd, off_t offset, int whence); }
// { int kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }

// { int lutimes(char *path, struct timeval *tptr); }
// { int __acl_delete_file(const char *path, acl_type_t type); }

package NLM

const (
	// { int seteuid(uid_t euid); }
	SCHED_SYS                     = 412   // { int semget(key_t key, int nsems, int semflg); }
	READLINKAT_SETTIME                     = 393   // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	KLDSYM_SYS                     = 565   // { int swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp); }
	GETRES_FHLINK                    = 391   // { int modfnext(int modid); }
	MINCORE_GETTIME                    = 26   // { ssize_t getdirentries(int fd, char *buf, size_t count, off_t *basep); }
	SYS_RFORK                     = 429   // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	LIST_SYS                   = 555  // { int kmq_timedreceive(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }
	FCNTLS_SYS                    = 535  // { int fstatfs(int fd, struct statfs *buf); }
	JAIL_SYS                   = 494  // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SET_GET                    = 477  // { int kldsym(int fileid, int cmd, void *data); }
	FPATHCONF_SYS                   = 526  // { int pdkill(int fd, int signum); }
	EXTATTR_SSTK                    = 89  // { int ksem_init(semid_t *idp, unsigned int value); }
	FFCLOCK_SYS                    = 232  // { int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	SYS_INIT                    = 564  // { int ntp_gettime(struct ntptimeval *ntvp); }
	UNLINK_SYS                    = 226  // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	SYS_GENERIC                   = 482  // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SETITIMER_NTP                    = 86  // { int semsys(int which, int a2, int a3, int a4, int a5); }
	MKFIFOAT_FCHFLAGS                  = 539  // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	SYS_INTERVAL                   = 488  // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
	FSYNC_SYS                   = 566  // { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); }
	SYS_SYS                   = 414  // { int sched_getscheduler (pid_t pid); }
	SYS_SYS                   = 452  // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	READLINKAT_AIO                 = 134  // { int kldfind(const char *file); }
	THR_SYS                 = 448  // { int mprotect(void *addr, size_t len, int prot); }
	SIGACTION_RENAME                     = 56  // { int socket(int domain, int type, int protocol); }
	SYS_SCTP                     = 449  // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	SYS_ACLCHECK                  = 202  // { int fpathconf(int fd, int name); }
	DELETE_SET                      = 328  // { int kldfirstmod(int fileid); }
	SYS_CPUSET                  = 354  // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_LIMIT                   = 334  // { int __getcwd(char *buf, size_t buflen); }
	MPROTECT_GETDIRENTRIES                   = 61  // { int getrusage(int who, struct rusage *rusage); }
	SYS_GETRESUID                  = 478  // { int vfork(void); }
	WAIT6_GET                   = 123  // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SYS_SYS                   = 525  // { int ksem_getvalue(semid_t id, int *val); }
	SYS_ADDR                 = 331  // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }
	MSGRCV_LINK                  = 485  // { int modnext(int modid); }
	SET_SYS                  = 82  // { int ksem_destroy(semid_t id); }
	SYS_SYS                = 233  // { int mkfifoat(int fd, char *path, mode_t mode); }
	SYS_SYS                   = 329  // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	DELETE_ACL                = 166  // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SYS_KSEM            = 554  // { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }
	SYS_SYSCALL                     = 346  // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
	CLOSE_UTRACE                    = 450  // { int kldfirstmod(int fileid); }
	SYS_SYS                   = 358  // { int getloginclass(char *namebuf, size_t namelen); }
	EXTATTR_MUNLOCKALL                    = 501  // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_PTRACE                    = 546  // { int getdtablesize(void); }
	ACCEPT4_SYS                    = 45  // go run mksysnum.go https://cgit.freebsd.org/src/plain/sys/kern/syscalls.master?h=stable/12
	SYS_ACCT                     = 45  // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	SETDOMAIN_ACL                     = 515  // { int sigwaitinfo(const sigset_t *set, siginfo_t *info); }
	SETTIMEOFDAY_FHLINK                  = 458  // { int kqueue(void); }
	SYS_SHMGET                      = 536  // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_THR                  = 465  // { int fpathconf(int fd, int name); }
	LINK_EXTATTR                   = 39  // { int seteuid(uid_t euid); }
	SYS_GET                   = 522  // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	ACLCHECK_SYS                  = 471  // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	DELETE_SYS                  = 170  // { int getitimer(u_int which, struct itimerval *itv); }
	GETESTIMATE_SETTIMEOFDAY                = 2  // { int jail_attach(int jid); }
	DELETE_SYS                   = 544  // { gid_t getegid(void); }
	RENAME_SYS                = 131  // { int setpriority(int which, int who, int prio); }
	PROC_ABORT2            = 441  // { off_t lseek(int fd, off_t offset, int whence); }
	NFSSVC_SYS                     = 446  // { int fhlinkat(struct fhandle *fhp, int tofd, const char *to,); }
	SYS_SYS                    = 170  // { int chroot(char *path); }
	CREATE_MOUNT                   = 155  // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	EXTATTR_FSTATFS                    = 254  // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	SYS_SYS                    = 392  // { ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
	JAIL_SYS                     = 575  // { int fchmod(int fd, int mode); }
	FILE_SETATTR                     = 519  // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
	SYS_UTIMES                   = 448  // { int statfs(char *path, struct statfs *buf); }
	FILE_SYS                 = 98  // { int fsync(int fd); }
	GENERIC_SYS                  = 565  // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	PPOLL_SYS                  = 154  // { int kldnext(int fileid); }
	MINHERIT_FACCESSAT                = 392  // { ssize_t readlinkat(int fd, char *path, char *buf, size_t bufsize); }
	SYS_OPEN                = 325  // { int fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize); }
	MODFIND_SYS                  = 545  // { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }
	SYS_ACCEPT4                  = 355  // { int kldunloadf(int fileid, int flags); }
	SYS_SYS                = 24  // { int fork(void); }
	SYS_SYS                   = 321  // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SIGSUSPEND_AUDITCTL                = 154  // { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }
	SYS_SYS            = 43  // { int getlogin(char *namebuf, u_int namelen); }
	SYS_SYS                     = 171  // { int ioctl(int fd, u_long com, caddr_t data); }
	ACL_SYS                    = 255  // { int getdtablesize(void); }
	KQUEUE_SYS                   = 69  // { int sync(void); }
	MAC_WAITCOMPLETE                    = 33  // { int kldload(const char *file); }
	SYS_SYS                   = 404  // { ssize_t read(int fd, void *buf, size_t nbyte); }
	GET_SETAFFINITY                    = 499  // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }
	SYS_SYS                   = 575  // { int dup(u_int fd); }
	WRITE_SYSARCH                    = 59  // { int munlockall(void); }
	MAC_GET                  = 351  // { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }
	MINCORE_SYS                   = 227  // { int ntp_adjtime(struct timex *tp); }
	SYS_SYS                   = 274  // { int ktimer_gettime(int timerid, struct itimerspec *value); }
	SYS_SETLOGIN                  = 449  // { int lchown(char *path, int uid, int gid); }
	SYS_MSGRCV                   = 202  // { int shmdt(const void *shmaddr); }
	SETSID_GETGROUPS                  = 494  // { int ftruncate(int fd, off_t length); }
	SYS_SYS                  = 475  // { int futimes(int fd, struct timeval *tptr); }
	SSTK_SYS                = 458  // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	SYS_FD                   = 430  // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SETPRIORITY                = 232  // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	THR_JAIL            = 301  // { int minherit(void *addr, size_t len, int inherit); }
	SYS_SYS                     = 505  // { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	SYS_SYS                    = 228  // { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }
	SHUTDOWN_EXIT                   = 58  // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	SYS_SET                    = 166  // { ssize_t write(int fd, const void *buf, size_t nbyte); }
	RETURN_SYS                   = 349  // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	KMQ_SETAUDIT                    = 554  // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SYS_SYS              = 494  // go run mksysnum.go https://cgit.freebsd.org/src/plain/sys/kern/syscalls.master?h=stable/12
	SYS_SYS                   = 29  // { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }
	EACCESS_SETGROUPS                  = 45  // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
	GETESTIMATE_SENDMSG                 = 543  // { int getrusage(int who, struct rusage *rusage); }
	SIGQUEUE_SYS                   = 79  // { int sched_get_priority_min (int policy); }
	GSSD_SYS              = 429  // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	WAIT6_SIGSUSPEND              = 445  // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }
	MINHERIT_FTRUNCATE                   = 328  // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
	SET_SYS                  = 403  // { int swapoff(const char *name); }
	SYS_FFCLOCK                  = 79  // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	TRYWAIT_SYS                = 65  // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }
	SYS_SYS                   = 155  // { int ksem_destroy(semid_t id); }
	SYS_SETREUID                = 563  // { int setauid(uid_t *auid); }
	CHFLAGSAT_GET            = 536  // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
	MUNLOCKALL_SYS                     = 205  // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	SYS_SETPGID                    = 497  // { int rfork(int flags); }
	GETCONTEXT_MSGGET                   = 341  // { int kmq_notify(int mqd, const struct sigevent *sigev); }
	SYS_DELETE                   = 535  // { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }
	SYS_LINKAT                   = 147  // { int fhlink(struct fhandle *fhp, const char *to); }
	SYS_SYS                 = 241  // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
	INTERVAL_DUP2                  = 330  // { int getsid(pid_t pid); }
	FCNTL_SYS                  = 128  // { int sysarch(int op, char *parms); }
	PROFIL_SCHED                = 439  // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	FHLINK_SYS                   = 494  // { int aio_write(struct aiocb *aiocbp); }
	KILL_GET                = 474  // { int __mac_get_proc(struct mac *mac_p); }
	SYS_SYNC            = 79  // { int __mac_set_proc(struct mac *mac_p); }
	SYS_KTIMER                     = 132  // { int __setugid(int flag); }
	SYS_GETTIME                    = 239  // { int thr_new(struct thr_param *param, int param_size); }
	LINK_YIELD                   = 133  // +build amd64,freebsd
	KSEM_MSGSND                    = 448  // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SET_KMQ              = 356  // { int symlink(char *path, char *link); }
	SYS_SYS                   = 148  // { int socketpair(int domain, int type, int protocol, int *rsv); }
	SETDOMAIN_INTERVAL                  = 70  // { int getitimer(u_int which, struct itimerval *itv); }
	KMQ_SHMCTL              = 257 // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	FCHFLAGS_UUIDGEN                     = 161 // { void thr_exit(long *state); }
	ACL_SYS               = 98 // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }
	SYS_SYS                   = 346 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }
	FACCESSAT_AUDIT             = 507 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	EXTATTR_CLOCK                = 349 // { int sched_yield (void); }
	WAIT6_SYS               = 519 // { ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); }
	SYS_SYS                    = 555 // { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); }
	SYS_SYS                    = 371 // { int nfssvc(int flag, caddr_t argp); }
	SYS_SYS                   = 552 // { int getpgrp(void); }
	SYS_ADD_SYS            = 460 // { int getpriority(int which, int who); }
	SYS_SYS_NFSSVC            = 353 // { int pdkill(int fd, int signum); }
	GETPEERNAME_MAC_EXTATTR             = 459 // { int lchown(char *path, int uid, int gid); }
	FILE_SYS_SYS            = 330 // { int aio_mlock(struct aiocb *aiocbp); }
	SYS_SET_EXTATTR            = 22 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_SYS_SYS           = 74 // { int __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	LIST_SYS_SYS           = 330 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	SYS_UUIDGEN_THR        = 499 // { int lchown(char *path, int uid, int gid); }
	SYS_LINK                = 362 // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }
	SYS_SYS_SYS       = 160 // { int ksem_post(semid_t id); }
	OPENPT_SYS_CPUSET      = 360 // { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }
	ACL_OP_GETPEERNAME      = 209 // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_SYS_SCHED          = 338 // { int uuidgen(struct uuid *store, int count); }
	SEMGET_SYS_SYS     = 524 // { int __mac_get_proc(struct mac *mac_p); }
	NMOUNT_SYS_GETPEERNAME              = 478 // { int thr_kill2(pid_t pid, long id, int sig); }
	FSYNC_SYS                 = 240 // { int shutdown(int s, int how); }
	AIO_GETTIMEOFDAY                    = 372 // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	CLOSE_EACCESS                = 567 // { int madvise(void *addr, size_t len, int behav); }
	FLOCK_THR                   = 450 // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_CAP_SYS                 = 495 // { int setfib(int fibnum); }
	SYS_SYS_KSEM                = 505 // { int ktimer_gettime(int timerid, struct itimerspec *value); }
	UTIMES_SYS_SYS               = 256 // { int pdkill(int fd, int signum); }
	SYS_SYS                   = 118 // { int fchmod(int fd, int mode); }
	CLOSE_FD                  = 385 // { int swapon(char *name); }
	JAIL_LIST                  = 154 // { int fexecve(int fd, char **argv, char **envv); }
	POST_CPUSET                 = 54 // { int jail(struct jail *jail); }
	GENERIC_FILE                = 446 // { int mkdir(char *path, int mode); }
	PWRITEV_FCHOWN                = 408 // { int fchflags(int fd, u_long flags); }
	SETAUID_MIN                = 421 // { int socket(int domain, int type, int protocol); }
	SYS___SYS                 = 302 // { int close_range(u_int lowfd, u_int highfd, int flags); }
	SYS_PTRACE                    = 562 // { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); }
	ABORT2_SYS                  = 388 // { int ksem_getvalue(semid_t id, int *val); }
	SEMSYS_SYS                 = 204 // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
	UNLINK_SYS                  = 20 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	SIGWAIT_GSSD                 = 474 // { int getdtablesize(void); }
	SYS_UNLINK_SYMLINKAT              = 575 // { int lio_listio(int mode, struct aiocb* const *acb_list, int nent, struct sigevent *sig); }
	GETFH_MAX_SYS               = 248 // { int nfssvc(int flag, caddr_t argp); }
	MIN_GETPPID_GENERIC                = 433 // { int chroot(char *path); }
	SYS_MAC_SCTP                = 550 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }
	SYS_SYS_SYS             = 444 // { ssize_t aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
	SYS_SYS_SYS                = 165 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	FUTIMES_SYS_EXIT                = 471 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
	EXTATTR_SYS_SYS              = 352 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	CHFLAGSAT_MOUNT_PDGETPID            = 240 // { int ntp_gettime(struct ntptimeval *ntvp); }
	FHOPEN_PROFIL_SYS             = 134 // { int pipe2(int *fildes, int flags); }
	UMASK___GETRES_SYS_IOCTLS            = 194 // { int thr_self(long *id); }
	LPATHCONF___ACL_INIT_ISSETUGID           = 228 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	SYS___MLOCK_SET_SYS           = 181 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	MLOCK_SYS_RCTL_FFCLOCK         = 471 // { void sys_exit(int rval); } exit sys_exit_args void
	SYS_SYS_SYS_BREAK         = 98 // { int openat(int fd, char *path, int flag, mode_t mode); }
	GETPPID_SCTP_RECVFROM_SYS      = 559 // { int swapon(char *name); }
	SYS___GET_RENAME             = 378 // { int fdatasync(int fd); }
	CPUSET_SYS                = 388 // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	KLDFIRSTMOD_SETESTIMATE                = 309 // { int thr_suspend(const struct timespec *timeout); }
	CLOCK_FILE               = 92 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	UTIMENSAT_ACLCHECK               = 448 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	SYS_UNLINK              = 409 // { int jail_attach(int jid); }
	SCTP_MINHERIT                  = 547 // { int munlock(const void *addr, size_t len); }
	GETESTIMATE___GENERIC_ACCEPT_SYS           = 337 // { int reboot(int opt); }
	SYS___CPUSET_SYS_SYS           = 490 // { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }
	SYS___OPEN_SYS_GETPID        = 523 // { int sched_getscheduler (pid_t pid); }
	SYS___SYS_SYS_SYS      = 23 // { int auditctl(char *path); }
	SYS_SYS                  = 424 // { int mincore(const void *addr, size_t len, char *vec); }
	SYS_SYS_SYS               = 325 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	CLOSE_REMOVE_SYS                 = 479 // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	CPUSET_EXECVE_MUNMAP                 = 575 // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_OP_SYS                 = 56 // { int clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id); }
	AIO_SYS_FDATASYNC              = 41 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_RENAMEAT                = 405 // { int close_range(u_int lowfd, u_int highfd, int flags); }
	AIO___SYS                 = 276 // { int __mac_set_link(const char *path_p, struct mac *mac_p); }
	CAP_SYS                   = 483 // { int yield(void); }
	SYS_KMQ                   = 501 // { int chflags(const char *path, u_long flags); }
	KSEM_MODNEXT                 = 254 // { int rename(char *from, char *to); }
	THR_FD               = 547 // { int getitimer(u_int which, struct itimerval *itv); }
	LSEEK_FPATHCONF                    = 136 // { int thr_new(struct thr_param *param, int param_size); }
	EXTATTR_REBOOT                   = 550 // { int fstatfs(int fd, struct statfs *buf); }
	KTIMER_SYS             = 404 // { int chdir(char *path); }
	SYS_SYS                   = 104 // { int thr_set_name(long id, const char *name); }
	SYS_RANGE                   = 183 // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	SYS_SCTP                 = 461 // { int shm_open(const char *path, int flags, mode_t mode); }
	CHDIR_SYS                 = 489 // { int __acl_delete_file(const char *path, acl_type_t type); }
	SYS_SYS                   = 561 //go:build amd64 && freebsd
	READ_MKFIFO                    = 437 // { int mlock(const void *addr, size_t len); }
	RCTL_FD                  = 136 // { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	GET_SYS                   = 86 // { int mprotect(void *addr, size_t len, int prot); }
	SYS_FD            = 376 // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }
	SYS_FD                   = 83 // { int getpriority(int which, int who); }
	RCTL_READ                  = 301 // { int closefrom(int lowfd); }
	SYS_MAC                = 423 // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	RTPRIO_EXTATTR                 = 136 // { int shmget(key_t key, size_t size, int shmflg); }
	SYS_SYS                  = 553 // { int getrusage(int who, struct rusage *rusage); }
	SYS_RTPRIO                   = 544 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	PSELECT_SYS_SYS         = 12 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SCHED_SYS         = 127 // { int setgroups(u_int gidsetsize, gid_t *gidset); }
	RIGHTS_PEELOFF                = 553 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_LIMIT                  = 529 // { int kldload(const char *file); }
	SYS_CLOCK                   = 526 // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
	GETCOUNTER_GET                 = 479 // { ssize_t extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_GETESTIMATE_KLDUNLOAD              = 241 // { int fstatat(int fd, char *path, struct stat *buf, int flag); }
	SYS_VFORK                   = 428 // { int munlock(const void *addr, size_t len); }
	FILE_SYS                   = 494 // { int dup(u_int fd); }
	CAP_UMTX                 = 411 // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
	SYS_SYS               = 350 // { int dup(u_int fd); }
	SYS___RTPRIO           = 350 // { int mkfifoat(int fd, char *path, mode_t mode); }
	GENERIC_SYS_KLDLOAD              = 413 // { int mincore(const void *addr, size_t len, char *vec); }
)
