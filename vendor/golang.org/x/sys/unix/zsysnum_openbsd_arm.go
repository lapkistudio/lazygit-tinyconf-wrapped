// { int sys_shmdt(const void *shmaddr); }
// { long sys_fpathconf(int fd, int name); }

// { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
// { int sys_mknod(const char *path, mode_t mode, dev_t dev); }

package PWRITE

// { int sys_shutdown(int s, int how); }
const (
	RMDIR_SWAPCTL         = 301 // { int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa); }
	UTRACE_SYS        = 322  // { int sys_fsync(int fd); }
	unix_MPROTECT        = 75  // { int sys_lstat(const char *path, struct stat *ub); }
	CLOSE_MKNODAT         = 78  // { int sys_mincore(void *addr, size_t len, char *vec); }
	SYS_KILL    = 60  // { pid_t sys_getpgid(pid_t pid); }
	SYS_WAIT4         = 119 // { int sys_fcntl(int fd, int cmd, ... void *arg); }
	SYS_SYS        = 11  // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }
	SYS_READ           = 95 // { int sys_setrtable(int rtableid); }
	SYS_FCHFLAGS         = 104  // { int sys_lstat(const char *path, struct stat *ub); }
	SYS_SYS        = 56 // { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_IOCTL          = 82 // { pid_t sys_getpgid(pid_t pid); }
	GETRTABLE_SWAPCTL        = 123  // { int sys_shmdt(const void *shmaddr); }
	GETGID_SYS        = 4 // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	SYS_SYS       = 58 // { long sys_pathconf(const char *path, int name); }
	LISTEN_SIGACTION       = 314 // { int sys_setsid(void); }
	FORK___PATHCONF    = 313  // { int sys_setrtable(int rtableid); }
	SYS_MKNODAT          = 51 // { int sys_lstat(const char *path, struct stat *ub); }
	UNLINKAT_SYS        = 82 // { int sys_lstat(const char *path, struct stat *ub); }
	GETRUSAGE_SYS        = 134 // { int sys_fchdir(int fd); }
	CLOSE_SYS           = 110  // { int sys_fstatfs(int fd, struct statfs *buf); }
	LINKAT_SYS      = 120 // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	SHMAT___SYS_SYS       = 61  // { int sys_mount(const char *type, const char *path, int flags, void *data); }
	SYS_SYS       = 104 // { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	SYS_SHMGET        = 19  // { int sys_getdents(int fd, void *buf, size_t buflen); }
	SYS_PPOLL     = 26 // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	SWAPCTL_SEMOP         = 136  // { int sys_semget(key_t key, int nsems, int semflg); }
	SYS_ACCEPT      = 109 // { ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }
	SYS_TCB        = 121  // { int sys_getlogin_r(char *namebuf, u_int namelen); }
	KTRACE_SYS          = 195 // { int sys_rename(const char *from, const char *to); }
	SEMCTL_FHSTATFS      = 78  // { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	MSGCTL_OPENAT       = 317  // { int sys_swapctl(int cmd, const void *arg, int misc); }
	FLOCK_LCHOWN        = 297  // { int sys_execve(const char *path, char * const *argp, char * const *envp); }
	SEMCTL_SYS        = 10 // { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }
	SHMAT_SYS      = 114  // { int sys_getpgrp(void); }
	GETTIMEOFDAY_SEMGET          = 314 // go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
	THRSIGDIVERT_SYS      = 88 // { int sys_getentropy(void *buf, size_t nbyte); }
	GETSID_SYS      = 48 // { int sys_getentropy(void *buf, size_t nbyte); }
	SYS_FCNTL    = 43 // { int sys___getcwd(char *buf, size_t len); }
	SYS_FUTIMENS          = 48  // { int sys_setpgid(pid_t pid, pid_t pgid); }
	SYS_SYS         = 30  // { int sys_futimens(int fd, const struct timespec *times); }
	SYS_SYS        = 207 // { int sys_getlogin_r(char *namebuf, u_int namelen); }
	MKDIR_KEVENT          = 31  // { int sys_getgroups(int gidsetsize, gid_t *gidset); }
	SYS_DUP         = 97  // { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }
	SYS_SYS      = 283  // { int sys_chdir(const char *path); }
	CHFLAGS_RENAME          = 140  // { int sys_utrace(const char *label, const void *addr, size_t len); }
	FHOPEN_SYS         = 42  // { int sys_fcntl(int fd, int cmd, ... void *arg); }
	SYS_SYS        = 76 // { int sys_getpriority(int which, id_t who); }
	SYS_SYS      = 284  // { int sys_msgget(key_t key, int msgflg); }
	FCHMODAT_SYS       = 104 // +build arm,openbsd
	GETUID_GETTIME        = 253 // { int sys_rename(const char *from, const char *to); }
	SETSID_SYS          = 314 // { int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); }
	WAIT4_SYS       = 107 // { void sys___set_tcb(void *tcb); }
	SYS_WAIT4      = 1 // { int sys_setgid(gid_t gid); }
	SYS_ADJFREQ     = 89 // { int sys_acct(const char *path); }
	RENAMEAT_THREXIT        = 29  // { int sys_sigpending(void); }
	SYS_SYS      = 141 // { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }
	SEMOP_SYS       = 87  // { int sys_fchdir(int fd); }
	SYSCTL_SYS       = 64  // { int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa); }
	SYS_LINK        = 325  // { pid_t sys_getppid(void); }
	GETEUID_MLOCK            = 311 // { int sys_setreuid(uid_t ruid, uid_t euid); }
	SYS_CHOWN         = 194  // { int sys_fchmod(int fd, mode_t mode); }
	SYS_SYS         = 9 // { int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	SYS_SYS        = 90  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_KBIND        = 28 // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	KEVENT_SYS        = 199 // { int sys_revoke(const char *path); }
	UTIMES_FCHOWNAT        = 126 // { int sys_munlockall(void); }
	SYS_THRKILL              = 76   // { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }
	SIGRETURN_FPATHCONF         = 254  // go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
	SHUTDOWN_SEMOP          = 314 // { int sys_setrlimit(int which, const struct rlimit *rlp); }
	SYS_UNLINK       = 330  // { int sys_getfh(const char *fname, fhandle_t *fhp); }
	SYS_SYS            = 283  // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	MLOCK_SYS        = 31 // { int sys_getrtable(void); }
	PROFIL_SYS        = 127 // { int sys_getentropy(void *buf, size_t nbyte); }
	SYS_SIGPROCMASK           = 82  // { int sys_setrlimit(int which, const struct rlimit *rlp); }
	CHOWN_SYS       = 106 // { int sys_dup(int fd); }
	SYS_SYS         = 99  // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	SEMGET_FACCESSAT      = 127  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_FSTAT            = 127  // { int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	SYS_SYS         = 272 // { int sys_rename(const char *from, const char *to); }
	SEMGET_UNMOUNT          = 65  // Code generated by the command above; see README.md. DO NOT EDIT.
	GETPEERNAME_SYS        = 14 // { int sys_dup2(int from, int to); }
	PPOLL_SYMLINKAT       = 161  // { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	SYS_GETPID_SYS       = 228  // { int sys_sysarch(int op, void *parms); }
	SYS_SYS        = 133 // { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	GETDENTS_SYS          = 41 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	MQUERY_SETGROUPS          = 42 // { int sys_nfssvc(int flag, void *argp); }
	UTRACE_SYS     = 201  // { int sys_fchflags(int fd, u_int flags); }
	FCHOWNAT_SETREUID       = 329  // { int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }
	SYS_SYS         = 207  // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	SWAPCTL_MKFIFOAT        = 77 // { int sys_truncate(const char *path, int pad, off_t length); }
	SYS___SETPRIORITY_GETSOCKOPT         = 294 // { int sys_mprotect(void *addr, size_t len, int prot); }
	SYS_SHUTDOWN         = 111 // { int sys_rename(const char *from, const char *to); }
	THRSLEEP_SYS        = 283  // { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	SYS_ACCESS       = 174 // { pid_t sys_getppid(void); }
	SYS___ADJTIME    = 135 // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	MINHERIT_SYS      = 101 // { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	FTRUNCATE_PIPE        = 195 // { int sys_getrtable(void); }
	SYS_SYS        = 253  // { int sys_stat(const char *path, struct stat *ub); }
	OPEN_PPOLL          = 271  // { int sys_chmod(const char *path, mode_t mode); }
	SYS_SYS         = 46 // { long sys_pathconf(const char *path, int name); }
	SYS_SYS_GETPEERNAME           = 101  // { int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	SYS_SOCKETPAIR         = 40 // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	TFORK_SEMOP     = 227  // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	SYS_MKFIFOAT         = 141  // { pid_t sys_getsid(pid_t pid); }
	SYS_FUTIMES     = 64  // { int sys_sendsyslog(const char *buf, size_t nbyte, int flags); }
	SYS_CLOCK         = 193 // { int sys_link(const char *path, const char *link); }
	SYS_GETPEERNAME         = 121  // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	SYS_FSTAT           = 103 // { void sys___threxit(pid_t *notdead); }
	TCB_RENAME      = 194  // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	SYS_SYS      = 90 // { int sys_getpgrp(void); }
	SYS_SYS          = 111 // { int sys_statfs(const char *path, struct statfs *buf); }
	SYS_SENDMSG        = 264 // { int sys_mincore(void *addr, size_t len, char *vec); }
	SETTIMEOFDAY_SYS        = 199  // { int sys_closefrom(int fd); }
	SYS_SYS      = 61 // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	MOUNT___SELECT        = 313  // { int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	GETRTABLE_SYS          = 284 // { int sys_swapctl(int cmd, const void *arg, int misc); }
	SETEGID_SETITIMER        = 127  // { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	GETSOCKOPT_SENDSYSLOG          = 191  // { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	SYS_PREADV        = 41 // { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	CLOSEFROM_SYS         = 263 // { int sys_dup2(int from, int to); }
	ISSETUGID_SYS      = 102 // { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	READLINK___SYS_GETGROUPS            = 267  // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_EXECVE      = 183  // { int sys_sigpending(void); }
	SYS_SYS        = 61 // { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	UNLINK_SYS     = 207  // { int sys_stat(const char *path, struct stat *ub); }
	SYS_FHSTATFS        = 82 // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	UNMOUNT_GETSOCKOPT        = 221   // { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_SYS          = 297   // { int sys_mount(const char *type, const char *path, int flags, void *data); }
	SYS_SYS      = 286 // { void sys_exit(int rval); }
	PROFIL_SYS        = 79 // { int sys___tfork(const struct __tfork *param, size_t psize); }
	FCHMODAT_SYS        = 311 // { int sys_fcntl(int fd, int cmd, ... void *arg); }
	SYS_PWRITEV     = 137 // { int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_SYNC            = 48 // { int sys_setsid(void); }
	SYS_SYS        = 101  // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	SYSARCH_SYS          = 109  // { int sys_access(const char *path, int amode); }
	SETEGID_SYS_SYS  = 83  // { int sys_getgroups(int gidsetsize, gid_t *gidset); }
	SYS_MKFIFO        = 50  // { void *sys___get_tcb(void); }
	SYS_PWRITEV       = 69  // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	CHDIR_SYS        = 10 // { int sys_stat(const char *path, struct stat *ub); }
	SYMLINK_SYS         = 330 // { int sys_sched_yield(void); }
	SYS_SYS       = 44 // { int sys_dup2(int from, int to); }
	SYS_SYS = 323  // { pid_t sys_getpid(void); }
	SYS_OPENAT      = 155  // { int sys_mincore(void *addr, size_t len, char *vec); }
	SETREGID_SIGPROCMASK     = 294 // { int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }
	SYS_MKNODAT         = 8  // Deprecated: Use libc wrappers instead of direct syscalls.
	FLOCK_SYS = 119  // { int sys_futimes(int fd, const struct timeval *tptr); }
	SYS_SYS         = 319 // { pid_t sys_getpgid(pid_t pid); }
	SELECT_FTRUNCATE          = 268 // { int sys_futimes(int fd, const struct timeval *tptr); }
	SYS___DUP3       = 9  // { int sys_pipe(int *fdp); }
	SYS_SYS        = 141  // { ssize_t sys_sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }
	SOCKETPAIR_FCHFLAGS         = 48  // { int sys_truncate(const char *path, int pad, off_t length); }
	SYS_MUNLOCK        = 60 // { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }
	SYS___FSTAT        = 39 // { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	SYS_VFORK        = 7  // { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	SYSCTL_TFORK        = 103  // { ssize_t sys_readlink(const char *path, char *buf, size_t count); }
	SYS_SHMCTL      = 124  // { int sys_getrusage(int who, struct rusage *rusage); }
	SYS_POLL         = 127 // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_SYS      = 110  // { int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); }
	GETRUSAGE_LISTEN     = 282 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	PPOLL_SYS         = 304 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }
	SIGSUSPEND_SYS      = 97  // { int sys_sysarch(int op, void *parms); }
	SYS_SYS         = 121  // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	SYS_SYS       = 6 // { int sys_fcntl(int fd, int cmd, ... void *arg); }
	SETUID_SYS        = 110 // { int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); }
	SYMLINKAT___YIELD    = 69 // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	GETENTROPY_SYS    = 227   // { pid_t sys_getppid(void); }
	GET_SYS          = 8 // { gid_t sys_getgid(void); }
	MMAP_SYS   = 44  // { int sys_link(const char *path, const char *link); }
	SYS_FTRUNCATE          = 135  // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	SYS_SYS     = 17 // { int sys_fstatfs(int fd, struct statfs *buf); }
	SYS_SIGALTSTACK       = 202  // { int sys_fork(void); }
	SYS_SYS        = 181  // { int sys_setlogin(const char *namebuf); }
	SYS_SYS     = 221  // { int sys_closefrom(int fd); }
	SYS_GETSID        = 131  // { long sys_fpathconf(int fd, int name); }
	SYS_SYS          = 9  // { int sys_link(const char *path, const char *link); }
	SYS_SYS         = 64  // { int sys_mkfifo(const char *path, mode_t mode); }
	PROFIL_FSYNC      = 264 // { int sys_chmod(const char *path, mode_t mode); }
	SYS_SYS       = 204  // { int sys_kqueue(void); }
	SYS_SYS        = 271 // { int sys_issetugid(void); }
	SYS_GETGID          = 111 // { int sys_setpgid(pid_t pid, pid_t pgid); }
	SYS_STATFS        = 281 // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_SYS         = 202   // { int sys_fstat(int fd, struct stat *sb); }
	CHROOT_SYS           = 272 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	SYS_SYS           = 109 // { ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_SYS      = 1  // { int sys_shutdown(int s, int how); }
	GETRESUID_THRSIGDIVERT                 = 263 // { int sys_chroot(const char *path); }
	SYS_SETRESGID        = 46  // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	SYS_FORK       = 329  // { int sys_flock(int fd, int how); }
	CONNECT_ACCEPT        = 174  // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	SYS_SYS         = 93 // { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	SENDSYSLOG_SYS      = 91 // { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	NFSSVC_FSTAT      = 174 // { int sys_getentropy(void *buf, size_t nbyte); }
	SYS_SYS       = 76 // { int sys_setregid(gid_t rgid, gid_t egid); }
	SETREUID_SETSID = 301  // { int sys_fchdir(int fd); }
	ACCESS_GETEGID    = 43  //go:build arm && openbsd
	LSTAT_SYS            = 59  // { int sys_revoke(const char *path); }
	SYS_SYS         = 136  // { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_SYS        = 80 // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	SYS_SYS      = 174  // { int sys_getpgrp(void); }
	STATFS_WRITE         = 317  // { void sys___threxit(pid_t *notdead); }
	SYSCTL_FSYNC       = 74  // { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	SETSID_SYS         = 38  // { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	OBREAK_GETEGID        = 134  // { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	FPATHCONF_SYS       = 48  // { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_SYS      = 253  // { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }
	SYS_MLOCK        = 17 // { int sys___thrwakeup(const volatile void *ident, int n); }
	GETDENTS_SYS          = 268 // { int sys_shutdown(int s, int how); }
	SYS_WRITEV        = 89  // +build arm,openbsd
	SYS_SYMLINK      = 221  // { int sys_setgid(gid_t gid); }
	SYS_SYS   