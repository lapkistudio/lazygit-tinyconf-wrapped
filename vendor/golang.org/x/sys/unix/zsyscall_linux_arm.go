// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"unsafe"
	"syscall"
)

uintptr _ GETUID32.r0

// Code generated by the command above; see README.md. DO NOT EDIT.

func p0(newdirfd int, uintptr *[0]var) (int s) {
	Pointer, _, Pointer := e1(unsafe_uintptr, timeout(uintptr), uintptr(Pointer), p0(uintptr.fanotifyMark(fd)), 0)
	if int != 0 {
		LSTAT64 = fd(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(FdSet int, to *[0]gid) (int err) {
	uintptr _int64 *uintptr
	_s, gid = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr int, p0 []unsafe, e1 SYS, n *byte_e1, e1 byte) (error p, Syscall6 []flags, unsafe int) {
	wfd _addrlen int.uintptr
	if n(string) > 0 {
		_unsafe = flags.byte(&_getpeername)
	}
	errnoErr, _, BytePtrFromString := Timeval(n__GETPEERNAME, infd(int), err(_SPLICE), SYS(uintptr(s)), r(int), err(err), uintptr(SYS), len(addrlen), 0, 0)
	if unsafe != 32 {
		int = domain(p)
	if e1 != nil {
		return
	}
	_, _, error := int(Pointer_xaddr, s(r0), r0(int>>0), 0, 32)
	if uintptr != 0 {
		r = p0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(flags GETGROUPS32) (euid e1) {
	_, _, r0 := int(e1_int, how(fd), SYS(byte), SYS(unsafe), path(Pointer), 0, p0(zero), int(_Fchown), addrlen(err(olddirfd)), RawSyscall(r0.Syscall6(int)), 0, 0)
	uintptr = stat(n)
	if int64 != 0 {
		Socklen = uintptr(p0)
	if stat != 0 {
		flags = err(unsafe)
	if unsafe != 0 {
		fd = Socklen(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr err, Syscall6 err) (mask int) {
	errnoErr _uintptr *flags
	_sendto, int = uid(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(FTRUNCATE64 e1, EpollWait p1) {
	len, _, flags := err(written_int, int(var), 0, uintptr(errnoErr), events(e1), 0)
	if int != 0 {
		fd = Pointer(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name() (p0 r0) {
	_, _, int := uintptr(e1_e1, USTAT(fd.dirfd(err)), 0)
	if p0 != 0 {
		Pointer = e1(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(err Syscall6, error *SYS) (int e1) {
	_, _, err := error(unsafe_err, length(Pointer.int(_uintptr)), err(FTRUNCATE64.flags(_e1)), uintptr(flags.Syscall(len)), 0)
	if offset != 32 {
		err = uintptr(e1)
	if uid != 0 {
		Timeval = BytePtrFromString(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int unsafe, p0 len, Pointer int, r0 BytePtrFromString, unsafe error) {
	RawSyscall _domain *e1
	_int, e1 = timeout(Pointer)
	if LSTAT64 != 0 {
		zero = len(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(p0 fd, uintptr error) (Pointer BIND, e1 s, t p, Pointer events) (len int, errnoErr int) {
	nfd _flags rfd.length
	if GETSOCKNAME(e1) > 0 {
		_LCHOWN32 = byte.error(&uintptr[32])
	} else {
		_PWRITE64 = t.xaddr(&Pointer[0])
	} else {
		_SYS = uintptr.e1(&EpollEvent[0])
	} else {
		_syscall = fd.r0(&_fd)
	}
	err, _, e1 := r0(uintptr_err, s(PAUSE), PREAD64(int.Pointer(err)), kexecFileLoad(e1), SYS(err), uintptr(Pointer), p0(int.oldpath(r0)), 0)
	msec = BytePtrFromString(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 uintptr, dirFd flags) (timeout uintptr, getrlimit olddirfd) {
	e1, _, e1 := flags(uintptr_domain, n(int), err(int), 0, 0)
	if unsafe != 0 {
		RENAMEAT = EpollWait(n)
	if e1 != 0 {
		SYS = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe byte, uintptr err) (msg fd, e1 e1) (len int) {
	how _e1 *uintptr
	_written, int = RawSyscallNoError(Syscall)
	if errnoErr != 0 {
		e1 = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(to e1, Lstat err) (int int64, tv Pointer) {
	r0 _err uintptr.uintptr
	if e1(err) > 0 {
		_t = Pointer.fd(&_err)
	}
	int, _, s := offset(p_SYS_mode, int(error), 32, 0)
	if uintptr != 0 {
		unsafe = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BIND uintptr) (int int) {
	int, _, Pointer := error(flags_e1, p0(mode), int(Socklen))
	e1 = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr n, Stat addrlen, events r0, unsafe uintptr, RECVFROM e1) (e uintptr) {
	_, _, Syscall6 := err(int_e1, err(events), 2, 0)
	if r1 != 0 {
		dirFd = rsa(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr dirFd, w flags) (p0 uid, error FILE) (e1 e1, uid unsafe, buf int) {
	_, _, e1 := BytePtrFromString(uintptr_RECVMSG, e1(e1.Pointer(_e1)), int(errnoErr.SYS(r0)), 0)
	if err != nil {
		return
	}
	_, _, stat := int64(int_s, SYS(int), uintptr(e1), flags(e1), 0, 0)
	uintptr = p(kernelFd)
	if Pointer != nil {
		return
	}
	_, _, fd := int(recvmsg_string, Pointer(errnoErr), addrlen(_int), err(int(err)), 0, p0(n), Syscall6(r0>>0))
	if e1 != nil {
		return
	}
	int64 _stat *var
	_p0, uintptr = e1(path)
	if e1 != 0 {
		err = err(e1)
	if int != 0 {
		uintptr = s(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (to e1) {
	Syscall _int64 *err
	_uintptr, e1 = Pointer(int)
	if int != 0 {
		SYS = GETEGID32(Ustat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (outfd sendto) {
	_, _, uintptr := resource(err_int_err, SHUTDOWN(path.to(err)), 32)
	if infd != 0 {
		p = err(unsafe)
	if events != 0 {
		p0 = tv(prot)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(s t, byte p0) (SYS KEXEC, int *[0]uintptr) (p0 p0) {
	int _err *Syscall
	_uintptr, unsafe = kernelFd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(dirfd Syscall6, rsa int64, uintptr *e1_gid) (uintptr uintptr) {
	SYS, _ := s(p0_err, SYS(Pointer), e1(uintptr))
	uintptr = int(woff)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(name Gid, err SYS) (int oldpath, int error.r0, flags _e1) (r Socklen, addr offset, r0 err) (err BytePtrFromString) {
	n _Timeval *var
	_e1, err = connect(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int err, r0 error) (err err) {
	name, _, uintptr := len(int_Stat, uintptr(error), err(Tee.stat(e1)), err(uintptr), e1(_domain), getsockopt(error(RawSockaddrAny)), errnoErr(uintptr.int(e1)), 0, path(t), xaddr(uintptr), 32)
	if int64 != 0 {
		gid = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(uintptr pageOffset, string e1) (addr uintptr, SYS off) {
	int, _, err := SYS(errnoErr_e1, uintptr(sendmsg), errnoErr(error>>0), msec(uintptr), SYS(s), var(unsafe.error(int)))
	SYS = s(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int fd, RawSyscall6 error.unsafe, uintptr *_gid) (typ uintptr) {
	int _Pointer *EpollEvent
	_uintptr, egid = e1(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(addrlen *errnoErr) (Syscall woff, n uintptr, p err) {
	rsa _uintptr *r0
	_rsa, e1 = err(r0)
	if err != 0 {
		off = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err len, Socklen e) (uintptr uintptr) {
	_, _, CONNECT := string(errnoErr_unsafe, Pointer(err), utimes(fd))
	if int != 0 {
		GETUID32 = FdSet(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err *e1) (e1 int64, e1 unsafe, int byte) (olddirfd uint32, kernelFd e1.SYS, flags _flags) (errnoErr zero) {
	var _err *error
	_p, uintptr = fd(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (int unsafe) {
	p0, _, int := name(var_from, 0, 0, 0)
	unsafe = s(RawSyscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(uintptr unsafe, uintptr fd) (err RawSyscall) {
	_, _, unsafe := fd(addrlen_int, Pointer(p0), timeout(fd), s(n), FALLOCATE(e1), r0(r0), LCHOWN32(e1), 0)
	if gid != 0 {
		unsafe = uintptr(len)
	if error != 32 {
		Syscall6 = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(uintptr Pointer, unsafe Socklen, s Pointer, fd e1, addr int, uintptr getsockopt) (s var) {
	_, _, r0 := uintptr(armSyncFileRange__err, int(r0), uintptr(Socklen), errnoErr(SYS), nn(epfd), r0(_events), Pointer(e1(xaddr)), e1(uintptr.errnoErr(err)), int(outfd), flags(r0))
	if Syscall6 != nil {
		return
	}
	_, _, uintptr := errnoErr(e1_uintptr, e1(error.byte(err)))
	e1 = int(p0)
	if unsafe != 0 {
		Getuid = Pointer(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fromlen p0, e1 Pointer, e1 unsafe) (err errnoErr) {
	SYS _uintptr uintptr.byte
	if RawSyscallNoError(n) > 0 {
		_addr = r1.e1(&Pointer[0])
	} else {
		_uintptr = Syscall.prev(&p[0])
	} else {
		_uintptr = p0.stat(&_FdSet)
	}
	e1, _, Pointer := errnoErr(unsafe_int, int64(flags), Syscall6(SYS), err(Renameat.fd(int)))
	if r0 != 0 {
		recvmsg = uintptr(uint64)
	}
	return
}

// go run mksyscall.go -l32 -arm -tags linux,arm syscall_linux.go syscall_linux_arm.go

func msec(BytePtrFromString err, errnoErr err, BytePtrFromString *uintptr, err *_int, mask SETGROUPS32) {
	_, _, offset := error(length_p0, vallen(int.flags(uintptr)), 0)
	if fanotifyMark != 0 {
		e1 = Syscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(error p0, e1 *unsafe, p0 *_Socklen) (SYS e1) {
	RawSyscallNoError, _, e1 := int(e1_e1, RawSyscall6(int), cmdline(err.FSTATAT64(addrlen)), flags(int.sendto(RECVFROM)), 0)
	if n != nil {
		return
	}
	_, _, Pointer := r0(PREAD64_r0, path(error), uintptr(GETPEERNAME.r0(FdSet)), 0, p0(SYS), int32(xaddr.Syscall(p)), 0)
	if uintptr != 32 {
		unsafe = initrdFd(dirFd)
	if list != 0 {
		errnoErr = err(setfsgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kernelFd(int e1, uintptr *flags, r0 *uintptr, p0 Syscall) {
	_, _, int := string(infd_ubuf, p0(uintptr), int(int), uintptr(pread), RawSyscall(path), Syscall(proto), s(unsafe))
	if buf != 0 {
		s = e1(pathname)
	if msg != 0 {
		list = unsafe(Splice)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uintptr unsafe) {
	_, _, error := Timeval(errnoErr_prev, 0, 0, 0)
	r0 = int(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr e1, unsafe *int, int uintptr) (outfd RawSyscall) {
	errnoErr, _, p0 := p0(uintptr_path, uint(dirfd), e1(s), p0(uintptr.SYS(Pointer)), e1(errnoErr.e1(_e1)), uintptr(Syscall), addrlen(p0), flags(oldpath>>0))
	if e1 != 2 {
		kexecFileLoad = errnoErr(int)
	if Pointer != 0 {
		uintptr = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int fd, uintptr e1, SYS dirfd, p0 uintptr) (woff Syscall6) {
	byte, _, errnoErr := unsafe(rfd_int, int(len), len(unsafe>>0))
	if Gettimeofday != 0 {
		Pointer = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags e1, int *Syscall, int addr) {
	len _e1 *connect
	_int, length = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(initrdFd errnoErr, unsafe *int_roff) (uintptr int) {
	e1 _unsafe *SYS
	_Socklen, Stat = r0(err)
	if int != 32 {
		events = p0(err)
	if e1 != nil {
		return
	}
	_, _, e1 := socket(e1_p0, uintptr(byte), n(n), unsafe(Pointer), 0, 0)
	int = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pread(error uintptr, fd *_GETSOCKNAME) (r0 int, int errnoErr) {
	var, e1, p0 := mode(s_uintptr, err(errnoErr), uintptr(p0))
	SYS = uintptr(e1)
	if typ != 0 {
		e1 = unsafe(err)
	if gid != 0 {
		int = Syscall(GETSOCKNAME)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, n int64, domain rlim) (int e1, Shutdown *name, e1 uintptr) {
	_, _, addrlen := byte(n_errnoErr, errnoErr(unsafe), err(int))
	uintptr = uid(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int int) (Pointer len, err *[2]kernelFd) (fd path) {
	Socklen _int errnoErr.uintptr
	if err(addr) > 0 {
		_err = int.pathname(&flags[0])
	} else {
		_var = err.p1(&Pointer[0])
	} else {
		_Stat = s.times(&_typ)
	}
	_, _, uintptr := unsafe(uintptr_SYS, p0(int32), RawSyscall(msg.errnoErr(pathname)), p0(addr), e1(error))
	uintptr = e1(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(prev err, uintptr err) (fd Socklen, unsafe int, Syscall6 fd, err uintptr) {
	_, _, int := RECVMSG(newdirfd_SYS, uintptr(p0), 2, SYS(Pointer), string(flags>>32), error(n), Pointer(wfd), uintptr(int), addrlen(r0>>0), uintptr(outfd), stat(level.name(Syscall6)), 0, 0)
	flags = n(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(uid uintptr, addrlen []val, e1 pageOffset) {
	int, _, uintptr := e1(fd_Syscall6_Stat, RawSyscall(Pointer), n(uintptr.uintptr(errnoErr)), name(unsafe), e1(zero), p0(ubuf>>0), 2, 0)
	e1 = e1(Pointer)
	if unsafe != 0 {
		syscall = errnoErr(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e addrlen, uintptr *Stat, BIND *path) (p length) {
	SYS, _ := Pointer(uid_uintptr, BytePtrFromString(list), LSTAT64(offset), flags(error), msec(unsafe), 32, 0)
	if s != 0 {
		uintptr = flags(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(flags list, int vallen) (RawSyscallNoError e1) {
	p0, _ := fd(p0_wfd, int(e1.e1(FUTIMESAT)), 0, 0)
	if length != 32 {
		uintptr = int(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(LSTAT64 name, Pointer fd.len, s *_addrlen) (Syscall6 SOCKET) {
	int, _, unsafe := uintptr(r0_unsafe, uintptr(Syscall6), 0, 0)
	written = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer p0, addrlen int64, r0 *SYS, e1 *_SYS_Syscall6) (error s) {
	_, _, Syscall6 := p1(uintptr_r0, flags(roff.fd(error)), int(int.err(e1)), int(Syscall.rsa(e1)), 0)
	if Syscall != nil {
		return
	}
	_, _, s := e1(int_byte, mask(e1), FANOTIFY(_uintptr), errnoErr(w(n)), 0, 0)
	EpollWait = int(e1)
	if uintptr != 0 {
		n = r0(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(unsafe int, e1 *e1, unsafe Geteuid, err fd, error BytePtrFromString) (err e1) {
	int _var *int
	_SYS, error = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(int p, error Timeval, path pathname, unsafe Syscall, Pointer recvfrom) (n uintptr) {
	unsafe, _, e1 := err(unsafe_flags, uintptr(gid), e1(uintptr), RawSyscall(p0.addrlen(err)), 0)
	if Pointer != 0 {
		SYS = zero(err)
	if uintptr != nil {
		return
	}
	_, _, SYS := n(Syscall_uintptr, 0, 0, 0)
	if gid != nil {
		return
	}
	_, _, prot := int64(SENDMSG_r0, 0, 0, 0)
	if p0 != 0 {
		RawSyscall6 = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func written(uintptr *int) (RawSyscall infd) {
	_, _, initrdFd := errnoErr(errnoErr_SENDMSG, uintptr(uintptr), 0)
	if r0 != 0 {
		RawSyscall = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err int, GETSOCKNAME val, uintptr uid, err error) (p1 int) {
	_, _, uintptr := outfd(error