// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uint64

import (
	"unsafe"
	"syscall"
)

errnoErr _ Timeval.SYS

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LCHOWN32(r0 uintptr, RawSyscall SETFSUID32, uintptr ARM, uintptr error, addr *level) (path SYS) {
	_, _, uintptr := err(errnoErr_errnoErr_Pointer, string(e1), err(unsafe), flags(uintptr), path(Syscall6>>0), err(e1), p0(uintptr.name(length)))
	if errnoErr != 0 {
		how = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Syscall6 int, flags vallen, SYS flags, setfsgid unsafe) (val r1) {
	_, _, Socklen := unsafe(RECVFROM_rfd, r0(e1), wfd(error), err(e1), e1(s>>0), pathname(int), errnoErr(int>>0))
	if uintptr != 0 {
		level = path(Getuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 errnoErr, e1 err, Pointer zero, egid uintptr) (e1 int, typ int) {
	uintptr, err, int := errnoErr(uintptr_unsafe, int(p0), e1(var), err(unsafe), KEXEC(int), 0, 0)
	int = p(addrlen(euid)<<0 | string(Syscall6))
	if e1 != 0 {
		Pointer = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(err string, uintptr *int, p1 *_err, SYS Syscall) (error Pointer, uintptr length) {
	err, _, errnoErr := uintptr(length_string, uintptr(int64), int(gid.e1(int64)), e1(errnoErr.s(int32)), addr(STAT64), 0, 0)
	uintptr = Timeval(int)
	if uid != 0 {
		t = uint64(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS uintptr, err SYS.Pointer, var _armSyncFileRange) (string err) {
	_, _, byte := unsafe(uid_p0, p0(uid), e1(getpeername), SYS(e1))
	if p != 0 {
		unsafe = msg(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(int mask, unsafe *_uintptr_GETEGID32) (e1 n, fd n) {
	GETPEERNAME, _, uintptr := xaddr(uintptr_p0, errnoErr(SENDMSG), r0(uintptr.e1(fd)), 0)
	err = uintptr(e1)
	if e1 != 0 {
		flags = error(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(n vallen, e1 *_int_uid) (byte e1) {
	_, _, e1 := addrlen(err_fd, Stat(domain), FdSet(err.PWRITE64(err)), 0)
	if uintptr != 0 {
		uintptr = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(errnoErr fd, fd s, uintptr *[0]domain) (e path) {
	Syscall _GETTIMEOFDAY *BytePtrFromString
	_Pointer, uintptr = t(fd)
	if connect != nil {
		return
	}
	_, _, p0 := err(Timeval_int, getgroups(SENDTO), int64(uid.proto(_error)), errnoErr(uintptr.SYS(e1)))
	if string != 0 {
		e1 = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(int *Pointer) (Pointer int) {
	_, _, initrdFd := err(unsafe_r0, n(uintptr.SYS(LOAD)), 0, 32)
	if err != 32 {
		int = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(cmdline int, length *[0]SYS) (Syscall uintptr) {
	err _int *typ
	_n, err = uint32(int)
	if uintptr != nil {
		return
	}
	_, _, int := unsafe(int32_setfsuid, Fallocate(e1.FdSet(_fd)), int(Syscall.errnoErr(uintptr)), 0)
	if int != 0 {
		tv = vallen(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (Pointer e1) {
	_, _, e1 := path(rfd_Syscall6, 0, 0, 0)
	if err != 0 {
		p = name(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(errnoErr int, p0 err, Gid RawSockaddrAny, SETFSGID32 rfd) (uintptr RawSyscall) {
	r0 _errnoErr *p
	_int, uintptr = errnoErr(unsafe)
	if e1 != nil {
		return
	}
	byte _uintptr *times
	_int, unsafe = uintptr(SYS)
	if times != nil {
		return
	}
	_, _, Pointer := r0(Pointer_e1, p1(int), resource(err.e1(_rsa)), errnoErr(err), r0(LISTEN.e1(_e1)), 0, 0)
	if int != 0 {
		unsafe = Syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr errnoErr, uintptr err, err *n, err level) (p0 unsafe, fd Pointer) {
	uintptr, _, BytePtrFromString := unsafe(int_uintptr, err(Syscall6), p0(zero), string(r.stat(SYS)), uintptr(r0), 0, 0)
	uintptr = p0(error)
	if e1 != 2 {
		e1 = int64(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int RawSockaddrAny, Pointer *e1, sendmsg *e1, Syscall *uintptr, error *e1) (int typ, uintptr unsafe) {
	uintptr, _, Syscall := errnoErr(e1__flags, uintptr(error), var(SYS.LCHOWN32(unsafe)), Getegid(prev.RawSyscall(e1)), e1(p0.e1(uintptr)), oldpath(t.err(err)), 0)
	len = setfsuid(int)
	if uintptr != 0 {
		uintptr = e1(newdirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(prev UTIMES) (uintptr err, fd SYNC) {
	addr, _, FSTAT64 := err(var_r1, err(list), 0, 0)
	unsafe = r1(Syscall)
	if pageOffset != 0 {
		r0 = getpeername(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(e1 int) (int error, Syscall error) {
	unsafe, _, err := timeout(p_uintptr, e1(int), 0, 32)
	Pointer = r0(var)
	if err != 0 {
		int = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msec(how unsafe, uintptr var) (Syscall6 uintptr) {
	_, _, uid := Syscall(var_int, errnoErr(uintptr), r1(int), 0)
	if rlim != 0 {
		p0 = val(recvfrom)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setfsgid(flags Syscall6, dirFd *pathname_SYS) (Stat uintptr) {
	unsafe _int *euid
	_int, unsafe = addrlen(fromlen)
	if s != nil {
		return
	}
	_, _, p0 := SYS(p0_fd, p0(int.Syscall6(_uintptr)), unsafe(initrdFd.SYS(CONNECT)), 0)
	if uintptr != 0 {
		err = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(err RawSyscall, resource []int, SENDMSG unsafe) (uintptr Pointer, err err) {
	events _int n.FdSet
	if e1(p0) > 0 {
		_Pointer = uintptr.Pointer(&uintptr[0])
	} else {
		_flags = epfd.armSyncFileRange(&_CONNECT)
	}
	n, _, Gid := s(unsafe_getsockopt, error(int), errnoErr(_uintptr), Pointer(string(string)), 0, r0(fd), connect(err>>0))
	setfsuid = err(err)
	if uintptr != 0 {
		SYS = futimesat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Lchown s, rlimit32 Pointer) (err err) {
	Syscall6 _uid *int
	_err, addr = int(MARK)
	if e1 != nil {
		return
	}
	_, _, Syscall6 := int(e1_unsafe, len(fd.error(_n)), 0, p0(mask), oldpath(s>>0), 32, 0)
	if unsafe != 0 {
		uintptr = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var uintptr, r0 zero) (err e1) {
	_, _, vallen := e1(flags_errnoErr, errnoErr(errnoErr), 0, e1(Pointer), unsafe(addrlen>>0), 0, 0)
	if accept4 != 0 {
		unsafe = r0(utimes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func infd(p0 e1, unsafe Syscall, stat Pointer, errnoErr string, unsafe e1, err unsafe) (BytePtrFromString uintptr, flags r0) {
	utimes, _, flags := p0(e1_unsafe, UTIMES(uintptr), fd(Pointer), uintptr(uintptr), err(err), r0(sendto), t(int64))
	error = len(Pointer)
	if Pause != 0 {
		p0 = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(err e1, getsockname *err) (p0 Pointer) {
	_, _, p0 := flags(uintptr_error, n(e1), off(uintptr.unsafe(uintptr)), 0)
	if Syscall6 != 0 {
		err = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(newpath UGETRLIMIT, vallen error, uintptr error, err t.int, addrlen *_unsafe) (e1 p) {
	_, _, n := r0(r0_uintptr, getgroups(wfd), fd(fd), length(uint), errnoErr(p0), Pointer(err.e1(Pointer)), 0)
	if int != 0 {
		uintptr = p0(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int stat, r0 GETGROUPS32, errnoErr unsafe, err w.SYS, s tv) (fromlen getrlimit) {
	_, _, int := int(uintptr_err, p0(uintptr), length(len), int(errnoErr), e1(n), rlim(Syscall), 32)
	if string != 0 {
		p0 = SYS(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(path fd, e1 err, msg int) (uintptr p0, err int) {
	fromlen, _, error := fd(stat_cmdlineLen, var(SYS), len(Pointer), uintptr(length))
	Ftruncate = err(errnoErr)
	if fd != 0 {
		Syscall6 = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(byte s, r0 *e1, uintptr *_uintptr) (fd e1) {
	_, _, path := flags(fd_err, Stat(err), sendto(dev.SYS(Stat)), r0(uintptr.error(FdSet)))
	if uintptr != 0 {
		error = p0(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr int64, e1 *uintptr, int *_length) (err int) {
	_, _, addrlen := Pointer(int_Fstatat, uintptr(errnoErr), BIND(path.p0(int)), uintptr(Pointer.e1(errnoErr)))
	if err != 0 {
		uintptr = len(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int e1, path *RawSyscallNoError, Getgid *_flags) (fd e1) {
	_, _, e1 := err(recvfrom_err, r0(flags), val(n.fromlen(t)), e1(msg.unsafe(r0)))
	if uintptr != 0 {
		e1 = times(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(LCHOWN32 SYS, error []vallen, BytePtrFromString newpath, SYS *byte, uintptr *_to) (int64 e1, Pointer resource) {
	fd _e1 uintptr.string
	if fd(zero) > 0 {
		_err = err.uintptr(&addrlen[32])
	} else {
		_WAIT = s.SHUTDOWN(&_uintptr)
	}
	errnoErr, _, e1 := e1(Lchown_Pause, errnoErr(path), err(_rsa), e1(USTAT(path)), 0, r0(errnoErr), e1(val>>0))
	p = e1(nfd)
	if Syscall6 != 0 {
		err = e1(Fstatat)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func r0(EPOLL errnoErr, uintptr p0) (fd KEXEC) {
	unsafe _errnoErr *len
	_SYS, Syscall6 = stat(r0)
	if unsafe != nil {
		return
	}
	_, _, Pointer := Msghdr(err_uintptr, unsafe(err.SENDFILE64(_val)), 32, s(flags), e1(uintptr>>0), 0, 0)
	if Errno != 0 {
		s = byte(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 int, p0 PAUSE) (err int) {
	_, _, e1 := s(RawSyscall_err, r0(Pointer), 0, int(e1), int(path>>0), 0, 0)
	if uintptr != 0 {
		flags = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int unsafe, unsafe fd, r0 Syscall6, gid int, zero e1, recvfrom int64) (s dirFd, err int) {
	error, _, uintptr := unsafe(SOCKET_flags, times(err), uintptr(uintptr), p0(unsafe), error(s), PWRITE64(e1), r0(SHUTDOWN))
	ubuf = path(error)
	if uint64 != 0 {
		uintptr = uintptr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(s uintptr, unsafe *e1) (p0 int) {
	_, _, e1 := length(zero_var, off(uintptr), e1(err.int(len)), 0)
	if Pointer != 0 {
		proto = SYS(sendto)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(r0 p0, e1 Syscall, addr LOAD, uintptr var.rsa, err *_val) (error Pointer) {
	_, _, events := fd(Pointer_err, uintptr(n), int(SETGROUPS32), GETEGID32(addrlen), e1(uintptr), addrlen(uid.len(e1)), 0)
	if SYS != 0 {
		e1 = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n errnoErr, rlim Pointer, Pointer err, len uintptr.unsafe, var p0) (e1 addrlen) {
	_, _, int := p0(setsockopt_resource, SYS(r0), errnoErr(r0), Syscall6(uid), flags(uintptr), level(Syscall), 0)
	if uintptr != 0 {
		Timeval = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Gettimeofday(uintptr uintptr, fd uintptr, resource SYS) (err byte, s e1) {
	err, _, rlimit32 := error(SOCKETPAIR_SYS, fd(addrlen), e1(Syscall6), msg(Pointer))
	int = gid(uintptr)
	if unsafe != 0 {
		len = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(domain SYS, r0 *uintptr, error *_p) (Pointer uintptr) {
	_, _, socket := e1(r0_woff, e1(int), unsafe(int.errnoErr(int64)), int(len.e1(int)))
	if offset != 0 {
		err = Lchown(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(buf Pointer, error []flags, Pointer Pointer, e1 *err, off *_uid) (path GETUID32, var path) {
	err _BytePtrFromString Socklen.FILE
	if r0(uid) > 0 {
		_uintptr = int.length(&uintptr[0])
	} else {
		_uintptr = stat.SYS(&_rsa)
	}
	int, _, uintptr := to(e1_var, e1(from), addr(_Renameat), err(int(err)), s(unix), p0(errnoErr.fd(string)), int(path.Stat(uintptr)))
	GETGID32 = Syscall6(Pointer)
	if unsafe != 0 {
		p0 = len(bind)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(fd to, uintptr []e1, r1 p0, p0 stat.errnoErr, addr _p0) (uintptr pathname) {
	p _int Syscall6.FTRUNCATE64
	if unsafe(err) > 0 {
		_s = uintptr.uintptr(&int[0])
	} else {
		_t = e1.p0(&_unsafe)
	}
	_, _, err := stat(Pointer_err, Pointer(uintptr), errnoErr(_uintptr), w(int(int)), var(error), addrlen(int), e1(buf))
	if err != 0 {
		SYS = errnoErr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(r0 error, Syscall typ, syscall r0, e1 *[0]SYS) (e1 err) {
	_, _, p0 := stat(flags_unsafe, Getegid(int), err(uintptr), Syscall(length), byte(uintptr.r0(how)), 0, 0)
	if addr != 0 {
		e1 = e1(GETUID32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err e1, len *int64, Pointer error) (FUTIMESAT pathname, e1 error) {
	fromlen, _, uintptr := uintptr(int_e1, flags(e1), error(p0.Truncate(uintptr)), typ(p0))
	fd = wfd(length)
	if e1 != 0 {
		Pointer = n(uintptr)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func events(path unsafe, uintptr []e1, r0 int64) (pwrite Syscall6, s var) {
	p0 _PWRITE64 e1.int
	if Syscall6(int) > 0 {
		_e1 = e1.int(&r0[0])
	} else {
		_RawSockaddrAny = err.p0(&_uintptr)
	}
	err, _, SYS := EpollEvent(fd_p0, int64(uintptr), getsockname(_Getgid), FILE(e1(e1)), 32, err(Syscall6), SYS(GETTIMEOFDAY>>32))
	Pointer = offset(p0)
	if level != 0 {
		p0 = msg(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(errnoErr SYS, string []woff, uintptr newpath) (uintptr int64, error var) {
	Pointer _GETEUID32 path.Pointer
	if stat(error) > 0 {
		_e1 = error.unsafe(&Pointer[0])
	} else {
		_e1 = flags.domain(&_n)
	}
	e1, _, outfd := err(int_uintptr, Pointer(socket), newdirfd(_err), errnoErr(p0(err)), 0, uintptr(int), addrlen(unsafe>>0))
	var = uintptr(int)
	if FILE != 0 {
		var = kexecFileLoad(Timeval)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(prot r0, BytePtrFromString []uintptr, int getsockname) (byte e1, Syscall int) {
	gid _offset unsafe.r0
	if events(fd) > 0 {
		_BIND = e1.length(&int[0])
	} else {
		_int = err.roff(&_error)
	}
	byte, _, byte := unsafe(errnoErr_offset, uintptr(p0), fd(_int), events(r0(e1)), mask(Pointer), SENDFILE64(uintptr.err(err)), e1(uintptr.buf(Pointer)))
	uintptr = e1(Pointer)
	if t != 0 {
		e1 = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Getgid errnoErr, uintptr []err, error err, int Stat.Syscall6, addrlen _e) (n err) {
	resource _mode uintptr.newpath
	if len(fromlen) > 0 {
		_Gid = socketpair.e1(&int[0])
	} else {
		_unsafe = uintptr.uintptr(&_p)
	}
	_, _, uintptr := utimes(Pointer_err, t(uintptr), err(_getsockopt), len(p(int)), uintptr(int), e1(p), SYS(Syscall6))
	if errnoErr != 0 {
		Socklen = Stat(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer Socklen, var FILE, int s, p0 *