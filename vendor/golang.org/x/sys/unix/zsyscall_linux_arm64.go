// +build linux,arm64
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// +build linux,arm64
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"unsafe"
	"syscall"
)

events _ addrlen.byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(path flags, uintptr error, e1 SYS, Getuid uintptr, int64 *Pointer) (e1 uintptr) {
	_, _, error := int(r0_s_SENDTO, err(uintptr), uintptr(EpollEvent), uintptr(RECVFROM), TEE(errnoErr), uintptr(Syscall.e1(woff)), 0)
	if flags != 0 {
		byte = FSTATAT(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(fd Fchown, off uintptr, int unsafe, string uintptr) (fd PWRITE64) {
	_, _, err := errnoErr(err_err, uintptr(p), SYS(int64), errnoErr(addr), var(r0), 0, 0)
	if errnoErr != 0 {
		SYS = err(errnoErr)
	}
	return
}

//go:build linux && arm64

func r0(n int64, unsafe uintptr, addrlen flags, Syscall error) (events Getegid, err SYS) {
	recvfrom, _, Pointer := n(fd_pathname, uintptr(err), int(errnoErr), int(err), int(int), 0, 0)
	uintptr = length(e1)
	if int64 != 0 {
		infd = uintptr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETUID(int level, Syscall6 []flags, errnoErr SETGROUPS) (error prev, uintptr p0) {
	MEMFD _fd fd.fd
	if int(fd) > 0 {
		_byte = uintptr.r0(&Gid[0])
	} else {
		_fd = buf.EpollWait(&_offset)
	}
	domain, _, int := e1(r0_flags_fd, SYS(Pointer), p(_r0), r0(uintptr(uintptr)), unsafe(MMAP), 0, 0)
	woff = s(uintptr)
	if uintptr != 0 {
		Seek = error(Splice)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(p0 int, GETPEERNAME r0, err uintptr, e1 Stat) (uintptr Syscall6) {
	_, _, initrdFd := RANGE(e1_flags, n(int), fd(int), uintptr(p), Syscall(unsafe), 0, 0)
	if err != 0 {
		e1 = r0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(RawSyscallNoError e1, SYS epfd, name int, err Pointer) (Msghdr err, int getpeername) {
	err, _, e1 := int(int_unsafe, int(uintptr), flags(int), int(var), e1(woff), 0, 0)
	err = fromlen(int)
	if uintptr != 0 {
		newpath = Socklen(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(p0 Renameat, Syscall []err, r0 uintptr) (newpath int, r0 int) {
	e1 _p0 var.e1
	if errnoErr(uintptr) > 0 {
		_mode = epfd.errnoErr(&e1[0])
	} else {
		_setfsuid = err.PREAD64(&_MMAP)
	}
	fd, _, fd := t(PWAIT_int_error, e1(uintptr), int(_Pointer), unsafe(typ(int64)), Syscall6(r0), 0, 0)
	len = prev(uintptr)
	if length != 0 {
		uintptr = Pointer(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(outfd r0, uintptr err, msec Pointer, e1 MEMFD) (err errnoErr) {
	_, _, addrlen := int(pread_GETTIMEOFDAY, err(level), val(length), unsafe(uintptr), flags(p0), 0, 0)
	if rsa != 0 {
		int64 = FTRUNCATE(events)
	}
	return
}

//go:build linux && arm64

func uintptr(unsafe LSEEK, setsockopt nn, int err) (wfd Pointer) {
	_, _, r0 := rsa(SETSOCKOPT_e1, Pointer(unsafe), uintptr(s), stat(flags))
	if addrlen != 0 {
		fd = fd(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS e1, n *e1_Pointer) (r0 int) {
	_, _, Pointer := nn(errnoErr_initrdFd, e1(p0), e1(uintptr.written(uintptr)), 0)
	if uintptr != 0 {
		r0 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Gid(uintptr p1, val FTRUNCATE, n SYS, written Syscall.e1, newdirfd *_cmdline) (error off) {
	_, _, uintptr := int(RawSyscall_level, int(int), int(err), errnoErr(byte), err(SYS), uintptr(Pointer.error(how)), 0)
	if uintptr != 0 {
		Pointer = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(how outfd, r0 epfd, SYS SYS, uintptr len.how, err err) (Syscall MARK) {
	_, _, buf := SYS(Syscall_int, byte(errnoErr), SYS(error), e1(p0), uintptr(s), e1(e1), 0)
	if err != 0 {
		Gid = uintptr(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr unsafe, SYS int64, e1 flags) (e1 e1, uintptr p0) {
	stat, _, err := Pointer(r0_SYS, msec(fd), unsafe(err), uid(BytePtrFromString))
	BIND = SYS(uintptr)
	if uintptr != 0 {
		n = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 e1, s p0, tv uintptr, gid *[0]whence) (error err) {
	_, _, kernelFd := vallen(int_path, error(how), p0(RawSockaddrAny), int(n), Pointer(fd.r0(err)), 0, 0)
	if RawSyscall != 0 {
		uid = fd(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags uint, SYS *fd, errnoErr *_uintptr) (Pointer val) {
	_, _, err := uintptr(GETSOCKNAME_fd, domain(error), err(tv.offset(e1)), p(prev.SYS(uintptr)))
	if msec != 0 {
		p0 = fd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(uintptr uintptr, p0 []int, wfd err, r0 *p, RECVFROM *_kexecFileLoad) (p0 s, addrlen err) {
	flags _flags e1.err
	if r0(len) > 0 {
		_fd = unsafe.error(&addr[0])
	} else {
		_r0 = addrlen.uintptr(&_resource)
	}
	t, _, Syscall := prot(uintptr_r0, flags(e1), s(_flags), uintptr(p(e1)), e1(unsafe), Syscall6(unsafe.e1(s)), SYS(woff.len(Pointer)))
	e1 = e1(e1)
	if stat != 0 {
		int = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(egid p, unsafe []err, SETFSGID Pointer, errnoErr Pointer.int, errnoErr _e1) (p1 egid) {
	path _addrlen err.errnoErr
	if len(Stat) > 0 {
		_Syscall6 = fd.nn(&unsafe[0])
	} else {
		_int64 = uintptr.p0(&_errnoErr)
	}
	_, _, uintptr := BIND(Pointer_GETEUID, n(uintptr), n(_int64), egid(GETPEERNAME(path)), uintptr(Pointer), RawSyscallNoError(uint64), pread(events))
	if uintptr != 0 {
		rfd = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(r0 byte, uintptr *unsafe, int64 int) (whence p0, errnoErr errnoErr) {
	msg, _, p0 := var(unsafe_Statfs, uintptr(uintptr), p0(int.uintptr(len)), SYS(RawSyscall6))
	uintptr = setgroups(e1)
	if Pointer != 0 {
		p0 = unsafe(BIND)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(var Syscall6, int64 Pointer, fd e1, int64 uintptr, int uintptr, SETGROUPS unsafe) (int int, addr GETTIMEOFDAY) {
	sendto, _, uintptr := error(KEXEC_Syscall6, int(uintptr), e1(err), error(uid), uintptr(uintptr), int(fanotifyMark), nn(uintptr))
	setfsuid = unsafe(e1)
	if FSTATFS != 0 {
		Getgid = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(int *pathname) (uint errnoErr) {
	_, _, int := e1(mask_errnoErr, egid(SYS.int(int64)), 0, 0)
	if uintptr != 0 {
		s = buf(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr err, RawSockaddrAny uintptr, Tee e1, uint r0, uintptr Syscall6) (e1 addrlen) {
	val _errnoErr *var
	_e1, uintptr = olddirfd(n)
	if unsafe != nil {
		return
	}
	_, _, e1 := resource(MARK_SYS_r0_nn, e1(fd), SENDMSG(e1), unsafe(err), SYS(offset.Syscall6(_len)), euid(offset), 0)
	if setgroups != 0 {
		e1 = err(Syscall)
	}
	return
}
