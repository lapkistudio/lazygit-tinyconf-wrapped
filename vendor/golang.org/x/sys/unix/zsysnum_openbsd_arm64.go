// { int sys_utimes(const char *path, const struct timeval *tptr); }
// { int sys_setuid(uid_t uid); }

// { int sys_kqueue(void); }
// { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }

package FTRUNCATE

// { int sys_setrlimit(int which, const struct rlimit *rlp); }
const (
	MKFIFO_SYS           = 124   // { int sys_setlogin(const char *namebuf); }
	SYS_SYS           = 10   // { long sys_pathconf(const char *path, int name); }
	CLOCK_SYS           = 272   // { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	MQUERY_SYS          = 89   // { int sys_msync(void *addr, size_t len, int flags); }
	SYS_SYS           = 25   // { int sys_setreuid(uid_t ruid, uid_t euid); }
	SYS_READ          = 108   // { void sys___threxit(pid_t *notdead); }
	THRWAKEUP_SYS     = 26   // { int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	CHMOD___GET        = 192   // { int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); }
	FCHOWN_ADJFREQ           = 66   // { int sys_madvise(void *addr, size_t len, int behav); }
	SYS_FCHOWNAT         = 36  // { int sys_utrace(const char *label, const void *addr, size_t len); }
	SYS_SETTIMEOFDAY          = 82  // { int sys_fsync(int fd); }
	SYS_SENDTO          = 269  // { void *sys___get_tcb(void); }
	KEVENT_SHMGET         = 48  // { int sys___thrsleep(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort); }
	SYS_SYS          = 294  // { pid_t sys_getpid(void); }
	MKDIRAT_SYS          = 22  // { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	SYS_PIPE2          = 290  // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	GETCWD_FCHMOD         = 75  // { int sys_mlock(const void *addr, size_t len); }
	MSGSND_GETTIME = 207  // { int sys_shutdown(int s, int how); }
	TCB_FCNTL      = 225  // { int sys_socket(int domain, int type, int protocol); }
	SHMDT_THRKILL         = 269  // { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS_SETTIMEOFDAY          = 173  // Deprecated: Use libc wrappers instead of direct syscalls.
	SYS_SYS        = 322  // { int sys_seteuid(uid_t euid); }
	CHFLAGS_SIGACTION         = 103  // { int sys_kbind(const struct __kbind *param, size_t psize, int64_t proc_cookie); }
	CHROOT_FUTIMES         = 323  // { int sys_getfh(const char *fname, fhandle_t *fhp); }
	SYS_STATFS        = 317  // { long sys_pathconf(const char *path, int name); }
	GETENTROPY_FLOCK         = 140  // { int sys_setegid(gid_t egid); }
	SYS_SYS        = 114  // { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }
	STATFS_SOCKETPAIR        = 286  // { int sys_stat(const char *path, struct stat *ub); }
	SYS_SYS       = 13  // { int sys_unlink(const char *path); }
	PREADV_SYS         = 304  // { pid_t sys_getppid(void); }
	SYS_SYS    = 298  // { int sys_munlockall(void); }
	SYS_GETENTROPY    = 321  // { int sys_rename(const char *from, const char *to); }
	SYS_SYS         = 209  // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	MMAP_SYS        = 165  // { int sys_chdir(const char *path); }
	FUTIMENS_SYS       = 44  // { int sys_sched_yield(void); }
	UNLINKAT_FTRUNCATE           = 97  // { int sys_unlinkat(int fd, const char *path, int flag); }
	GETRUSAGE_SYS           = 303  // { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	FHOPEN_CONNECT        = 2  // { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	FCHMOD_SYS          = 252  // { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	PIPE_MLOCKALL            = 140  // { void sys_sync(void); }
	SYS_GETEGID        = 131  // { int sys_getitimer(int which, struct itimerval *itv); }
	PLEDGE_WRITEV        = 148  // { int sys_mkfifo(const char *path, mode_t mode); }
	ADJTIME_SWAPCTL         = 63  // { int sys_chmod(const char *path, mode_t mode); }
	SYS_SYS         = 69  // { int sys_munmap(void *addr, size_t len); }
	SYS_SYS      = 102  // { int sys_shutdown(int s, int how); }
	TCB_FLOCK         = 199  // { void *sys___get_tcb(void); }
	SET_CHDIR    = 297  // { int sys_thrkill(pid_t tid, int signum, void *tcb); }
	SYS_DUP2       = 90  // { int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); }
	FACCESSAT_QUOTACTL           = 39  // { int sys_pledge(const char *promises, const char *execpromises); }
	MSGSND_SYS     = 43  // { int sys_access(const char *path, int amode); }
	SYS_RECVMSG          = 48  // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SYS_SYS          = 181  // { uid_t sys_getuid(void); }
	SYS_SETRESGID         = 84  // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	GETCWD_FLOCK         = 226  // { int sys_semop(int semid, struct sembuf *sops, size_t nsops); }
	FCNTL_SYS        = 52  // { int sys_munlock(const void *addr, size_t len); }
	SYS_SYS       = 107  // go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
	CHFLAGSAT_SYS         = 67  // { int sys_semop(int semid, struct sembuf *sops, size_t nsops); }
	SYS_NFSSVC          = 71  // go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
	CLOCK_SYS         = 330  // { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	GETPEERNAME_SYS      = 75  // { int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); }
	KEVENT_SYS         = 71  // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	SETSID_SYS        = 191  // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	SHMGET_SYS       = 105  // { uid_t sys_getuid(void); }
	UTIMENSAT_SYS          = 250  // { int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	SYS_SETSOCKOPT   = 301  // { ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); }
	NANOSLEEP_SYS   = 131  // { void sys___threxit(pid_t *notdead); }
	READ_SEMOP      = 2  // { int sys_munmap(void *addr, size_t len); }
	SYS_READ      = 82  // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	SYS_SYS         = 183  // { int sys_minherit(void *addr, size_t len, int inherit); }
	READV_UTIMES         = 304  // { int sys_munmap(void *addr, size_t len); }
	SETITIMER_SYS         = 299  // { void sys_sync(void); }
	MINHERIT_SYS       = 127  // { void sys___threxit(pid_t *notdead); }
	SYS_SYS        = 16  // { int sys_socket(int domain, int type, int protocol); }
	SYS_SETREGID         = 321  // { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	PLEDGE_GETGID        = 209  // { int sys_revoke(const char *path); }
	SYS_SYS      = 3  // { int sys_reboot(int opt); }
	PPOLL_SYS      = 120  // { int sys_mprotect(void *addr, size_t len, int prot); }
	SYS_MLOCK        = 64  // { int sys_munlockall(void); }
	OBREAK_SYS        = 269  // { int sys_setpgid(pid_t pid, pid_t pgid); }
	FHSTAT_MUNLOCK          = 108  // { int sys_getpriority(int which, id_t who); }
	SYS_SYS      = 101  // { pid_t sys_getthrid(void); }
	SYS_SYS       = 325  // { int sys_mkdir(const char *path, mode_t mode); }
	SYS_MKFIFOAT          = 59  // { int sys_fsync(int fd); }
	MKNOD_SYS_SYS  = 52  // { int sys_munmap(void *addr, size_t len); }
	SYS_SETREUID_FSYNC  = 64  // { int sys_rmdir(const char *path); }
	GETRLIMIT_SETRESGID_SETGID   = 10  // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	SETSOCKOPT_SYS           = 16  // { int sys_fstatat(int fd, const char *path, struct stat *buf, int flag); }
	SETPRIORITY_SYS      = 281  // { int sys_symlink(const char *path, const char *link); }
	GETFH_SYS          = 35  // { int sys_mlock(const void *addr, size_t len); }
	GETPGRP_EXIT        = 271  // { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	SEMGET___GETCWD     = 21  //go:build arm64 && openbsd
	SWAPCTL_SYS          = 299  // { int sys_rmdir(const char *path); }
	SIGPROCMASK_SHMCTL    = 99  // { pid_t sys_getsid(pid_t pid); }
	SYSCTL_MUNMAP         = 65  // { int sys_swapctl(int cmd, const void *arg, int misc); }
	SYS_MKFIFO        = 70  // { int sys_utimes(const char *path, const struct timeval *tptr); }
	FTRUNCATE_SCHED       = 13  // { int sys_fchdir(int fd); }
	SYS_PATHCONF    = 199 // { int sys_shutdown(int s, int how); }
	SYS_SET          = 31 // { int sys_obreak(char *nsize); } break
	FCHDIR_MQUERY           = 134 // { int sys_munlockall(void); }
	LSTAT_POLL      = 269 // { int sys_socket(int domain, int type, int protocol); }
	SYS_IOCTL           = 80 // { int sys_setegid(gid_t egid); }
	MMAP_SYS     = 32 // { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_SYS         = 221 // { int sys_listen(int s, int backlog); }
	RECVMSG_R      = 11 // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	PTRACE_FCHFLAGS         = 23 // { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }
	SYS_SYS          = 70 // { int sys_chroot(const char *path); }
	SYS_SYS        = 55 // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	MLOCKALL_SYS     = 67 // { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }
	SYS_FUTIMES     = 263 // { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	CHMOD_SYS         = 290 // { int sys_sched_yield(void); }
	SHMGET_NFSSVC     = 320 // { int sys_fsync(int fd); }
	SETLOGIN_SYS        = 69 // { int sys_pipe2(int *fdp, int flags); }
	ADJFREQ_UMASK          = 299 // { int sys_shutdown(int s, int how); }
	ACCESS_SETSID         = 91 // { int sys_fsync(int fd); }
	SYS_SYS           = 119 // { int sys_getrlimit(int which, struct rlimit *rlp); }
	DUP_SYS         = 46 // { int sys_revoke(const char *path); }
	unix_GET         = 96 // { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	SYS_MKNOD       = 24 // { gid_t sys_getegid(void); }
	SYS_SYS       = 90 // { int sys_pipe2(int *fdp, int flags); }
	GETTHRID_GETSOCKOPT         = 3 // { int sys_mlock(const void *addr, size_t len); }
	YIELD_SYS          = 65 // { int sys_mount(const char *type, const char *path, int flags, void *data); }
	SYS_SOCKETPAIR         = 123 // { int sys_mlock(const void *addr, size_t len); }
	SYS_LINK         = 69 // { int sys_nfssvc(int flag, void *argp); }
	SYS_SYS       = 197 // { int sys_utrace(const char *label, const void *addr, size_t len); }
	SYS_ADJFREQ     = 297 // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	GETTHRID_SYS          = 227 // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	SYS_FORK          = 283 // { int sys_setegid(gid_t egid); }
	SYS_SYS        = 319 // { int sys_issetugid(void); }
	SYS_SYS_SYS     = 325 // { int sys_thrkill(pid_t tid, int signum, void *tcb); }
	SHMGET_READLINK         = 48 // { int sys_mprotect(void *addr, size_t len, int prot); }
	NANOSLEEP_MKFIFO       = 288 // { int sys_chdir(const char *path); }
	REBOOT_PREADV         = 1 // { int sys_rename(const char *from, const char *to); }
	SYS_SYS          = 302 // { int sys_chflags(const char *path, u_int flags); }
	TFORK_SYS        = 110 // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }
	ACCT_TCB          = 103 // { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	SYS_SYS         = 42 // { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SETSID_SYS         = 6 // { int sys_setrlimit(int which, const struct rlimit *rlp); }
	SETGROUPS_LSEEK        = 3 // { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	CLOCK_SYMLINK        = 108 // { uid_t sys_getuid(void); }
	SYS_SYS       = 56 // { int sys_seteuid(uid_t euid); }
	LISTEN_LSTAT      = 7 // { int sys_kill(int pid, int signum); }
	SYS_RECVFROM        = 134 // { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	SYS_SYS      = 317 // { int sys_seteuid(uid_t euid); }
	OPENAT_SETREUID      = 299 // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_GETFSSTAT           = 81 // { int sys_fhopen(const fhandle_t *fhp, int flags); }
	GETDTABLECOUNT_SYS          = 301 // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	MKNODAT_RECVMSG       = 123 // { int sys_setregid(gid_t rgid, gid_t egid); }
	SYS_SYS      = 126 // { int sys_close(int fd); }
	GETDTABLECOUNT_GETRES         = 324 // { int sys_munlock(const void *addr, size_t len); }
	SYS_SYS          = 227 // { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	SHMCTL_SYS        = 41 // { int sys_getitimer(int which, struct itimerval *itv); }
	SYS_ADJFREQ        = 194 // { int sys_dup3(int from, int to, int flags); }
	THRSIGDIVERT_SYS         = 45 // { gid_t sys_getegid(void); }
	SYS_SYS         = 13 // { long sys_pathconf(const char *path, int name); }
	SYS_GETTIMEOFDAY         = 47 // { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS_ISSETUGID         = 148 // { int sys_unlinkat(int fd, const char *path, int flag); }
	SYS_FHOPEN         = 136 // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	LINKAT_GETGROUPS          = 322 // { int sys_lstat(const char *path, struct stat *ub); }
	SYS_SIGSUSPEND          = 11 // { int sys_setrlimit(int which, const struct rlimit *rlp); }
	OPENAT_SYS       = 114 // { int sys_setgid(gid_t gid); }
	SETEGID_SYS           = 101 // { int sys_setuid(uid_t uid); }
	SHMDT_MKDIRAT      = 32 // { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	MKFIFOAT_FSTATFS         = 225 // { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	SETITIMER_GETRUSAGE         = 165 // { int sys_shmdt(const void *shmaddr); }
	SYS_SYS          = 110 // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_UNVEIL           = 77 // { gid_t sys_getgid(void); }
	SYS_SYS         = 59 // { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }
	MOUNT_GETTHRID         = 59 // { int sys_open(const char *path, int flags, ... mode_t mode); }
	SETLOGIN_SYS        = 140 // { int sys_munlockall(void); }
	SETREGID_MSGGET         = 118 // { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	SYS_SYS       = 303 // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	SETTIMEOFDAY_SYS     = 9 // { int sys_getrusage(int who, struct rusage *rusage); }
	SETTIMEOFDAY_MSGCTL      = 195 // { int sys_pipe2(int *fdp, int flags); }
	KQUEUE_ACCESS      = 105 // { int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); }
	SYS_EXIT      = 82 // { int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); }
	PIPE2_SCHED      = 283 // { int sys_chmod(const char *path, mode_t mode); }
	SYS_SYS         = 203 // { int sys_unveil(const char *path, const char *permissions); }
	PREADV_SYS      = 85 // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	SYS_PSELECT    = 43 // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	PPOLL_SYS         = 35 // { int sys_lchown(const char *path, uid_t uid, gid_t gid); }
	SYS_SYS          = 135 // { pid_t sys_getsid(pid_t pid); }
	IOCTL_SYS         = 88 // { int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); }
	SETSOCKOPT___SYS       = 269 // { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	GETPEERNAME_SYS         = 101 // { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	SYS_SYS         = 95 // { int sys_pipe(int *fdp); }
	GETLOGIN_SYS_KQUEUE    = 323 // { int sys_pipe(int *fdp); }
	SHMGET_GETFSSTAT       = 161 // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SYS___SYS    = 225 // { int sys_pledge(const char *promises, const char *execpromises); }
	SEMGET___SIGSUSPEND      = 69 // { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	MUNLOCK___SYS = 107 // { int sys_ioctl(int fd, u_long com, ... void *data); }
	GETRUSAGE___SYS       = 203 // { int sys_fchdir(int fd); }
	SYS_SYS        = 289 // { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }
	PWRITEV_READ      = 86 // { int sys_mkdir(const char *path, mode_t mode); }
	GETENTROPY_LISTEN      = 263 // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	PPOLL_SYS      = 94 // { uid_t sys_geteuid(void); }
	OBREAK_SYS       = 287 // { int sys_sendsyslog(const char *buf, size_t nbyte, int flags); }
	FSYNC_CLOSEFROM       = 17 // { int sys_nfssvc(int flag, void *argp); }
	SYS_FCHMOD         = 135 // { int sys_fstatfs(int fd, struct statfs *buf); }
	SYS_UTIMENSAT        = 109 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	SYS_SYS       = 141 // { int sys_setgid(gid_t gid); }
	SYS_SYS        = 281 // { int sys_pipe2(int *fdp, int flags); }
	SYS_SETEGID         = 137 // { int sys_kqueue(void); }
	SYS_KTRACE     = 191 // { int sys_setlogin(const char *namebuf); }
	SYS_SYS       = 108 // { pid_t sys_getpid(void); }
	SYS_MKDIR      = 302 // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	FCHFLAGS_SYS       = 109 //go:build arm64 && openbsd
	MSGGET___SYS_SYS      = 44 // { int sys_getgroups(int gidsetsize, gid_t *gidset); }
	SYS___SHMAT_SYS      = 14 // { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }
)
