// { int kldload(const char *file); }
// { pid_t getpid(void); }

// { ssize_t readlink(char *path, char *buf, size_t count); }
// { int lchmod(char *path, mode_t mode); }

package GETPEERNAME

const (
	// { int ksem_timedwait(semid_t id, const struct timespec *abstime); }
	JAIL_SYS                     = 505   // { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }
	MUNLOCKALL_GETAFFINITY                     = 303   // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	SYS_SYS                     = 495   // { int vfork(void); }
	SYS_SYS                    = 314   // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	LINK_SYS                    = 80   // { int rename(char *from, char *to); }
	PIPE2_SETUGID                     = 547   // { int bind(int s, caddr_t name, int namelen); }
	EXTATTR_SET                   = 23  // { int posix_openpt(int flags); }
	SIGQUEUE_EACCESS                    = 86  // { int modstat(int modid, struct module_stat* stat); }
	ADDR_CPUSET                   = 490  // { int socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_SYS                    = 450  // { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }
	SYS_SYS                  = 334  // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	RFORK_SYS                   = 531  // { int rename(char *from, char *to); }
	SCHED_SYS                   = 349  // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int
	SYS_CLOSEFROM                 = 462  // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	AUDITON_ACL                  = 400  // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
	SYS_SYS                  = 461  // { int umask(int newmask); }
	SYS_SETGROUPS                = 128  // { int madvise(void *addr, size_t len, int behav); }
	SYS_KLDNEXT                = 412  // { int sstk(int incr); }
	SYS_SYS                  = 506  // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	SYS_MKFIFOAT                  = 304  // { int fchmod(int fd, int mode); }
	OPENAT_SYS                = 525  // { pid_t getppid(void); }
	KILL2_LINK                = 519  // { int nfssvc(int flag, caddr_t argp); }
	MAC_LGETFH                  = 155  // { int jail_attach(int jid); }
	SET_SYS                  = 357  // { int futimesat(int fd, char *path, struct timeval *times); }
	SYS_RACCT                = 372  // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	SCTP_EXTATTR                   = 481  // { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }
	PRIORITY_ACL                = 352  // { int semget(key_t key, int nsems, int semflg); }
	SYS_OPEN            = 148  // { int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); }
	ADDR_IOCTLS                     = 138  // { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }
	SYS_SYS                    = 222  // { int munlock(const void *addr, size_t len); }
	OPEN_PDGETPID                   = 523  // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
	FSYNC_SYS                    = 403  // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
	FEXECVE_JAIL                   = 305  // { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }
	SYS_CAP                    = 547  // { int ksem_unlink(const char *name); }
	SYS_SYS                    = 209  // { ssize_t getdirentries(int fd, char *buf, size_t count, off_t *basep); }
	KSEM_GETAUID                    = 311  // { int socketpair(int domain, int type, int protocol, int *rsv); }
	CAP_SYS                    = 191  // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	CAP_SYS                    = 476  // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	SYS_EXTATTR                    = 235  // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_SYS                     = 413  // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
	SET_OPEN                     = 411  // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_GETAUDIT                   = 120  // { int recvmsg(int s, struct msghdr *msg, int flags); }
	SIGWAIT_SETAFFINITY                 = 276  // { int kqueue(void); }
	SYS_SENDTO                 = 254  // { int kmq_unlink(const char *path); }
	PDFORK_SYS                     = 538  // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	SIGACTION_GET                     = 401  // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	UTIMES_SYS                   = 543  // { int getdtablesize(void); }
	SYS_SYS                 = 359  // { caddr_t break(char *nsize); }
	GETLOGINCLASS_SET                  = 570  // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_MAC                  = 457  // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }
	KLDNEXT_SYS                 = 31  // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	KSEM_SYS                     = 241  // { int undelete(char *path); }
	SYS_ATTACH                     = 539  // { int sigreturn(const struct __ucontext *sigcntxp); }
	SYS_SYS                   = 507  // { int thr_kill(long id, int sig); }
	PID_MINCORE                 = 160  // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	SYS_FD                  = 554  // { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }
	SYS_SYS                  = 311  // { int setloginclass(const char *namebuf); }
	NMOUNT_SYS                = 316  // { int vfork(void); }
	SYS_SYS                = 393  // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
	GETRESUID_SYS                  = 147  // { int setegid(gid_t egid); }
	UNLINK_SYS                  = 491  // { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }
	SYS_SCHED                 = 192  // { int reboot(int opt); }
	CPUSET_ADJTIME                   = 416  // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	GETDOMAIN_SET                    = 191  // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SYS_FILE                    = 555  // { int socket(int domain, int type, int protocol); }
	SYS_GET                   = 51  // { int pdgetpid(int fd, pid_t *pidp); }
	SYS_CPUSET                   = 80  // { uid_t geteuid(void); }
	SYS_RULE                   = 471  // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	KLDFIRSTMOD_SETTIME                   = 95  // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_FCNTL                   = 9  // { int getlogin(char *namebuf, u_int namelen); }
	SYS_AUDITCTL                  = 503  // { int __mac_set_fd(int fd, struct mac *mac_p); }
	LUTIMES_UNLINK                 = 248  // { uid_t getuid(void); }
	SYS_LCHMOD                   = 315  // { int kenv(int what, const char *name, char *value, int len); }
	SYS_SYS                    = 123  // { int getfh(char *fname, struct fhandle *fhp); }
	SYS_SYS                  = 227  // { uid_t getuid(void); }
	FD_ADDR                   = 98  // { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	THR_SYS                   = 97  // { off_t lseek(int fd, off_t offset, int whence); }
	FD_MODNEXT                  = 118  // { gid_t getegid(void); }
	EXTATTR_CREATE                  = 225  // { int __mac_set_fd(int fd, struct mac *mac_p); }
	FHSTAT_CAP                 = 254  // { int access(char *path, int amode); }
	SYS_SYS                     = 340  // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	GETPRIORITY_KTIMER                     = 388  // { int __mac_set_file(const char *path_p, struct mac *mac_p); }
	SYS_THR                   = 526  // { int modstat(int modid, struct module_stat* stat); }
	SYS_SYS                 = 496  // { int rmdir(char *path); }
	READLINKAT_SYS                  = 69  // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	AIO_ACL                  = 230  // { int setcontext(const struct __ucontext *ucp); }
	RECVMSG_FILE                = 209  // { int getcontext(struct __ucontext *ucp); }
	SYS_GETCWD                = 166  // { int getlogin(char *namebuf, u_int namelen); }
	KLDFIRSTMOD_GETGID                  = 166  // { int execve(char *fname, char **argv, char **envv); }
	GET_SYS                  = 253  // { int reboot(int opt); }
	MKDIRAT_SYS                 = 236  // { int fpathconf(int fd, int name); }
	SYS_READLINK                   = 276  // { int ksem_trywait(semid_t id); }
	REMOVE_SYS                    = 176  // { int chflags(const char *path, u_long flags); }
	NTP_SYS                    = 494  // { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }
	SYS_SYS                     = 57  // { int sched_get_priority_min (int policy); }
	SYS_SETEUID                     = 462  // { int open(char *path, int flags, int mode); }
	SYS_SCHED                   = 416  // { int fstatat(int fd, char *path, struct stat *buf, int flag); }
	AIO_EXTATTR                 = 314  // { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); }
	ACL_EXTATTR                  = 81  // { int unlink(char *path); }
	MODNEXT_SCTP                  = 441  // { int setaudit(struct auditinfo *auditinfo); }
	GET_SYSCTLBYNAME                = 315  // { int fstatfs(int fd, struct statfs *buf); }
	MAC_SYS                   = 45  // { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }
	KMQ_KILL2                = 539  // { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }
	SYS_KLDUNLOAD            = 448  // { int __mac_set_link(const char *path_p, struct mac *mac_p); }
	MKFIFO_SYMLINK                     = 306  // { int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); }
	SYS_POSIX                    = 50  // { int kldstat(int fileid, struct kld_file_stat *stat); }
	SYS_SYS                   = 539  // { int getsid(pid_t pid); }
	CREATE_SSTK                    = 544  // { int ktimer_getoverrun(int timerid); }
	RCTL_SYS                  = 552  // { int rmdir(char *path); }
	THR_SYS                   = 310  // { int ktimer_gettime(int timerid, struct itimerspec *value); }
	LINK_SYS                  = 550  // { caddr_t break(char *nsize); }
	VFORK_SYS                 = 495  // { int fcntl(int fd, int cmd, long arg); }
	ATTACH_SIGTIMEDWAIT                   = 494  // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	SYS_ACLCHECK              = 140  // { int socket(int domain, int type, int protocol); }
	THR_SYS              = 448  // { int msync(void *addr, size_t len, int flags); }
	FCNTL_KSEM                   = 524  // { int jail_remove(int jid); }
	FILE_SYS                  = 534  // { ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
	SYS_FILE              = 311 // { int modfnext(int modid); }
	SYS_MSYNC                     = 394 // { int sigsuspend(const sigset_t *sigmask); }
	READLINK_SETPARAM               = 334 // { int yield(void); }
	SYSCALL_RTPRIO                   = 404 // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_READLINK             = 75 // { int kldnext(int fileid); }
	SYS_SYS                = 332 // { int mkfifo(char *path, int mode); }
	ACCT_SCHED               = 124 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	MAC_GETAUDIT                    = 525 // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	CONNECTAT_SYS                   = 154 // { int chown(char *path, int uid, int gid); }
	LINK_ACL             = 148 // { int acct(char *path); }
	SYS_PRIORITY                   = 337 // { int ksem_close(semid_t id); }
	SYS_SYS                   = 394 // { int setegid(gid_t egid); }
	PID_LINK                 = 556 // { ssize_t read(int fd, void *buf, size_t nbyte); }
	SYS_SYS                 = 31 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	ACL_SYS                   = 203 // { ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_GETSID                    = 302 // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	SYS_KLDLOAD                  = 231 // { int cpuset(cpusetid_t *setid); }
	SETUID_GETRES                  = 480 // { int pdgetpid(int fd, pid_t *pidp); }
	THR_SYMLINKAT                 = 251 // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	SYS_SIGSUSPEND                = 206 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_FCHOWNAT                = 406 // { int posix_openpt(int flags); }
	SYS_SYS                = 527 // { int thr_self(long *id); }
	LIMIT___SYS                 = 538 // { int fpathconf(int fd, int name); }
	SEMGET_GETOVERRUN                    = 431 // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	ERROR_GET                  = 392 // { int __mac_get_fd(int fd, struct mac *mac_p); }
	FHREADLINK_SYS                   = 23 // { int semget(key_t key, int nsems, int semflg); }
	UTRACE_KSEM            = 413 // { int mincore(const void *addr, size_t len, char *vec); }
	STATFS_SYS                   = 346 // { int sysarch(int op, char *parms); }
	DELETE_RACCT                  = 329 // { int ffclock_getestimate(struct ffclock_estimate *cest); }
	READLINKAT_GET                = 155 // { int kldunloadf(int fileid, int flags); }
	SYS_LIST                 = 116 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }
	WAKE_SYS                  = 81 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_SYS                   = 442 // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
	ISSETUGID_SYS_SYS         = 390 // { ssize_t aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
	SYS_KLDSTAT_CPUSET         = 334 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SYS_CAP                = 414 // { int auditon(int cmd, void *data, u_int length); }
	SET_FFCLOCK                  = 518 // { int minherit(void *addr, size_t len, int inherit); }
	SYS_SETESTIMATE                   = 457 // { int fhlinkat(struct fhandle *fhp, int tofd, const char *to,); }
	GSSD_POSIX                 = 36 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	MINCORE_SHMCTL               = 238 // { int thr_suspend(const struct timespec *timeout); }
	SYS_SYS                    = 378 // { int cap_getmode(u_int *modep); }
	SYS_SYS                    = 509 // { int yield(void); }
	ERROR_SETAUID                   = 81 // { int setsid(void); }
	LIST_GET_SYS            = 16 // { int aio_mlock(struct aiocb *aiocbp); }
	SYS_DELETE_EXIT            = 21 // { int clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id); }
	SYS_PRIORITY_SYS             = 372 // { int mkdir(char *path, int mode); }
	SYS_SYS_SET            = 362 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS_CAP_SYSCTLBYNAME            = 414 // { int fchflags(int fd, u_long flags); }
	SYS_SYS_CHROOT           = 553 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
	MSGGET_FSTATFS_SYS           = 314 // { int sendmsg(int s, struct msghdr *msg, int flags); }
	POST_KLDLOAD_SYS        = 416 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
	LIMITS_SYS                = 483 // { pid_t getppid(void); }
	UUIDGEN_RIGHTS_SYS       = 417 // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	QUOTACTL_LCHFLAGS_OPEN      = 136 // { int __acl_delete_link(const char *path, acl_type_t type); }
	SYS_SYS_NAME      = 491 // { int kldload(const char *file); }
	SYS_SYS_THR          = 31 // { int unlink(char *path); }
	KMQ_SYS_SIGQUEUE     = 51 // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	SYS_SYS_SYS              = 515 // { int setauid(uid_t *auid); }
	GETPEERNAME_SYS                 = 33 // { int sstk(int incr); }
	FFCLOCK_PEELOFF                    = 98 // { int sched_get_priority_max (int policy); }
	SYS_SYS                = 274 // { off_t lseek(int fd, off_t offset, int whence); }
	SYS_KLDNEXT                   = 456 // { int getrusage(int who, struct rusage *rusage); }
	GETPRIORITY_SYS_EXIT                 = 126 // { int ksem_destroy(semid_t id); }
	SYS_SYS_SYS                = 554 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	CLOCK_SETRLIMIT_SYS               = 540 // { int getcontext(struct __ucontext *ucp); }
	SEMSYS_SYS                   = 328 // { int getcontext(struct __ucontext *ucp); }
	MSGSND_SYS                  = 95 // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
	SYS_SYS                  = 565 // { int chflags(const char *path, u_long flags); }
	FHREADLINK_READ                  = 524 // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	POSIX_SYS              = 537 // { int munmap(void *addr, size_t len); }
	SENDFILE_UNMOUNT                   = 83 // { gid_t getgid(void); }
	SYS_SYS                = 473 // { int futimesat(int fd, char *path, struct timeval *times); }
	SYS_SYS                = 57 // { int getauid(uid_t *auid); }
	SYS_SYS_SYS               = 247 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	SYS_AIO_MAC              = 352 // { int semsys(int which, int a2, int a3, int a4, int a5); }
	SYS_PEELOFF_GETRES               = 239 // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	THR_KLDFIND_SYS                = 416 // { int thr_kill2(pid_t pid, long id, int sig); }
	SYS_RIGHTS                    = 511 // { int lpathconf(char *path, int name); }
	SYS_KMQ                 = 486 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	GETPARAM_CAP               = 33 // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	YIELD___SUSPEND                 = 563 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
	FSTATAT_SYS_CLOCK           = 254 // { int setauid(uid_t *auid); }
	SYS_SYS_GETID           = 567 // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	SYS_LIST_GET       = 256 // { int __mac_set_fd(int fd, struct mac *mac_p); }
	GSSD_SYS_SYS       = 453 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	GETTIME_GETOVERRUN_STATFS              = 227 // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
	SIGALTSTACK_SYS_SYS_SYS_GETTIME   = 50 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	SHM_SYS_SYS_KMQ_SYS   = 544 // { int kenv(int what, const char *name, char *value, int len); }
	ACCEPT4_TIMEDRECEIVE_SYS_KLDLOAD_FILE    = 343 // { int socket(int domain, int type, int protocol); }
	SYS_SYS                   = 23 // { int dup(u_int fd); }
	SYS_REBOOT                   = 238 // { int audit(const void *record, u_int length); }
	UNLINK_SYS                     = 560 // { int cap_enter(void); }
	SYS_SYS              = 535 // { int getdtablesize(void); }
	SETRLIMIT_SYS               = 533 // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }
	SYS_SYS               = 350 // { int lpathconf(char *path, int name); }
	SYS_RETURN             = 95 // { int lpathconf(char *path, int name); }
	SYS_UMASK              = 406 // { int undelete(char *path); }
	SYS___PROFIL_SYS_ACL           = 5 // { int ksem_destroy(semid_t id); }
	SYS___GETVALUE_KMQ_SETTIME           = 436 // { int sched_get_priority_max (int policy); }
	POLL___LINK_SYS_SYS             = 131 // { int fpathconf(int fd, int name); }
	MKNODAT___SET_GETTIME_GETCPUCLOCKID2             = 448 // { int cpuset_setdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int policy); }
	CHFLAGSAT___GENERIC_SYS_EXTATTR        = 462 // { int fexecve(int fd, char **argv, char **envv); }
	NANOSLEEP___GETAUID_SYS_SYS          = 140 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS___MAC_SYS_FILE      = 86 // { int minherit(void *addr, size_t len, int inherit); }
	GETSOCKNAME___MKDIRAT_GETDOMAIN_SETSOCKOPT        = 327 // { int munlockall(void); }
	SENDMSG_THR               = 538 // { int ntp_adjtime(struct timex *tp); }
	SETPARAM_MSGSND_SYS_FCHDIR         = 248 // { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }
	SYS_PDFORK_SHMCTL_SYS         = 338 // { int thr_kill(long id, int sig); }
	ABORT2_DELETE_KSEM_SYS      = 49 // { int getcontext(struct __ucontext *ucp); }
	MODFIND_KSEM_SEMCTL         = 10 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS_SYS                = 332 // { int vfork(void); }
	SETAUID_SETPARAM                = 423 // { int fhlinkat(struct fhandle *fhp, int tofd, const char *to,); }
	MAC_EXECVE                   = 430 // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	MINHERIT_SYS_SCHED_FCHOWNAT           = 221 // { int acct(char *path); }
	KILL_JAIL_CAP_SIGPROCMASK           = 458 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	FORK_SYS_SYS_REVOKE        = 60 // { int jail(struct jail *jail); }
	GETFSSTAT___SYS                = 170 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	CONNECT_NFSSVC                  = 405 // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
	RECVFROM_VFORK                   = 22 // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	SYS___SYS_SYS_SYS           = 308 //go:build riscv64 && freebsd
	GET___KLDFIRSTMOD_WAKE_SYS           = 413 // { int eaccess(char *path, int amode); }
	SYS___SETLOGIN_FEXECVE_PEELOFF             = 407 // { int eaccess(char *path, int amode); }
	CANCEL___GETTIME_SYS_SYS           = 357 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	GETSOCKOPT_FCHMODAT                     = 438 // { int auditctl(char *path); }
	ACL_SYS                 = 355 // { ssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset); }
	READ_SYS                  = 15 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_FHLINKAT                  = 449 // { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	SETTIMEOFDAY_SYS                  = 437 // { int open(char *path, int flags, int mode); }
	SYS_KILL                 = 439 // { int ksem_init(semid_t *idp, unsigned int value); }
	THR_SYS                 = 337 // { int close_range(u_int lowfd, u_int highfd, int flags); }
	LPATHCONF_MKDIR_SYS            = 316 // { int revoke(char *path); }
	SYS_PREADV_SYS            = 298 // { int msync(void *addr, size_t len, int flags); }
	PID_SETRESGID                 = 534 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	FD__SYS_SYS                 = 191 // { int msgget(key_t key, int msgflg); }
	GETEGID_KSEM_SYS                  = 338 // { int getsid(pid_t pid); }
	FSYNC_SYS                 = 232 // { int modnext(int modid); }
	SYS_SYS_SELECT                 = 512 // { int nfssvc(int flag, caddr_t argp); }
	SYS_SYS_MMAP              = 315 // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
	ADDR_RIGHTS_SYS         = 85 // { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SENDTO_SYS_SYS            = 50 // { int shmget(key_t key, size_t size, int shmflg); }
	SIGWAITINFO_SYS_SYS               = 533 // { gid_t getgid(void); }
	MUNLOCK_SYS_UNLINKAT               = 392 // { int unmount(char *path, int flags); }
	SCHED_GETMODE                   = 523 // { int listen(int s, int backlog); }
	SYS_GET_CANCEL_READ             = 409 // { int statfs(char *path, struct statfs *buf); }
	SYS_SCTP_EXTATTR                = 205 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	SYSCALL_REBOOT_SYS            = 524 // { int thr_set_name(long id, const char *name); }
	SYS_CPUSET_SYS             = 409 // { int undelete(char *path); }
	SYS_SYS_ACL_GETAUDIT     = 147 // { int sendmsg(int s, struct msghdr *msg, int flags); }
	RCTL_SYS_SYS_SYS_SYS = 298 // { int fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize); }
	SYS_SYNC_FUTIMESAT_SYS     = 463 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
	SCTP_SYS                    = 54 // { int setfib(int fibnum); }
	READV_SETSCHEDULER                   = 465 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
	IOCTLS_SYS                     = 494 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	GETRESUID_LIMIT              = 360 // { int truncate(char *path, off_t length); }
	TIMEDSEND_SYS               = 476 // { int rename(char *from, char *to); }
	SUSPEND_GETCPUCLOCKID2               = 137 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	GET_CHMOD             = 473 // { int chown(char *path, int uid, int gid); }
	EXECVE_EXIT              = 401 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	KLDLOAD___UTIMENSAT_SYS_KILL           = 312 // { int getloginclass(char *namebuf, size_t namelen); }
	SYS___PROFIL_EXTATTR_SYS           = 443 // { int kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
	SIGPROCMASK___SYS_SYS_SETUID             = 555 // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
	SCHED___SYS_SYS_SYS             = 155 // { off_t lseek(int fd, off_t offset, int whence); }
	SYS___CPUSET_SYS_CAP        = 61 // { int fstatfs(int fd, struct statfs *buf); }
	SYS___KLDUNLOAD_DELETE_GETFH          = 472 // { int chmod(char *path, int mode); }
	PRIORITY___WAIT_GETPARAM_SYS      = 391 // { int mkdir(char *path, int mode); }
	SYS___GENERIC_CLOSE_SYS        = 356 // { int kldnext(int fileid); }
	GETTIMEOFDAY_GET               = 515 // { int posix_fallocate(int fd, off_t offset, off_t len); }
	SET_SCHED_CPUSET_FHREADLINK         = 421 // { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	FD_SYS_SYS_SYS         = 237 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	FD_SYNC_EXTATTR_ACL      = 32 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_FSTATFS_SYS         = 57 // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }
	SYS_GETSID                = 300 // { int shm_open(const char *path, int flags, mode_t mode); }
	KSEM_SYS                = 79 // { ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_SYS                   = 207 // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
	AIO_FD_LINK_SYS           = 148 // { int fpathconf(int fd, int name); }
	MAC_SYS_SYS_SETPGID           = 305 // { int pdgetpid(int fd, pid_t *pidp); }
	SYS_SYS_JAIL_GETRUSAGE        = 81 // { int ioctl(int fd, u_long com, caddr_t data); }
	GETRESUID___LINK                = 430 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_SYS                  = 89 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	SYS_SYS                   = 552 // { int __acl_delete_file(const char *path, acl_type_t type); }
	SYS___GET_SYS_PDGETPID           = 384 // { int kenv(int what, const char *name, char *value, int len); }
	SYS___SYS_WAKE_SYS           = 241 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS___SYS_CONNECT_SET             = 504 // { int execve(char *fname, char **argv, char **envv); }
	SYS___ACL_SYS_SYS             = 437 // { int setreuid(int ruid, int euid); }
	AIO___ADDR_SYS_SYS        = 384 // { int ksem_wait(semid_t id); }
	SYS___SELF_SYS_UNMOUNT          = 462 // { int undelete(char *path); }
	SYS___KLDFIND_CAP_SYS      = 537 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
	SYS___SYS_SCTP_SYS        = 374 // { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); }
	SYSCTL_SYS               = 192 // { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }
	SYS_SETESTIMATE_SYS_SYS         = 506 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	GETPGRP_SYS_ACL_SYS         = 388 // { int unlink(char *path); }
	SYS_READV_LGETFH_SYS      = 155 // { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	FD_SYS_LPATHCONF         = 557 // { pid_t getppid(void); }
	SYS_NEW                = 463 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }
	SYS_SET                = 181 // { int sched_getscheduler (pid_t pid); }
	LCHFLAGS_SYS                   = 140 // { int lio_listio(int mode, struct aiocb* const *acb_list, int nent, struct sigevent *sig); }
	GETESTIMATE_KMQ_AIO_EXTATTR           = 447 // { ssize_t aio_return(struct aiocb *aiocbp); }
	SYS_POLL_CAP_SYS           = 170 // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	ADD_GETSID_SYS_LISTEN        = 550 // { ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); }
	SYS___CLOCK                = 482 // { int semget(key_t key, int nsems, int semflg); }
	SYS_SYS                  = 235 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SYS                   = 446 // { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	SYS___SYS_SYS_SETID           = 566 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS___GETITIMER_SYS_MAC           = 334 // { int __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	SYS___SYS_MSGSND_GETITIMER             = 226 // { ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS___SYS_GETTIMEOFDAY_SETCONTEXT             = 35 // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	MSGSYS___RMDIR_AUDITCTL_GETID        = 27 // { int symlink(char *path, char *link); }
	SYS___CAP_SUSPEND_SYS          = 564 // { uid_t getuid(void); }
	FCNTL___SYS_DELETE_SSTK      = 360 // { int fchownat(int fd, char *path, uid_t uid, gid_t gid, int flag); }
	SHMCTL___KLDUNLOADF_RECVFROM_DUP        = 98 // { int __getcwd(char *buf, size_t buflen); }
	GETSOCKNAME_SYS               = 321 // { int sigwait(const sigset_t *set, int *sig); }
	EXTATTR_FD_ACCESS_FD         = 169 // { int sigpending(sigset_t *set); }
	KLDUNLOADF_CPUSET_SYS_REMOVE         = 175 // { int __setugid(int flag); }
	SYS_SYS_SYS_SYS      = 511 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	KTRACE_SYS_SYS         = 24 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	SYS_SYS                = 302 // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	SYS_FALLOCATE                = 542 // { int sbrk(int incr); }
	SYS_OPENPT                   = 93 // { int fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize); }
	SETSCHEDULER_RIGHTS_FILE_IOCTLS           = 492 // { int sync(void); }
	SYS_SYS_SYS_TRUNCATE           = 524 // { int chroot(char *path); }
	MODSTAT_RIGHTS_SYS_SYS        = 427 // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }
	PWRITEV___SYS                = 474 //go:build riscv64 && freebsd
	SYSCTLBYNAME_SYS                  = 566 // { int jail(struct jail *jail); }
	MMAP_SYS                   = 92 // { int fstatat(int fd, char *path, struct stat *buf, int flag); }
	SYS___SYS_MSYNC_WAIT6           = 523 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS___SYS_REBOOT_MOUNT           = 93 // { int sigwaitinfo(const sigset_t *set, siginfo_t *info); }
	DELETE___FORK_WAKE_SIGRETURN             = 422 // { int setgid(gid_t gid); }
	SIGSUSPEND___SYS_GETAUID_SYS             = 248 // { ssize_t extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SETSOCKOPT___SYS_SYS_SETITIMER        = 430 // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	SYS___SYS_KSEM_WAIT4          = 300 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	SYS___SET_GETDOMAIN_FHSTATFS      = 515 // { int munlock(const void *addr, size_t len); }
	DELETE___KLDSTAT_GET_SYS        = 308 // { int openat(int fd, char *path, int flag, mode_t mode); }
	SYS_GET               = 298 // { int msync(void *addr, size_t len, int flags); }
	SET_SYS_RCTL_SYS         = 243 // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	SYS_SYS_SYS_RFORK         = 460 // { int fhlink(struct fhandle *fhp, const char *to); }
	SCTP_SYS_SYS_THR      = 499 // { int unlink(char *path); }
	SYS_SYS_SYS         = 360 // { int shm_unlink(const char *path); }
	SYS_SET                = 166 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	JAIL_SYS                = 9 // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	GETITIMER_PATHCONF                   = 557 // { int undelete(char *path); }
	SYS_FCHFLAGS_SHMGET_SYS           = 490 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }
	PRIORITY_FD_SYS_UUIDGEN           = 424 // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYMLINK_GETCPUCLOCKID2_CAP_SHM        = 60 // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	FCHMOD___SYS                = 552 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	GETPRIORITY_SYS                  = 34 // { int kldstat(int fileid, struct kld_file_stat *stat); }
	CLOSEFROM_FHLINKAT                   = 134 // { int ktimer_delete(int timerid); }
	DUP___GETEUID_SIGPENDING_UNLINK           = 428 // +build riscv64,freebsd
	SYS___SCHED_SYS_KENV           = 542 // { int closefrom(int lowfd); }
	GET___SYS_GET_SYS             = 128 // { int sigreturn(const struct __ucontext *sigcntxp); }
	KMQ___AIO_LIO_MLOCK           = 439 // { off_t lseek(int fd, off_t offset, int whence); }
	FILE___SYSCALL_POLL_SYS             = 236 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	SYS___NEW_ACLCHECK_SYS           = 532 // { int lchown(char *path, int uid, int gid); }
	SYS_SETRLIMIT                     = 314 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
	MODFNEXT_GET                 = 518 // { int semsys(int which, int a2, int a3, int a4, int a5); }
	ADDR_SYS                  = 412 // { int modnext(int modid); }
	SYS_SYS                  = 492 // { int connectat(int fd, int s, caddr_t name, int namelen); }
	LINK_SYS                 = 490 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	SYS_SYS                  = 312 // { int nfssvc(int flag, caddr_t argp); }
	EXTATTR_SHMDT                  = 553 // { int fhlink(struct fhandle *fhp, const char *to); }
	SYS_LINK                = 124 // { int setfib(int fibnum); }
	RECVFROM_FSTAT                  = 236 // { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }
	SYS_SYS                  = 45 // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	NANOSLEEP_SYS                  = 183 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	AIO_RECVFROM              = 57 // { int lchmod(char *path, mode_t mode); }
	PATHCONF_SYS                   = 324 // { int sendmsg(int s, struct msghdr *msg, int flags); }
	SYS_SETITIMER                = 21 // { int link(char *path, char *link); }
	SCHED_SEMOP                = 492 // { int posix_fallocate(int fd, off_t offset, off_t len); }
	