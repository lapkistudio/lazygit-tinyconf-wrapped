// { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
// { int rfork(int flags); }

// { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr *from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); }
// { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }

package SYS

const (
	// { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
	SYS_SYS        = 481 // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }
	SYS_SYS              = 466  // { ssize_t readlink(char *path, char *buf, size_t count); }
	SYS_STATFS                       = 542 // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }
	SYS_SCHED_FHSTAT_ABORT2         = 95 // { int close_range(u_int lowfd, u_int highfd, int flags); }
	SYS_SYS_SYS_GETOVERRUN                    = 89 // { void thr_exit(long *state); }
	GETPPID_SYS_MINCORE                                 = 501 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
	MSYNC_MKFIFOAT_GENERIC                         = 475 // { int ktimer_gettime(int timerid, struct itimerspec *value); }
	SET___SYS_SETAUID_SYS                          = 496 // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
	SETSID_THR            = 298 // { int sbrk(int incr); }
	SYS_CPUSET             = 133 // { int ksem_getvalue(semid_t id, int *val); }
	FD_LIST_MAC_SYS            = 195 // { int lio_listio(int mode, struct aiocb* const *acb_list, int nent, struct sigevent *sig); }
	SELECT_SYS        = 298 // { ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS___RECVMSG_SYS_SYS                 = 327 // { int shm_unlink(const char *path); }
	GETGID_ACL            = 332  // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }
	SYS_SYS          = 53 // { int mkfifo(char *path, int mode); }
	SYS___SETPGID_SYS_SYS                           = 70  // { int statfs(char *path, struct statfs *buf); }
	SYS_SETCONTEXT                  = 181 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }
	SET_OPEN_SYS           = 253  // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	KLDNEXT_SYS           = 508 // { int nfssvc(int flag, caddr_t argp); }
	FFCLOCK_SYS_CLOSE               = 29 // { int chflags(const char *path, u_long flags); }
	SYS_SIGALTSTACK        = 372 // { int chflags(const char *path, u_long flags); }
	KTIMER_MODFIND           = 476 // { int futimens(int fd, struct timespec *times); }
	SYS_SYS                 = 484 // { int rmdir(char *path); }
	SYS_SETUGID          = 203 // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	SYS_SYS              = 476 // { int getitimer(u_int which, struct itimerval *itv); }
	IOCTLS_NANOSLEEP          = 255 // { int getsid(pid_t pid); }
	SYS_SHMGET                                                = 430 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	GETPID_KLDSTAT_CPUSET                = 148 // { int setaudit(struct auditinfo *auditinfo); }
	WRITE_JAIL           = 505 // { int thr_kill2(pid_t pid, long id, int sig); }
	UNLINK_TIMEDSEND         = 471 // { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }
	SETPARAM_SYS          = 538 // { int thr_kill2(pid_t pid, long id, int sig); }
	SYS_GETRUSAGE_SETAUDIT      = 83 // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SETSID_MAC               = 354 // { int shutdown(int s, int how); }
	CLOCK___SYS_SYS_KTIMER        = 538 // { int fdatasync(int fd); }
	FD_SYS                = 70 // { int setfib(int fibnum); }
	SYS_SYS_GETCOUNTER_CONNECT                          = 479  // { int sigsuspend(const sigset_t *sigmask); }
	CAP_LUTIMES                           = 195 // { int futimesat(int fd, char *path, struct timeval *times); }
	SET___SYS_CPUSET_WRITEV                = 238 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	SET_SYS_GETTIME                              = 353   // { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	SYS_SYS                = 465 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	GETGROUPS_SETPRIORITY         = 80 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	SIGWAIT_CONNECTAT            = 195 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }
	LUTIMES___KLDFIND_YIELD_SYS                    = 482 // { int nfssvc(int flag, caddr_t argp); }
	CLOCK___KSEM       = 357  // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	SYS_SYS                                    = 332 // { int setcontext(const struct __ucontext *ucp); }
	SYS_PREADV_GET          = 518 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }
	SYS__SYS_SYS     = 529 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	GENERIC_SYS_SHMSYS             = 3 // { int setpriority(int which, int who, int prio); }
	IOCTLS_SETATTR         = 343  // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	ACL_SYS          = 25 // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SYS_KLDFIND_SYS_FHLINKAT_OPEN             = 374 // { int pdgetpid(int fd, pid_t *pidp); }
	THR_SETSID_CLOSE        = 276 // { ssize_t readlinkat(int fd, char *path, char *buf, size_t bufsize); }
	GETTIMEOFDAY_GETFSSTAT            = 60 // { int sigqueue(pid_t pid, int signum, void *value); }
	FHLINK_SYS         = 433 // { int setfib(int fibnum); }
	CHFLAGS_SYS               = 41 // { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	LIST_ADD_UMTX          = 195  // { int aio_read(struct aiocb *aiocbp); }
	EXTATTR_PROFIL           = 402 // { ssize_t readlinkat(int fd, char *path, char *buf, size_t bufsize); }
	SYS_GETLOGIN                      = 29 // { int fhlinkat(struct fhandle *fhp, int tofd, const char *to,); }
	SYS_SYS                  = 351 // { int lchown(char *path, int uid, int gid); }
	SYS_SET           = 565  // { int revoke(char *path); }
	SCTP_SYS            = 348 // { int thr_new(struct thr_param *param, int param_size); }
	NLM_FD             = 504 // { int rfork(int flags); }
	SETRLIMIT_SYS_ATTACH_LGETFH         = 491 // { int lutimes(char *path, struct timeval *tptr); }
	SYS_THR             = 458 // { int swapoff(const char *name); }
	KTRACE_SYS                     = 248 // { int sigpending(sigset_t *set); }
	SYS_SYS        = 307 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	UNDELETE_SELF                    = 122  // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
	SYS_SYS        = 310 // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	EXTATTR_READ                   = 137 // { void sys_exit(int rval); } exit sys_exit_args void
	GETPID___CONNECTAT_WRITE_GETPID                             = 34  // { int sigqueue(pid_t pid, int signum, void *value); }
	SYS_SETLOGINCLASS           = 515 // { int utimes(char *path, struct timeval *tptr); }
	KILL_SYS                                     = 276 // { int connectat(int fd, int s, caddr_t name, int namelen); }
	CLOCK_ACL         = 5 // { int kmq_notify(int mqd, const struct sigevent *sigev); }
	SETAUDIT_FILE         = 484 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	ENTER_MODFIND             = 298 // { int kldstat(int fileid, struct kld_file_stat *stat); }
	SYS___SYS_REVOKE_SYS                              = 559 // { int kldload(const char *file); }
	LIMIT_GET_SYS         = 560 // { int auditctl(char *path); }
	CAP_YIELD_CLOCK                                    = 123 // +build riscv64,freebsd
	SYS_KLDFIND        = 332 // { int setloginclass(const char *namebuf); }
	LIMIT___SYS_SYS_SYS                          = 175 // { int kill(int pid, int signum); }
	SYS___SYS_SYS_MAC      = 530 // { int nfssvc(int flag, caddr_t argp); }
	GETFSSTAT_SYS           = 431 // { int setfib(int fibnum); }
	SYS_READLINKAT_SETEUID        = 44 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SET_GETUID                 = 570 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	MAC_CPUSET             = 507 // { int abort2(const char *why, int nargs, void **args); }
	FCNTLS_SYS           = 340  // { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }
	SYS_SYS              = 337 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_OPEN_OPENAT         = 351 // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	PDGETPID_MAX                           = 61 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }
	CLOCK_SYS_MINHERIT              = 384 // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	INIT_RECVMSG_KLDSTAT_SIGACTION             = 356 // { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	RECVFROM_SET        = 89  // { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_SYS           = 12 // { int fhlink(struct fhandle *fhp, const char *to); }
	ACL_AUDITCTL_CPUSET                     = 31 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
	SYS_SYS_CLOCK        = 562 // { int setpriority(int which, int who, int prio); }
	SYS_SYS                        = 43 // { int fdatasync(int fd); }
	ACCEPT4_CPUSET                  = 226 // { int sched_getscheduler (pid_t pid); }
	FCNTL_SYS           = 349 // { int semop(int semid, struct sembuf *sops, size_t nsops); }
	FD_SET_FSYNC_SIGRETURN = 330 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
	RULES___SYS_SYS_CAP           = 406 // { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_SYS_GENERIC   = 386 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	GET_CAP                         = 452 // +build riscv64,freebsd
	SYS_UNLINK         = 554 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	LCHFLAGS_SYS_SYS        = 391 // { int nfssvc(int flag, caddr_t argp); }
	SYS_SYS                     = 21 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
	SYSCALL_CPUSET        = 516 // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	PWRITEV_LIO                  = 54 // { int setpriority(int which, int who, int prio); }
	KLDLOAD_SYS                        = 427 // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	CAP_SET_UTIMENSAT_JAIL                    = 547  // { int getitimer(u_int which, struct itimerval *itv); }
	SETRESUID_SEMCTL                = 131  // { int chflags(const char *path, u_long flags); }
	EXTATTR_RECVMSG                   = 507 // { int cpuset(cpusetid_t *setid); }
	SYS_GETDOMAIN               = 488 // { int aio_error(struct aiocb *aiocbp); }
	SYS_OP          = 392 // { int lchflags(const char *path, u_long flags); }
	SYS_SYS         = 452  // { int mac_syscall(const char *policy, int call, void *arg); }
	SYS_SCTP         = 544 // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
	GET_SYS           = 459 // { int kldunloadf(int fileid, int flags); }
	SYS_UTIMES         = 148  // { pid_t getppid(void); }
	GETPEERNAME_SYS               = 494 // { int symlink(char *path, char *link); }
	LCHMOD_SYS         = 133  // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
	SYS_EXTATTR         = 234   // { int procctl(idtype_t idtype, id_t id, int com, void *data); }
	CAP_FCHDIR          = 207 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
	CLOCK_SYS      = 243 // { int setregid(int rgid, int egid); }
	SYS_PREADV_SYS_MSGRCV             = 409 // { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	SET_SOCKETPAIR_TIMEDRECEIVE_GETPGID                   = 489 // { int aio_mlock(struct aiocb *aiocbp); }
	KQUEUE_SYS                  = 298  // { int chflags(const char *path, u_long flags); }
	ADJTIME_SETEGID                       = 244 // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	CONNECTAT_LINK_ACCESS_SYS                    = 41 // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	SYS_SYS                     = 505 // { int ftruncate(int fd, off_t length); }
	FSTAT_GET           = 536 // { pid_t getppid(void); }
	ACLCHECK_GETPGRP_SYS   = 518 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SOCKETPAIR_SETID         = 154   // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	SYS_WRITE        = 61 // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
	SYS___EXTATTRCTL_SYS_RANGE        = 499 // { int jail(struct jail *jail); }
	MLOCKALL_SYS          = 232 // { int unlinkat(int fd, char *path, int flag); }
	SYS_CONNECTAT                 = 446 // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
	RENAMEAT___SYS_SYS_GETSID             = 290 // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
	FD_SYS_CAP            = 49 // { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }
	MKDIR_GETTIMEOFDAY        = 410  // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	SYS_POSIX                                = 23 // { int utrace(const void *addr, size_t len); }
	GETTIME_SUSPEND                                       = 444 // { int chflags(const char *path, u_long flags); }
	FCHMODAT_SYS_RIGHTS         = 552 // { int __acl_delete_fd(int filedes, acl_type_t type); }
	ADD_GETSOCKNAME                       = 541 // { int modnext(int modid); }
	GET_SET_GETSOCKNAME         = 502 // { int lchown(char *path, int uid, int gid); }
	FUTIMENS_GET_SET               = 176 // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	FILE_IOCTLS             = 513 // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
	SYS_SYS_KSEM                     = 423 // { int lutimes(char *path, struct timeval *tptr); }
	SYS_GETUID_DELETE                 = 69 // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	GETSOCKNAME___BREAK_GETSOCKOPT_SYS    = 105 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	QUOTACTL_SYS                = 348 // { int setaudit(struct auditinfo *auditinfo); }
	SYS_SYS         = 228   // { ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
	PREADV_SYS             = 333 // { int pdgetpid(int fd, pid_t *pidp); }
	MINCORE_SYS                                      = 422 // { int audit(const void *record, u_int length); }
	SYS_THR            = 473 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	FFCLOCK_GETLOGIN_MMAP       = 57 // { ssize_t write(int fd, const void *buf, size_t nbyte); }
	GET_MKDIRAT         = 501 // { int shmget(key_t key, size_t size, int shmflg); }
	SYS_SYS_MAC           = 227 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	RTPRIO_POSIX                       = 466 // { int setpriority(int which, int who, int prio); }
	SYS_FILE                             = 15 // { int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); }
	CLOSE_SYS           = 290 // { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }
	FD_SYS_CAP_PWRITE                              = 181 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
	PWRITEV_SYS_GETPEERNAME              = 4 // { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }
	KMQ_IOCTL_RCTL                    = 422 // { int kldunloadf(int fileid, int flags); }
	SYS_SET_KLDFIND_SYS          = 300 // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SYS_SEMOP        = 522 // { int shm_unlink(const char *path); }
	LPATHCONF_SYS        = 312 // { int execve(char *fname, char **argv, char **envv); }
	SYS_CLOSE            = 24 // { int ntp_adjtime(struct timex *tp); }
	SYS_SYS           = 290 // { int rmdir(char *path); }
	SETSOCKOPT___SYS                = 563  // { int fsync(int fd); }
	GETAUDIT_RACCT                                       = 523 // { int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	KLDSTAT_EXTATTR               = 351  // { int swapoff(const char *name); }
	SYS_SYS                   = 510 // { int lchflags(const char *path, u_long flags); }
	OP_SYS_ACL    = 161 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	PROCCTL_SIGALTSTACK_SYS_MUNLOCKALL                 = 65 // { int ktimer_getoverrun(int timerid); }
	SYS_SYS_SYS                    = 55 // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	SYS_SYS                                     = 456 // { int thr_wake(long id); }
	SYS___SYS_FHREADLINK_ACL                 = 425 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SYS_FCHMODAT_MKFIFO_NTP               = 391  // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	SYS_SET        = 316  // { int flock(int fd, int how); }
	SYS_SYS             = 455 // { int chdir(char *path); }
	GET_KMQ       = 437 // { int kmq_notify(int mqd, const struct sigevent *sigev); }
	CAP_KMQ_SYS                                                                   = 507 // { gid_t getgid(void); }
	FD_UNDELETE                           = 359 // { int rfork(int flags); }
	RCTL_GETPARAM               = 160 // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	SYS_SYS          = 41 // { int madvise(void *addr, size_t len, int behav); }
	SYS_NLM_KTRACE        = 474 // { int futimens(int fd, struct timespec *times); }
	SYS_SYS            = 36  // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_SET           = 137 // { int truncate(char *path, off_t length); }
	ISSETUGID_RETURN              = 512 // { ssize_t read(int fd, void *buf, size_t nbyte); }
	SYS_SYS                              = 459 // { int getlogin(char *namebuf, u_int namelen); }
	EACCESS_SEMGET                                   = 1 // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_GETAUID_LIST_ACLCHECK           = 491  // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SCHED_SYS                      = 330 // { int utrace(const void *addr, size_t len); }
	PRIORITY___SYS_SYS_SYS            = 30   // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	GETPEERNAME_UTIMES        = 533 // { gid_t getegid(void); }
	CPUSET_SYSCALL_KMQ            = 53  // { int close(int fd); }
	GETRLIMIT_GETPPID         = 306 // { int setlogin(char *namebuf); }
	LUTIMES_LIMITS          = 487 // { int vfork(void); }
	FILE_RULE_SYS               = 500 // { int setegid(gid_t egid); }
	SYS_SYS_SYS          = 407  // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
	FCHOWN_SYS                            = 194 // { int rfork(int flags); }
	SYS___SYS                                            = 123 // { int lutimes(char *path, struct timeval *tptr); }
	SYS_POSIX                = 161 // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	READ_SYS_SYS_SYS                               = 352 // { int __mac_get_fd(int fd, struct mac *mac_p); }
	MUNLOCK_SYS                    = 309 // { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); }
	SYS_SYS_KILL_SYS                                     = 307   // { int fsync(int fd); }
	SBRK_LIST            = 510 // { int ktimer_delete(int timerid); }
	RECVMSG_FD_SYS_SETESTIMATE                             = 464 // { int yield(void); }
	SYS___FSTAT_RACCT_SETSID            = 449 // { int setreuid(int ruid, int euid); }
	WRITEV_MAC                                   = 567  // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SENDFILE_FHLINKAT        = 24 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
	SYS_PPOLL_SYS                        = 124 // { int setregid(int rgid, int egid); }
	SYS_SYS                         = 226 // { int revoke(char *path); }
	KMQ___GETCONTEXT_UUIDGEN_DELETE                 = 6 // { int dup2(u_int from, u_int to); }
	SYS_GET                          = 465 // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	GETAUDIT_FTRUNCATE             = 456 // { int thr_kill2(pid_t pid, long id, int sig); }
	MODNEXT_MAC             = 147 // { uid_t geteuid(void); }
	PREADV_CPUSET                           = 461 // { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	SYS_SYS         = 500  // { int bind(int s, caddr_t name, int namelen); }
	FILE_LCHFLAGS                              = 169 // { void sys_exit(int rval); } exit sys_exit_args void
	SYS_SYS              = 523  // { int aio_write(struct aiocb *aiocbp); }
	KLDSTAT_SYS                 = 22 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	KSEM_SYS_CAP                = 497 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	ACL_SYS       = 485 // { int auditon(int cmd, void *data, u_int length); }
	SYS_SENDFILE                   = 556 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	UNDELETE_SYS_SYS_SYS         = 232 // { int getaudit(struct auditinfo *auditinfo); }
	SYS_SYS           = 407 // { int sched_yield (void); }
	RENAME___SIGACTION         = 407  // { int unlink(char *path); }
	SYS_INIT           = 507 // { ssize_t read(int fd, void *buf, size_t nbyte); }
	GETRESUID_GETSID     = 480 // { int chflags(const char *path, u_long flags); }
	KMQ___INTERVAL_SET_KILL               = 98 // { int getitimer(u_int which, struct itimerval *itv); }
	UTIMENSAT_ACCEPT4               = 50 // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	SYS_SYS           = 343 // { int munlockall(void); }
	SYS_SYS             = 451 // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
	SYS_SYS                        = 561 // { uid_t getuid(void); }
	FILE_SYS        = 429 // { int unlinkat(int fd, char *path, int flag); }
	AIO_MSGSND      = 78  // { int chown(char *path, int uid, int gid); }
	KQUEUE_SETAFFINITY                         = 388 // { int getitimer(u_int which, struct itimerval *itv); }
	SYS_SYS                       = 392 // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }
	SYS_SYS_LIMIT_EXECVE                  = 290 // { int sched_getparam (pid_t pid, struct sched_param *param); }
	SETCONTEXT_SYS                               = 73 // { int shm_unlink(const char *path); }
	MAC_ADDR         = 70 // { int ksem_close(semid_t id); }
	THR_FHSTAT_CAP_SYNC               = 345 // { int auditctl(char *path); }
	MAC___MAC            = 456 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_KMQ_SYS_SETRLIMIT             = 250 // { int modfind(const char *name); }
	PROC_ERROR                   = 311 // { int sched_get_priority_max (int policy); }
	SYS_KLDSYM               = 325 // { int shmat(int shmid, const void *shmaddr, int shmflg); }
	SYS_SYS                 = 496  // { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }
	PDKILL_SYS        = 126 // { int chflags(const char *path, u_long flags); }
	SYS_KLDUNLOADF                            = 232 // { int getitimer(u_int which, struct itimerval *itv); }
	MSGCTL_SYS_SYS                   = 565 // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	KLDLOAD_SYS_GETPID                          = 276 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	MSGGET_EXTATTR                 = 349 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	SYS_SYS_NTP        = 433  // { int setsid(void); }
	SYS_SYS                   = 132 // { ssize_t extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_KLDFIND         = 474  // { int munmap(void *addr, size_t len); }
	SETREUID_SYS             = 25 // { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }
	ACCT_CONNECTAT                               = 444 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	SYS_SCHED                                  = 410 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	MAC_CAP_LPATHCONF                          = 20 // { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }
	SYS_SYS                    = 45 // { int getcontext(struct __ucontext *ucp); }
	SYS_SYS                 = 457 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
	SYS_SYS            = 250 // { int kmq_timedreceive(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }
	SYS_EXTATTR_SYS                   = 496 // { int ntp_adjtime(struct timex *tp); }
	SYS_SYS           = 82 // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
	SENDFILE_SYS        = 464 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }
	SYS_UMASK                 = 324 // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
	NOTIFY_SETLOGINCLASS_SYS             = 343 // { int kldnext(int fileid); }
	SYS_SCHED                       = 447 // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
	GETITIMER_KMQ_FDATASYNC        = 59 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }
	SYS_YIELD                  = 128 // { int getpgid(pid_t pid); }
	KILL_SYS              = 532 // { int openat(int fd, char *path, int flag, mode_t mode); }
	SYS_ADD       = 182 // { int sysarch(int op, char *parms); }
	FADVISE_SETFIB_LIO                       = 391 // { int thr_kill2(pid_t pid, long id, int sig); }
	PRIORITY_ENTER          = 32 // { int setpriority(int which, int who, int prio); }
	SIGALTSTACK___SYS_SYS_REBOOT          = 226 // { int kldnext(int fileid); }
	SYS_SENDMSG_GETOVERRUN        = 253 // { int getauid(uid_t *auid); }
	MSYNC_SYS                  = 328 // { ssize_t aio_return(struct aiocb *aiocbp); }
	SYS_SYS              = 51 // { int kldunload(int fileid); }
	SYS_SYS_MSGCTL_SYS_KLDUNLOADF           = 345 // { int fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize); }
	SYS_SIGPENDING            = 120 // { int __acl_delete_file(const char *path, acl_type_t type); }
	SYS_SELECT_UNLINK         = 561 // { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }
	GETDIRENTRIES_VFORK           = 349  // { int sigreturn(const struct __ucontext *sigcntxp); }
	SYS_GET                = 559 // { int pipe2(int *fildes, int flags); }
	GET_SYS_SYS           = 424 // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	YIELD_SYS                                = 240 // { int minherit(void *addr, size_t len, int inherit); }
	SYS_GET           = 131 // { int sstk(int incr); }
	FDATASYNC___LINK                     = 204 // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	SYS___SYS_UTRACE                 = 44 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	SYS_SYS                 = 437 // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SYS___SYS_UTIMES_SYS                          = 222 // { int aio_fsync(int op, struct aiocb *aiocbp); }
	MKDIR___PRIORITY_SYS_BINDAT           = 303  // { int ffclock_getcounter(ffcounter *ffcount); }
	GETLOGIN_SOCKET                             = 117 // +build riscv64,freebsd
	EXTATTR_SYS            = 385  // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	POSIX_SHMDT           = 488 // { int aio_read(struct aiocb *aiocbp); }
	SYS_LINK          = 387 // { int thr_wake(long id); }
	KSEM_PEELOFF_SYS                        = 471 // { int setpriority(int which, int who, int prio); }
	ATTACH_SYS_SYS          = 317 // { int getpgrp(void); }
	GETDTABLESIZE_SYS_GETPPID_MKDIRAT         = 6  // { int munlock(const void *addr, size_t len); }
	RCTL_THR      = 234 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	FCHMODAT_REMOVE                    = 231 // { int undelete(char *path); }
	SYS_LINK                                                   = 422 // { int sigqueue(pid_t pid, int signum, void *value); }
	SOCKET_SYS_SYS         = 15 // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	CPUSET_SYS_SYS         = 485 // { int sched_get_priority_min (int policy); }
	SCHED_SYS_FILE                       = 23  // { int setauid(uid_t *auid); }
	ERROR_MINCORE            = 154 // { int fork(void); }
	SETTIMEOFDAY_SHMDT       = 538 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	GET_GET_CPUSET_SYS_THR                         = 227 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }
	FDATASYNC_GET_ACLCHECK             = 513 // { int sigsuspend(const sigset_t *sigmask); }
	FSYNC_SYS           = 405 // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
	GET_SYS                      = 33 // { int dup2(u_int from, u_int to); }
	SYS_SYS_SYS_OPEN            = 542 // { int munlock(const void *addr, size_t len); }
	SYS_SENDMSG        = 135 // { int kmq_notify(int mqd, const struct sigevent *sigev); }
	SYS_SYS             = 36 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
	CLOSE_GETTIME_MINCORE_MUNLOCKALL_AIO         = 86  // { int ffclock_getestimate(struct ffclock_estimate *cest); }
	PID_GETTIME         = 328  // go run mksysnum.go https://cgit.freebsd.org/src/plain/sys/kern/syscalls.master?h=stable/12
	SYS_SYS     = 5 // { int acct(char *path); }
	MPROTECT_EXTATTR                       = 486 // { int getrusage(int who, struct rusage *rusage); }
	SYS_SYS                          = 57 // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	FILE___SYS_SCHED_SYS         = 192  // { int pdfork(int *fdp, int flags); }
	POSIX_SHM                 = 253 // { int kmq_setattr(int mqd, const struct mq_attr *attr, struct mq_attr *oattr); }
	SYS_AIO                                = 60 // { int ksem_post(semid_t id); }
	SYS_SIGTIMEDWAIT              = 304 // { int getpgid(pid_t pid); }
	SYS___NAME_SELECT_SYS        = 26 // { int mkfifoat(int fd, char *path, mode_t mode); }
	SSTK_FD_MAC                  = 575 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_JAIL                   = 390 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	MAC___KSEM_AIO_RMDIR                    = 122  // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	AIO_FILE        = 534  // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
	SYS_SYS          = 475 // { int kill(int pid, int signum); }
	SYS_ACL_SYS       = 510 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_FD          = 26 // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	PROFIL_FCHDIR_SYS                     = 530 // { int setuid(uid_t uid); }
	FEXECVE___DELETE_SYS_SYS           = 321 // { int setsid(void); }
	GETPEERNAME_SYS             = 540 // { int pdfork(int *fdp, int flags); }
	SYS___POSIX         = 543 // { int revoke(char *path); }
	SYS_RFORK_SCTP               = 346 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS_PTRACE             = 306 // { gid_t getegid(void); }
	SYS_SYS                   = 31 // { int getpgrp(void); }
	NANOSLEEP_SYS                 = 1 // { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }
	GET_SYS               = 450 // { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }
	SYS_PTRACE            = 221 // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	SYS_SYS               = 372 // { gid_t getegid(void); }
	SYS_SENDMSG          = 82 // { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }
	KQUEUE_GETTIME                                                = 386 // { int aio_write(struct aiocb *aiocbp); }
	SYS_FCHFLAGS           = 503 // { ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
	SYS_GET_WAIT4       = 494 // { int listen(int s, int backlog); }
	KMQ_ACL_SYS_SYS                = 465 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	SYS_FCHFLAGS_LIMITS        = 476  // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_SYS               = 346 // { uid_t geteuid(void); }
	GET_GETAUDIT_EXTATTR         = 479 // { int fcntl(int fd, int cmd, long arg); }
	SYS_SWAPON_FILE            = 544 // { int ksem_getvalue(semid_t id, int *val); }
	KMQ___GETDTABLESIZE         = 575  // { int shmdt(const void *shmaddr); }
	MUNLOCK_SYS                  = 542 // { int undelete(char *path); }
	SYS_SYS               = 305 // { int audit(const void *record, u_int length); }
	SYS_MAC      = 228 // { int setreuid(int ruid, int euid); }
	NANOSLEEP_LIST_MUNLOCKALL                  = 303 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	UNLINK_SYS_SYS                      = 3  // { int getdtablesize(void); }
	READ_SYS                       = 423  // { int ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid); }
	SYS_KTIMER                    = 329 // { int ksem_trywait(semid_t id); }
	SYSCALL_LINK                  = 352 // { int getpgrp(void); }
	SYSCALL_CLOCK         = 457 // { int ntp_adjtime(struct timex *tp); }
	SYS_SET        = 407  // { int fchdir(int fd); }
	SYS_READ                           = 333 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	AIO_SYS         = 449 // { int fstatfs(int fd, struct statfs *buf); }
	RTPRIO_MSYNC_FCHOWNAT                 = 480 // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
	STATFS_SYS       = 502 // { int setauid(uid_t *auid); }
	SYS_YIELD                                         = 73 // { int rename(char *from, char *to); }
	SYS_SYMLINKAT_SYS           = 49 // { uid_t geteuid(void); }
	SYS_SYS          = 331 // { int sstk(int incr); }
	GETMODE_RANGE_FILE_PTRACE         = 33 // { int yield(void); }
	SYS___SYS_SYS_EXECVE             = 121  // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	ERROR_CHOWN                           = 222 // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
	FCHMOD_SYS             = 137 // { int madvise(void *addr, size_t len, int behav); }
	EXTATTR_CPUSET          = 194 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }
	SYS_FILE              = 45   // { int ksem_destroy(semid_t id); }
	INTERVAL_MAC                   = 169 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	PREADV_SET_MKDIR        = 36 // { int listen(int s, int backlog); }
	SYS_GETDOMAIN                      = 542 // { int fexecve(int fd, char **argv, char **envv); }
	SYS_THREAD_CPUSET      = 93 // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
	GETFH_SYS                = 475 // { int getitimer(u_int which, struct itimerval *itv); }
	GET_VFORK                    = 123 // { int execve(char *fname, char **argv, char **envv); }
	SYS_SYS_GETDTABLESIZE         = 175 // { int getpgid(pid_t pid); }
	FSYNC_EXTATTR_ACLCHECK                                  = 20 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
