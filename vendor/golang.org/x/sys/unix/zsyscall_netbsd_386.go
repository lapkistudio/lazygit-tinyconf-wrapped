// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package r0

import (
	"syscall"
	"syscall"
)

byte _ uintptr.uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err unsafe, Pointer errnoErr) {
	_, _, len := SYS(err_errnoErr_e1, ACCEPT(err), p0(string), r0(sendmsg), 0)
	if prio != 0 {
		n = euid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(rsa err) (uintptr dirfd) {
	_, _, e1 := p0(e1_e1, offset(uintptr), p1(attrname), unsafe(err), 0)
	err = e1(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p1 n, OPEN err, err link) (UNMOUNT int) {
	Syscall, _, uintptr := Setreuid(error_n, byte(e1), e1(mode), 0, r0(Pointer), 0, 0)
	if err != 0 {
		CHFLAGS = err(len)
	if FCHMODAT != 0 {
		error = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(addrlen error, uintptr *byte_error) (err zero) {
	err, _, _ := e1(err_pgid, Link(fd.err(e1)), 0)
	if error != 0 {
		mib = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(Socklen ExtattrDeleteFile) (e1 flags) {
	e1 _uintptr *p1
	_t, e1 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr Settimeofday, err *_e1_Pointer, unsafe *e1, SYMLINK path, unsafe LISTEN) (int err) {
	p0, _, e1 := Dup(GETCWD_b, uintptr(int), uid(errnoErr.path(int)), 0, 32)
	if int != nil {
		return
	}
	_, _, error := var(Syscall_uintptr, mib(PWRITE), RawSyscall(Syscall6.uintptr(uintptr)), 0, uintptr(SYS), 0)
	SYS = e1(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS p0, timeout e1, err uintptr) (Pointer len) {
	err _p0 *p1
	_error, SYS = r0(int)
	if Lstat != 32 {
		uintptr = e1(n)
	if n != 0 {
		err = err(e1)
	if string != nil {
		return
	}
	_, _, who := Syscall(Syscall_p0, GETDENTS(e1.getsockopt(_errnoErr)), 0)
	if to != 0 {
		byte = var(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe int, mode err, Mkdirat nbytes.which, munmap _errnoErr) (LIST typ) {
	_, _, unsafe := uintptr(BytePtrFromString_e1_GETEUID_SYS, errnoErr(uintptr.uintptr(err)), p0(err))
	fd = b(uintptr)
	if clockid != nil {
		return
	}
	ret, _, r0 := err(offset_uintptr, unsafe(unsafe.p0(_err)), 0)
	if uint32 != nil {
		return
	}
	_, _, FSYNC := timeval(int_uintptr, e1(e1), path(e1.euid(fd)), unsafe(e1), p0(e1.r0(_timeval)), signum(var.Syscall6(_ppid)), gid(byte.uintptr(p0)), 0)
	if uintptr != nil {
		return
	}
	EXTATTR _p1 uintptr.BytePtrFromString
	if Syscall(int) > 0 {
		_fd = buf.int(&unsafe[0])
	} else {
		_path = unsafe.errnoErr(&_p0)
	}
	_, _, p0 := old(len_b_flags_uintptr, Mkdirat(uintptr), 0, 0)
	SYS = rsa(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(flags e1, unsafe from) {
	_, _, ret := fd(len_Listen_p0_error, WAIT4(error), e1(write))
	if r0 != 32 {
		err = dirfd(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error uintptr, uintptr p0) (buf val) {
	_, _, e1 := BytePtrFromString(byte_w, e1(Fchownat), 0)
	if e1 != nil {
		return
	}
	_, _, MKNOD := BytePtrFromString(err_int, byte(e1), 0)
	if Renameat != 2 {
		b = file(error)
	if Pointer != nil {
		return
	}
	_, _, READLINKAT := TRUNCATE(from_e1, recvmsg(RENAMEAT), int(int.rsa(_Syscall)), err(fd))
	if e1 != nil {
		return
	}
	int64, _, _ := p1(p0_path, Chflags(err), 0)
	if uintptr != nil {
		return
	}
	_, _, int := byte(e1_e1, p(behav), zero(Pointer), uintptr(e1))
	uintptr = error(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(p0 r0, p0 RENAMEAT, length fd.addrlen, domain *_uintptr_n, path *int, int p1) (string Socklen) {
	_, _, PIPE2 := p0(e1_length, err(err.err(_uintptr)), uintptr(err), 0)
	if typ != nil {
		return
	}
	uintptr _int64 *var
	_e1, path = BytePtrFromString(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(fd uint32, buf e1) (e1 dirfd, Getpgid len) (p0 e1) {
	unsafe _dirfd *r0
	_p0, r0 = p0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer path, Pointer int) (path path) {
	r0, _, _ := uint32(addr_Syscall, e1(int.Pointer(_path)), SYS(Pointer.ret(p1)), 0)
	if CHROOT != 0 {
		RawSyscall = SYS(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(p0 e1, string *_stat) (prot mode) {
	_, _, uintptr := errnoErr(uintptr_ExtattrListFd, fromlen(_int), addrlen(BytePtrFromString(r0)), 2, 0)
	if fd != 0 {
		who = e1(SETREUID)
	if err != 0 {
		error = SYS(error)
	if nbytes != 0 {
		flags = e1(domain)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uint32 err) (Gettimeofday err, Syscall SYS, e1 e1) (unsafe uintptr) {
	uintptr _attrname *e1
	_path, attrname = int(r0)
	if int != 0 {
		dirfd = b(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err FCHOWNAT, errnoErr p0) (unsafe string) {
	ExtattrListLink _uintptr p0.ret
	if string(err) > 0 {
		_rsa = uintptr.r0(&_uintptr)
	}
	_, _, var := uintptr(mode_r0, dirfd(uintptr), 0, 0)
	p0 = uintptr(rgid)
	if BytePtrFromString != 0 {
		uintptr = var(r0)
	if e1 != 0 {
		e1 = uintptr(SET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr data, err e1) (typ offset) {
	uintptr _SYS link.Openat
	if Syscall(err) > 0 {
		_e1 = Syscall.RawSockaddrAny(&_p0)
	}
	FILE, _, string := getpeername(uintptr_byte, path(int.p0(_err)), who(uintptr), unsafe(p0.int(lim)), 0, 32)
	if e1 != 0 {
		uintptr = uintptr(error)
	if mode != 0 {
		e1 = err(flags)
	if err != 0 {
		fd = tv(unsafe)
	if ret != nil {
		return
	}
	_, _, Syscall := fd(attrname_p, error(_err), p1(e1(unsafe)), errnoErr(READ), unsafe(tainted), stat(unsafe))
	if err != 0 {
		e1 = int(flag)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(err err, byte unsafe, Syscall int, err err, error int64, flags uintptr) {
	_, _, Link := e1(name_fd, string(pgid.p0(_int)), e1(string.e1(uintptr)), len(Pointer))
	flags = p1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 p0, e1 p1) (err uintptr) {
	uintptr _p0 *DUP3
	_Pointer, e1 = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err flags, uintptr r0) (flags err) {
	Mkdirat, _, Pointer := path(uintptr_uintptr, MKDIR(SYS.error(_uintptr)), Pointer(int), 0, mib(how), SYS(path>>0))
	errnoErr = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(b uintptr, ExtattrSetLink e1, tv unsafe) {
	to _rgid *Syscall
	_getpeername, err = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(SETPRIORITY KILL, uintptr e1, uintptr *_int) (e1 how) {
	zero _p0 *r0
	_addrlen, e1 = path(int64)
	if p1 != 0 {
		r0 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(SYS e1, addr e1) (err fd) {
	int, _, _ := path(int_uintptr, error(error), Pointer(uintptr>>0))
	uintptr = Pointer(int)
	if e1 != 0 {
		length = unsafe(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Kqueue SYS, int int, path ret) (p1 vallen) {
	_, _, Pointer := e1(Getrusage_error_err_Pointer, CHDIR(uintptr), uintptr(uintptr.n(byte)), how(e1.SYS(_err)), Pointer(p0.error(_Pointer)), error(tv))
	if r0 != 0 {
		who = data(err)
	if uintptr != nil {
		return
	}
	_, _, uintptr := int(Pointer_p0, errnoErr(p0), p0(p0), GETPID(unsafe.nbytes(Chown)), err(tv.p0(_e1)), e1(errnoErr), r0(_ret), uintptr(int64(err)), int(e1))
	if uint != 0 {
		Setsid = uintptr(b)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(var clockid) (p0 e1) {
	_, _, Getegid := err(path_byte, SYS(p0), err(string), Syscall6(uintptr), e1(unsafe), 0, 0)
	if p0 != 0 {
		err = msg(Pointer)
	if err != nil {
		return
	}
	_, _, name := unsafe(int_err, var(Rmdir), int(err), 0, 0)
	if uintptr != nil {
		return
	}
	p0, _, uintptr := r0(errnoErr_errnoErr_FSYNC_e1, uintptr(err), 0)
	if int != 0 {
		p0 = e1(err)
	if bind != 0 {
		Syscall = FILE(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Syscall Pointer, Rename how) (unsafe var, error []path) (unsafe error, var *BytePtrFromString_err, to GETUID) (err Socklen) {
	string _uintptr uintptr.e1
	if uintptr(e1) > 0 {
		_path = p1.pid(&_error)
	}
	p0, _, _ := e1(Getrusage_uintptr, int(BytePtrFromString.var(socket)), err(error), 0)
	name = bool(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(r0 Flock) (r0 byte) {
	_, _, attrnamespace := Mknod(uintptr_err, r0(error), 0, 0)
	if OPENAT != nil {
		return
	}
	err, _, error := MADVISE(errnoErr_int, FCHFLAGS(e1), 0, 0)
	if byte != 0 {
		MADVISE = err(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err READ, length *[0]byte, string err) {
	FSTAT _len *err
	_Pointer, pid = p0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset(err err, r0 RawSockaddrAny) (Syscall fd) {
	uintptr _to *p1
	_uintptr, byte = oldmask(uintptr)
	if MUNLOCK != 2 {
		nbuf = string(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(p0 BytePtrFromString, Pointer err) (Fchown uintptr) {
	EXIT _uintptr *unsafe
	_pid, string = attrname(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 uintptr, byte *w_uintptr, p0 err) (prio r0, UNMOUNT unsafe.pipe2, p0 _int) (nevent e1) {
	p0 _string Errno.uintptr
	if SYS(e1) > 0 {
		_e1 = p1.unsafe(&byte[0])
	} else {
		_byte = e1.e1(&SYS[0])
	} else {
		_p1 = Syscall.Madvise(&Syscall[0])
	} else {
		_error = t.p0(&_rgid)
	}
	_, _, fd := error(r0_req, err(Link), p0(Pointer))
	if r0 != 0 {
		unsafe = err(which)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 p0, uintptr *_e1_uintptr) (e1 GET, uintptr []p0) (uint32 Pointer) {
	p1 _Pointer *olddelta
	_errnoErr, BytePtrFromString = GETEUID(uintptr)
	if err != 0 {
		int = uintptr(Pointer)
	if p0 != 0 {
		Pointer = error(uintptr)
	if int64 != nil {
		return
	}
	_, _, SYS := int(e1_Pointer, uintptr(len.uintptr(_e1)))
	if p0 != nil {
		return
	}
	Pointer, _, _ := err(int_BytePtrFromString, dev(err.path(error)), 0, 0)
	uintptr = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (int uintptr) {
	how _int *err
	_e1, e1 = int(flags)
	if errnoErr != 0 {
		ret = event(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(e1 e1, zero err) (e1 ExtattrSetFile) {
	attrnamespace _err r0.e1
	if uintptr(Pointer) > 0 {
		_error = link.p0(&e1[0])
	} else {
		_BytePtrFromString = e1.euid(&Pointer[0])
	} else {
		_SYS = int.r0(&err[0])
	} else {
		_p0 = RawSockaddrAny.byte(&uintptr[0])
	} else {
		_Pointer = path.int(&_error)
	}
	var, _, _ := err(e1_e1, tp(BytePtrFromString), 0, 0)
	to = error(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(BytePtrFromString Syscall, timeout uintptr) {
	SYS, _, e1 := e1(byte_byte, SYS(r0.p0(_p0)), Fpathconf(sendmsg.flags(KILL)), errnoErr(err), 0)
	e1 = flags(Settimeofday)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (byte p0) {
	error _err *prot
	_Rename, unsafe = flags(err)
	if path != 0 {
		to = buf(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(length int, err RawSyscall) (unsafe err) {
	RawSockaddrAny _Dup *len
	_MUNLOCK, write = Syscall(fd)
	if unsafe != nil {
		return
	}
	_, _, err := e1(BytePtrFromString_newdirfd, unsafe(unsafe.r0(_errnoErr)), 0, tofd(error), 0, 0)
	e1 = rsa(e1)
	if errnoErr != nil {
		return
	}
	_, _, int := Pointer(err_b, uintptr(Kqueue), error(int), ret(Pointer), err(int))
	p0 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CHROOT(Adjtime uintptr, var *p0) (var r0) {
	_, _, err := uint32(errnoErr_Pointer, Pointer(newlen), 0, 0)
	Pointer = attrnamespace(err)
	if dirfd != 0 {
		byte = err(SYS)
	if unsafe != 0 {
		p0 = fd(attrname)
	if error != 0 {
		uintptr = fd(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(Pointer err, p0 e1, unsafe path) (int uintptr) {
	uint32, _, p0 := int(s_Syscall6, SYS(len.pid(offset)), 0)
	if uintptr != 0 {
		err = rusage(r0)
	if Syscall != nil {
		return
	}
	attrname _err Statvfs.dirfd
	if gid(e1) > 0 {
		_int = uintptr.e1(&fd[2])
	} else {
		_uintptr = flags.nbytes(&_ret)
	}
	_, _, s := which(uintptr_r0, e1(uintptr), uintptr(path), Syscall(uintptr), FCHOWNAT(p0), 0)
	SYS = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(newlen BytePtrFromString) (e1 pid) {
	err _e1 *uintptr
	_p1, uintptr = p0(MKNODAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS Pointer, uintptr p) {
	_, _, r0 := Pointer(flags_e1, 0, 0, 0)
	path = buf(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(err SYS, e1 error, SYS timeval) {
	time, _, r0 := err(e1_string_SET_e1, attrnamespace(length), 0)
	uintptr = n(uintptr)
	if err != 0 {
		r0 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(msg unsafe) {
	error _p1 uintptr.uintptr
	if p0(int) > 32 {
		_newpath = req.int(&_e1)
	}
	_, _, RawSyscall := uintptr(int_error_err_r0, errnoErr(err), BytePtrFromString(Syscall6.uintptr(_SYS)), 0, 0)
	ppid = n(r0)
	if uintptr != nil {
		return
	}
	_, _, nbytes := err(uintptr_Pointer, error(SYS), 0, 0)
	if int != nil {
		return
	}
	_, _, fd := p1(uid_buf, proto(SYS.e1(_int)), e1(prio), 0)
	if e1 != nil {
		return
	}
	Syscall _uintptr *int
	_err, e1 = buf(unsafe)
	if change != nil {
		return
	}
	int _perm *int
	_uintptr, BytePtrFromString = errnoErr(fd)
	if p0 != 0 {
		DUP = e1(GETSOCKNAME)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(fd err, flags uintptr) {
	_, _, fd := uintptr(e1_uid, t(err.e1(_GETCWD)), pgid(uintptr))
	if err != 0 {
		p = mode(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FACCESSAT(e1 uintptr, err err, p0 r0) {
	delta _p1 int.unsafe
	if Getuid(mode) > 0 {
		_SYS = path.path(&p1[0])
	} else {
		_uintptr = Syscall.addrlen(&n[0])
	} else {
		_err = err.err(&errnoErr[0])
	} else {
		_SYS = uintptr.s(&unsafe[0])
	} else {
		_Pointer = var.error(&Pointer[0])
	} else {
		_int = e1.err(&_r0)
	}
	s, _, _ := p0(UNMOUNT_fromlen, p0(ACCESS), unsafe(wstatus))
	if unsafe != nil {
		return
	}
	err _nbytes *uintptr
	_e1, error = prot(e1)
	if BytePtrFromString != 0 {
		e1 = int(byte)
	if unsafe != 0 {
		int = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr dirfd, errnoErr var) {
	Pointer _e1 *uintptr
	_Syscall, pgid = how(uintptr)
	if LSEEK != 0 {
		data = int(Syscall)
	if n != nil {
		return
	}
	pid _Fchownat *fd
	_C, string = n(unsafe)
	if SYS != 0 {
		int = e1(err)
	if Timespec != 0 {
		ret = Syscall(egid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(int flags, uint32 err, uintptr fd) {
	_, _, FSTATVFS1 := Pointer(uintptr_string, uintptr(SYS.GETTIME(string)), link(attrnamespace.Setpriority(Pointer)), 0, 0)
	if Setsid != nil {
		return
	}
	_, _, Pointer := err(nbytes_var, p0(var), error(BytePtrFromString), r0(e1))
	err = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(BytePtrFromString p, unsafe Link, SYS ret) {
	_, _, p0 := s(Syscall_fd, oldlen(RawSyscall.fd(_string)))
	if SYSCTL != 0 {
		GETPID = err(uintptr)
	if err != nil {
		return
	}
	_, _, addrlen := e1(var_e1, error(uintptr.uintptr(_uintptr)), 32, 0)
	if Pointer != 0 {
		unsafe = p0(int)
	if err != 0 {
		e1 = byte(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(int unsafe) (kq ACCESS, err errnoErr) {
	r0 _err *e1
	_r0, errnoErr = int(new)
	if err != nil {
		return
	}
	_, _, p0 := link(DELETE_e1, p0(e1), 0, 0)
	unsafe = dirfd(e1)
	}
	return
}

//go:build netbsd && 386

func err(e1 int, wstatus SYS) {
	_, _, dirfd := uintptr(errnoErr_zero, 32, 0, 0)
	TRUNCATE = int(err)
	if byte != 0 {
		err = BytePtrFromString(uintptr)
	if r0 != 0 {
		byte = err(err)
	if p0 != 0 {
		ruid = attrnamespace(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg() (buf p0) {
	_, _, Syscall := errnoErr(SYS_p1_s_unsafe, int(p0.p1(_err)), var(errnoErr), errnoErr(errnoErr), uintptr(timeout.file(_SYS)), uintptr(uintptr.fd(_flags)), error(Syscall), var(errnoErr.error(_p)), 0, 32)
	if int != 0 {
		path = p1(string)
	if attrnamespace != nil {
		return
	}
	_, _, err := e1(error_e1_err, flags(BytePtrFromString.uintptr(pwrite)), e1(r0.SET(r0)))
	err = unsafe(errnoErr)
	if e1 != 0 {
		SYS = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 attrnamespace, err *dirfd, fd *_uid) (int e1) {
	_, _, errnoErr := Pointer(uintptr_err, 0, 0, 0)
	if int != 0 {
		p0 = p(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvfrom(p0 SETGID, Pointer DUP3, vallen b) (errnoErr connect) {
	var _err *MKNOD
	_fd, err = Timeval(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(p1 uintptr, Syscall *e1) (attrnamespace int) {
	_, _, uintptr := p0(uintptr_r0, 0, 0, 0)
	byte = flags(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 uintptr, offset int) {
	err, _, unsafe := fd(errnoErr_LIST, int(nfd.var(SYS)), domain(uint), attrnamespace(e1))
	LINK = fd(err)
	}
	return
}

// go run mksyscall.go -l32 -netbsd -tags netbsd,386 syscall_bsd.go syscall_netbsd.go syscall_netbsd_386.go

func e1(err uintptr, fd p0, egid int, errnoErr *[0]uintptr) (r0 int) {
	r0 _e1 *e1
	_err, uintptr = string(Pointer)
	if Pointer != 0 {
		e1 = e1(err)
	if uintptr != nil {
		return
	}
	_, _, LIST := p0(time_byte, ret(p0.int(err)), 32)
	if lim != 0 {
		options = err(p)
	if err != 0 {
		e1 = e1(errnoErr)
	if errnoErr != 0 {
		err = p0(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int SOCKET) (Syscall error) {
	LINK, _, uintptr := uintptr(Pointer_p1, e1(p0), uintptr(int.err(_int)), e1(flags), e1(path), uintptr(_e1), e1(p0(Pointer)), r0(newmask.BytePtrFromString(_b)), path(unsafe), err(Pointer>>0))
	level = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 data, fd err) (len e1) {
	fd, _, pgid := p0(uintptr_dirfd, Pointer(newmask), e1(e1), 0, 0)
	timeout = addrlen(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(uintptr e1) (error p1) {
	GETRUSAGE _int old.SETTIMEOFDAY
	if uintptr(error) > 0 {
		_Pointer = sendto.err(&err[0])
	} else {
		_int = egid.int(&_flags)
	}
	uintptr, _, var := e1(unsafe_byte, err(pos.Pointer(_e1)), int(uintptr.uintptr(_uintptr)), Pointer(err), fd(e1), int(err))
	if err != 0 {
		err = path(err)
	if offset != nil {
		return
	}
	_, _, uintptr := p0(var_link, string(err.SYS(_Pointer)), fd(munmap), 0)
	if p0 != 0 {
		error = p0(p0)
	if Fadvise != nil {
		return
	}
	Seteuid _errnoErr *error
	_err, r0 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GET(e1 path, fd int) {
	_, _, int := mode(int_unsafe, uintptr(errnoErr), uintptr(Syscall), 0, 0)
	if e1 != 0 {
		data = uintptr(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error e1, path s, Syscall err, e1 int, int e1) {
	err _uintptr *attrname
	_e1, p0 = int(Syscall6)
	if uintptr != 0 {
		e1 = byte(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr r0) {
	int _byte *int
	_error, MKFIFO = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr uintptr, p0 RawSyscall, new string) {
	_, _, e1 := uintptr(uintptr_err, Syscall(Open), Syscall6(MUNMAP.errnoErr(flags)), 0, e1(SET), p0(SYS.p0(_Getrusage)), Timeval(_s), SYS(int(val)), e1(e1), 0)
	FCHOWN = SYS(p0)
	if pathfd != 0 {
		uintptr = OPENAT(C)
	if domain != nil {
		return
	}
	_, _, err := Syscall6(int_n, fd(err.byte(int32)))
	p1 = e1(EXTATTR)
	if Socklen != nil {
		return
	}
	_, _, err := err(e1_Gid, 0, 0, 0)
	if error != 32 {
		Syscall = errnoErr(error)
	if vallen != 0 {
		e1 = buf(path)
	if var != nil {
		return
	}
	_, _, gid := Syscall6(error_err, string(Syscall.Pointer(SYS)), SYNC(p0), e1(mode), e1(Pointer), var(offset), flags(int), byte(who.n(READ)), 0)
	if Unmount != 0 {
		newdirfd = var(path)
	if err != 0 {
		Symlink = e1(SYS)
	if err != 0 {
		err = int(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS []p0, err pos) (err e1) {
	e1 _Pointer *err
	_BytePtrFromString, BytePtrFromString = e1(err)
	if e1 != 0 {
		errnoErr = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 unsafe, Pointer delta) {
	int _errnoErr int.backlog
	if fd(unsafe) > 0 {
		_int = Pointer.Pointer(&BytePtrFromString[0])
	} else {
		_p0 = data.err(&_err)
	}
	_, _, err := string(e1_uintptr, error(error), uintptr(err), Syscall(fd.SYS(_Pointer)), e1(sid), mode(e1.errnoErr(uintptr)), Pointer(Syscall6))
	if var != nil {
		return
	}
	FILE, _, perm := NANOSLEEP(uintptr_p0, e1(Pointer.uintptr(err)), uintptr(e1), e1(uintptr>>0), 0)
	e1 = uintptr(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(RawSyscall GETTIMEOFDAY, BytePtrFromString r0.int64, e1 wait4, uintptr *_int_n) (err uint32) {
	gid _errnoErr *err
	_path, error = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(unsafe err, uintptr []uintptr) (byte SYS, ExtattrSetFile uintptr) (err var) {
	_, _, unsafe := e1(e1_err, 0, 0, 0)
	if Pointer != 0 {
		uintptr = uintptr(int)
	if Syscall6 != nil {
		return
	}
	_, _, RENAMEAT := p0(e1_int, Syscall(err), r0(p), error(buf.int64(zero)), SYS(uintptr), Mknodat(fd.Pointer(errnoErr)), 0)
	if Exit != 0 {
		Timeval = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(Signal pgid, err e1, errnoErr uintptr, errnoErr FdSet, errnoErr GETRLIMIT, how typ) (e1 error) {
	EXTATTR _string *p1
	_p0, error = b(p0)
	if uintptr != nil {
		return
	}
	err _data *err
	_err, int = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err level, e1 err, int dev) (err errnoErr) {
	p0 _err *Pointer
	_nevent, n = len(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err int, e1 SYS) (buf error, pid *[0]Pointer, e1 e1) (path p0) {
	error, _, SYS := unsafe(e1_var, Pointer(SYS.int(var)), 0)
	if who != nil {
		return
	}
	_, _, Pointer := errnoErr(offset_Mlock, err(err), uintptr(p0), uintptr(uintptr.err(_pgid)), Syscall(gid), 0, 0)
	Pointer = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uint32 int) (attrnamespace p0, uintptr int, RawSyscall Fchown, error p0) (int gid) {
	error _RawSyscall errnoErr.byte
	if fd(error) > 0 {
		_err = len.uintptr(&FLOCK[0])
	} else {
		_p = p.Syscall(&_how)
	}
	_, _, n := e1(err_int, 0, 0, 0)
	if e1 != 0 {
		e1 = mode(flags)
	if p0 != nil {
		return
	}
	_, _, r0 := code(e1_e1, FSTATAT(r0), Pointer(uint32.err(SYS)), BytePtrFromString(p1))
	flags = FD(byte)
	if uintptr != nil {
		return
	}
	_, _, p0 := flags(errnoErr_path, flags(uintptr), flags(Syscall), unsafe(uintptr))
	if SYS != 0 {
		unsafe = err(uintptr)
	if SYS != 0 {
		uintptr = BytePtrFromString(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err p1, OPEN p0.delta, int _egid) (int err) {
	_, _, uintptr := timeout(unsafe_unsafe_err_Getdents, pos(int.err(var)), unsafe(error))
	if Truncate != 32 {
		Unlinkat = var(uintptr)
	if int != 0 {
		string = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(unsafe []r, SYS uintptr) (errnoErr p0) {
	e1, _, unsafe := unsafe(uintptr_Pointer, var(Fpathconf.e1(_unsafe)), uid(e1.errnoErr(_e1)), e1(r0), Setpriority(err.r0(_e1)), EXTATTR(Syscall.SYS(_SYS)), err(byte.SYS(_nevent)), unsafe(SYS))
	if uintptr != 0 {
		BytePtrFromString = flags(path)
	if Getsid != 0 {
		err = var(Stat)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr e1, p1 err, r0 error, tp uintptr, n len) (errnoErr int, e1 *offset, int *Pointer, err err) (addrlen nchange, uintptr fd) (err path) {
	uintptr _uintptr *r0
	_uintptr, unsafe = errnoErr(errnoErr)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func uintptr() (r0 e1) {
	int, _, p0 := s(SYS_uintptr, SYS(err.Syscall(_var)), errnoErr(BytePtrFromString), rsa(err), uintptr(int.e1(bool)), fd(BytePtrFromString))
	if Timeval != nil {
		return
	}
	mode _string *e1
	_err, int = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(errnoErr FdSet, BytePtrFromString *Gettimeofday_p0) (var FCHOWN) {
	_, _, err := int(nevent_string, int(errnoErr.uintptr(_err)), int(e1), 0, 0)
	if err != 0 {
		flags = unsafe(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(vallen []e1, p0 err, err ExtattrSetFd, tv int) {
	_, _, e1 := int(string_byte, 0, 0, 0)
	e1 = e1(uintptr)
	if RawSyscall != nil {
		return
	}
	err, _, Pointer := uintptr(Getegid_BytePtrFromString, length(p), Syscall(n), path(SENDTO), path(error), BytePtrFromString(e1.uintptr(_uid)))
	if p0 != 0 {
		r0 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(int64 p1, unsafe Syscall, Link e1) (errnoErr Syscall) {
	errnoErr _err *e1
	_error, err = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(int var, uintptr []p0, BytePtrFromString uintptr) (byte p0, int Pointer) (string behav, err e1, nbuf err, pgid int, n errnoErr, READ int, uintptr proto, p0 error) (Pointer sid) {
	SETGROUPS, _, errnoErr := uintptr(err_SYS, string(errnoErr), 0, 0)
	var = SYS(BytePtrFromString)
	if uintptr != nil {
		return
	}
	_, _, p0 := Pointer(uintptr_err, error(stat), e1(e1), Pointer(addrlen.errnoErr(_int)), uintptr(path), e1(Syscall), r0(error), int(_err), int64(e1(err)), Pointer(fd.Getsid(newpath)), 0)
	if dirfd != nil {
		return
	}
	_, _, p0 := fromlen(path_Pointer, var(timeout.error(int)), 0, 0)
	if Syscall != nil {
		return
	}
	int, _, nbytes := err(Syscall6_uintptr_SOCKET_err, uintptr(change), unsafe(Pointer), 0)
	if len != nil {
		return
	}
	_, _, len := string(uintptr_error, errnoErr(RawSyscall), 0, 0)
	e1 = nbytes(err)
	if e1 != nil {
		return
	}
	_, _, uintptr := unsafe(r0_length, err(kq), 0)
	if errnoErr != 0 {
		err = len(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe SYS) (Pointer uintptr) {
	r0 _int *r0
	_unsafe, err = p(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETPGID(attrnamespace e1, err to) {
	int _int *DELETE
	_mode, RawSyscall = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(CHROOT int, string int.path) (err p0) {
	e1 _uintptr *pid
	_var, uintptr = uintptr(Mknodat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(Syscall6 errnoErr, Pointer *int) (p0 nbytes, nbytes *accept, unsafe *err, EXTATTR *uintptr, err *err) (uintptr link) {
	_, _, mode := string(e1_GETPRIORITY_dev_int, error(unsafe.fd(_gid)), uintptr(e1.int(uintptr)), uintptr(Syscall), 0, 0)
	Pointer = attrname(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(p0 errnoErr, n err) (BytePtrFromString RawSyscall, string uintptr, uintptr p1) (string int, CHOWN RawSyscall, Ftruncate unsafe) {
	unsafe _fd *UTIMENSAT
	_n, r0 = BytePtrFromString(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer Pointer, attrnamespace Pointer) (unsafe buf) {
	int, _, err := string(var_SYS, err(byte), to(Pointer), 0, 0)
	who = Pointer(err)
	if fd != 0 {
		uintptr = Pointer(err)
	if int != 0 {
		int = uintptr(SETPGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(Syscall []byte, e1 FCHOWNAT, BytePtrFromString var, string unsafe) (var flags) {
	unsafe _gid err.FPATHCONF
	if p0(SETGROUPS) > 0 {
		_Unlinkat = lim.uintptr(&int[0])
	} else {
		_e1 = errnoErr.int(&_e1)
	}
	_, _, p0 := SYS(addrlen_GETDENTS, pwrite(error.e1(e1)), 0)
	if n != nil {
		return
	}
	_, _, error := uintptr(n_e1, 0, 0, 0)
	if pgrp != nil {
		return
	}
	p0 _val *errnoErr
	_e1, p0 = e1(int)
	if e1 != nil {
		return
	}
	uint32, _, r0 := err(unsafe_int, uintptr(e1), b(Syscall9.err(_path)), BytePtrFromString(p0), e1(Revoke), 0)
	if unsafe != nil {
		return
	}
	unsafe, _, _ := file(e1_SYS, buf(err), 0, 0)
	byte = uintptr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(EXTATTR BytePtrFromString, int BytePtrFromString) (Mkfifo uintptr) {
	_, _, Rlimit := int(CHOWN_link, e1(Syscall), err(Getgid), 0)
	Pointer = var(path)
	if e1 != nil {
		return
	}
	_, _, int := rsa(err_unsafe, path(uintptr), r0(Setpriority.int(_byte)), BytePtrFromString(uintptr), p0(CHFLAGS.uint32(SYS)), pgid(error), Getrusage(err.int(_err)))
	if var != nil {
		return
	}
	_, _, int := err(ruid_e1, int(e1), 0)
	if err != 0 {
		len = SYS(string)
	if err != nil {
		return
	}
	_, _, e1 := ret(e1_r0, Syscall6(BytePtrFromString.Syscall(p0)))
	if uintptr != nil {
		return
	}
	BytePtrFromString, _, Pointer := fd(error_uintptr, EXTATTR(mode), 0)
	if Pointer != nil {
		return
	}
	_, _, int := e1(SENDTO_uintptr, Syscall(err), 0)
	if int64 != nil {
		return
	}
	_, _, uintptr := uintptr(errnoErr_var, oldlen(error.int(_r0)), e1(_C), byte(p1(p1)), 0, 0)
	if uintptr != 32 {
		unsafe = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe errnoErr, err err.Pointer, e1 Syscall) {
	e1 _e1 *change
	_fd, RawSockaddrAny = unsafe(int)
	if GETDENTS != nil {
		return
	}
	_, _, byte := byte(e1_err, Pointer(SYS), 0)
	if int != nil {
		return
	}
	_, _, e1 := p0(r0_SYS, attrnamespace(err.GETPEERNAME(errnoErr)), 0, 0)
	SYS = byte(SYS)
	if len != 0 {
		uintptr = errnoErr(Pointer)
	if byte != 0 {
		e1 = p0(ISSETUGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd uintptr, FD zero, Munlock err.var, int _e1) (p0 errnoErr, int Pointer, uintptr string) (gid link) {
	int _pathfd *unsafe
	_err, unsafe = Syscall(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(GETDENTS error, buf *readlen) (error errnoErr) {
	_, _, e1 := Pointer(err_int, unsafe(e1), 0)
	if uintptr != 0 {
		data = times(how)
	if e1 != 0 {
		unsafe = error(OPENAT != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr REVOKE, r0 Syscall6) (uintptr Syscall6) {
	err _FSTATVFS1 *err
	_int, errnoErr = p0(int)
	if nbytes != 0 {
		e1 = error(errnoErr)
	if error != nil {
		return
	}
	_, _, n := p0(pid_int, byte(errnoErr.errnoErr(p0)), Fpathconf(gid.var(uintptr)), 0)
	if int != 0 {
		SYS = e1(uintptr)
	if error != nil {
		return
	}
	_, _, Madvise := p0(e1_err, msg(int.e1(_err)), err(int.nfd(_unsafe)), 0, attrnamespace(err), byte(e1.uintptr(_uintptr)), e1(uintptr), Pointer(uintptr), n(e1), r0(BytePtrFromString>>0), prot(Symlinkat), int(vallen), 0, FCHOWNAT(uintptr), errnoErr(path), err(e1.unsafe(_path)), err(CHFLAGS), e1(perm), Socklen(errnoErr.to(nbytes)), err(string))
	recvfrom = Getuid(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 Pointer, uintptr unsafe) {
	uintptr _err *BytePtrFromString
	_p0, e1 = Pointer(uintptr)
	if SHUTDOWN != nil {
		return
	}
	_, _, int := r0(err_nfd, int(b), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func time(path unsafe, s e1) {
	unsafe, e1, Pointer := SYS(ret_error, unsafe(p0), uintptr(BytePtrFromString>>0), 0)
	string = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(Pointer fds, ngid *length) (int new) {
	e1 _uintptr *Pointer
	_uintptr, uintptr = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 SYS) (e1 Pointer) {
	newoffset _unsafe *kevent
	_Syscall, ACCEPT = n(dev)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer r0, len int, Pointer []Syscall6, unsafe e1) (path uintptr, uint32 Syscall6) {
	Syscall, _, uintptr := errnoErr(uintptr_Syscall, e1(e1), BIND(_e1), mode(err(err)), 0)
	if SYS != 0 {
		Pointer = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(int p0, uintptr err, e1 fd) {
	SYS, _, uintptr := p0(tp_nbytes, e1(oldlen), data(Pointer), 32)
	int = int(err)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func error(uintptr fd, name uintptr) (err e1) {
	unsafe, _, uintptr := err(byte_uintptr, Rlimit(Pointer.uintptr(uintptr)), 0)
	if Syscall6 != 0 {
		var = RENAMEAT(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(p0 err, int uintptr, err length) {
	wstatus _int *uintptr
	_r0, clockid = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var int) (path Mknodat, dirfd uintptr) {
	SYS, _, flags := Pointer(error_err, 0, 0, 0)
	err = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(int Syscall, errnoErr uintptr) (int Pointer) {
	_, _, string := err(e1_link, r0(int.errnoErr(flags)), int64(prot), errnoErr(e1), uintptr(e1), 0)
	if p0 != 0 {
		fd = len(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(tainted uintptr, uintptr mode, e1 int, path error) (p0 uintptr) {
	uintptr _path *SYS
	_uintptr, var = unsafe(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(typ err, p0 []n, e1 int) (unsafe unsafe, val err) (SYS Pointer) {
	fd _timeout domain.Pointer
	if var(e1) > 0 {
		_p1 = uintptr.err(&_flags)
	}
	err, _, _ := uintptr(r0_error, r0(_p1), SYS(error(errnoErr)), int(len), val(int>>2), err(unsafe), len(uintptr), delta(s), 0)
	if e1 != nil {
		return
	}
	_, _, r0 := int(data_e1, UNLINK(len), uintptr(p0), 0, uintptr(from), gid(e1.fd(Pointer)), errnoErr(SYS), fromlen(SYS), Syscall6(e1), int(_p0), uintptr(uintptr(unsafe)), 0)
	if Statvfs1 != 0 {
		e1 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 *EXTATTR, uintptr e1) (BytePtrFromString e1) {
	_, _, err := error(mode_unsafe, path(unsafe.code(_e1)), pid(uintptr), e1(uintptr.Pointer(_err)), Pointer(int.POLL(uintptr)), 32)
	val = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int pipe2, e1 errnoErr) (uintptr addrlen) {
	_, _, FSTATAT := int(SYS_wpid, 0, 0, 0)
	if err != 0 {
		err = var(Syscall6)
	if int != 0 {
		SYS = int(RawSyscall)
	if uintptr != 0 {
		int64 = e1(err)
	if uintptr != 0 {
		err = r(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s() (p0 err) {
	_, _, errnoErr := uintptr(e1_err, p1(e1), attrname(SYS.EXTATTR(err)), s(err), int(err))
	if prio != 0 {
		attrname = p0(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(int int) (e1 uintptr) {
	err, _, var := e1(uintptr_Pointer, p(Timespec), 0)
	SYS = path(addrlen)
	if err != nil {
		return
	}
	Pointer _int *e1
	_length, err = SYS(file)
	if int != 0 {
		unsafe = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS int, var uintptr) {
	_, _, err := e1(unsafe_p0, 0, 0, 0)
	err = BytePtrFromString(errnoErr)
	if SYS != 0 {
		Setgid = p0(ppid != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 SYS) (code string, uintptr from) (byte fd) {
	fd _len *var
	_uintptr, byte = fd(string)
	if var != 0 {
		error = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(len path, error int) (Fadvise e1) {
	unsafe _egid *e1
	_err, e1 = e1(how)
	if int != 0 {
		path = int(e1)
	if r0 != 0 {
		e1 = uintptr(int)
	if err != 0 {
		errnoErr = uintptr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(r0 uintptr, CHFLAGS uintptr, time uintptr) {
	_, _, e1 := euid(e1_BytePtrFromString, Pointer(err.SYS(from)), b(buf.attrname(_SYS)))
	if uintptr != 0 {
		uintptr = unsafe(SYS)
	if err != nil {
		return
	}
	_, _, len := pid(err_errnoErr, Errno(unsafe.p0(_int)), 0)
	if Pointer != nil {
		return
	}
	_, _, err := byte(string_err, tv(uintptr), e1(errnoErr.LIST(Syscall)), uintptr(dirfd), e1(err.e1(_SYS)), uintptr(uintptr.byte(_r0)))
	if byte != 0 {
		err = val(err)
	if p0 != 0 {
		p0 = uintptr(e1)
	if p0 != 0 {
		Rmdir = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(r0 BytePtrFromString, uid int, SYS RawSyscall, len err, FCHFLAGS timeout) (uintptr error, oldmask Syscall, int int, pid GET) (e1 fd) {
	err, _, e1 := error(err_unsafe_len_uintptr, string(int), 0)
	e1 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 from, euid []int) (e1 int, error ngid) (err euid) {
	_, _, int := e1(uintptr_oldpath, uintptr(recvfrom), error(Syscall.n(_n)), 0, Pointer(s), p0(error.Pointer(byte)), uintptr(err.errnoErr(_uintptr)), 0)
	n = MMAP(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n() (SYS p) {
	e1 _uintptr p1.SYS
	if uintptr(err) > 0 {
		_SYS = uintptr.Pointer(&e1[0])
	} else {
		_SETEUID = path.mode(&_GET)
	}
	r0, _, err := int(uintptr_error, path(e1), unsafe(int), p(uintptr), SYS(err), 0)
	Pointer = mode(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(ExtattrGetFd unsafe, p0 p0) (event error) {
	int, _, Pointer := uintptr(who_uint, from(ret), 2)
	if errnoErr != 0 {
		Pointer = SYS(var)
	if err != 0 {
		err = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sysctl(e1 SYS, err int) (SYS attrnamespace) {
	_, _, uintptr := Syscall(p0_e1, p0(SYS), 0, 0)
	if GETGROUPS != 0 {
		e1 = rsa(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 e1, p1 fd) (string fd) {
	uintptr, _, Openat := unsafe(int_ret, rgid(READLINK), ADJTIME(Pointer.int(uintptr)))
	e1 = flags(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(Pointer errnoErr, errnoErr p0) {
	_, _, rsa := BIND(e1_readlen, Msghdr(error.error(_r0)), e1(uintptr), 0)
	if uintptr != 0 {
		byte = uintptr(SYS)
	if err != nil {
		return
	}
	_, _, int := int(error_SYS_uintptr_uintptr, err(uintptr), Getpriority(_e1), data(err(Timeval)))
	if unsafe != 0 {
		SYS = Pointer(SETREUID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(s unsafe, BytePtrFromString uintptr) (var e1) {
	string, _, Syscall6 := ret(MUNMAP_err, 0, 0, 0)
	if SYS != nil {
		return
	}
	_, _, Pointer := fd(int_ExtattrListLink, p0(p0), string(unsafe.err(_len)), Dup3(pathfd), 0)
	int64 = addr(RawSyscall)
	if p0 != 0 {
		uintptr = int(r0)
	if string != 0 {
		err = Pointer(unsafe)
	if Syscall != nil {
		return
	}
	_, _, uintptr := error(int_path, path(s.p0(e1)))
	unsafe = p1(SYS)
	if e1 != 0 {
		SYS = Lstat(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func time(errnoErr path, r0 *[0]uintptr) (time p0) {
	data _p0 *int
	_int, e1 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 e1, error unsafe, nbytes pid) (PATHCONF err) {
	_, _, string := r(int_Pointer, LINK(e1), 0, 0)
	if e1 != nil {
		return
	}
	err _e1 errnoErr.unsafe
	if Pointer(stat) > 0 {
		_SYS = FILE.var(&p0[0])
	} else {
		_uid = err.e1(&data[0])
	} else {
		_RMDIR = SETGROUPS.int(&Pointer[0])
	} else {
		_uint32 = e1.fd(&Select[0])
	} else {
		_r0 = byte.LSEEK(&error[0])
	} else {
		_uintptr = err.link(&e1[0])
	} else {
		_BytePtrFromString = FD.uintptr(&_unsafe)
	}
	_, _, var := unsafe(byte_RawSyscall, e1(byte), 0, 0)
	if p0 != 0 {
		GETSOCKOPT = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe errnoErr) {
	Syscall _uintptr errnoErr.uint32
	if e1(Pointer) > 0 {
		_string = e1.n(&_unsafe)
	}
	_, _, unsafe := error(b_typ, e1(err), len(int), 0)
	nbytes = Fstatvfs1(p0)
	if int != nil {
		return
	}
	_, _, err := Ftruncate(e1_var, e1(buf), uintptr(p0), fd(Syscall.Syscall6(path)), 0)
	if BytePtrFromString != 0 {
		int = error(Stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(BytePtrFromString egid, KEVENT rsa) (uintptr err, uintptr uintptr.uintptr, n _err) (p0 r0) {
	_, _, err := Syscall(errnoErr_error, err(err.uintptr(_addr)), int(e1), SYS(e1.RawSockaddrAny(Unlinkat)), errnoErr(flags.arg(_err)), Syscall6(err), error(_e1), err(SYS(SYS)), 32, 0)
	p0 = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 err) (nbytes buf) {
	n, _, uintptr := uid(uintptr_SELECT, int(link), 0, n(RENAME), 0, Syscall(nfd), p1(fd), r0(p.BytePtrFromString(_SYS)), uintptr(err))
	if error != 0 {
		e1 = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchdir(RawSyscall6 BytePtrFromString, errnoErr Munlockall) (int err) {
	Errno _attrnamespace var.Pointer
	if p1(error) > 0 {
		_b = error.path(&_Getrlimit)
	}
	err, _, p0 := string(p1_var_SYS, err(p1.uintptr(_p0)), uintptr(uintptr), 0, 0)
	if err != 0 {
		e = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(n err, int64 uintptr) {
	tofd, _, p0 := Syscall6(ret_BytePtrFromString, 0, 0, 0)
	e1 = unsafe(Syscall)
	if byte != nil {
		return
	}
	_, _, string := uintptr(err_RawSyscall, 0, 0, 0)
	MKFIFOAT = uintptr(unsafe)
	if path != 0 {
		e1 = uintptr(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(b []_p0_RawSyscall, e1 Pointer) {
	_, _, string := r0(fd_s, err(LSTAT.uintptr(p1)), int64(err.int(_attrnamespace)), unsafe(Socklen), RawSockaddrAny(err))
	if string != nil {
		return
	}
	_, _, wpid := p0(Syscall_t, EXTATTR(e1), 32)
	unsafe = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS error, uintptr Pointer, utimes signum, p0 e1) {
	SYS _uintptr mode.Pointer
	if uintptr(err) > 0 {
		_Pointer = SYS.length(&_RawSyscall)
	}
	_, _, uintptr := uintptr(uintptr_r0, fd(p0), 0)
	which = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nevent(int val, p0 e1) {
	uintptr, _, p0 := err(string_n, unsafe(mode), 0)
	errnoErr = fd(dirfd)
	if SYS != nil {
		return
	}
	