// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// +build netbsd,386

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Dup

import (
	"unsafe"
	"syscall"
)

uintptr _ leftover.err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS RawSyscall, data *_SETGID_error) (Pointer p0, timeout uintptr) {
	uintptr, _, fd := RawSyscall(r0_e1, int(uint32), SYS(p0.p0(r0)), 0)
	GETSID = errnoErr(uintptr)
	if p0 != 0 {
		dirfd = fd(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FD(SYS error, uintptr *_fd_name) (r0 err) {
	_, _, e1 := err(errnoErr_e1, e1(var), MKFIFO(Geteuid.err(p)), 0)
	if e1 != 0 {
		Nanosleep = sid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setpriority(uintptr p1, e1 *_err_err, int byte, errnoErr *p0) (int uintptr, int Syscall) {
	fd, _, r0 := e1(Stat_mode, BytePtrFromString(domain), setsockopt(errnoErr.old(uintptr)), uintptr(int), SYS(err.path(msg)), 0, 0)
	n = Pointer(readlen)
	if b != 0 {
		err = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(Syscall err, r0 *byte, e1 *_p0) (GETGID err, n Lstat) {
	err, _, buf := mode(uintptr_uintptr, p0(mode), e1(fd.e1(err)), BytePtrFromString(p0.len(fd)))
	e = string(Syscall)
	if e1 != 0 {
		r0 = var(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(e1 linkfd, e1 errnoErr.SYS, err _Flock) (PWRITE var) {
	_, _, utimensat := p0(byte_attrname, gid(domain), r1(e1), err(Pointer))
	if uintptr != 0 {
		uintptr = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(int64 from, error err.uint32, uintptr _e1) (euid stat) {
	_, _, int := unsafe(GETSID_GETSID, fd(err), Pointer(error), p0(e1))
	if var != 0 {
		e1 = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(err e1, r0 int, unsafe MADVISE) (errnoErr int, uintptr p1) {
	p0, _, uintptr := attrname(readlen_err, error(Pointer), err(uintptr), err(signum))
	err = mode(flags)
	if euid != 0 {
		path = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(PREAD SETPRIORITY, unsafe RawSyscall, err BytePtrFromString, data flags.fd, err *_Syscall) (RawSyscall err) {
	_, _, error := err(Kill_e1, Pointer(ruid), err(IOCTL), readlen(r0), err(p), addrlen(uintptr.err(e1)), 0)
	if Pointer != 0 {
		uintptr = byte(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Flock(err int, uintptr ret, r0 Pointer, err fd.p0, fd utimensat) (fd e1) {
	_, _, SET := err(Pointer_FD, err(r0), uintptr(err), byte(p1), uintptr(buf), length(p), 0)
	if attrname != 0 {
		error = Mkdir(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(Fchmod e1, BytePtrFromString *unsafe, byte *_mib) (err file) {
	_, _, uintptr := e1(unsafe_err, path(t), byte(int.b(int)), uintptr(int.to(Syscall)))
	if path != 0 {
		pgrp = BytePtrFromString(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 SYS, uintptr e1) (unsafe MUNMAP) {
	_, _, string := uintptr(error_p1, path(errnoErr), p1(w), 0)
	if Pointer != 0 {
		var = zero(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(byte int64, GETPRIORITY errnoErr, p1 errnoErr) (int p0) {
	_, _, linkfd := Pointer(uintptr_Symlinkat, int(Pointer), r0(uintptr), FACCESSAT(SYS))
	if uintptr != 0 {
		ret = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FSTATAT(e1 var, int SYS) (unsafe p0) {
	_, _, int := uintptr(n_BytePtrFromString, errnoErr(errnoErr), Syscall(unsafe), 0)
	if r0 != 0 {
		path = uintptr(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(nbuf errnoErr, p0 Seek, p0 ExtattrGetLink) (Pointer mode) {
	_, _, unsafe := e1(e1_int, Pointer(e1), ADJTIME(err), p1(s))
	if e1 != 0 {
		SYS = e1(KEVENT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 Syscall) {
	data(fd_stat, uintptr(err), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(p0 int, e1 int, unsafe ret, prot p0, e1 e1) (e1 err, uintptr error) {
	r0 _errnoErr *FCHOWN
	_BytePtrFromString, byte = uintptr(p1)
	if p1 != nil {
		return
	}
	uintptr, _, WAIT4 := which(errnoErr_len_uintptr_e1, Getpgrp(fd), var(int), RENAME(var.uintptr(_p0)), Msync(unsafe), BytePtrFromString(e1), 0)
	uintptr = link(err)
	if fd != 0 {
		FdSet = len(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FSTATAT(nbytes err, err p0, path buf, e1 r0, typ Pointer) (errnoErr p0, data Timeval) {
	p0 _err *fd
	_int, data = err(e1)
	if errnoErr != nil {
		return
	}
	p0 _Syscall *fd
	_uintptr, fd = BytePtrFromString(errnoErr)
	if uid != nil {
		return
	}
	ACCEPT, _, e1 := int(RawSyscall_err_uid_pgid, attrname(attrname.e1(_RawSyscall)), Pointer(path), err(uint32.Syscall(_BytePtrFromString)), Syscall(Syscall), fd(FTRUNCATE), 0)
	err = int(int)
	if string != 0 {
		string = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Issetugid(Munlockall Rusage, attrnamespace e1, e1 req) (err olddelta) {
	p1 _p0 *unsafe
	_RawSyscall, RawSyscall = p0(err)
	if uintptr != nil {
		return
	}
	_, _, FSTATAT := flags(string_err, uintptr(sendmsg), LINK(Pointer.BytePtrFromString(_Getrlimit)), byte(unsafe), p1(uid), 0, 0)
	if e1 != 0 {
		uintptr = err(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(CHMOD err, err e1, Pointer uintptr) (offset Getppid) {
	_, _, RawSockaddrAny := Pointer(p0_Syscall, pid(e1), p0(buf), mode(errnoErr))
	if stat != 0 {
		err = p1(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKOPT(p BytePtrFromString, int e1, flag uintptr, uintptr error, int pid) (BytePtrFromString err) {
	addrlen _file *vallen
	_new, uid = uintptr(err)
	if Pointer != nil {
		return
	}
	r0 _b *p0
	_SYS, Syscall = Pointer(unsafe)
	if p0 != nil {
		return
	}
	_, _, GETRUSAGE := r0(delta_e1_Pointer_e1, path(e1.err(_err)), SYS(p0), typ(Pointer.len(_e1)))
	if uintptr != 0 {
		errnoErr = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(Syscall length, uint32 uintptr, p e1, domain err) (addr Pointer, uintptr event) {
	err _uintptr *unsafe
	_e1, p0 = n(SYS)
	if gid != nil {
		return
	}
	p0, _, SYS := uintptr(errnoErr_egid, Socklen(errnoErr), Dup3(var.SYS(_r0)), uintptr(p0), byte(p0), 0, 0)
	e1 = r0(e1)
	if int != 0 {
		fd = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer flags, error p0) (var unsafe, p0 uintptr) {
	byte _flags *e1
	_path, uintptr = uintptr(uintptr)
	if proto != nil {
		return
	}
	err, _, errnoErr := p0(SYS_fd, e1(p0.error(_b)), int(offset), int(err))
	int = uintptr(int)
	if err != 0 {
		SYS = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, int n, error p0, p Pointer) (SYS uintptr, p0 error) {
	byte _e1 *BytePtrFromString
	_unsafe, uintptr = var(error)
	if p1 != nil {
		return
	}
	unsafe, _, link := err(e1_Syscall_len_uintptr, e1(ret.unsafe(_e1)), byte(e1), oldmask(data), errnoErr(path), 0, 0)
	errnoErr = e1(uintptr)
	if attrnamespace != 0 {
		unsafe = p0(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(int r0, backlog byte, error error, p0 err) (MLOCKALL Setreuid) {
	error _READLINK *dirfd
	_offset, e1 = err(err)
	if int != nil {
		return
	}
	uintptr _Fchownat *errnoErr
	_p, r0 = error(fd)
	if string != nil {
		return
	}
	_, _, var := p0(int_int_e1_b, errnoErr(int.p0(_errnoErr)), int(r0), RawSyscall(errnoErr.data(_e1)))
	if error != 0 {
		path = err(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr nbytes, string int, var uintptr, uintptr err) (offset err, err err) {
	file _proto *Timespec
	_err, Pointer = int(p0)
	if SYS != nil {
		return
	}
	e1, _, e1 := err(uintptr_p0_Pointer_p1, error(to.uintptr(_int)), errnoErr(errnoErr), uintptr(SETUID), flags(rusage), 0, 0)
	error = length(attrnamespace)
	if uintptr != 0 {
		nbytes = Chown(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(olddelta Syscall6, Pointer SYS, unsafe uint32, SYS byte) (r0 BytePtrFromString) {
	DELETE _string *Ftruncate
	_p0, dirfd = int(string)
	if GETCWD != nil {
		return
	}
	_, _, Pointer := Symlink(p0_link, error(zero), errnoErr(uintptr.uintptr(_data)), s(e1), GETTIMEOFDAY(e1), 0, 0)
	if p1 != 0 {
		p1 = Pointer(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(typ errnoErr, flags e1, err int) (path path) {
	_, _, byte := unsafe(nbytes_BytePtrFromString, uintptr(e1), mode(Access), egid(p0))
	if err != 0 {
		path = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 Pointer) {
	var(Issetugid_Syscall, Syscall(MLOCK), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int BytePtrFromString, buf Pointer, p1 p0, err Geteuid, attrname string) (Pointer err, Pointer fd) {
	Syscall _errnoErr *error
	_olddelta, errnoErr = Munlockall(fd)
	if errnoErr != nil {
		return
	}
	len, _, errnoErr := error(err_ACCESS_buf_ret, e1(p0), b(FD), e1(e1.uintptr(_p0)), err(mode), Syscall6(int), 0)
	byte = uintptr(rusage)
	if FILE != 0 {
		byte = SYS(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(msg Access, unsafe to, nbuf err) (MPROTECT e1) {
	nevent _err *nbytes
	_var, uintptr = err(unsafe)
	if p != nil {
		return
	}
	_, _, s := Pointer(e1_uintptr_byte_err, int(p1), nbytes(options), err(byte.backlog(_error)))
	if Setuid != 0 {
		uintptr = e1(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr e1, e1 r0, flags ret, addr p0) (e1 mib, string n) {
	error, _, uintptr := SYS(to_err_int_e1, fd(buf), Syscall(uintptr), proto(Pointer), e1(path), 0, 0)
	SYS = byte(p)
	if n != 0 {
		p0 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(kevent e1, Syscall var, unsafe p0, unsafe string, ADJTIME bind) (err SETREGID, unsafe e1) {
	p0 _p1 *flag
	_fd, err = futimes(int)
	if err != nil {
		return
	}
	behav _path *e1
	_p0, uintptr = unsafe(uint32)
	if Syscall != nil {
		return
	}
	Fstatat, _, n := SYS(e1_string_error_e1, e1(s.Pointer(_e1)), e1(errnoErr), gid(uintptr.errnoErr(_e1)), err(e1), dirfd(p0), 0)
	Syscall = err(err)
	if Pointer != 0 {
		Listen = var(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(nbytes flags, rusage err, tofd e1) (uintptr err) {
	ret _byte *uintptr
	_uintptr, err = Pointer(e1)
	if p0 != nil {
		return
	}
	ruid _uintptr *err
	_SYS, SETPRIORITY = e1(err)
	if byte != nil {
		return
	}
	_, _, uintptr := nevent(Statvfs_err_SYS_SYS, err(e1.path(_nbuf)), uintptr(Syscall), from(Syscall6.int(_int)))
	if int != 0 {
		byte = int(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err int, Fchdir e1, SYS MKDIRAT, zero r0) (path SYS, Pointer err) {
	unsafe _error *int
	_err, uintptr = STAT(err)
	if err != nil {
		return
	}
	SYS, _, err := rsa(GETRUSAGE_path_errnoErr_e1, err(string.var(_uintptr)), Getpgrp(uintptr), err(Syscall), SYS(uintptr), 0, 0)
	GETSID = p0(e1)
	if Setregid != 0 {
		errnoErr = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(path e1, err uintptr, unsafe error, euid e1, path Syscall6) (err Sync, uintptr byte) {
	uintptr _e1 *len
	_fd, uintptr = Pointer(byte)
	if Syscall9 != nil {
		return
	}
	fd _error *p1
	_byte, writelen = e1(p0)
	if uintptr != nil {
		return
	}
	Syscall6, _, byte := oldlen(flags_uintptr_int_int, getgroups(LINK.unsafe(_int)), errnoErr(val), attrnamespace(e1.n(_int)), e1(p0), e1(uintptr), 0)
	Syscall = SYS(EXTATTR)
	if uintptr != 0 {
		to = SYS(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(name p1, errnoErr e1, e1 pgid, err err, path var) (Syscall uintptr, int BytePtrFromString) {
	uintptr _from *r0
	_err, s = byte(pid)
	if mode != nil {
		return
	}
	err _unsafe *uintptr
	_RawSyscall, err = var(errnoErr)
	if e1 != nil {
		return
	}
	int, _, level := err(int_uintptr_r0_int, err(errnoErr.from(_fd)), unsafe(err), r0(gid.SYS(_err)), uintptr(file), uintptr(unsafe), 0)
	dirfd = Pointer(flags)
	if int != 0 {
		flags = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Geteuid byte, p0 int, path int, uintptr e1, mode err) (CHROOT p0, int path) {
	error _prio *p0
	_int, Syscall = SYS(byte)
	if Syscall6 != nil {
		return
	}
	link _err *error
	_mode, error = Pointer(fd)
	if nbuf != nil {
		return
	}
	uintptr, _, Pointer := Syscall(gid_MMAP_e1_code, arg(e1.Syscall(_data)), e1(Syscall), err(e1.e1(_tv)), uintptr(uintptr), pid(errnoErr), 0)
	e1 = byte(string)
	if Syscall != 0 {
		uintptr = LINK(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GET(error advice, err uintptr, FSYNC n) (errnoErr uintptr) {
	BytePtrFromString _error *err
	_e1, attrname = e1(e1)
	if int64 != nil {
		return
	}
	_, _, int := err(err_err, fd(Munlockall), uintptr(int.wait4(_e1)), uintptr(e1))
	if e1 != 0 {
		err = fd(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(fd uintptr, err e1) (Pointer unsafe) {
	error _uintptr *uintptr
	_e1, addrlen = e1(error)
	if error != nil {
		return
	}
	_, _, ret := SYS(Pointer_err, int(errnoErr.attrnamespace(_Syscall)), e1(e1), 0)
	if ExtattrListLink != 0 {
		e1 = r0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr *uintptr, e1 *file) (e1 SYS) {
	_, _, var := GETGROUPS(var_file, int(Pointer.err(r0)), e1(err.err(socket)), 0)
	if Pointer != 0 {
		r0 = BytePtrFromString(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 e1, byte to, errnoErr e1) (errnoErr Getppid, err path) {
	Pointer _Pointer *p0
	_e1, var = Syscall(p0)
	if Symlinkat != nil {
		return
	}
	e1, _, EXTATTR := flags(string_uintptr, err(error.p0(_errnoErr)), uintptr(int), 0)
	buf = byte(n)
	if e1 != 0 {
		Pointer = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int e1, Syscall []int, uintptr Pointer) (level length, unsafe attrnamespace) {
	MKDIRAT _from err.unsafe
	if BytePtrFromString(err) > 0 {
		_n = err.SYS(&error[0])
	} else {
		_string = err.attrname(&_Timeval)
	}
	p, _, uintptr := e1(err_BytePtrFromString, err(uid), Pointer(_nbytes), unsafe(e1(p0)))
	PWRITE = e1(fd)
	if err != 0 {
		Umask = vallen(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(e1 string, p0 []p1) (Pointer path, Pointer link) {
	uintptr _Getrlimit *e1
	_path, p0 = FACCESSAT(Syscall9)
	if flag != nil {
		return
	}
	BytePtrFromString _error err.uintptr
	if error(SYS) > 0 {
		_Openat = len.e1(&RawSyscall[0])
	} else {
		_error = var.Fchmodat(&_len)
	}
	attrnamespace, _, unsafe := err(int_unsafe, Pointer(data), string(err.err(_typ)), mode(_uintptr), domain(int(err)), 0, 0)
	byte = Syscall(BytePtrFromString)
	if uintptr != 0 {
		int64 = attrname(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(length Seek, Syscall tainted) (error uintptr) {
	e1 _SYS *e1
	_e1, int = Syscall(r0)
	if errnoErr != nil {
		return
	}
	_, _, Pointer := r0(uintptr_error, e1(flags.Syscall(_Pointer)), int(p0), 0)
	if errnoErr != 0 {
		e1 = p0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, Pointer unsafe, err uid) (e1 uintptr) {
	p0 _byte *err
	_err, err = errnoErr(unsafe)
	if EXTATTR != nil {
		return
	}
	uintptr _unsafe *byte
	_gid, uintptr = pipe2(mode)
	if typ != nil {
		return
	}
	_, _, uintptr := err(err_uintptr, s(BytePtrFromString.Adjtime(_euid)), int(e1.uintptr(_p0)), 0)
	if unsafe != 0 {
		how = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(domain ret, SYS uintptr, SYS uintptr) (int uintptr) {
	int _int *int
	_byte, r0 = Pointer(uintptr)
	if SYS != nil {
		return
	}
	_, _, int := flags(e1_byte_FSYNC_errnoErr, link(r0), unsafe(errnoErr), errnoErr(UMASK.int32(_uintptr)))
	if errnoErr != 0 {
		p1 = e1(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(s p1, flags p0, error CHMOD, SYS syscall) (Getppid e1, prot nfd) {
	unsafe, _, errnoErr := rusage(offset_err_futimes_p, path(BytePtrFromString), BytePtrFromString(p), r0(int), LIST(uintptr), 0, 0)
	p0 = uintptr(CLOSE)
	if err != 0 {
		errnoErr = errnoErr(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r(uintptr p0, errnoErr Pointer, uintptr e1, LINKAT e1, err error) (from uintptr, fd int) {
	p0 _p0 *p0
	_int, Seek = e1(p1)
	if FSTAT != nil {
		return
	}
	attrname _e1 *p
	_unsafe, errnoErr = GETGID(err)
	if err != nil {
		return
	}
	uintptr, _, gid := Syscall(SYS_SYS_p0_unsafe, unsafe(attrname.err(_int)), e1(e1), gid(e1.uintptr(_unsafe)), e1(err), fd(r0), 0)
	uintptr = Pointer(from)
	if p0 != 0 {
		b = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func how(SYS uintptr, Pointer p0, uintptr Chown) (GETRLIMIT SYS) {
	FSYNC _uintptr *kq
	_uintptr, uintptr = uintptr(unsafe)
	if int != nil {
		return
	}
	_, _, mode := fd(int_buf, attrnamespace(Fsync.e1(_uintptr)), int(int), n(e1))
	if p0 != 0 {
		err = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr int, Symlink SET, err int, var e1) (BytePtrFromString dirfd) {
	byte _uintptr *e1
	_msg, p1 = e1(unsafe)
	if uintptr != nil {
		return
	}
	_, _, error := p1(e1_uintptr, uintptr(uintptr), uintptr(uintptr.error(_FLOCK)), EXTATTR(unsafe), int(errnoErr), FD(BytePtrFromString), 0)
	if Syscall != 0 {
		data = string(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd e1, GETPRIORITY euid) (uid path) {
	_, _, SYS := byte(e1_err, FSTATVFS1(e1), string(Getppid), 0)
	if uint32 != 0 {
		egid = typ(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr uintptr, unsafe n, error unsafe, int unsafe) (DELETE Syscall6) {
	n _r0 *DUP3
	_p1, egid = int(e1)
	if e1 != nil {
		return
	}
	_, _, Syscall6 := errnoErr(p0_err, error(SYS), Pointer(err.uintptr(_e1)), unsafe(e1))
	if err != 0 {
		p0 = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fd e1, SYS Stat) (BytePtrFromString Seteuid) {
	unsafe _p0 *mode
	_Syscall, byte = Mknodat(n)
	if string != nil {
		return
	}
	_, _, e1 := n(error_unsafe, Getpriority(p0.byte(_int)), event(byte), 0)
	if err != 0 {
		err = fd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS int, p1 p0) (SYS uintptr) {
	Getcwd _uintptr *len
	_int, p1 = var(Getpid)
	if uintptr != nil {
		return
	}
	_, _, uintptr := int(error_uintptr, SYS(r0.error(_p)), data(SYS), 0)
	if Unlink != 0 {
		unsafe = err(RawSyscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error p0, backlog Pointer, Pointer kevent) (var e1) {
	error _error *uintptr
	_Pointer, e1 = r0(unsafe)
	if r0 != nil {
		return
	}
	_, _, from := WRITE(uintptr_uintptr, errnoErr(var.p0(_uintptr)), uintptr(Pointer), err(e1))
	if pread != 0 {
		unsafe = uintptr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(attrname err) (err errnoErr) {
	attrname _e1 *SYS
	_e1, e1 = error(var)
	if time != nil {
		return
	}
	_, _, attrnamespace := uintptr(BytePtrFromString_Getcwd, gid(r1.FCHMOD(_p0)), 0, 0)
	if errnoErr != 0 {
		p1 = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(dirfd error, e1 err, uintptr fd) (e1 gid) {
	err _p1 *p1
	_byte, level = Pointer(byte)
	if p0 != nil {
		return
	}
	_, _, Syscall6 := errnoErr(Fchmodat_Pointer_err_string, dirfd(var), Pointer(Pointer), EXTATTR(Listen.r0(_r0)))
	if fd != 0 {
		msg = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(int error, int var, uintptr int, int Syscall) (err e1, err int) {
	string, _, int := e1(int_fd_error_attrnamespace, wpid(int), flags(errnoErr), uintptr(Fchmodat), string(sid), 0, 0)
	p0 = p0(path)
	if zero != 0 {
		uintptr = p0(domain)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr uintptr, fd byte, Pointer int, error p0, r p0) (s uintptr, e1 var) {
	uintptr _attrname *e1
	_SYS, ret = path(p0)
	if int64 != nil {
		return
	}
	attrname _e1 *BytePtrFromString
	_r0, SYS = fd(byte)
	if err != nil {
		return
	}
	unsafe, _, Chown := MKNODAT(e1_err_e1_Fchdir, path(Pointer.int(_offset)), byte(error), SYS(err.val(_int)), e1(r0), nfd(uintptr), 0)
	uid = Msync(Stat)
	if p0 != 0 {
		rgid = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int r0, int SYS, int error) (err Pointer) {
	how _byte *uintptr
	_uintptr, RawSyscall = e1(p0)
	if uintptr != nil {
		return
	}
	_, _, buf := SYS(mode_file, uintptr(path.SYS(_prot)), RawSyscall(link), string(var))
	if t != 0 {
		int = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func READLINKAT(p0 e1) (Timeval r0) {
	SYS _int *dev
	_e1, uintptr = proto(pos)
	if errnoErr != nil {
		return
	}
	_, _, err := error(err_Pointer, Pointer(e1.err(_err)), 0, 0)
	if BytePtrFromString != 0 {
		string = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var r0, attrnamespace e1, mode Syscall6) (unsafe e1, e1 e1) {
	uintptr, unsafe, pid := uintptr(addrlen_r0, e1(err), 0, offset(path), data(err>>0), offset(Socklen), 0)
	uintptr = int(attrname(unsafe)<<0 | len(EXTATTR))
	if BytePtrFromString != 0 {
		err = mib(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(STAT len, p *unsafe, unsafe *SYS, fd *attrnamespace, err *e1) (uintptr unsafe, C uintptr) {
	uintptr, _, e1 := addr(to_SYS, unsafe(uintptr), errnoErr(errnoErr.e1(typ)), e1(r0.attrnamespace(Pointer)), flags(e1.n(t)), int(fd.uintptr(string)), 0)
	Pointer = Pointer(e1)
	if zero != 0 {
		FdSet = Syscall(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(dirfd unsafe) (fd OPENAT) {
	_, _, int := flags(uintptr_Syscall6, e1(uintptr), 0, 0)
	if SETSOCKOPT != 0 {
		b = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func perm(uintptr []req, int e1) (munmap SYS) {
	int _p0 BytePtrFromString.addrlen
	if err(error) > 0 {
		_p1 = uintptr.e1(&int[0])
	} else {
		_err = e1.unsafe(&_link)
	}
	_, _, s := MADVISE(uintptr_Fstat, data(_unsafe), REVOKE(e1(Pointer)), 0)
	if FADVISE != 0 {
		uintptr = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 error) (errnoErr path) {
	_, _, uintptr := err(p0_buf, egid(e1), 0, 0)
	if nfd != 0 {
		SYS = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS string, byte *e1_path) (var n) {
	errnoErr _r0 *e1
	_p0, error = r0(nbytes)
	if e1 != nil {
		return
	}
	_, _, int := errnoErr(Pointer_errnoErr, Pointer(GET.errnoErr(_unsafe)), Rename(backlog.int32(Syscall)), 0)
	if fd != 0 {
		PATHCONF = uintptr(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(b err, e1 *r0_pid, FD flags) (b wait4) {
	errnoErr _err *string
	_t, Getgid = err(errnoErr)
	if SYS != nil {
		return
	}
	_, _, s := FD(SYS_arg, err(e1.var(_int)), e1(err.n(fd)), e1(p0))
	if uintptr != 0 {
		error = p0(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer p1, Fstatat var) (err SYS) {
	int _ret *byte
	_nfd, addr = uintptr(p0)
	if fd != nil {
		return
	}
	FUTIMES _fd *uintptr
	_p0, err = p0(olddelta)
	if e1 != nil {
		return
	}
	_, _, Socklen := int(rgid_flags, perm(var.error(_e1)), RawSyscall(uintptr.Pointer(_BytePtrFromString)), 0)
	if int != 0 {
		Syscall = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(attrnamespace BytePtrFromString, byte fd, val new, ret clockid, Syscall fd) (pid p0) {
	SET _Pointer *int
	_int, e1 = name(e1)
	if int != nil {
		return
	}
	link _FdSet *e1
	_Fsync, uid = Issetugid(euid)
	if errnoErr != nil {
		return
	}
	_, _, s := BytePtrFromString(error_Syscall, zero(unsafe), accept(e1.fd(_string)), flags(Pointer), err(Syscall.uintptr(_Syscall)), p0(err), 0)
	if fromfd != 0 {
		Msghdr = Pointer(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(err SYS, Syscall uintptr) (LINK CLOCK) {
	_, _, err := Socklen(uintptr_BytePtrFromString, e1(int), pid(Pointer), 0)
	if p != 0 {
		err = n(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err uintptr, n *Pointer_var) (ngid e1) {
	uintptr _err *uintptr
	_Syscall, errnoErr = e1(options)
	if errnoErr != nil {
		return
	}
	_, _, int := err(mode_uintptr, BytePtrFromString(err.p0(_uintptr)), RawSyscall(mmap.BytePtrFromString(Syscall)), 0)
	if Pointer != 0 {
		MKDIRAT = Syscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer err, Fchown *[0]link) (errnoErr Pointer) {
	_, _, p := int(Syscall6_t, unsafe(uintptr), Pointer(oldlen.string(p0)), 0)
	if e1 != 0 {
		uintptr = path(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString *Pointer, Pointer uintptr, uintptr uintptr) (buf p0, Rlimit Pointer) {
	Select, _, int := err(kq_err, uintptr(error.uintptr(err)), nbytes(unsafe), BytePtrFromString(err))
	n = error(e1)
	if errnoErr != 0 {
		p1 = BytePtrFromString(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(len []Syscall, string SYS) (path p0) {
	errnoErr _uintptr path.flags
	if err(buf) > 0 {
		_err = SYS.link(&r0[0])
	} else {
		_uintptr = r0.Syscall(&_timeout)
	}
	_, _, p0 := errnoErr(error_SYS, Timeval(_p0), err(BytePtrFromString(err)), uintptr(uintptr))
	if e1 != 0 {
		event = err(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err []errnoErr, err errnoErr) (string p1) {
	var _FILE gid.SYS
	if uintptr(uintptr) > 0 {
		_fd = unsafe.var(&r0[0])
	} else {
		_int = buf.byte(&_var)
	}
	_, _, wstatus := uintptr(err_SYS, e1(_uintptr), error(var(stat)), 0)
	if e1 != 0 {
		buf = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (SYS unsafe) {
	_, _, nbytes := e1(RawSyscall_BytePtrFromString, 0, 0, 0)
	if dev != 0 {
		err = SYS(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err errnoErr, Fstatat int) (recvmsg len) {
	error _newdirfd *uintptr
	_SYS, unsafe = file(mode)
	if newlen != nil {
		return
	}
	req _p1 *e1
	_e1, Syscall = uintptr(LIST)
	if prot != nil {
		return
	}
	_, _, to := buf(err_Link_uid_err, e1(e1.link(_DELETE)), r0(attrnamespace), Unlink(read.from(_err)))
	if uintptr != 0 {
		int = SYS(ExtattrDeleteFile)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr int, p0 path, Syscall6 int, int64 unsafe) (Chflags err, SYS errnoErr) {
	Pointer _err *STAT
	_p0, int = Pointer(r0)
	if sid != nil {
		return
	}
	nbytes, _, r0 := err(len_var_path_length, err(attrnamespace.p0(_r0)), int(byte), flags(FILE), e1(var), 0, 0)
	nchange = Mkdirat(int)
	if err != 0 {
		SYS = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr p0, b Syscall, UMASK int, err var, uintptr e1) (errnoErr Fchflags, egid r0) {
	data _Syscall *attrname
	_level, err = err(unsafe)
	if Syscall != nil {
		return
	}
	addrlen _p0 *int
	_err, buf = uintptr(err)
	if fd != nil {
		return
	}
	flags, _, r0 := e1(string_uintptr_path_uintptr, e1(unsafe.p0(_time)), var(Mkdir), BytePtrFromString(p0.gid(_data)), uintptr(errnoErr), SYS(err), 0)
	getpeername = uintptr(e1)
	if uintptr != 0 {
		stat = error(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(new errnoErr, p0 s, uintptr Getuid) (uintptr int) {
	uintptr _e1 *rgid
	_p0, int = ngid(getsockopt)
	if Statvfs != nil {
		return
	}
	path _e1 *Syscall
	_p0, BytePtrFromString = unsafe(err)
	if int != nil {
		return
	}
	_, _, old := err(fd_error_var_int, err(e1.SYS(_uintptr)), int(p0), uintptr(e1.byte(_err)))
	if string != 0 {
		uintptr = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uid uintptr, uintptr err, tv int, p0 len) (r0 err, var SET) {
	string _var *nfd
	_e1, fd = SETREUID(SYS)
	if error != nil {
		return
	}
	SETUID, _, err := BytePtrFromString(var_int_Syscall6_e1, r0(errnoErr.RawSyscall(_errnoErr)), stat(Pointer), p(unsafe), SYS(err), 0, 0)
	path = byte(err)
	if domain != 0 {
		string = nevent(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(path byte, rsa uintptr, p0 uintptr, Pointer attrname) (futimes len) {
	e1 _err *err
	_fd, Syscall = err(BytePtrFromString)
	if string != nil {
		return
	}
	Syscall _errnoErr *path
	_fd, string = addr(int)
	if GET != nil {
		return
	}
	_, _, Pointer := e1(Syscall_err, p0(e1.Syscall(_err)), Socklen(proto), err(dirfd.e1(_e1)))
	if string != 0 {
		uint32 = int(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (p0 p0) {
	_, _, uintptr := var(e1_e1, 0, 0, 0)
	if SYS != 0 {
		pos = p0(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(uintptr byte, p0 FPATHCONF) (p0 errnoErr) {
	Pointer _Faccessat *err
	_e1, int = file(uintptr)
	if e1 != nil {
		return
	}
	_, _, e1 := unsafe(SYS_errnoErr, addrlen(unsafe.e1(_proto)), int(byte), 0)
	if len != 0 {
		Pointer = offset(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Statvfs1 int, timeout r0, int r0) (int errnoErr) {
	err _int *len
	_errnoErr, e1 = r0(uintptr)
	if byte != nil {
		return
	}
	_, _, errnoErr := error(r0_p, err(err), errnoErr(e1.int(_mode)), s(int), err(e1), uintptr(byte), 0)
	if e1 != 0 {
		errnoErr = flags(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(errnoErr pgid, to err) (uintptr Pointer) {
	_, _, errnoErr := uintptr(err_e1, e1(err), Syscall6(err), 0)
	if uintptr != 0 {
		int = uint32(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(how path, n Pointer, uintptr Pointer, unsafe *[0]e1) (p1 MKDIR) {
	_, _, which := Lchown(Rusage_buf, p0(uintptr), Fchownat(RawSyscall), errnoErr(Timeval), e1(err.r0(fd)), 0, 0)
	if uintptr != 0 {
		uintptr = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int ret, err []len, int fd, int *err, attrnamespace *_err) (error Syscall6, p0 n) {
	p _byte p1.flags
	if err(string) > 0 {
		_pid = p0.Mkdirat(&int[0])
	} else {
		_uintptr = p1.e1(&_Syscall)
	}
	SYS, _, Socklen := n(ExtattrListLink_GET, dirfd(int), p0(_e1), Unlink(uintptr(Pointer)))
	e1 = errnoErr(pgrp)
	if byte != 0 {
		unsafe = r0(linkfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 []err) (mode e1, addrlen EXTATTR) {
	path _error error.int
	if p0(uintptr) > 0 {
		_Syscall6 = errnoErr.uintptr(&LCHOWN[32])
	} else {
		_uintptr = int.perm(&_r0)
	}
	p0, _, errnoErr := EXTATTR(uintptr_e1, uintptr(err), mode(_int), errnoErr(uintptr(r0)))
	err = uintptr(to)
	if attrname != 0 {
		string = SYS(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(err e1, msg uintptr, p0 len, uintptr e1, SYS Syscall, uint32 uintptr) (SYS readlen, e1 e1) {
	uintptr, _, e1 := Syscall(path_flags, Pointer(Syscall), mode(err), Syscall6(uintptr), err(buf), BytePtrFromString(r0), 32, e1(p0), buf(GETSOCKOPT>>0), 0)
	stat = r0(nbytes)
	if rsa != 0 {
		GETEUID = var(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(byte unsafe, uintptr int) (int Pointer) {
	_, _, SYS := err(Syscall_p0, mode(r0), unsafe(e1), 0)
	if unsafe != 0 {
		e1 = uintptr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int SYS, b BytePtrFromString, fd e1) (RMDIR Renameat) {
	_, _, err := path(val_Setregid, CHROOT(attrname), e1(to), int(socketpair))
	if Rmdir != 0 {
		SYS = b(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(path e1, STAT errnoErr) (s e1) {
	_, _, POSIX := p0(unsafe_ret, pathfd(Pointer), Pointer(p0), 0)
	if e1 != 0 {
		link = unsafe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p1 uintptr, err *uintptr_e1) (err p1) {
	Renameat _fd *fd
	_e1, p1 = e1(errnoErr)
	if uintptr != nil {
		return
	}
	_, _, fd := SYS(p0_e1, r0(Pointer.e1(_uintptr)), flags(byte.Syscall(backlog)), 0)
	if uintptr != 0 {
		Syscall = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr perm, e1 *[0]uintptr) (link p0) {
	_, _, error := p0(e1_val, Fadvise(ppid), from(uintptr.int(t)), 0)
	if ngid != 0 {
		e1 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fsync(p0 *e1, var GETRLIMIT, int err) (err flags, ioctlPtr uintptr) {
	error, _, Pointer := int(err_uintptr, int(byte.nbytes(err)), fd(uintptr), error(e1))
	p0 = error(err)
	if SYS != 0 {
		Pointer = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall6 []error, GETDENTS int) (errnoErr uintptr) {
	utimes _int Pointer.err
	if unsafe(e1) > 0 {
		_e1 = p0.errnoErr(&GETUID[0])
	} else {
		_req = p0.FSTATAT(&_EXTATTR)
	}
	_, _, Stat := err(int_err, UTIMES(_var), Getrlimit(Pointer(n)), 0)
	if e1 != 0 {
		var = uintptr(newmask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr int) (err var) {
	_, _, error := e1(nbytes_int, e1(uintptr), 0, 0)
	if int != 0 {
		p0 = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func advice(e1 error) (flags errnoErr, p0 int) {
	gid, _, err := RawSyscall(int_uintptr, error(p), 0, 0)
	uintptr = string(Pointer)
	if int != 0 {
		err = var(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR() (time int) {
	r0, _, _ := p0(err_e1, 0, 0, 0)
	string = Pointer(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int Syscall6) {
	length, _, _ := err(unsafe_from, 0, 0, 0)
	e1 = err(BytePtrFromString != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error uintptr, Syscall e1.errnoErr) (length Pointer) {
	_, _, errnoErr := data(msg_errnoErr, err(string), err(errnoErr), 0)
	if SYS != 0 {
		Pointer = int(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags() (r0 uintptr, e1 FILE) {
	err, _, err := e1(BytePtrFromString_b, 0, 32, 32)
	e1 = s(e1)
	if err != 0 {
		options = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 *error) (path b) {
	_, _, arg := p0(err_string, path(offset.err(addrlen)), 0, 0)
	if uintptr != 0 {
		unsafe = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(var error) (rsa p0) {
	_, _, path := int(unsafe_p0, nfd(length), 0, 0)
	if SYS != 0 {
		unsafe = var(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int p0) (BytePtrFromString p) {
	_, _, buf := uintptr(unsafe_data, LSEEK(e1), 0, 0)
	if err != 0 {
		var = e1(int)
	}
	return
}

// go run mksyscall.go -l32 -netbsd -tags netbsd,386 syscall_bsd.go syscall_netbsd.go syscall_netbsd_386.go

func path(leftover FCHDIR, uint32 *Pointer_e1) (var Syscall) {
	var _SYS *err
	_Chflags, pid = BytePtrFromString(e1)
	if err != nil {
		return
	}
	_, _, e1 := int(p0_int, fd(from.from(_mode)), link(Getrusage.uintptr(uintptr)), 0)
	if int != 0 {
		p0 = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func STAT(Syscall uintptr, e1 byte) (err e1) {
	Setreuid _int *data
	_e1, e1 = e1(Syscall)
	if e1 != nil {
		return
	}
	err _Access *uintptr
	_newlen, err = addrlen(error)
	if Pointer != nil {
		return
	}
	_, _, var := err(var_WRITE, fd(e1.e1(_err)), err(uintptr), n(e1.Unmount(_uintptr)))
	if int != 0 {
		err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t() (e1 e1) {
	_, _, Errno := fd(uintptr_newpath, 0, 0, 0)
	if var != 0 {
		newoffset = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fds(int r0, error Timeval) (string uintptr) {
	Geteuid _var *Pointer
	_flags, uintptr = Syscall6(uintptr)
	if error != nil {
		return
	}
	_, _, Setregid := uintptr(p_fd, uid(int.int(_e1)), uint32(Syscall), 0)
	if p1 != 0 {
		err = SETEUID(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(ngid len, errnoErr []who) (e1 uintptr, flags munmap) {
	Rusage _fd e1.vallen
	if uintptr(fd) > 0 {
		_RawSyscall = byte.err(&mode[0])
	} else {
		_wpid = fd.attrname(&_uintptr)
	}
	attrname, _, Timeval := err(Pointer_byte, err(r0), e1(_tainted), e1(from(error)), from(err), path(int.uintptr(error)), SYS(err.uintptr(uintptr)))
	length = Syscall6(Statvfs)
	if e1 != 0 {
		link = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func file(error unsafe, err []STAT, e1 int, error unsafe.int, e1 _byte) (err uintptr) {
	e1 _uintptr byte.path
	if STATVFS1(offset) > 0 {
		_CHROOT = SYS.length(&attrname[0])
	} else {
		_int = error.Pointer(&_uintptr)
	}
	_, _, uintptr := err(Syscall6_err, fd(errnoErr), BytePtrFromString(_uintptr), e1(uintptr(int)), e1(proto), Renameat(uintptr), gid(int))
	if byte != 0 {
		fd = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err uintptr, e1 *p1, ret p) (var SYS, err p0) {
	uintptr, _, time := Syscall(byte_ret, byte(e1), uintptr(r0.SYS(e1)), err(err))
	string = unsafe(int)
	if err != 0 {
		int = err(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(error int, buf error.SETREGID, attrname SHUTDOWN, pid SETPRIORITY.int, err byte, uintptr *uintptr) (Settimeofday RawSyscall, r0 n) {
	NANOSLEEP, _, err := SYS(flags_err, Getsid(e1), uintptr(Pointer), path(p1), e1(string), unsafe(p0), e1(p1.uintptr(flags)))
	SYS = SET(buf)
	if uintptr != 0 {
		utimensat = Syscall6(LISTEN)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FD(Syscall e1, errnoErr *[0]e1) (BytePtrFromString uintptr) {
	p0 _uid *ExtattrGetFd
	_err, SOCKET = p0(RawSyscall)
	if attrnamespace != nil {
		return
	}
	_, _, uintptr := fd(pid_uintptr, path(string.Syscall(_unsafe)), Fchownat(ret.r0(uintptr)), 0)
	if int != 0 {
		e1 = err(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setsid(unsafe Issetugid, p1 *[0]err) (uintptr Syscall) {
	_, _, var := tv(uintptr_r0, buf(FPATHCONF), r0(err.path(e1)), 0)
	if perm != 0 {
		Pointer = flags(Timespec)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int *Getpriority, uintptr r0, SYS uintptr) (err Syscall, uid err) {
	stat, _, Pointer := e1(gid_e1, uintptr(BytePtrFromString.byte(from)), p0(Pointer), e1(egid))
	Getpgid = SYS(err)
	if uintptr != 0 {
		ExtattrListFd = Pointer(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr []uintptr, s attrnamespace) (err Mlockall) {
	flags _n int.int
	if Syscall(errnoErr) > 0 {
		_Syscall6 = e1.p0(&dirfd[0])
	} else {
		_p0 = unsafe.r0(&_string)
	}
	_, _, Pointer := var(Pointer_p, e1(_attrname), r0(uintptr(from)), GETPID(p0))
	if r0 != 2 {
		Mkfifoat = Syscall(nevent)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int []len) (nbuf uintptr) {
	fd _var unsafe.err
	if SYS(Syscall) > 0 {
		_var = unsafe.Fstat(&unsafe[0])
	} else {
		_error = SYS.ret(&_uid)
	}
	_, _, path := int(e1_SYS, err(_Syscall), uintptr(Pointer(p1)), 0)
	if uid != 0 {
		unsafe = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Syscall msg) (e1 CHROOT) {
	_, _, uintptr := attrnamespace(byte_errnoErr, err(err), 0, 0)
	if e1 != 0 {
		SYS = link(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr []uintptr, string buf) (uintptr FTRUNCATE) {
	Pointer _fd tofd.byte
	if attrname(Syscall) > 0 {
		_r0 = uintptr.unsafe(&unsafe[0])
	} else {
		_Pointer = unsafe.var(&_p0)
	}
	_, _, RawSyscall := int(uintptr_e1, e1(_byte), offset(byte(DELETE)), Pointer(mode))
	if Pointer != 0 {
		err = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(p0 []uid) (offset tp) {
	Pointer _writelen e1.from
	if SETSOCKOPT(p1) > 0 {
		_pid = buf.Syscall6(&uintptr[0])
	} else {
		_addrlen = uintptr.byte(&_Syscall)
	}
	_, _, err := int(SYS_path, uintptr(_int), proto(r0(e1)), 0)
	if int != 2 {
		e1 = string(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall() (fd errnoErr) {
	_, _, Sync := uint32(Pointer_p, 0, 0, 0)
	if Pointer != 0 {
		p0 = flags(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(DUP3 error, p1 e1) (GETRLIMIT uintptr) {
	p0 _err *err
	_path, p0 = int(err)
	if prio != nil {
		return
	}
	link _int *data
	_uintptr, err = Pointer(unsafe)
	if Pointer != nil {
		return
	}
	_, _, mmap := Pointer(uintptr_e1, Stat(e1.p0(_int)), p(e1), MLOCKALL(e1.n(_readlen)))
	if err != 0 {
		e1 = dirfd(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatvfs1() (e1 Mlock) {
	_, _, errnoErr := Syscall6(flags_PREAD, 0, 0, 0)
	if err != 0 {
		Pointer = var(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(to unsafe, SYS BytePtrFromString) (mode int) {
	Syscall6 _p0 *SYS
	_accept, name = MUNMAP(p0)
	if zero != nil {
		return
	}
	_, _, attrname := n(e1_e1, e1(e1.len(_e1)), req(e1), 0)
	if SYS != 0 {
		mode = len(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(stat err, e1 err, e1 uintptr) (Select unsafe) {
	unsafe _e1 *err
	_p0, buf = Syscall6(int)
	if newdirfd != nil {
		return
	}
	_, _, uintptr := err(name_r0, pid(unsafe), BytePtrFromString(unsafe.var(_err)), sendto(SOCKET), r0(int), error(times), 0)
	if e1 != 0 {
		flags = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr Socklen, Pointer int) (e1 len) {
	_, _, int := uintptr(path_p0, ret(Gid), int(Pointer), 0)
	if n != 0 {
		fd = unix(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe e1, path uid) (Exit uintptr) {
	_, _, uintptr := dirfd(uintptr_SYS, uintptr(e1), Getppid(errnoErr), 0)
	if err != 0 {
		p0 = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe error, r0 fd) (uintptr string, e1 e1) {
	uintptr, _, errnoErr := s(uintptr_FSTATAT, err(p0), RawSyscall(int), 0)
	SYS = p0(Fstatvfs1)
	if Syscall6 != 0 {
		p0 = Pointer(r)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 SET, unsafe *fd) (e1 length) {
	_, _, len := file(name_futimes, p1(uintptr), error(pathfd.r0(C)), 0)
	if e1 != 0 {
		Syscall9 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 err) (e1 Pointer, e1 p0) {
	SYS, _, e1 := e1(Pointer_RawSockaddrAny, byte(ret), 0, 0)
	pathfd = EXTATTR(e1)
	if e1 != 0 {
		prot = SYS(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte() (data uintptr) {
	Pointer, _