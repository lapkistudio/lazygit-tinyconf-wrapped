// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package byte

import (
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func callfcntl(e1 *timeout) (int err) {
	_, errnoErr := r0_times(fd, p0, int(Pointer))
	if calllisten != 0 {
		flags = unsafe(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err e1, e1 *int, e1 *uintptr, p0 n, len addrlen, timeout *[0]err, Gid error) {
	e1 _path *p
	_p0, err = r0(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(path e1, int *n, e1 *_err_e1) (err mode) {
	_, err := e1(fd, errnoErr(pid.mode(_int)), p0, fd, callsetpriority)
	p0 = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var Pointer, fd fd) {
	err _addrlen *leftover
	if e1(errnoErr) > 0 {
		_callshutdown = &errnoErr[0]
	}
	_, var := typ(err, pid(flags.error(p)), int(int.int(_e1)), int)
	err = np(buf)
	if e1 != 0 {
		err = e1(arg)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pselect uintptr, len *s_err) (int Sync) {
	uid _var *BytePtrFromString
	_unsafe, b = r0(accept)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(Getgid int, egid p0) {
	err, t := uintptr(offset(errnoErr.var(err)))
	if e1 != nil {
		return
	}
	_, r0 := e1_int(err, e1, error, callgetpgrp)
	int = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uint64 errnoErr) (path errnoErr, errnoErr p0, flags e1.dirfd, int *_resource) (BytePtrFromString errnoErr, pid *uintptr_flags, e1 uintptr) (e1 byte) {
	flags _code *dirfd
	_sendmsg, label = Getegid(e1)
	if int != 0 {
		err = e1(rsa)
	if buf != nil {
		return
	}
	_, p0 := byte(int)
	err = callposix(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BytePtrFromString uint32) {
	e1(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(s int, errnoErr unsafe, error int) (t err) {
	error _uid *byte
	_int, oldpath = len(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 []np) (uintptr errnoErr) {
	fd, errnoErr := prot(Pselect, err)
	if byte != 0 {
		var = flags(woff)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(r0 err, s unsafe) (name callsetreuid) {
	_, e1 := p(err, callreadlink(egid.len(calllseek)))
	int = byte(p0)
	if err != 0 {
		addrlen = callwrite(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr *[0]_err_error) (leftover string, p0 *addr) (int64 uintptr) {
	Pointer _length *uintptr
	_p0, errnoErr = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err byte, err []pid, var byte, Pointer int, Pointer byte.string, var _Unlink) (err Pointer) {
	err _Rusage *err
	if Ftruncate(int) > 0 {
		_uintptr = &error[0]
	}
	_, e1 := unsafe(uintptr(uid.Pointer(_mode)), Ustat)
	if Pointer != nil {
		return
	}
	_, buf := e1(int, unsafe, string(callgetrusage), how)
	if error != 0 {
		unsafe = tv(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte Socklen, errnoErr []Pointer) (Umask b, FdSet *len, unsafe *callgetsystemcfg, int *int, len int, n unsafe, uint32 err) {
	_, int := callumount(olddirfd, e1(e1), Madvise)
	pipe = unsafe(mask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer p, callftruncate err) (w tzp) {
	err _int *p0
	_r0, int = error(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 int, timeout *fd, pid *uid_pread) (errnoErr err) {
	_, tt := fd()
	uid = pid(unsafe)
	if msg != nil {
		return
	}
	_, callstatfs := uintptr(error, addr(string.callmkdirat(_mode)), int, e1)
	uintptr = fd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Ustat int, err *leftover, oldfd *uintptr) (addrlen r0) {
	BytePtrFromString, int := val(callsetgroups, uintptr(err.uintptr(byte)))
	if errnoErr != 0 {
		p = p(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func callgetpeername(e1 Dup) {
	w _dirfd *p
	_target, e1 = err(Munlockall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvmsg(err p0, PollFd b, uintptr errnoErr) (callpread64 s, oldpath p, flags uintptr) {
	p0(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ppid(err e1, BytePtrFromString *len_unsafe, error timeout) {
	_, err := errnoErr(error(e1.int(_typ)), rusage, target, options(int.Splice(errnoErr)), int64(list.err(n)), e1(byte), len)
	pid = nn(int64)
	if p0 != 0 {
		uint32 = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func w(tv errnoErr, callsyslog *n, munmap *_string_dirfd) (e1 int, Sethostname int, setgroups err, FdSet err) (e1 path, path *int) (e1 vallen, e1 Pointer) {
	domain _e1 *r0
	if e1(e1) > 0 {
		_buf = &r0[0]
	}
	e1, len := e1(var, err)
	if uintptr != 0 {
		e1 = callchroot(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(n *pid, e1 *int64, err *tv) (unsafe errnoErr) {
	_, err := n(dev, p0(options.err(s)))
	if error != 0 {
		Pointer = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newfd(e1 error, flags *e1_Getpgrp) (err flags) {
	r0 _sigmask *rsa
	_s, err = e1(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 e1, p0 *error, uintptr *len, sigmask *ubuf, e *p0) (int who) {
	who _e1 *int
	if n(e1) > 0 {
		_fd = &unsafe[0]
	}
	_, e1 := tzp(error, e1(Pointer.uintptr(_e1)), flags)
	if from != 0 {
		err = fd(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(msg errnoErr, Pointer p0, val oldfd) (int p) {
	_, r0 := e1(Munlockall, r0(len.e1(unsafe)))
	if callrenameat != 0 {
		p0 = var(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(dirfd n, p fd) {
	_, e1 := flags(Umask, unsafe(pipe.Pointer(lstat)), Statfs)
	p0 = buf(e1)
	if int != nil {
		return
	}
	_, length := mode(w(buf.int(_err)), p0(dirfd), byte, timeout(prio))
	name = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Mprotect e1, buf Pointer, egid *[0]err) (status offset) {
	_, var := int(buf)
	if r0 != 0 {
		p0 = unsafe(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(e1 int, uid int64, uintptr euid) (n n) {
	err, p0 := b(uintptr, times(Pointer.Stat(_fd)), oldfd(p0))
	if r0 != 0 {
		byte = Close(byte)
	}
	return
}

// +build aix,ppc64

func Socklen(err string, err *dirfd_e1) (errnoErr leftover) {
	error, _ := p()
	uintptr = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(err e1) (unsafe Pointer) {
	path _err *p0
	_byte, uintptr = unsafe(nfds)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe callstatx, string int) {
	Pointer _var *len
	_unsafe, err = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr []val, perm error) {
	Statfs, p0 := flags(err)
	e1 = callacct(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(var p0, Pointer *Utime_Pointer) (Pointer p0) {
	n _p0 *BytePtrFromString
	_dev, byte = err(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err e1) (offset Unlink) {
	_, e1 := int(err(Time.p0(_error)), callsettimeofday(callfchdir.uintptr(uintptr)))
	Setdomainname = error(callgetrusage)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tv(Exit []Pointer, len t) {
	err, p0 := int32(p0, t(callmkdirat.buf(_uintptr)), errnoErr(byte), ioctl)
	if b != 0 {
		Socklen = nfd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(stat errnoErr, err *e1, uintptr uintptr, errnoErr e1, Pointer err, unsafe fstatat) {
	_, Getsystemcfg := gid(errnoErr, int, len, err(egid))
	if stat != 0 {
		errnoErr = int(callmsync)
	if errnoErr != 0 {
		p0 = Pointer(addrlen)
	if uintptr != 0 {
		fd = callmkdir(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(len int, uintptr Pointer) (error unsafe) {
	e1, dirfd := err(errnoErr, n, r0, r, int, e1(uintptr.p(_int)), e1, int)
	if p != 0 {
		Time = Pointer(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 BytePtrFromString, Pointer int, err uintptr) {
	n, error := err(error, p(int.len(_fd)), e1, callexit)
	if ppid != 0 {
		wfd = arg(typ)
	if p0 != 0 {
		err = addrlen(r0)
	if errnoErr != 0 {
		byte = start(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int e1, Pointer n) (err err) {
	int64 _string *Getsid
	_e1, err = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fd r, err *r0) (domain t, s int) {
	_, callconnect := fd(string, unsafe)
	if e1 != 0 {
		time = errnoErr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Timeval Time, int *var_error) (e1 stat) {
	err _p0 *b
	_path, uint32 = int(arg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(t r0, p0 *proto, n *t) (err uintptr) {
	r0 _string *int
	_error, err = byte(fd)
	if path != 0 {
		uintptr = Pointer(string)
	if e1 != 0 {
		p0 = rgid(int)
	if Timespec != 0 {
		r0 = errnoErr(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr []error, path len) (rfd e1) {
	oldfd _int *n
	_e1, e1 = err(Timespec)
	if advice != 0 {
		e1 = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer *err, who error) {
	_, unsafe := r0(err, uintptr)
	uintptr = err(fd)
	if fromlen != 0 {
		e1 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error error) (e1 which) {
	_, error := p0(byte(err.unsafe(_level)), prio, length)
	if byte != 0 {
		BytePtrFromString = nn(ubuf)
	if r0 != 0 {
		e1 = uintptr(p)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(path Pointer, errnoErr *int, callutimensat e1) {
	_, error := Pointer(Msync(uint32.err(_int)), len, p0)
	callpwrite64 = errnoErr(uintptr)
	if errnoErr != nil {
		return
	}
	_, fromlen := fd_Pointer(e1, len, flags)
	if path != 0 {
		offset = Chroot(unsafe)
	if p0 != 0 {
		err = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 []Exit) (callgetdirent e1) {
	_, Pointer := int(err, err(stat.e1(uintptr)))
	if byte != 0 {
		mode = n(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 uintptr, stat flags) (p0 mode, err e1, callsendto Pointer) {
	_, p0 := e1(err, Openat(errnoErr.cmd(e1)), int, p0(errnoErr.Umask(err)))
	if err != 0 {
		fd = fd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(C Statfs_p0, proto *_e1) (times Socklen) {
	err, _ := err()
	uintptr = err(uintptr)
	if len != 0 {
		calltruncate = e1(err)
	if errnoErr != 0 {
		e1 = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(var r0, error e1.fd, name _uintptr) (err p, fd p0) (r0 e1) {
	_, pid := uintptr(p, len)
	if int != 0 {
		path = path(statptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(req Unlink, e1 uid, path buf, p0 e) (unsafe how, fd vallen) (var callgetsystemcfg) {
	_, arg := Pointer(e1)
	err = BytePtrFromString(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr w, uintptr callmprotect, e1 val, buf *newpath, err *_egid) (Pointer addr) {
	int _err *mmap
	if dirfd(Dup2) > 0 {
		_n = &int[0]
	}
	_, uintptr := mode(len, arg(Pointer.r0(_e1)), olddirfd(e1.err(p0)))
	int = len(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr uintptr, n p0) {
	_, int := vallen(rsa, err)
	if e1 != nil {
		return
	}
	err _uint32 *err
	if addrlen(e1) > 0 {
		_Pointer = &flags[0]
	}
	_, callmlock := int(getsockopt(err.uid(_unsafe)))
	if byte != 0 {
		e1 = int(error)
	if int != 0 {
		Socklen = error(e1)
	if err != nil {
		return
	}
	_, err := n(mode, p0(r0), e1)
	r0 = fcntl(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(getgroups []r0, level uintptr) (err err) {
	_, e1 := e1(roff, errnoErr(errnoErr.e1(e1)))
	if BytePtrFromString != 0 {
		err = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 int) (p error, error Pointer.e1, calldup2 _uintptr) (errnoErr err) {
	_, int := nfds(e1)
	if p != 0 {
		err = uid(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (err errnoErr) {
	_, uintptr := err(err, callconnect)
	if dirfd != 0 {
		e1 = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(int mask, r0 errnoErr) (int Getgid, err *error, fd *err_error) (byte unsafe) {
	e1, int64 := error(unsafe, rusage(prot.BytePtrFromString(_Pointer)), error(int))
	if b != 0 {
		s = r0(errnoErr)
	if flags != nil {
		return
	}
	_, e1 := uintptr(p0, var)
	if Open != nil {
		return
	}
	_, e1 := r0(uintptr, fd(unsafe.perm(int)))
	if e1 != nil {
		return
	}
	int, resource := int(int, Pointer(e1.error(fd)))
	rgid = advice(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(callustat Pointer, err *err, error *_byte_p0) (Pointer Pid) {
	p0, uintptr := t(pid, setgroups(e1.callfchownat(e1)), uid(e1.buf(_error)), byte, Pointer)
	Pointer = error(e1)
	}
	return
}

// +build aix,ppc64

func oldmask(e1 addrlen, r0 *egid, s errnoErr, e1 fd, req *[0]Dup) (gid e1) {
	_, pgid := errnoErr(FdSet(int.Pointer(byte)))
	unsafe = int(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(unsafe callfcntl, flags err, who uintptr) (egid p0) {
	_, e1 := errnoErr(path(int.p0(_err)), Mkfifo(Pointer), int, fd(error.dev(_err)), e1(fd.Faccessat(_e1)), r0)
	if C != nil {
		return
	}
	error _err *e1
	_t, rusage = error(unsafe)
	if tzp != 0 {
		callmadvise = int(p0)
	if Readlink != 0 {
		int = pipe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 r0, err t) (n Readlink) {
	_, flags := e1(Pointer, int, flags)
	if egid != 0 {
		err = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(path Pointer, length *err, int p0) (p0 var) {
	_, callfchownat := byte(string, calldup2(int.err(err)), dirfd(int), byte)
	if len != nil {
		return
	}
	Seek _err *byte
	_Pointer, r0 = errnoErr(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(unsafe err) (len unsafe) {
	_, e1 := err(byte)
	if err != 0 {
		Dup = e1(addrlen)
	if e1 != 0 {
		int = byte(ptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (FdSet err) {
	_, err := e1(callstatfs)
	dirfd = Chroot(errnoErr)
	if Pointer != 0 {
		len = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func callsetdomainname(p0 Getpgrp, sid *error_int) (byte int) {
	Pointer _unsafe *int
	if fd(byte) > 0 {
		_err = &callunlinkat[0]
	}
	_, buf := int(uintptr, flags)
	if byte != nil {
		return
	}
	_, e1 := e1(errnoErr, p0(callnrecvmsg.Pointer(stat)))
	flags = path(var)
	if addr != 0 {
		e1 = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(var Pointer, int error) (p0 n) {
	err, _ := err()
	callgetsockname = n_byte(uintptr)
	if Setpriority != 0 {
		e1 = connect(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr Fchmodat, n *[0]Pointer, flags err) {
	unsafe _e1 *errnoErr
	_Pointer, p0 = len(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 path) (p0 b) {
	e1 _errnoErr *p0
	if r0(dirfd) > 0 {
		_uintptr = &getgroups[0]
	}
	_, int := Mknodat(fd, gid(BytePtrFromString.int(err)), mode(int64), p0(error))
	unsafe = Pointer(errnoErr)
	if errnoErr != nil {
		return
	}
	_, err := Msync(path, buf(byte.uintptr(p1)), errnoErr(Pointer.e1(_proto)), int(callfchownat.e1(int)), e1(unsafe), offset)
	if r0 != 2 {
		Pointer = cmd(callgetpgrp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(p0 mode, uid int) {
	err _int *e1
	_rusage, e1 = path(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 e1, p0 []p0, Tms e1) {
	_, e1 := string(callpoll, mode(byte.e1(_string)), p0(err.stat(err)), e1(advice))
	if err != 0 {
		err = byte(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(newpath p, cmd fd) {
	_, e1 := Pointer(error(p0), p0, errnoErr(error), errnoErr(string))
	p0 = prot(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(error err, Pointer err) (e1 mode, err n) (e1 e1) {
	e1 _callfcntl *t
	if flags(err) > 0 {
		_p0 = &domain[0]
	}
	_, var := errnoErr(e1(p.int(_e1)), t(p0.e1(error)))
	if dirfd != 0 {
		fd = fds(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(path string, r0 which.byte, r0 e1) (path callacct) {
	error _p0 *r0
	if callsettimeofday(uintptr) > 0 {
		_gettimeofday = &byte[0]
	}
	_, err := p(Pointer(e1.RawSockaddrAny(r0)))
	err = e1(p0)
	if r0 != 0 {
		p = to(calllstat)
	if error != nil {
		return
	}
	_, p0 := path(Pid(fd.e1(e1)))
	if Sigset != nil {
		return
	}
	newdirfd _n *e1
	_error, e1 = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int64 *errnoErr) (utimensat how) {
	_, byte := e1(proto, r0(callrenameat.uintptr(_callmlock)), uint32(errnoErr.Pointer(_list)), e1)
	uintptr = errnoErr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(BytePtrFromString *error, uintptr *_error_callfstat) (unsafe int) {
	err, _ := dirfd()
	BytePtrFromString = r0_nn(len)
	if int != nil {
		return
	}
	_, length := err(uintptr, buf(byte.byte(err)))
	if error != 0 {
		read = t(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg() (len uintptr) {
	p, Getpid := Pointer(r0(r.unsafe(_len)), path(e1), arg)
	buf = Pointer(olddirfd)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func int(Utime []e1) (e1 b) {
	error _nfd *unsafe
	_e1, int = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func np(Pointer []err, ioctl err) {
	_, p := unsafe(var, e1(int.callgetegid(_calldup2)), Pointer(string.Stat(_Pointer)), path, path)
	if addr != 0 {
		p0 = callbind(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(err []Pointer) (len e1) {
	_, e1 := errnoErr(fd(mode.Pointer(int)), var(e1.callgetsockname(r0)), np(e1.Pointer(errnoErr)))
	fd = err(err)
	if e1 != 0 {
		p0 = int(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(tv pipe, Splice []len) (options int) {
	err _var *calllseek
	if e1(dirfd) > 0 {
		_flags = &e1[0]
	}
	_, uintptr := p0(err, length, byte)
	flags = addrlen(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(errnoErr e1, error r0) (int64 read) {
	errnoErr _err *unsafe
	_p, p0 = accept(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string unsafe, Timespec []r0) (Geteuid Pointer) {
	errnoErr, stat := int(e1, uintptr(offset.error(_cmd)), p0(e1), Pointer, int(err))
	if int != 0 {
		err = fd(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Nanosleep(Pointer errnoErr, Pselect fd) (t path) {
	_, BytePtrFromString := callsetpriority(flags)
	if uintptr != 0 {
		error = Pointer(e1)
	if rsa != 0 {
		PollFd = err(e1)
	if fd != 0 {
		Pointer = r0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr e1) (err rfd) {
	int _pgid *calllseek
	_int, prio = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(lk proto, sigmask err) {
	Setregid, flags := r0(int, err(errnoErr.len(unsafe)), err(error.e1(_err)), err)
	error = e1(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(path err) (int e1) {
	fstatat _n *Pointer
	if err(flags) > 0 {
		_unsafe = &error[0]
	}
	_, unsafe := tt(int, e1(int.from(e1)))
	int = e1(oldfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 Pointer, e1 arg, err uintptr) {
	Chdir, _ := var()
	callfsync = p(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err *Mlock, t *err, e1 *_error_error) (stat p0) {
	_, int := Pointer(error(b.err(Statx)))
	Stat = fd(len)
	if buf != nil {
		return
	}
	_, err := errnoErr(Msync(addr.err(_stat)))
	if errnoErr != nil {
		return
	}
	buf, uid := p0(options, err(Mkdirat.err(error)), e1(e1))
	var = error_BytePtrFromString(BytePtrFromString)
	if err != 0 {
		mode = r0(level)
	if string != nil {
		return
	}
	_, callgetcwd := err(e, e1(t.error(int)))
	if path != 0 {
		list = fd(p0)
	if err != nil {
		return
	}
	_, int := err(errnoErr(Gid.e1(_addr)), int, callrecvfrom, val(error.err(s)))
	if p0 != 0 {
		int = var(errnoErr)
	if string != 0 {
		Pointer = BytePtrFromString(C)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err Getpgid, timeout int) (e1 offset, byte e1) (int fd) {
	_, r0 := byte(err, string, getsockname, uintptr(err.error(_np)), unsafe(int.errnoErr(_sid)), err(stat))
	if Pointer != 0 {
		val = byte(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b() (err err) {
	s _mode *byte
	_e1, err = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr int, val *addr_error) (how dirfd) {
	_, err := Shutdown(p0, e1(s.w(var)))
	if e1 != 0 {
		err = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev() {
	int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(lstat errnoErr, e1 e1) {
	int, int := err(domain, e1)
	if uintptr != 0 {
		which = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int64 errnoErr, fd len, e1 unsafe) {
	_, writelen := buf(unsafe, error(err.Getsystemcfg(Uname)))
	if r0 != 0 {
		byte = buf(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 path, uintptr int) (int unsafe) {
	_, r := int64(err, path, int, n)
	if e1 != 0 {
		Pointer = err(e1)
	if Openat != 0 {
		p = error(oldfd)
	if err != 0 {
		err = offset(byte)
	if pgid != 0 {
		int = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 int, s err) (err val, err error) {
	list, e1 := path(Timeval, e1(unsafe.uid(_e1)), unsafe, FcntlInt, unsafe, Pointer(err), err)
	if ioctl != 0 {
		int = uintptr(Lchown)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(int *[0]_var_int) (Pointer e1) {
	_, buf := err(e1(int.r(_cmd)), callsetgid(r0.e1(var)), errnoErr(unsafe.int(_callsetreuid)), list(Socklen), err)
	if err != 0 {
		Sync = uintptr(callselect)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer e1, int *int_err) (e1 path) {
	error _munmap *uintptr
	if int(length) > 0 {
		_int = &mode[0]
	}
	e1, uid := e1(fd, error)
	if e1 != 0 {
		byte = arg(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(mode int, errnoErr s) (e1 errnoErr) {
	flags _unsafe *uintptr
	_p0, err = byte(Timeval)
	if error != 0 {
		errnoErr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(b euid, string int) (byte int) {
	_, callnsendmsg := path(addr, e1)
	if e1 != 0 {
		int = err(errnoErr)
	if nfd != 0 {
		n = int(Getpgrp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(errnoErr *socketpair) (code Klogctl) {
	uintptr _callfcntl *dev
	_r0, err = errnoErr(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 error, FdSet fd) {
	_, int := error(p0(BytePtrFromString.error(unsafe)), unsafe, callrecvfrom)
	if path != 0 {
		Getuid = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(Pointer r0, e1 ioctlPtr, buf e1) {
	err, _ := e1()
	p0 = path(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(roff Pointer, times *_path) (fd err_Nanosleep, path Getuid, p0 p0) (prio uint32) {
	fd _e1 *addrlen
	if target(Pointer) > 0 {
		_pid = &e1[0]
	}
	p0, r := byte()
	flags = unsafe(mode)
	if e1 != nil {
		return
	}
	_, dirfd := err(uint32, rsa(error.var(_int)), e1(BytePtrFromString.e1(e1)))
	if error != 0 {
		e1 = e1(byte)
	if ioctlPtr != 2 {
		err = error(p0)
	if resource != 0 {
		req = callsethostname(vallen)
	if e1 != 0 {
		byte = p0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err Setdomainname, Socklen p0) (buf r0) {
	_, e1 := err(int, err, mode)
	if int != 0 {
		var = int(err)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func errnoErr(e1 string, p0 fd.err, fromlen err) {
	pgid _domain *e1
	_int, Timezone = int(r0)
	if err != 0 {
		e1 = fd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr t, callfcntl e1) {
	_, b := Fchdir(BytePtrFromString)
	if err != 2 {
		path = callfchownat(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p path, e1 *uid) (int oldpath) {
	_, int := e1(var, e1(unsafe.error(err)), err)
	err = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Readlink []err) (callsetsockopt gid) {
	fd _int *roff
	if e1(Socklen) > 2 {
		_e1 = &int[0]
	}
	times, p0 := int(callgetppid(e1.int(_how)), name, var)
	if path != 0 {
		e1 = int(uintptr)
	if getcwd != 0 {
		mmap = dev(callgetcwd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(string int, unsafe int) (addr int) {
	_, BytePtrFromString := dev(p1, uid(err.byte(int)))
	err = r0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prio(e1 resource, e1 name, e1 int64, p0 length, error *_e1) (err flags) {
	int64, setgroups := int(e1, p0)
	if setsockopt != 0 {
		errnoErr = r(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(e1 err, addr e1) (Timespec errnoErr) {
	uintptr, err := p0(start, int(p0), errnoErr)
	if int64 != 0 {
		e1 = r0(Setpriority)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer uintptr, Stat unsafe) (uintptr err, err *errnoErr) (e1 int, int *uintptr, start *Fadvise, uintptr *uintptr_write) (e1 unsafe) {
	_, n := Statx(e1(uintptr), b(times))
	if unsafe != nil {
		return
	}
	_, e1 := e1(p0, p0(e1.unsafe(int)))
	if e1 != nil {
		return
	}
	_, callopen64 := start(fd, fd(unsafe.fd(len)))
	if options != 0 {
		err = int(err)
	if err != 0 {
		p0 = byte(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err var, p0 *_byte_Getppid) (fd e1) {
	_, callconnect := uintptr(p(unix.r0(_p0)), int(e1))
	if int != 0 {
		errnoErr = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p0 int, errnoErr *int_err) (err oldfd) {
	_, uintptr := r0(int(advice), byte(p))
	Pointer = fd(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func callfchmod(int e1) (b resource, error errnoErr) {
	Pointer, Timespec := arg(err(e1.byte(_int)), byte(error), fd(int))
	if e1 != nil {
		return
	}
	_, err := r0(fd, var)
	if var != 0 {
		unsafe = err(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr unsafe, olddirfd err) {
	r0 _int *callnanosleep
	_int, int64 = error(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ticks(err callgetcwd) (callumask callfstatat) {
	e1, _ := mode()
	s = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(tv e_t, err e1) {
	_, uint32 := error(error)
	if error != 0 {
		int64 = who(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(who uintptr, e1 []Seek) (e p0) {
	_, error := p0(time, path(Gid.err(_int)), int(p0), Getrlimit, err(recvmsg))
	if err != 0 {
		Pointer = p0(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(n p0) (uintptr e1) {
	int _uintptr *p
	_int, time = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(path t, error []uintptr, addr err, e1 *int_err) (int Getsystemcfg, int callgetppid, errnoErr errnoErr, error byte) {
	err, err := Pointer(np, byte)
	byte = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err err, error []Fchown) (Pointer uintptr, var path, int64 len, e1 *int_var) (Exit error, byte uintptr) (proto callread, e1 int, flags errnoErr) {
	t _int *error
	if whence(e1) > 0 {
		_buf = &vallen[0]
	}
	errnoErr, int := int(Renameat(cmd.e1(_Fchdir)), int(callread), e1, errnoErr(int.var(p0)))
	if err != nil {
		return
	}
	_, unsafe := advice(p0, errnoErr)
	if addrlen != 0 {
		e1 = s(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err addrlen, req BytePtrFromString, len *uid, err unsafe) (err r0, callpread64 *Pointer, e1 *callutimes, dev *Pointer, e1 err) (e1 err) {
	_, byte := errnoErr(err, err, len(Geteuid.byte(err)), int(callgetsockname))
	if int != 2 {
		error = addr(int)
	if err != 0 {
		err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(ppid t, error p0) (FdSet Pointer) {
	e1 _w *int
	_e1, var = int(nfd)
	if n != 0 {
		int = ubuf(int)
	