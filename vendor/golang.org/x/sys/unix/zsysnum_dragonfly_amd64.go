// { int sigwaitinfo(const sigset_t *set,siginfo_t *info); }
// { int getlogin(char *namebuf, size_t namelen); }

// { int pipe2(int *fildes, int flags); }
// { int semop(int semid, struct sembuf *sops, u_int nsops); }

package SYS

const (
	WAKEUP_UNMOUNT  = 203 // { int sigaltstack(stack_t *ss, stack_t *oss); }
	SYS_SYS        = 37 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	GETGID_SYS_SYNC          = 28  // { int connect(int s, caddr_t name, int namelen); }
	SYS_MLOCKALL         = 319 // { int kldload(const char *file); }
	SYS_KLDSYM          = 4 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
	SYS_FCHFLAGS             = 298 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	SYS_SYS                       = 502  // { int modnext(int modid); }
	SYS_PIPE            = 536 // { int sigaltstack(stack_t *ss, stack_t *oss); }
	SYS_GETSOCKOPT         = 525  // { int dup(int fd); }
	SYS_SET         = 551 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
	GET_DUP2_SYNC              = 14 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SCHED_EXTPREADV_SYS         = 80  // { int umtx_sleep(volatile const int *ptr, int value, int timeout); }
	SETREGID_GETDTABLESIZE       = 234 // { int setpriority(int which, int who, int prio); }
	SYS_SETSOCKOPT             = 516 // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
	REALPATH_GETRESGID                  = 520 // go run mksysnum.go https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master
	SCHED___SYS                  = 483 // { int kill(int pid, int signum); }
	SETPRIORITY_SYS          = 131 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	SYS_SYS      = 197 // { ssize_t vmspace_pread(void *id, void *buf, size_t nbyte, int flags, off_t offset); }
	SYS_SYS_SYS           = 53 // { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }
	SYS_SYS            = 290 // { int getpgid(pid_t pid); }
	FILE_PIPE            = 137 // { int setpgid(int pid, int pgid); }
	SYS_KLDNEXT                            = 331 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	LWP_AIO               = 104 // { int ntp_adjtime(struct timex *tp); }
	MMAP_SYS_GET           = 36 // { int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); }
	ADDR_MSYNC_SYS    = 9 // { int setpgid(int pid, int pgid); }
	SYS_SUSPEND        = 232 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	SYS_UTIMENSAT             = 305 // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_FCHFLAGS_MMAP_CREATE = 530 // { int getlogin(char *namebuf, size_t namelen); }
	SYS_UMTX         = 514  // { int setregid(int rgid, int egid); }
	MQ_SYS           = 522  // { int mprotect(void *addr, size_t len, int prot); }
	LWP_SYS         = 228  // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
	GET_SYS         = 539 // { int accept(int s, caddr_t name, int *anamelen); }
	RFORK_SYS_SYS            = 492  // { int closefrom(int fd); }
	SYS_FCHFLAGS       = 135 // { int aio_write(struct aiocb *aiocbp); }
	WRITEV_FORK_MAX                  = 491  // { int __getcwd(u_char *buf, u_int buflen); }
	MQ_SET           = 534  // { int munlock(const void *addr, size_t len); }
	SETSOCKOPT_LUTIMES            = 318  // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	VARSYM_SYS         = 344  // { int mkdirat(int fd, char *path, mode_t mode); }
	SIGWAITINFO_LWP                  = 490 // { int kldload(const char *file); }
	SYS_SYS_SYS_VMSPACE = 343 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	OPENBSD_VMSPACE        = 27  // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	SYS_SYS                 = 477 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }
	SYS_VQUOTACTL_SYS          = 47 // { int lchflags(const char *path, u_long flags); }
	FSTATAT_SYS           = 58 // { int varsym_set(int level, const char *name, const char *data); }
	SYMLINKAT_UNDELETE      = 519  // { int readlink(char *path, char *buf, int count); }
	SYS_SYS        = 2  // { int fchflags(int fd, u_long flags); }
	ACL_FD        = 24 // { int sched_yield (void); }
	PSELECT_SYS_SYS          = 45 // +build amd64,dragonfly
	AIO_BIND_EXIT_PRIORITY_CHROOT = 309 // { int close(int fd); }
	SYS_SYS               = 96 // { int sched_get_priority_max (int policy); }
	MQ_GET           = 192 // { int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); }
	FCHMODAT_SYS       = 126 // { int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); }
	EXTATTR_SBRK_SYS               = 202  // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }
	FSTATAT_SYS          = 82 // { int mkdirat(int fd, char *path, mode_t mode); }
	SYS___PATHCONF_MQ_PTRACE  = 85 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	GETPRIORITY___SYS_SYS_LWP               = 195  // { int socket(int domain, int type, int protocol); }
	OPEN_GETFSSTAT           = 298 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_LWP                       = 134 // { int getpriority(int which, int who); }
	GET_GETSCHEDULER_ATTACH         = 544 // { caddr_t sbrk(size_t incr); }
	ACCT___SYS        = 452 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS_USCHED_CHOWN    = 250 // { int chflags(const char *path, u_long flags); }
	IOPRIO_SYS_SYS            = 234 // { int __acl_delete_fd(int filedes, acl_type_t type); }
	SOCKETPAIR_SYS_SYSCTL             = 93  // { int socket(int domain, int type, int protocol); }
	SYS_FILE         = 230 // { int listen(int s, int backlog); }
	CLOSE_MSGSND_SYS_SYS  = 520 // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	SYS_SYS                    = 16 // { int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); }
	SYS_SYS                       = 201 // { int mknod(char *path, int mode, int dev); }
	PIPE2_SYS                = 41 // { int sched_yield (void); }
	MAX_FILE          = 341 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }
	SYS_SUSPEND            = 117  // { int recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_GETPARAM             = 333 // { int sysarch(int op, char *parms); }
	GET_SYS        = 226 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	VMSPACE_SETGROUPS_SYS                               = 123 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	RENAME_SENDFILE               = 73  // { int setsid(void); }
	SYS_SYS                    = 9 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
	MSGGET_READLINKAT         = 301 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SIGACTION_SYS                      = 61  // { int modstat(int modid, struct module_stat* stat); }
	FACCESSAT_VMSPACE          = 233 // Code generated by the command above; see README.md. DO NOT EDIT.
	SYS_IOCTL            = 512 // { int usched_set(pid_t pid, int cmd, void *data, int bytes); }
	SYS_MUNLOCKALL                                 = 173 // { int ftruncate(int fd, int pad, off_t length); }
	SET_CTL        = 137 // { int lwp_setname(lwpid_t tid, const char *name); }
	SYS_SYS           = 516  // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
	SYS_SYS              = 131  // { int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
	SYS_SYS           = 70 // { int fchdir(int fd); }
	GETSOCKOPT_SOCKET     = 5  // { int chroot_kernel(char *path); }
	GETRANDOM_SYS         = 140 // { int jail(struct jail *jail); }
	SYS_SYS         = 106 // { int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat); }
	GUEST_RECEIVE         = 56  // { int aio_read(struct aiocb *aiocbp); }
	RECVFROM_SYS             = 117 // { int getcpuclockid(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id); }
	SIGPROCMASK_SYS              = 314  // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_SYS            = 174 // { int kldfind(const char *file); }
	SYS_SYS            = 306  // { int fstatat(int fd, char *path, 	struct stat *sb, int flags); }
	VMSPACE_SEMCTL        = 12  // { int mkfifo(char *path, int mode); }
	LIST_SYS                                = 95 // { ssize_t write(int fd, const void *buf, size_t nbyte); }
	GETPPID_SYS_SYS                = 535 // { int lutimes(char *path, struct timeval *tptr); }
	WAKEUP_SYS          = 50 // { int fpathconf(int fd, int name); }
	SYS_SYS             = 515 // { int modstat(int modid, struct module_stat* stat); }
	DESTROY_SYS_SYS                 = 491 // { int setsid(void); }
	GET_GETSOCKOPT        = 93 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	MMAP_SYS               = 207  // { int sstk(size_t incr); }
	SYS_EXTPREADV        = 541 // { int ioctl(int fd, u_long com, caddr_t data); }
	SYS_SENDMSG_SYS           = 5 // { int sched_yield (void); }
	KQUEUE_SETSCHEDULER            = 173 // { int chroot(char *path); }
	OPENAT_CHFLAGS_GETLOGIN        = 230  // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
	CONNECT_GETPRIORITY        = 134  // { int vmspace_create(void *id, int type, void *data); }
	SYS_GETSOCKOPT                = 333 // { int sigaltstack(stack_t *ss, stack_t *oss); }
	SYS_SYS                 = 537 // { pid_t vfork(void); }
	READLINK_MMAP            = 123 // { int symlink(char *path, char *link); }
	MODSTAT_FCHDIR                  = 321  // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	VMSPACE_RECEIVE                = 253  // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }
	KILL_SENDTO              = 489  // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SYS           = 358 // { int bind(int s, caddr_t name, int namelen); }
	POLL_SYS                = 310 // { int aio_error(struct aiocb *aiocbp); }
	MQ_SET            = 528 // { int closefrom(int fd); }
	SYS_SYS             = 182  // { int chflags(const char *path, u_long flags); }
	SETREGID_MMAP        = 531 // { int sched_getparam (pid_t pid, struct sched_param *param); }
	SYS_SHMDT                           = 26 // { uid_t getuid(void); }
	EXECVE_SYS_UTIMES                         = 116 // { int symlinkat(char *path1, int fd, char *path2); }
	SETREUID_FILE_SYS           = 69 // { int kldfirstmod(int fileid); }
	SYMLINK_MSGSND_VMSPACE                     = 550 // { int ioprio_get(int which, int who); }
	SYS_MODNEXT        = 227 // Code generated by the command above; see README.md. DO NOT EDIT.
	READLINKAT_SYS_SYS            = 358  // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	YIELD_TIMEDSEND       = 147  // { int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); }
	LWP_MSGCTL           = 349 // { int bind(int s, caddr_t name, int namelen); }
	GETUID_PWRITE_SYS          = 15 // { int utrace(const void *addr, size_t len); }
	SYS_SEMCTL                     = 360  // { int aio_error(struct aiocb *aiocbp); }
	SETTIME_SYS                 = 349  // { int fchdir(int fd); }
	MCONTROL_CANCEL             = 157  // { int aio_write(struct aiocb *aiocbp); }
	SYS_unix            = 51  // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
	VMSPACE_SYS             = 9  // { int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); }
	SELECT_CHFLAGSAT              = 525 // { int usched_set(pid_t pid, int cmd, void *data, int bytes); }
	READ_SYS           = 311 // SYS_NOSYS = 8;  // { int nosys(void); } __nosys nosys_args int
	LSEEK_SYS               = 326 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
	FCHFLAGS_GETEGID                         = 551 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	SYS_PSELECT_UNLINKAT_SYS        = 331 // { int kldload(const char *file); }
	FHSTATVFS_SYMLINKAT        = 311 // { int lchown(char *path, int uid, int gid); }
	ACL_UTRACE           = 531 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	VMSPACE_CLOCK                       = 57 // { int setpgid(int pid, int pgid); }
	SYS_SYS                      = 225 // { int setpgid(int pid, int pgid); }
	SETSOCKOPT_MAX               = 232  // { int shmget(key_t key, size_t size, int shmflg); }
	MKNODAT_ACL                      = 148 // { int unlinkat(int fd, char *path, int flags); }
	SYS_MPROTECT_SYS_SEND                 = 468 // { ssize_t extpwrite(int fd, const void *buf, size_t nbyte, int flags, off_t offset); }
	CTL_MODNEXT                                  = 517 // { uid_t getuid(void); }
	SYS_GETVFSSTAT                    = 253 // { int getrusage(int who, struct rusage *rusage); }
	SYS___SYS                 = 319  // { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }
	WAIT4_VMSPACE           = 510 // { int lstat(const char *path, struct stat *ub); }
	GETPPID_CTL_SYS             = 140  // Code generated by the command above; see README.md. DO NOT EDIT.
	FSTATAT_SYNC                                              = 537 // { int kldnext(int fileid); }
	SYS_KLDLOAD               = 116  // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_PROCCTL          = 468  // { off_t lseek(int fd, int pad, off_t offset, int whence); }
	FD_SYS            = 522 // { int recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr); }
	ISSETUGID_READ_SYS    = 390 // { int fchownat(int fd, char *path, int uid, int gid, int flags); }
	SYS_LUTIMES                                    = 316 // { int sched_get_priority_min (int policy); }
	MKNODAT_SYS                    = 507 // { int accept(int s, caddr_t name, int *anamelen); }
	ADJTIME___SYS_SYS_SYS           = 499 // { int seteuid(uid_t euid); }
	SYS_SETEUID_SETUID    = 518 // { int fchmod(int fd, int mode); }
	SYS_EXTATTR_SETPRIORITY          = 517 // { int shmget(key_t key, size_t size, int shmflg); }
	SYS_YIELD                  = 165  // { ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); }
	SIGALTSTACK_SHMDT          = 79 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	ACL_ADDR_SYS       = 514 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_SYS_SYS          = 133  // { int reboot(int opt); }
	SYS_SYS                             = 182 // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
	SYS_SYS_SYS                      = 106  // { gid_t getgid(void); }
	SETPGID_SYS         = 65 // { caddr_t sbrk(size_t incr); }
	SYS_GETSOCKOPT_TIMEDRECEIVE_READLINK_SETUID        = 254 // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SYS_MODFNEXT               = 471 // { int set_tls_area(int which, struct tls_info *info, size_t infosize); }
	SYS_SYS              = 228   // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
	SYS_SYS                = 494 // { int exec_sys_register(void *entry); }
	SYS_PROCCTL_SYS_AIO        = 357 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SYS_SYS           = 517 // { int open(char *path, int flags, int mode); }
	EXTPREAD_GETGROUPS_SYS          = 117 // { int semget(key_t key, int nsems, int semflg); }
	SYS_GETTIMEOFDAY         = 136 // { int mlock(const void *addr, size_t len); }
	CLOCK_LWP               = 513  // { int getlogin(char *namebuf, size_t namelen); }
	SYS_AIO               = 452  // { int statvfs(const char *path, struct statvfs *buf); }
	SYS_SYS                                 = 234 // { int getfh(char *fname, struct fhandle *fhp); }
	SHUTDOWN_SYS_SYS_READV                  = 161 // { int closefrom(int fd); }
	RECVMSG_SETRLIMIT        = 81 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }
	GET_SYS_SYS_FHSTATFS = 20 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS_LWP_SYS                      = 34 // { int chmod(char *path, int mode); }
	SYS_SEMOP_ACL                = 475 // { int kldnext(int fileid); }
	SYS_STAT_SELECT                                 = 521 // { int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); }
	SYS_ACL             = 56 // { int open(char *path, int flags, int mode); }
	KLDSYM_CHOWN_VFORK         = 13 // { pid_t getpid(void); }
	VMM_SYS        = 79  // { int utimes(char *path, struct timeval *tptr); }
	WAKEUP_FILE               = 300  // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	SYS_GETPRIORITY              = 121 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	SYS_JAIL          = 20 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_SYS              = 82 // { int getdents(int fd, char *buf, size_t count); }
	SYS_SYS_RTPRIO_SHMGET            = 4 // { int getpgid(pid_t pid); }
	EXTATTR_SYS_SYS    = 42  // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
	SYS_SYSCTL                = 128 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int
	SYS_VFORK         = 391  // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	LPATHCONF_SYS         = 347 // { int madvise(void *addr, size_t len, int behav); }
	PIPE2_SYS                   = 534 // { ssize_t __realpath(const char *path, char *buf, size_t len); }
	FD_SETTIMEOFDAY        = 135 // { int fstatvfs(int fd, struct statvfs *buf); }
	SYS_CANCEL                                      = 121 // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
	CLOCK_SYS = 9 // { int extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	GETPGRP___LSEEK                         = 116 // { int getpriority(int which, int who); }
	UTIMENSAT_GETFH_FILE                        = 158 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
	SIGPENDING_SYS_INTERVAL              = 537  // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	GETPGRP_WRITEV         = 28 // { int modnext(int modid); }
	MQ_SYS             = 317 // { int accept4(int s, caddr_t name, int *anamelen, int flags); }
	SETRLIMIT_UMTX          = 319 // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	SYS_SYS            = 10 // { int setpriority(int which, int who, int prio); }
	CLOSE_PIPE2                                                    = 97 // { int setuid(uid_t uid); }
	MSGCTL_SYS_SYS         = 502  // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }
	SYS_ACL                            = 525 // { int setregid(int rgid, int egid); }
	GETRESUID_SYS               = 202 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	GETAFFINITY_SYS_REVOKE                = 524  // { pid_t vfork(void); }
	VMSPACE_SIGRETURN        = 499 // { int setsid(void); }
	SYS_ACL              = 27 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	SYS_SYS_FILE                       = 254 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
	OPENBSD_AIO            = 347 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	SYS_KLDUNLOAD                = 26 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }
	SYS_WAIT4        = 228 // { gid_t getgid(void); }
	SYS_SYS_MOUNT               = 301 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	LINKAT_SYS                 = 332 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_SETRESUID_FHSTAT               = 57  // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_GETRESUID                = 330 // { int chown(char *path, int uid, int gid); }
	IOCTL_SHUTDOWN                     = 340 // { int sched_get_priority_min (int policy); }
	SYS_LSTAT        = 337 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
	LWP_SYS            = 547 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int
	PREAD_LIST        = 452 // { int utrace(const void *addr, size_t len); }
	EXTATTR_SETAFFINITY_SYS                   = 481 // { int getpeername(int fdes, caddr_t asa, int *alen); }
	STATFS_SYS_VMM_STATFS             = 518  // { pid_t getpid(void); }
	LUTIMES_SYS        = 131 // { int setpriority(int which, int who, int prio); }
	SYS_SYS                         = 96 // { int sched_getparam (pid_t pid, struct sched_param *param); }
	MQ_SYS                = 96 // { int futimens(int fd, const struct timespec *ts); }
	SYS_TRUNCATE                            = 351 // { int vmspace_mcontrol(void *id, void *addr, 	size_t len, int behav, off_t value); }
	VMSPACE_FSTATAT          = 527 // { int uuidgen(struct uuid *store, int count); }
	LWP_SETTIME_GETPGRP          = 234 // { int pipe2(int *fildes, int flags); }
	SETREUID_SYS                     = 201  // { int listen(int s, int backlog); }
	CONNECT_FILE                                   = 183 // { int getpriority(int which, int who); }
	SYS_BIND_MKNODAT_SYS_PIPE2       = 469 // { int lchmod(char *path, mode_t mode); }
	VMSPACE_FCHOWNAT                    = 27 // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	DELETE___TIMEDRECEIVE_SYS_CONNECT                   = 476  // { int faccessat(int fd, char *path, int amode, int flags); }
	EXTPWRITE_SET                       = 532 // { int fchmodat(int fd, char *path, int mode, int flags); }
	SYS_LIST          = 477  // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
	GETSID_SETRESGID                = 194 // { int semop(int semid, struct sembuf *sops, u_int nsops); }
	SYS_GET              = 512 // { int getfsstat(struct statfs *buf, long bufsize, int flags); }
	SYS___SYS               = 13  // { int fpathconf(int fd, int name); }
	GETRANDOM_SYS                  = 274 // { int mkdir(char *path, int mode); }
	OBREAK_SYS                                    = 511 // { int access(char *path, int flags); }
	LCHMOD_CLOSE                     = 467 // { int accept(int s, caddr_t name, int *anamelen); }
	SYS___MINCORE_SETLOGIN_SYS    = 182  // { int sched_getparam (pid_t pid, struct sched_param *param); }
	GETNAME_SYS           = 361 // { int access(char *path, int flags); }
	MSGCTL_SETRLIMIT                 = 476  // { int mlock(const void *addr, size_t len); }
	GET_SIGRETURN                = 106  // { int kldfind(const char *file); }
	SYS_WAITCOMPLETE             = 308 // { off_t lseek(int fd, int pad, off_t offset, int whence); }
	RECVFROM_LCHFLAGS  = 118 // { int vmspace_mmap(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset); }
	SYS_SYS                    = 201  // { int closefrom(int fd); }
	CLOSEFROM_SYS        = 520  // { ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); }
	EXTCONNECT_SYS        = 39 // { int sstk(size_t incr); }
	CLOCK_CLOSEFROM_SYS    = 227 // { int extconnect(int s, int flags, caddr_t name, int namelen); }
	SYS_SYS         = 79 // { int kenv(int what, const char *name, char *value, int len); }
	GETUID_SETPGID_SYS                    = 32  // { mqd_t mq_open(const char * name, int oflag, mode_t mode, struct mq_attr *attr); }
	ACLCHECK_LISTIO            = 105  // { int symlink(char *path, char *link); }
	SYS_GETCPUCLOCKID        = 511  // { int chdir(char *path); }
	IOPRIO_SYS  = 510 // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	FILE_FSTAT           = 183 // { int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat); }
	MUNLOCK_SYS_ERROR          = 508 // { int sync(void); }
	SEND_WRITE_SYS_SYS             = 75 // Code generated by the command above; see README.md. DO NOT EDIT.
	SENDMSG_SYS         = 41 // { int chflagsat(int fd, const char *path, u_long flags, int atflags);}
	SYS_GET                                 = 82 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	SYS_SYS                     = 220 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	SYS___SYS                 = 158  // { int fstatfs(int fd, struct statfs *buf); }
	CLOSEFROM_SYS                = 24  // { int exec_sys_register(void *entry); }
	SYS_SYS             = 289  // { int mcontrol(void *addr, size_t len, int behav, off_t value); }
	SYS_EXTPREADV         = 507 // { int getpgid(pid_t pid); }
	SYS_SYS                = 73  // { int sigsuspend(const sigset_t *sigmask); }
	SYS_SYS               = 136 // { int lutimes(char *path, struct timeval *tptr); }
	SCHED_FILE_SYS           = 530 // { int chmod(char *path, int mode); }
	SYS_SYS               = 49  // { void extexit(int how, int status, void *addr); }
	UTIMES_UTRACE        = 234  // { int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
	MPROTECT_MQ             = 321  // { int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); }
	SETSID_FCHDIR              = 514 // { int chflags(const char *path, u_long flags); }
	SEMOP_SYS             = 39 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	FD_STATFS_VMSPACE          = 466 // { int open(char *path, int flags, int mode); }
	SYS_EXTPWRITEV_GET        = 200 // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
	MQ_FD         = 32 // { int ftruncate(int fd, int pad, off_t length); }
	UNLINK_MSGSND            = 349 // { int ioprio_set(int which, int who, int prio); }
	SYS___SYS_GETSOCKOPT_LWP  = 9 // { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }
	SYS_GETRESUID = 359 // { int setregid(int rgid, int egid); }
	LSEEK_EXTEXIT        = 524 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	VARSYM_SYS_SYS          = 335 // { int sched_get_priority_max (int policy); }
	SYS_CLOCK                 = 542 // { int swapoff(char *name); }
	UTRACE_SYS         = 200 // { int setreuid(int ruid, int euid); }
	SYS_SYS_GETFSSTAT               = 4 // { int kldstat(int fileid, struct kld_file_stat* stat); }
	PSELECT_UMASK         = 509 // { gid_t getegid(void); }
	MMAP_SYS_ACL                                             = 176 // { void exit(int rval); }
	JAIL_SYS_SYS        = 15 // { int obreak(char *nsize); } break obreak_args int
	SYS_RFORK                  = 55  // { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }
	CTL_SYS                = 303 // { ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }
	SYS_ACL_SYS                                     = 61 // { int obreak(char *nsize); } break obreak_args int
	SCHED_WRITE      = 507 // { int fchdir(int fd); }
	SIGWAITINFO_SYS                              = 490 // { int sigpending(sigset_t *set); }
	MSGSND___GETTID_RECVMSG_SYS           = 514  // { int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); }
	SYS_SYS              = 126 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
	SYS___ACCEPT_GETRESGID_SET  = 122 // { int pathconf(char *path, int name); }
	SETREGID___SYS_SYS_SYS                 = 194  // { int mkdirat(int fd, char *path, mode_t mode); }
	YIELD_EXEC                    = 493 // { pid_t getppid(void); }
	SYS_GETSID           = 498 // { int modfind(const char *name); }
	GET_SCHED         = 492 // { int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); }
	LWP_MOUNTCTL        = 4  // { int setgroups(u_int gidsetsize, gid_t *gidset); }
	GUEST_DUP2      = 517 // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	MQ_SYS              = 530  // { int jail_attach(int jid); }
	UNDELETE_GETFSSTAT           = 343  // { int dup(int fd); }
	MLOCKALL_SYS                    = 316 // { int sigreturn(ucontext_t *sigcntxp); }
	LISTEN_SYS_SYS              = 480 