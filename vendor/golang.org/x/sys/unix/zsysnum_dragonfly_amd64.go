// { int setgid(gid_t gid); }
// { int mcontrol(void *addr, size_t len, int behav, off_t value); }

// { int sigwaitinfo(const sigset_t *set,siginfo_t *info); }
// { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }

package SYS

const (
	SENDTO_SYS  = 298 // { int fcntl(int fd, int cmd, long arg); }
	SET_FUTIMENS  = 69 // { int sigreturn(ucontext_t *sigcntxp); }
	CLOCK_SYS  = 98 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	SYS_RECVMSG = 307 // { int sigwaitinfo(const sigset_t *set,siginfo_t *info); }
	VARSYM_SYS  = 5 // { int jail(struct jail *jail); }
	EXTATTR_CLOSE = 488 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }
	SYS_SYS = 181 // { int lwp_setname(lwpid_t tid, const char *name); }
	// { int unlink(char *path); }
	ACCESS_DELETE                   = 495   // { int mkfifo(char *path, int mode); }
	WAKEUP_LWP                 = 320  // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
	SYS_MOUNTCTL                  = 49  // { int getitimer(u_int which, struct itimerval *itv); }
	FORK_SETPRIORITY                 = 503  // { pid_t getpid(void); }
	RENAME_KEVENT                  = 310  // { int jail(struct jail *jail); }
	JAIL_MCONTROL            = 140  // { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }
	SIGWAITINFO_SYS                 = 205  // { ssize_t extpwritev(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset); }
	SYS_GET                = 31  // { int undelete(char *path); }
	GETFSSTAT_GETRESUID            = 200 // { int fcntl(int fd, int cmd, long arg); }
	SYS_MQ                   = 502 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SCHED_SCHED             = 35 // { int shmget(key_t key, size_t size, int shmflg); }
	UNLINKAT_SOCKETPAIR                 = 314 // { int mcontrol(void *addr, size_t len, int behav, off_t value); }
	GETPGRP_PROFIL           = 316 // { int kldunload(int fileid); }
	FSTATAT_ACL              = 9 // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	SYS_FD             = 194 // { int __acl_delete_file(const char *path, acl_type_t type); }
	EXIT_SYS                  = 485 // { int utrace(const void *addr, size_t len); }
	CHOWN_ERROR                 = 356 // { pid_t vfork(void); }
	SET_CHROOT           = 12 // { int getrusage(int who, struct rusage *rusage); }
	AIO_MODNEXT                 = 83 // { int sched_get_priority_min (int policy); }
	EXTPWRITE_SYS                 = 41 // { int vmspace_destroy(void *id); }
	SYS_FHSTATFS               = 333 // { int getcpuclockid(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id); }
	LPATHCONF_SYS             = 343 // { int getsockname(int fdes, caddr_t asa, int *alen); }
	WRITE_SYS                  = 474 // { int varsym_list(int level, char *buf, int maxsize, int *marker); }
	SWAPOFF_SYS                  = 531 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
	SYS_SYS                 = 543 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SIGALTSTACK_REALPATH          = 100 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	RETURN_SYS               = 358 // { int modfind(const char *name); }
	SYS_MKFIFOAT_SYS             = 515 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	LWP_SYS              = 519 // { int fchmod(int fd, int mode); }
	SYS_SYS             = 344 // { int obreak(char *nsize); } break obreak_args int
	MQ_ADJTIME               = 531 // { ssize_t write(int fd, const void *buf, size_t nbyte); }
	WRITE_UTRACE_SYS         = 333 // { int sched_getscheduler (pid_t pid); }
	FCHOWNAT_RTPRIO_SETTIMEOFDAY        = 308 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
	SIGRETURN_STAT_SENDFILE            = 469 // { int mount(char *type, char *path, int flags, caddr_t data); }
	DESTROY_VMSPACE_SYS           = 233 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	KILL_SYS_MMAP         = 534 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }
	SYS_SYS_SYS       = 360 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
	SYS_GET_MQ          = 310 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	CLOSE_SYS_EXTEXIT         = 359 // { int vmspace_mcontrol(void *id, void *addr, 	size_t len, int behav, off_t value); }
	OPENBSD_SYS                = 79 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	SYS_SYS_SYS             = 536 // { pid_t vfork(void); }
	SYS_SYS_SYS             = 499 // { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }
	SYS_SYS_SYS               = 348 // { int kill(int pid, int signum); }
	SYS_SYS_SYS             = 126 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	PREAD_KLDUNLOAD                = 3 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
	GET_LWP                = 308 // { int link(char *path, char *link); }
	GETITIMER_SYS               = 197 // { int extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	AIO_ADJTIME              = 121 // { int revoke(char *path); }
	READV_WRITE             = 361 // { int setgid(gid_t gid); }
	MLOCKALL_QUOTACTL                 = 545 // { int minherit(void *addr, size_t len, int inherit); }
	LIST_FHSTATFS                = 315 // { int fchmod(int fd, int mode); }
	SYS_SLEEP               = 488 // { int lwp_create(struct lwp_params *params); }
	SYS_SYS               = 494 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }
	MSGCTL_CLOCK               = 489 // { int munmap(void *addr, size_t len); }
	SYS_CREATE              = 201 // { int lchown(char *path, int uid, int gid); }
	RTPRIO_SYS_ISSETUGID                = 350 // { int rmdir(char *path); }
	LIST_SYS_GET               = 347 // { int sstk(size_t incr); }
	OPEN_SYS_SYS              = 505 // +build amd64,dragonfly
	SYS_SYS_SIGSUSPEND             = 551 // { int shutdown(int s, int how); }
	EXECVE_SYS_MQ             = 535 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
	EXTATTR_SET_SYS              = 230 // { int aio_cancel(int fd, struct aiocb *aiocbp); }
	EXIT_GETRESUID_VMSPACE                = 229 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_LWP_SYS             = 531 // { int accept4(int s, caddr_t name, int *anamelen, int flags); }
	CLOCK_ATTACH_SYS           = 450 // { int setreuid(int ruid, int euid); }
	SYS_GETRUSAGE_ISSETUGID        = 537 // { int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); }
	SET_SYS_RTPRIO             = 205 // { int futimes(int fd, struct timeval *tptr); }
	SYS_UNLINK_PSELECT             = 126 // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_SYMLINKAT_KLDSTAT          = 50 // { int getpgrp(void); }
	SYS_FUTIMES               = 65 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	SYS_ACL                = 466 // { int mprotect(void *addr, size_t len, int prot); }
	LWP_CREATE               = 466 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
	READ_SETEUID                = 44 // { int uuidgen(struct uuid *store, int count); }
	ACL_TIMEDSEND                = 59 // { void extexit(int how, int status, void *addr); }
	VMM_SYNC                   = 231 // { int mcontrol(void *addr, size_t len, int behav, off_t value); }
	SYS___WAITCOMPLETE               = 135 // { int ioprio_set(int which, int who, int prio); }
	CLOCK_LWP                 = 324 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	AIO_RFORK                  = 345 // { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }
	SYS_SYS                 = 355 // { int minherit(void *addr, size_t len, int inherit); }
	SYS_ACCT_SYS          = 493 // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	GETITIMER_EXTCONNECT_KLDSYM          = 60 // { int socket(int domain, int type, int protocol); }
	SYS_GUEST_GETAFFINITY           = 251 // { int unlink(char *path); }
	VFORK_SYS              = 203 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
	SYS_SYS               = 531 // { int kill(int pid, int signum); }
	SYS_KLDFIRSTMOD                  = 132 // { int kldstat(int fileid, struct kld_file_stat* stat); }
	SYS_TLS_SYS           = 340 // { int socket(int domain, int type, int protocol); }
	FILE_SYS              = 465 // { int seteuid(uid_t euid); }
	SYS_SHMDT                 = 301 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }
	SET_SYS                 = 532 // { ssize_t read(int fd, void *buf, size_t nbyte); }
	FCHFLAGS_VQUOTACTL                   = 44 // { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }
	SYS_ERROR            = 232 // { int munlockall(void); }
	FD_VQUOTACTL             = 75 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }
	LCHOWN_MSGGET              = 337 // { int ioprio_set(int which, int who, int prio); }
	SYS_SYS             = 81 // { int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	FCHOWNAT_SYS              = 510 // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SYS_SYS           = 37 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }
	DUP2_SYS            = 529 // { int fpathconf(int fd, int name); }
	ACL___unix_CLOSE_GETRES         = 132 // { int kldfind(const char *file); }
	STAT___GETRLIMIT_FCHOWNAT_INTERVAL         = 362 // { int statfs(char *path, struct statfs *buf); }
	SYS___LWP_FILE_KLDFIRSTMOD           = 538 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	SYS___SYS_ACL_SYS           = 473 // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }
	SYS___SYSARCH_SYS_DELETE      = 535 // { int undelete(char *path); }
	SETEGID___SIGPENDING_SYS_SYSCTL        = 479 // { int fstatat(int fd, char *path, 	struct stat *sb, int flags); }
	SYS___SYS_SYS_SYS    = 346 // { int dup(int fd); }
	SETATTR___SYS_SWAPON_FILE      = 302 // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
	SYS_SETPGID             = 305 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	GETPPID_RMDIR_OPEN_MLOCKALL       = 489 // { int sched_get_priority_max (int policy); }
	SYS_EXTEXIT_SYS_PSELECT       = 502 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	SET_SYS_SYS_PWRITE    = 78 // +build amd64,dragonfly
	SYS_SYS_SIGACTION       = 334 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS_SYS              = 225 // { int vquotactl(const char *path, struct plistref *pref); }
	SYS_LWP              = 131 // { int msgget(key_t key, int msgflg); }
	SOCKETPAIR_KILL                 = 203 // { int kenv(int what, const char *name, char *value, int len); }
	SYS_SYS                 = 43 // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SYS_CHOWN                = 97 // { int socketpair(int domain, int type, int protocol, int *rsv); }
	BIND_RTPRIO              = 334 // { int recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_FSTATFS_SYS_FUTIMENS          = 337 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }
	SYS_VMSPACE_SYS_SYS_CHMOD    = 136 // { int linkat(int fd1, char *path1, int fd2, char *path2, int flags); }
	SEND_SYS                = 14 // { int chmod(char *path, int mode); }
	SYS_SYS              = 529 // { int utrace(const void *addr, size_t len); }
	SYS_MOUNTCTL                  = 253 // { int msgget(key_t key, int msgflg); }
	SYS_MQ              = 50 // { ssize_t __realpath(const char *path, char *buf, size_t len); }
	SYS_AREA               = 335 // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }
	SYS_MAX                = 514 // { int clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SYS_LWP_SYS            = 359 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	POLL_SYS                  = 525 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
	LWP_SYS_MSGCTL        = 205 // { ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); }
	MKFIFOAT_SYS_SYS        = 137 // { int accept(int s, caddr_t name, int *anamelen); }
	DUP2_SWAPON_SYS            = 347 // { int utimes(char *path, struct timeval *tptr); }
	USCHED_SYS          = 12 // { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
	PSELECT_PWRITE                  = 470 // { int ftruncate(int fd, int pad, off_t length); }
	SEMGET_CLOSE_ACLCHECK            = 182 // { int swapon(char *name); }
	SYS_GETLOGIN              = 341 // { int lutimes(char *path, struct timeval *tptr); }
	SYS___SIGRETURN             = 18 // { int ioprio_get(int which, int who); }
)
