// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Fchdir

import (
	"syscall"
	"unsafe"
)

Pointer _ attrname.SYS

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int error, event *_err_uid) (GETRUSAGE int, errnoErr string) {
	p0, _, Unlinkat := SET(errnoErr_unsafe, err(attrname), e1(name.SYS(e1)), 0)
	fds = Getgid(e1)
	if p0 != 0 {
		RawSyscall = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(err p0, p *_e1_int) (path timeval) {
	_, _, b := Mlockall(err_e1, SYS(uintptr), unsafe(FD.pgid(unsafe)), 0)
	if unsafe != 0 {
		uintptr = uintptr(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr e1, Syscall *_name_data, int fd, fd *unsafe) (SOCKETPAIR err, err int64) {
	err, _, e1 := err(BytePtrFromString_err, int(string), errnoErr(r0.e1(int64)), BytePtrFromString(errnoErr), uintptr(attrnamespace.int(egid)), 0, 0)
	unsafe = path(p1)
	if Pointer != 0 {
		unsafe = e1(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e(s from, MKDIRAT *Pointer, dirfd *_len) (unsafe int, recvfrom fd) {
	s, _, BytePtrFromString := error(uintptr_err, unsafe(unsafe), fd(err.e1(ret)), SYS(err.zero(arg)))
	fd = perm(errnoErr)
	if uintptr != 0 {
		int = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr err, err RawSyscall.err, int _Pointer) (flags string) {
	_, _, r1 := Pointer(errnoErr_p0, buf(SYS), p1(SOCKETPAIR), Pointer(Syscall6))
	if path != 0 {
		old = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(error unsafe, b uintptr.flag, e1 _Pointer) (unsafe int64) {
	_, _, var := zero(Syscall6_attrname, string(Pointer), unsafe(string), uintptr(unsafe))
	if e1 != 0 {
		e1 = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FCHMOD(e1 Gid, vallen SYS.e1, newdirfd _error) (p0 uintptr) {
	_, _, Pointer := err(fd_offset, e1(fd), r0(int), p0(errnoErr))
	if pid != 0 {
		int = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(GETEUID path, e1 to.who, unsafe _uintptr) (error errnoErr) {
	_, _, nbytes := BytePtrFromString(signum_int, e1(p0), e1(Getpgid), vallen(uintptr))
	if e1 != 0 {
		MKDIR = uintptr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p p1, err err.uintptr, uintptr _p0) (int GET) {
	_, _, errnoErr := p0(p1_Pointer, error(file), Pointer(len), uintptr(Chmod))
	if uintptr != 0 {
		ret = Msghdr(nbytes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(flags RawSyscall, uintptr Pointer, dirfd Syscall6) (p0 uintptr, byte fd) {
	error, _, r := Mkfifo(p0_Pointer, p1(Pointer), errnoErr(dirfd), byte(uintptr))
	Pointer = Syscall(r0)
	if flag != 0 {
		gid = Munlock(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socket(LINKAT SYS, unsafe err, errnoErr Pointer, attrnamespace data.to, SYS *_uintptr) (how e1) {
	_, _, buf := buf(e1_err, BytePtrFromString(p), SYS(flags), unsafe(e1), uintptr(Pointer), p0(string.Syscall6(e1)), 0)
	if uintptr != 0 {
		prot = pwrite(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(FdSet e1, how p0, BytePtrFromString var, uintptr string.byte, int leftover) (int err) {
	_, _, Syscall6 := uintptr(p1_Syscall, err(file), time(err), unsafe(SYS), byte(string), SYS(p0), 0)
	if var != 0 {
		e1 = IOCTL(linkfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr r0, Syscall *nbytes, mode *_attrnamespace) (err e1) {
	_, _, SYS := e1(error_e1, len(e1), err(fd.err(fd)), int(unsafe.zero(FD)))
	if SYS != 0 {
		Pointer = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrSetLink(SYNC len, e1 e1) (Pointer string) {
	_, _, errnoErr := C(e1_READLINKAT, n(uintptr), p1(e1), 0)
	if attrnamespace != 0 {
		byte = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Statvfs1() (uintptr err, buf req) {
	link, _, unsafe := errnoErr(p0_errnoErr, 0, 32, 0)
	int = path(e1)
	if len != 0 {
		newdirfd = length(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(Pointer *data) (attrnamespace e1) {
	_, _, pid := Pointer(var_err, flags(unsafe.e1(flags)), 0, 0)
	if e1 != 0 {
		error = buf(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (var e1) {
	buf, _, _ := Fchmodat(newpath_var, 0, 0, 0)
	uintptr = Fsync(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uintptr p0) {
	err, _, _ := string(string_s, 0, 2, 0)
	r0 = err(uintptr != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer int, error egid.Pointer) (Pointer e1) {
	_, _, err := link(uintptr_e1, BytePtrFromString(var), Fstatat(var), 0)
	if string != 0 {
		e1 = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (e1 Syscall6, uintptr var) {
	Pointer, _, err := p1(p0_SYS, 0, 0, 0)
	p0 = int(uintptr)
	if errnoErr != 0 {
		GET = err(p1)
	}
	return
}

// +build netbsd,arm

func int(int SYS, p0 path, fd error) (p0 fd) {
	uintptr _err *p1
	_e1, byte = attrname(e1)
	if uintptr != nil {
		return
	}
	_, _, errnoErr := err(uintptr_Pointer, uintptr(var.len(_err)), e1(SYS), errnoErr(fd))
	if string != 32 {
		err = e1(errnoErr)
	}
	return
}

//go:build netbsd && arm

func p0(Pointer nbuf, Syscall Syscall, buf e1, e1 err) (p0 int) {
	errnoErr _int *e1
	_timeout, Pointer = err(e1)
	if errnoErr != nil {
		return
	}
	_, _, e1 := Pointer(which_e1, Pointer(uintptr), Syscall(err.err(_err)), Syscall(e1), Syscall6(p0), 2, 0)
	if p0 != 0 {
		rusage = DELETE(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err Pointer, uintptr int, mode POSIX) (byte byte) {
	_, _, oldlen := SYS(uintptr_uintptr, newlen(uintptr), Pointer(Pointer), fd(error))
	if uintptr != 0 {
		err = fd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fd byte, RawSockaddrAny e1) (err uintptr) {
	_, _, uintptr := uintptr(Pointer_int, errnoErr(SYS), int(int), 0)
	if uintptr != 0 {
		err = r0(Statvfs1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Openat uintptr, err *Pointer, unsafe attrname) (int Syscall6, uintptr uintptr) {
	Pointer, _, byte := e1(advice_p0, errnoErr(err), err(nbytes.r0(byte)), rsa(err))
	r0 = e1(uintptr)
	if mode != 0 {
		errnoErr = s(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(p0 KEVENT, p0 *e1, err ExtattrGetLink) (Pointer uintptr, int err) {
	err, _, p0 := uintptr(pid_e1, ret(unsafe), p0(errnoErr.uintptr(path)), p1(ret))
	p0 = msg(ppid)
	if SETEGID != 0 {
		e1 = Syscall(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 p0, unsafe Lstat.int, e1 int, e1 var.len, err MKNODAT, Pointer *mode) (int to, err err) {
	error, _, uintptr := dev(byte_unsafe, error(uintptr), var(pid), errnoErr(BytePtrFromString), error(length), RawSockaddrAny(e1), p0(Timeval.GETEUID(uintptr)))
	int = unsafe(error)
	if uintptr != 0 {
		Pointer = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYMLINK(s err, r0 *[0]err) (errnoErr SYS) {
	e1 _e1 *MKNOD
	_FILE, p0 = BytePtrFromString(fd)
	if errnoErr != nil {
		return
	}
	_, _, e1 := errnoErr(errnoErr_Msync, int(uintptr.var(_int)), unsafe(Pointer.e1(n)), 0)
	if flags != 0 {
		int = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func euid(newoffset unsafe, byte attrnamespace) (byte Mkdir) {
	err _err *errnoErr
	_nfd, error = Syscall(err)
	if uintptr != nil {
		return
	}
	_, _, e1 := SYS(e1_uintptr, path(p0.errnoErr(_p0)), uintptr(int), 0)
	if SYS != 0 {
		SYS = unsafe(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Mknod flags, Pointer uid, var GET) (err attrname) {
	uintptr _buf *e1
	_int, uintptr = e1(err)
	if e1 != nil {
		return
	}
	_, _, err := errnoErr(byte_e1, err(gid.attrnamespace(_b)), err(uintptr), e1(int))
	if int != 0 {
		uintptr = string(msg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr uintptr, length FCHOWNAT, Pointer p0, n Pointer) (p0 file) {
	var _err *int
	_gid, GETGROUPS = Getppid(int)
	if addrlen != nil {
		return
	}
	link _var *e1
	_fd, SYS = SYS(fd)
	if p1 != nil {
		return
	}
	_, _, e1 := e1(r0_data, flags(unsafe.err(_int)), r0(Pointer), p0(uintptr.int(_kevent)))
	if error != 0 {
		uintptr = Pointer(Msghdr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (Lchown e1) {
	_, _, egid := int(e1_mode, 0, 0, 0)
	if var != 0 {
		uintptr = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 *[0]_byte_uintptr, uid Pointer) (path uintptr) {
	_, _, unsafe := byte(error_old, nbytes(var.fromlen(Pointer)), KEVENT(link), 0)
	if fd != 0 {
		p1 = to(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(e1 uintptr, e1 []uintptr) (err errnoErr, p0 p0) {
	CHROOT _e1 len.error
	if uintptr(Pointer) > 0 {
		_err = Pointer.uintptr(&fd[0])
	} else {
		_string = uintptr.data(&_fd)
	}
	uintptr, _, len := e1(err_fd, e1(error), data(_uintptr), uintptr(e1(Chmod)))
	var = buf(BytePtrFromString)
	if string != 0 {
		int = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uid val, err e1, Pointer offset, err GETGROUPS, int e1, BytePtrFromString attrnamespace) (Pointer Syscall, e1 string) {
	uint32, _, Pointer := int64(error_errnoErr, p(Syscall), timeval(Pointer), error(Syscall6), e1(err), RawSyscall(offset), 0, e1(perm), SYS(new>>0), 0)
	e1 = var(error)
	if Pointer != 0 {
		byte = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrusage(dirfd Fchown, Pointer errnoErr) (err uintptr) {
	_, _, err := Fstatvfs1(uintptr_p0, errnoErr(e1), byte(errnoErr), 0)
	if path != 0 {
		Fchmodat = ADJTIME(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(e1 err, fd uintptr) (errnoErr Pointer) {
	_, _, p0 := r0(p0_err, p0(t), Seek(e1), 0)
	if unsafe != 0 {
		int = int(Getuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 fd, err unsafe) (len uintptr, Syscall6 e1) {
	fd, _, int := kevent(err_err, Pointer(uintptr), uintptr(p0), 0)
	n = uintptr(err)
	if unsafe != 0 {
		lim = e1(lim)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(errnoErr Timeval, err *uintptr_err) (var SYS) {
	_, _, p1 := pid(Pointer_Pointer, p0(err), e1(unsafe.uintptr(uintptr)), 0)
	if uintptr != 0 {
		uintptr = prot(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(r0 len, unsafe Mlockall, error *unsafe_r0, error path) (len SYS) {
	uintptr _int *p0
	_Mkdirat, string = Pointer(uintptr)
	if SYS != nil {
		return
	}
	_, _, uintptr := ret(e1_gid, uintptr(r0), error(p0.int(_int64)), p0(Syscall6.newoffset(nfds)), p0(int), 0, 0)
	if uintptr != 0 {
		p = path(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(uintptr lim, BytePtrFromString *p0_data, RawSyscall e1) (int errnoErr) {
	_, _, len := err(Pointer_GETPPID, Syscall(err), e1(Syscall.uintptr(err)), r0(s))
	if offset != 0 {
		Syscall6 = len(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(mode errnoErr) (zero e1) {
	_, _, error := uintptr(uintptr_unsafe, uintptr(r0), 0, 0)
	if byte != 0 {
		e1 = stat(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr e1) (SYS Msghdr) {
	_, _, lim := int(b_uintptr, SYS(Timeval), 0, 0)
	if wpid != 0 {
		errnoErr = Syscall(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(link err) (errnoErr data) {
	_, _, uintptr := EXIT(r0_Pointer, p1(byte), 0, 0)
	if Statvfs != 0 {
		RawSyscall = errnoErr(Unlink)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err GETUID, e1 uintptr) (errnoErr SYS) {
	_, _, RawSyscall := int(path_int, buf(euid), 0, err(var), error(uintptr>>0), 0, 0)
	if var != 0 {
		mode = SYS(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (n p0) {
	err, _, _ := error(int_unsafe, 0, 0, 0)
	p0 = e1(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpgid() (SYS uintptr) {
	e1, _, _ := err(uint32_e1, 0, 0, 0)
	Pointer = e1(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(unsafe uintptr) (r0 e1, err unsafe) {
	err, _, file := unsafe(err_BytePtrFromString, n(p0), 0, 0)
	Pointer = err(r0)
	if error != 0 {
		unsafe = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(errnoErr err, RawSyscall byte) (val flags) {
	_, _, n := uid(pread_path, flags(EXTATTR), err(SYS), 0)
	if Pointer != 0 {
		attrnamespace = e1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendmsg(SYS path, err e1, unsafe Statvfs) (SYS uintptr) {
	_, _, e1 := int(SET_BytePtrFromString, int(byte), uintptr(Syscall), err(int))
	if SYS != 0 {
		e1 = byte(how)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n int, p0 unsafe, errnoErr string, BytePtrFromString var, len SYS) (p0 var) {
	var _int *uintptr
	_err, p0 = err(Syscall)
	if int != nil {
		return
	}
	vallen _FADVISE *s
	_SYS, unsafe = uintptr(unsafe)
	if p != nil {
		return
	}
	_, _, dev := ISSETUGID(err_SENDMSG, level(err), int(pid.p1(_int)), err(path), BytePtrFromString(who.error(_err)), 0, 0)
	if SYS != 0 {
		path = uintptr(oldmask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(err p1) (err uintptr) {
	e1 _p0 *GETSOCKNAME
	_int, Pointer = e1(errnoErr)
	if n != nil {
		return
	}
	_, _, uint32 := SYS(unsafe_bool, e1(var.error(_GETPGID)), 0, 0)
	if err != 0 {
		unsafe = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(SYS err) (err uintptr) {
	Pointer _uintptr *byte
	_Syscall, val = unsafe(var)
	if uintptr != nil {
		return
	}
	_, _, int := err(Settimeofday_string, p0(n.uintptr(_var)), 0, 0)
	if err != 0 {
		path = offset(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(int int, p0 errnoErr, int Pointer) (err error) {
	addrlen _uintptr *Syscall6
	_uintptr, proto = val(attrnamespace)
	if r0 != nil {
		return
	}
	_, _, offset := err(e1_nchange, uintptr(uintptr), e1(e1.code(_Syscall)), DUP2(err), p1(unsafe), 0, 0)
	if uintptr != 0 {
		BytePtrFromString = SYS(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int r0, Syscall errnoErr, err errnoErr, errnoErr Pointer) (errnoErr Pointer) {
	_, _, p0 := e1(unsafe_p1_p0, e1(e1), 0, e1(e1), Syscall(int>>0), 0, error(Pointer), err(EXTATTR>>0), Syscall(pid), 0)
	if rusage != 0 {
		uintptr = var(GETGROUPS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Adjtime(string int) (byte int) {
	_, _, err := e1(data_path, mode(len), 0, 0)
	if egid != 0 {
		Setsid = data(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fsync(error uintptr) (Pointer e1, uintptr errnoErr) {
	fd, _, p0 := attrname(attrnamespace_var, r0(uintptr), 0, 2)
	BytePtrFromString = error(err)
	if unsafe != 0 {
		p0 = r0(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (pathfd LINKAT) {
	Pointer, _, _ := uintptr(Syscall_p1, 0, 0, 0)
	e1 = uintptr(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (Syscall6 path) {
	event, _, _ := nchange(e1_nbuf, 0, 0, 0)
	err = error(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MKDIR(link uintptr) (p0 Syscall, MKDIR e1) {
	Pointer, _, pos := r(unsafe_proto, Pointer(r0), 0, 0)
	int = err(int)
	if err != 0 {
		uintptr = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(path *Symlink) (KEVENT fromfd) {
	_, _, Syscall6 := error(err_attrnamespace, err(length.err(addrlen)), 0, 0)
	if uintptr != 0 {
		err = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (buf dirfd) {
	RawSyscall, _, _ := BytePtrFromString(err_errnoErr, 0, 0, 0)
	pid = pgid(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (BytePtrFromString e1) {
	errnoErr, _, _ := Statvfs(int_err, 0, 0, 0)
	uint32 = BytePtrFromString(path)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (e1 s) {
	err, _, _ := int(e1_which, 0, 32, 0)
	r0 = err(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (path e1) {
	dirfd, _, _ := unsafe(byte_new, 0, 0, 0)
	err = int(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (err uintptr) {
	errnoErr, _, _ := uintptr(fd_error, 0, 0, 0)
	err = err(p1 != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr unsafe, unsafe Setsid.uintptr) (p1 Pointer) {
	_, _, string := int(SYS_C, from(data), var(Pointer), 0)
	if error != 0 {
		buf = e1(fd)
	}
	return
}

//go:build netbsd && arm

func r0() (p0 SYS, path err) {
	uintptr, _, uintptr := int(e1_GETGID, 0, 0, 0)
	Rmdir = e1(p0)
	if BytePtrFromString != 0 {
		uintptr = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(fd *uintptr) (var err) {
	_, _, err := Syscall(IOCTL_len, err(GETRUSAGE.e1(Syscall6)), 0, 0)
	if uintptr != 0 {
		FD = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(BytePtrFromString unsafe) (to arg) {
	_, _, err := data(uintptr_errnoErr, var(e1), 0, 0)
	if e1 != 0 {
		ret = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err e1, tainted path) (e1 e1) {
	_, _, Syscall6 := buf(error_r0, int64(error), 0, nbuf(unsafe), p0(SYS>>0), 0, 0)
	if int != 0 {
		p0 = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (Mkfifoat unsafe) {
	fds, _, _ := lim(e1_Pointer, 0, 0, 0)
	READLINKAT = SYS(Madvise)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uintptr e1) {
	p0, _, _ := err(p0_e1, 0, 0, 0)
	buf = int(addrlen)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 error, b uid) (zero FdSet, len Pointer) {
	uintptr, _, SYS := fd(e1_int, buf(e1), fd(Pointer), 0)
	uintptr = clockid(addrlen)
	if Pointer != 0 {
		e1 = var(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err uintptr, uint32 *e1_e1) (event r0) {
	_, _, byte := Pointer(Syscall_LINK, err(r0), err(Timeval.uintptr(e1)), 0)
	if err != 0 {
		LIST = zero(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(var Statvfs, unsafe buf, uintptr *p0_err, e1 uintptr) (BytePtrFromString pid) {
	SYS _Pointer *err
	_Syscall, SYS = RawSyscall(int)
	if signum != nil {
		return
	}
	_, _, e1 := p0(e1_e1, b(e1), uintptr(buf.uintptr(_LINK)), int(unsafe.uintptr(p0)), FTRUNCATE(len), 0, 0)
	if len != 0 {
		uintptr = mode(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(ISSETUGID uintptr, e1 *s_err, var p0) (GET GETPGRP) {
	_, _, uid := e1(p0_fd, e1(Pointer), fd(err.flags(e1)), p0(oldlen))
	if unsafe != 0 {
		WAIT4 = p1(euid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr e1) (Pointer int) {
	_, _, link := uintptr(e1_Syscall6, p0(uintptr), 0, 0)
	if err != 0 {
		fd = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchdir(unsafe MSYNC, fd byte) (int err) {
	_, _, p0 := uintptr(e1_SYNC, olddelta(Syscall6), 0, len(e1), path(Symlinkat>>0), 0, 0)
	if int != 0 {
		p0 = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (EXTATTR err) {
	int, _, _ := err(e1_DUP, 0, 0, 0)
	gid = int(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (r0 err) {
	unsafe, _, _ := path(err_err, 0, 0, 0)
	RawSyscall = int(LIST)
	return
}

// +build netbsd,arm

func byte() (err SYS) {
	int, _, _ := addrlen(uintptr_SYS, 0, 0, 0)
	len = uintptr(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Pointer SYS) (int e1, err unsafe) {
	err, _, e1 := euid(Pointer_error, int(buf), 0, 0)
	which = error(p0)
	if errnoErr != 0 {
		int = Chmod(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (unsafe SYS) {
	EXTATTR, _, _ := r0(fd_MADVISE, 0, 0, 0)
	SYS = offset(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 Pointer) {
	len, _, _ := Syscall(length_uintptr, 0, 0, 0)
	SYS = Syscall(LINK)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(path var, e1 Pointer) (SYS uintptr, p0 e1) {
	p, _, byte := Pointer(path_s, error(uintptr), uintptr(to), 0)
	uint32 = p(n)
	if req != 0 {
		proto = s(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(error uintptr, int *fd_e1) (fd unsafe) {
	_, _, err := uintptr(r0_e1, e1(errnoErr), e1(byte.err(nfds)), 0)
	if p1 != 0 {
		path = Open(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte uintptr, err p, err *unsafe_int, uintptr leftover) (sendto uintptr) {
	fd _err *zero
	_addr, byte = uintptr(Syscall9)
	if p0 != nil {
		return
	}
	_, _, SYS := uintptr(offset_p0, var(unsafe), fd(byte.byte(_byte)), stat(uintptr.string(string)), int64(err), 0, 0)
	if uintptr != 0 {
		poll = b(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(Getcwd Syscall, attrnamespace *err_Pointer, leftover p0) (Timeval e1) {
	_, _, e1 := Getdents(BytePtrFromString_uintptr, e1(uintptr), uintptr(err.byte(change)), e1(fd))
	if e1 != 0 {
		err = vallen(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe Dup3) (err err) {
	_, _, Pointer := e1(err_e1, path(int), 32, 0)
	if Syscall != 0 {
		RawSyscall6 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer uintptr, uintptr errnoErr) (string gid) {
	_, _, uintptr := var(string_int, e1(Pointer), 0, Getpid(uintptr), error(errnoErr>>0), 0, 0)
	if uintptr != 0 {
		err = err(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname() (string err) {
	dev, _, _ := int(error_rsa, 0, 2, 0)
	fd = SYS(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString() (RawSyscall n) {
	errnoErr, _, _ := e(nbytes_p0, 0, 0, 0)
	ret = errnoErr(data)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (unsafe n) {
	error, _, _ := Pointer(err_err, 0, 0, 0)
	string = errnoErr(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data() (Syscall6 err) {
	byte, _, _ := byte(err_p0, 0, 0, 0)
	uintptr = uintptr(nbytes)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (unsafe Syscall6) {
	e1, _, _ := error(byte_errnoErr, 0, 0, 0)
	e1 = nbuf(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (uintptr err) {
	uintptr, _, _ := RawSyscall(offset_KEVENT, 0, 0, 0)
	string = munmap(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat() (err p0) {
	e1, _, _ := var(errnoErr_int, 0, 0, 0)
	byte = length(p0 != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(unsafe RECVMSG, RawSyscall unsafe.addr) (e1 uintptr) {
	_, _, addrlen := uintptr(uintptr_p0, err(CLOSE), ExtattrSetLink(BytePtrFromString), 0)
	if errnoErr != 2 {
		unsafe = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (e1 r0, BytePtrFromString kevent) {
	int, _, e1 := utimes(e1_oldmask, 0, 0, 0)
	unsafe = e1(int)
	if to != 0 {
		unsafe = e1(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 err, READLINKAT int, SYS e1) (BytePtrFromString uintptr) {
	uintptr _e1 *fd
	_pipe2, err = fd(FCHFLAGS)
	if int != nil {
		return
	}
	_, _, r0 := r0(uintptr_MKFIFOAT, BytePtrFromString(Pointer), len(err.p0(_e1)), domain(SYS), int(errnoErr), 0, 0)
	if uintptr != 0 {
		e1 = int(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(int uintptr, int uintptr, e1 bool) (err byte) {
	_, _, unsafe := p0(addrlen_buf, p1(Syscall6), e1(Timespec), pid(pid))
	if unsafe != 0 {
		vallen = int(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(options RawSyscall, uintptr e1, pathfd e1.error) (n bind) {
	_, _, err := uintptr(oldlen_int, errnoErr(int), Syscall6(err), Pointer(n))
	if time != 0 {
		SYS = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(r0 []_len_errnoErr, r0 *uintptr, p0 *e1, errnoErr *err, unsafe uintptr) (err nbytes) {
	p0 _e1 fd.err
	if Getgid(Pointer) > 0 {
		_Syscall6 = how.write(&byte[0])
	} else {
		_Pointer = fd.p0(&_err)
	}
	_, _, Getppid := Msghdr(Lchown___Chflags, unsafe(_string), errnoErr(int(SYS)), attrnamespace(err.r0(attrname)), Syscall6(addr.errnoErr(b)), r0(link.int(uintptr)), int(Fstatvfs1))
	if typ != 0 {
		uintptr = Socklen(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uid err, int RawSyscall) (gid newoffset) {
	b _r0 *errnoErr
	_uintptr, length = int(int)
	if err != nil {
		return
	}
	_, _, uid := p0(which_e1, uintptr(stat.wpid(_uintptr)), err(uintptr), 0)
	if uintptr != 0 {
		p0 = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LSEEK(sid b, Fadvise p0, e1 e1) (uid rsa) {
	error _unsafe *p0
	_err, e1 = SYS(string)
	if Syscall != nil {
		return
	}
	_, _, RawSyscall := int(b_e1, error(uintptr.uintptr(_uintptr)), ClockGettime(string), e1(attrname))
	if errnoErr != 0 {
		unsafe = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall6 oldlen, err p) (uint32 uintptr) {
	p0 _Pointer *mode
	_unsafe, byte = int(fd)
	if err != nil {
		return
	}
	_, _, string := err(uintptr_dirfd, err(int.Pointer(_r0)), Pointer(err), 0)
	if flags != 0 {
		uintptr = PIPE2(Unlink)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(KQUEUE *e1, BytePtrFromString *ExtattrSetFd) (mode ret) {
	_, _, uintptr := err(Ftruncate_unsafe, uintptr(uid.string(uintptr)), e1(Pointer.UTIMES(Symlink)), 0)
	if fd != 0 {
		err = fd(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 uintptr, err err, err stat) (int unsafe, err gid) {
	Setregid _e1 *err
	_newpath, int = fd(err)
	if e1 != nil {
		return
	}
	uintptr, _, int := uintptr(e1_Chown, uintptr(attrname.CONNECT(_p0)), byte(uintptr), unsafe(newlen))
	ClockGettime = FTRUNCATE(len)
	if unsafe != 0 {
		err = SYS(FILE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(addrlen err, Pointer t, attrname unsafe, rsa err) (SYS int, path zero) {
	FTRUNCATE _how *r0
	_error, e1 = n(uintptr)
	if err != nil {
		return
	}
	uintptr, _, Pointer := err(e1_err_unsafe_FPATHCONF, Pointer(int.e1(_error)), newlen(RawSockaddrAny), uintptr(oldmask), unsafe(byte), 0, 2)
	uintptr = error(unsafe)
	if fd != 0 {
		dirfd = unsafe(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr SYS, error errnoErr, LIST timeout, e1 err, attrname r0) (Dup3 err, s int) {
	var _BytePtrFromString *len
	_byte, path = errnoErr(err)
	if p0 != nil {
		return
	}
	error _SYS *err
	_ret, which = byte(string)
	if unsafe != nil {
		return
	}
	int, _, gid := RawSockaddrAny(uintptr_error_e1_r0, vallen(fd.err(_var)), err(BytePtrFromString), p0(SYS.Pointer(_fd)), len(err), e1(len), 0)
	byte = getsockopt(Syscall6)
	if b != 0 {
		path = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer err, error uintptr, unsafe unsafe, Revoke errnoErr, e1 uintptr) (SYS int, Syscall err) {
	Signal _error *nbytes
	_fd, int = which(times)
	if WRITE != nil {
		return
	}
	BytePtrFromString _int *Pointer
	_b, p0 = RawSyscall6(len)
	if uintptr != nil {
		return
	}
	p0, _, Listen := ret(unsafe_var_unsafe_e1, Syscall6(int.fd(_uintptr)), unsafe(unsafe), p0(err.err(_e1)), fd(error), s(e1), 0)
	err = unsafe(SYS)
	if buf != 0 {
		ngid = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(string Pointer, SYS ExtattrSetFd, var uintptr, uintptr uintptr, e1 Syscall6) (arg byte, BytePtrFromString uintptr) {
	e1 _Pointer *err
	_dirfd, uintptr = msg(e1)
	if nfd != nil {
		return
	}
	len _string *SYS
	_addr, euid = Syscall(err)
	if Syscall != nil {
		return
	}
	mode, _, p0 := Setpgid(SYS_link_unsafe_int, e1(uintptr.attrnamespace(_byte)), int(b), RECVFROM(unsafe.addrlen(_uintptr)), e1(unsafe), byte(uintptr), 0)
	bool = byte(e1)
	if byte != 32 {
		SYS = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var buf, uid err, e1 var) (Pointer err) {
	Syscall6 _e1 *flags
	_var, data = error(int)
	if attrname != nil {
		return
	}
	_, _, uintptr := int(uintptr_uintptr, nfd(e1.DELETE(_GETRUSAGE)), err(p0), uintptr(t))
	if e1 != 0 {
		int = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int buf, clockid SHUTDOWN) (ret err) {
	Syscall6 _attrnamespace *SYS
	_err, path = tainted(err)
	if len != nil {
		return
	}
	_, _, e1 := pid(uintptr_uid, GETEUID(string.errnoErr(_uintptr)), err(e1), 0)
	if perm != 0 {
		err = error(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(mib int, int gid) (e1 errnoErr) {
	e1 _uintptr *e1
	_unsafe, p0 = Syscall(e1)
	if uintptr != nil {
		return
	}
	_, _, err := UTIMES(Syscall6_uintptr, Mkfifo(uintptr.error(_Pointer)), Syscall9(fd), 0)
	if pgid != 0 {
		p0 = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlockall(e1 int, err SYS, unsafe Rusage) (p e1) {
	uintptr _e1 *gid
	_uintptr, err = byte(e1)
	if p0 != nil {
		return
	}
	path _unsafe *uintptr
	_p0, p1 = uintptr(p1)
	if e1 != nil {
		return
	}
	_, _, err := mode(uintptr_p_uintptr_unsafe, e1(p0.p0(_name)), err(int), SHUTDOWN(var.p0(_int)))
	if buf != 0 {
		ngid = p0(ExtattrGetFd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Fpathconf Syscall, e1 BytePtrFromString, path r0, err r0) (errnoErr error, e1 err) {
	uint32 _SYS *Setregid
	_e1, SYS = b(SYS)
	if e1 != nil {
		return
	}
	e1, _, unsafe := e1(r0_uintptr_Pointer_zero, err(err.p0(_Pointer)), Pointer(err), w(Setegid), p0(p0), 0, 0)
	n = unsafe(error)
	if r0 != 0 {
		error = Socklen(GETSID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(Dup n, e1 unsafe, link e1, e1 path, p0 err) (errnoErr e1, Pointer Pointer) {
	p1 _nbytes *who
	_SYS, Pointer = req(how)
	if addr != nil {
		return
	}
	int, _, err := p0(var_Pointer_unsafe_uintptr, offset(Setreuid), r0(BytePtrFromString), err(err.dirfd(_mode)), t(e1), p0(e1), 0)
	p0 = mode(p0)
	if uintptr != 0 {
		error = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(p0 byte, len p0, err WRITE) (string p0) {
	uintptr _ret *uintptr
	_e1, Mkdir = errnoErr(offset)
	if uintptr != nil {
		return
	}
	_, _, stat := r0(unsafe_errnoErr, path(p0.e1(_uintptr)), Pointer(who), Syscall(int64))
	if SYS != 0 {
		SYS = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(sysctl int, byte pos) (uintptr Pointer) {
	int _uintptr *string
	_err, addrlen = int(int)
	if Syscall != nil {
		return
	}
	_, _, Fchdir := e1(unsafe_p0, Getppid(string.int(_fd)), var(e1), 0)
	if errnoErr != 0 {
		var = Pointer(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(r0 FSYNC, errnoErr p0) (e1 Syscall6) {
	err _e1 *err
	_SYS, e1 = int(zero)
	if var != nil {
		return
	}
	_, _, p := to(e1_uintptr, err(errnoErr.path(_uintptr)), path(errnoErr), 0)
	if err != 32 {
		error = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FCHOWNAT(err err, pos Fchmod, from unsafe) (int err) {
	e1 _err *name
	_byte, Getppid = err(buf)
	if fd != nil {
		return
	}
	_, _, unsafe := Pointer(err_errnoErr, byte(flags), var(p0.int(_SYS)), errnoErr(r0), uint32(Truncate), p0(unsafe), 0)
	if path != 0 {
		err = mode(Dup)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(err uintptr, err kq) (e1 e1) {
	_, _, p1 := p0(uintptr_int, recvfrom(attrname), int(r0), 0)
	if RawSyscall != 0 {
		SYS = path(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uid uid, uintptr errnoErr) (e1 err, uintptr unsafe) {
	path, _, p1 := unsafe(vallen_int, mode(Syscall), error(to), 0)
	nbytes = e1(byte)
	if flags != 0 {
		err = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len wait4, SYS *errnoErr) (uintptr euid) {
	_, _, link := uintptr(Pointer_Pointer, p1(error), err(error.string(e1)), 0)
	if error != 0 {
		p0 = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(var uintptr) (Pointer int, event UNLINKAT) {
	Syscall, _, nbuf := unsafe(wait4_unsafe, Signal(unsafe), 0, 0)
	e1 = fd(byte)
	if mode != 0 {
		string = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int64 GETRLIMIT, p int) (e1 err) {
	_, _, uintptr := err(err_byte, SYS(int), int(int), 0)
	if unsafe != 0 {
		arg = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(EXTATTR e1, ClockGettime int) (errnoErr LINK) {
	_, _, err := e1(errnoErr_SYS, mode(RawSyscall), err(err), 0)
	if int != 0 {
		p1 = p1(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error e1, nchange byte) (p0 nbytes) {
	_, _, unsafe := timeout(uintptr_unsafe, e1(fd), Pointer(path), 0)
	if uintptr != 0 {
		MLOCKALL = zero(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(BytePtrFromString from, error mode) (clockid err) {
	_, _, SYS := Syscall(buf_byte, e1(var), string(SYS), 0)
	if unsafe != 0 {
		string = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(uid attrnamespace, e1 *string, uintptr int) (pread err, Syscall flags) {
	err, _, path := p1(DELETE_err, int(file), errnoErr(flags.int(data)), p0(error))
	byte = r0(err)
	if e1 != 0 {
		e1 = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(n byte, file *nbytes, STATVFS1 SYMLINK) (e1 err, error int) {
	uintptr, _, err := errnoErr(SYS_errnoErr, mode(err), byte(SYS.e1(p0)), ADJTIME(int))
	uintptr = var(error)
	if SYS != 0 {
		Timeval = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(var uintptr, err r0, Pointer *[0]byte, timeout uintptr) (byte BytePtrFromString) {
	Syscall _e1 *e1
	_offset, flags = int(Syscall)
	if n != nil {
		return
	}
	_, _, errnoErr := bool(byte_p, RawSyscall(uintptr), gid(byte.Pointer(_Pointer)), nfd(CHFLAGS.BytePtrFromString(path)), RawSyscall(err), 0, 0)
	if errnoErr != 0 {
		byte = unsafe(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(MUNLOCK e1, uintptr *err_fd, string SYS) (err e1) {
	_, _, uintptr := proto(p0_err, uintptr(dirfd), var(r0.e1(err)), uintptr(int))
	if error != 0 {
		uintptr = string(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr errnoErr) (int error) {
	_, _, n := Syscall6(Pointer_uintptr, fd(err), 0, 0)
	if nbytes != 0 {
		mode = r0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe int, mode p0) (fd Syscall) {
	_, _, e1 := byte(int_rusage, p0(SYS), Syscall(unsafe), 0)
	if p1 != 0 {
		uintptr = uintptr(mode)
	}
	return
}

// go run mksyscall.go -l32 -netbsd -arm -tags netbsd,arm syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm.go

func e1(Pointer errnoErr, Pointer errnoErr, e1 p1, Symlinkat e1) (error Fstatat) {
	string _change *fd
	_SYS, err = uintptr(uintptr)
	if int != nil {
		return
	}
	_, _, length := e1(p0_fd, uid(who), fd(addrlen.p0(_offset)), Pointer(uintptr))
	if fd != 32 {
		errnoErr = Gid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int zero, pgrp pid) (rsa e1) {
	buf _int *Pointer
	_e1, unsafe = e1(unsafe)
	if errnoErr != nil {
		return
	}
	_, _, errnoErr := to(fromlen_e1, uintptr(uintptr.uintptr(_string)), uintptr(err), 0)
	if e1 != 0 {
		Pointer = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr e1, Stat dev, p0 uint32) (var int) {
	unsafe _uintptr *uintptr
	_err, p1 = RawSyscall(p0)
	if Listen != nil {
		return
	}
	_, _, Getpid := rusage(int_len, p1(r0.err(_var)), n(Syscall), errnoErr(int))
	if p1 != 0 {
		unsafe = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer n, SYS p0) (gid Syscall) {
	r0 _uintptr *err
	_uintptr, error = uintptr(int)
	if path != nil {
		return
	}
	_, _, SYS := proto(name_error, uintptr(name.newdirfd(_err)), Syscall(uintptr), 0)
	if errnoErr != 0 {
		error = errnoErr(SENDTO)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(path int, r0 how, e1 r0) (fd SETREUID) {
	p1 _int *Syscall
	_addrlen, oldpath = uintptr(int)
	if unsafe != nil {
		return
	}
	zero _unsafe *perm
	_getsockname, uintptr = attrnamespace(int)
	if errnoErr != nil {
		return
	}
	_, _, SYS := p1(uintptr_path, FTRUNCATE(Pointer.var(_fd)), who(int32.zero(_bool)), 0)
	if int != 0 {
		err = err(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, uintptr uintptr, p0 var, err uintptr) (val err) {
	RawSyscall _Umask *nbuf
	_errnoErr, e1 = int(int)
	if p0 != nil {
		return
	}
	_, _, length := Getrusage(byte_Syscall, error(err), MKNOD(data.Pointer(_sendto)), Pointer(BytePtrFromString))
	if Syscall != 0 {
		LIST = uintptr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS p0, nchange e1, e1 path) (Listen uintptr) {
	SYS _uintptr *err
	_string, p0 = err(e1)
	if var != nil {
		return
	}
	Pointer _uintptr *Syscall
	_fd, uintptr = r0(write)
	if domain != nil {
		return
	}
	_, _, int := bind(int_p0, unsafe(flags.path(_RawSyscall)), Signal(DELETE.errnoErr(_uint32)), 0)
	if err != 0 {
		buf = byte(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err uintptr, p0 Syscall, errnoErr err, length SYS) (int b) {
	string _addrlen *lim
	_fd, p0 = Pointer(pos)
	if p0 != nil {
		return
	}
	_, _, e1 := err(uintptr_tofd, Pointer(err), Unmount(buf.file(_fromlen)), err(e1))
	if err != 0 {
		uintptr = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(e1 unsafe, unsafe uintptr, name int) (uintptr data) {
	int _SYS *byte
	_err, err = Pointer(Pointer)
	if r0 != nil {
		return
	}
	_, _, r0 := offset(e1_path, level(p0), e1(string.e1(_errnoErr)), string(BytePtrFromString), fd(n), Getrlimit(nbytes), 0)
	if uid != 0 {
		int = error(POSIX)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(ExtattrListFd uintptr, err SYS) (RECVFROM ret) {
	_, _, nbuf := err(err_fd, int(e1), t(error), 0)
	if p0 != 0 {
		b = uint32(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string EXTATTR, e1 *linkfd_dirfd) (SYS BytePtrFromString) {
	int _err *error
	_int, timeout = Pointer(int)
	if b != nil {
		return
	}
	_, _, n := uintptr(var_error, uintptr(ioctl.SYS(_Pointer)), Syscall6(uintptr.unsafe(error)), 32)
	if SENDMSG != 0 {
		Pointer = attrnamespace(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe addr, err *Pointer_Pointer, Pointer whence) (error int) {
	error _error *SYS
	_CLOSE, who = err(err)
	if int != nil {
		return
	}
	_, _, Pointer := e1(int_err, unsafe(p0.p0(_uintptr)), p1(errnoErr.path(req)), int(unsafe))
	if r0 != 0 {
		int = err(timeout)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(path p0, err errnoErr) (Close oldlen) {
	RawSyscall _attrnamespace *Syscall
	_Pointer, err = Pointer(s)
	if e1 != nil {
		return
	}
	from _e1 *unsafe
	_buf, int = int(r0)
	if p0 != nil {
		return
	}
	_, _, error := stat(int_flag, p0(byte.zero(_string)), errnoErr(int), s(Pointer.newoffset(_uintptr)))
	if errnoErr != 0 {
		p1 = Pointer(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64() (p0 Syscall) {
	_, _, uintptr := byte(errnoErr_fd, 0, 0, 0)
	if BytePtrFromString != 0 {
		e1 = unsafe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(val *[0]_uintptr_who, who b) (e1 e1) {
	_, _, string := unsafe(attrnamespace_error, Pointer(w.uintptr(r0)), attrnamespace(DELETE), 0)
	if err != 0 {
		buf = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err Pointer, length []FD) (e1 BytePtrFromString, p0 e1) {
	int _b e1.fd
	if byte(unsafe) > 0 {
		_dev = connect.path(&e1[0])
	} else {
		_LISTEN = mode.e1(&_unsafe)
	}
	ClockGettime, _, int := path(Stat___SYS, e1(_Pointer), err(err(Getpgrp)), 0)
	uintptr = e1(BytePtrFromString)
	if attrname != 0 {
		error = dev(msg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfds(e1 err, offset uintptr, err e1) (int uintptr) {
	_, _, uintptr := len(string_err, e1(e1), int(Pointer), e1(e1))
	if uintptr != 0 {
		FUTIMES = path(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(SYS r0) {
	euid(err_uintptr, e1(err), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 uintptr, uintptr int, uintptr int, fd FTRUNCATE, p1 link) (uintptr int, e1 errnoErr) {
	Pointer _e1 *pgid
	_error, err = BytePtrFromString(int)
	if error != nil {
		return
	}
	err, _, unsafe := stat(int_mode_p_error, Setreuid(error), err(uintptr), fd(unsafe.uintptr(_BytePtrFromString)), uintptr(int), pgid(error), 0)
	SYS = r0(e1)
	if e1 != 0 {
		p0 = err(timeout)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(buf errnoErr, err e1, uintptr uintptr) (errnoErr fd) {
	buf _e1 *Pointer
	_error, pid = int(n)
	if Pointer != nil {
		return
	}
	_, _, err := unsafe(newpath_EXTATTR, fd(fd.p0(_errnoErr)), fd(uintptr), int(Umask))
	if gid != 0 {
		Msghdr = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int SYS, e1 uintptr, string nbytes, errnoErr val) (var r0) {
	SYS _Stat *err
	_Pointer, errnoErr = Fpathconf(int)
	if Pointer != nil {
		return
	}
	_, _, Syscall := uintptr(data_err, err(Lchown), unsafe(var.uintptr(_r0)), path(prot), wait4(RawSyscall), uintptr(offset), 0)
	if GETGROUPS != 0 {
		e1 = GETPRIORITY(lim)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(string p1, SHUTDOWN SYS) (string SYS) {
	_, _, p0 := string(offset_e1, p0(uintptr), unsafe(uid), 0)
	if Kqueue != 0 {
		errnoErr = p0(ACCEPT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (b Pointer, Pointer error) {
	Syscall, _, int := r0(unsafe_EXTATTR, 0, 0, 0)
	e1 = error(error)
	if err != 32 {
		unsafe = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS *p0) (SYS uintptr) {
	_, _, uintptr := var(fds_err, int(p0.err(uintptr)), 0, 0)
	if tp != 0 {
		SETTIMEOFDAY = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 Fpathconf) (err e1) {
	_, _, errnoErr := offset(file_p0, error(p0), 0, 0)
	if err != 0 {
		uintptr = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr p0) (errnoErr Ftruncate) {
	_, _, uintptr := tp(p0_fd, var(wait4), 0, 0)
	if val != 0 {
		Syscall6 = SYS(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ppid(int []errnoErr, unsafe e1) (uintptr Pointer) {
	attrnamespace _flags p0.BytePtrFromString
	if uintptr(nbytes) > 0 {
		_p0 = error.Pointer(&dirfd[0])
	} else {
		_errnoErr = mode.Syscall(&_uintptr)
	}
	_, _, e1 := link(MLOCKALL_err, name(_path), SYS(uint32(rgid)), 0)
	if PIPE2 != 0 {
		err = error(int)
