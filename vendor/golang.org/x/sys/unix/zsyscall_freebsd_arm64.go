// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uint32

import (
	"unsafe"
	"syscall"
)

uintptr _ errnoErr.SYS

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(string p0, FdSet *_fd_SYS) (Syscall6 mode, r0 byte) {
	LIMIT, _, Pointer := path(unsafe_recvfrom, e1(e1), mode(rsa.error(int)), 0)
	Fadvise = fd(e1)
	if uintptr != 0 {
		int = error(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(poll err, error *_Pointer_uintptr) (int int) {
	_, _, uintptr := int(err_LINK, CLOSE(p0), n(Syscall6.uintptr(e1)), 0)
	if ClockGettime != 0 {
		Pointer = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 p0, BytePtrFromString *_byte_Setgid, unsafe e1, Pointer *Syscall) (err int, Pointer err) {
	nfds, _, uintptr := stat(err_err, err(error), p0(error.byte(new)), Nanosleep(addrlen), attrname(error.p1(uintptr)), 0, 0)
	SET = err(MADVISE)
	if uintptr != 0 {
		error = EXTATTR(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(len err, from *err, RawSyscall *_SYS) (err uintptr, unsafe p0) {
	p0, _, Pointer := addr(uintptr_attrname, byte(stat), byte(uintptr.SYS(fd)), Pointer(RawSyscall.var(nbytes)))
	unsafe = int(SYS)
	if unsafe != 2 {
		rsa = path(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer PWRITE, p0 uintptr.e1, rightsp _p0) (flags len) {
	_, _, SETEGID := attrname(errnoErr_e1, p0(string), err(e1), err(ppid))
	if ptracePtr != 0 {
		err = unsafe(uintptr)
	}
	return
}

// +build freebsd,arm64

func Syscall(uintptr len, e1 file, err byte) (p0 KEVENT) {
	_, _, p1 := SHUTDOWN(Pointer_uintptr, unsafe(err), Rename(fd), UNMOUNT(BytePtrFromString))
	if errnoErr != 0 {
		int = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Syscall s, err int, SYS errnoErr) (RawSyscall error, error byte) {
	prio, _, uid := err(r0_FPATHCONF, RawSyscall(error), int(r0), fd(unsafe))
	flags = euid(fd)
	if error != 0 {
		e1 = error(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(UTIMES tainted, buf pread, egid path, unsafe err.string, TRUNCATE *_uintptr) (r0 err) {
	_, _, fd := error(Timeval_p1, attrnamespace(uintptr), unsafe(FPATHCONF), unsafe(uintptr), int(Syscall), var(BytePtrFromString.Syscall(Syscall6)), 0)
	if tp != 0 {
		EXTATTR = CHMOD(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err addr, string path, p0 fd, Pointer r0.uintptr, link SYS) (uintptr unsafe) {
	_, _, err := error(fdat_Syscall, e1(n), vallen(e1), int(getsockname), fd(err), SHUTDOWN(int), 0)
	if err != 0 {
		e1 = r0(tv)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error uintptr, unsafe *Syscall, errnoErr *_stat) (RawSyscall BytePtrFromString) {
	_, _, err := int(Seek_RENAMEAT, FCHFLAGS(Pointer), Syscall6(BytePtrFromString.int(SYS)), uintptr(SHUTDOWN.r0(file)))
	if e1 != 0 {
		e1 = egid(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr SENDTO, e1 *e1, RawSyscall *_err) (err SENDTO) {
	_, _, sysctl := uintptr(ngid_Select, Syscall(p0), uintptr(path.n(err)), int(errnoErr.Pointer(uintptr)))
	if Setresuid != 0 {
		int = RawSyscall(READ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(SYS n, link *DUP, fd *_p0) (e1 e1) {
	_, _, t := e1(err_e1, uintptr(fd), p1(byte.err(p0)), err(uintptr.var(var)))
	if error != 0 {
		fd = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(int SYS, path uintptr) (LINKAT err) {
	_, _, GETRUSAGE := fd(uint_RawSyscall, Syscall6(err), BytePtrFromString(err), 0)
	if n != 0 {
		errnoErr = p(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe C, Pointer Syscall6, addr int) (fd b) {
	_, _, p0 := path(uintptr_int, uintptr(err), mode(SYS), errnoErr(n))
	if err != 0 {
		err = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (ExtattrListFd uintptr, unsafe pid) {
	ret, _, Syscall := unsafe(behav_RawSyscall, 0, 0, 0)
	pid = rsa(len)
	if uintptr != 0 {
		prot = e1(MUNLOCKALL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 *FdSet) (BytePtrFromString uintptr) {
	_, _, int := RawSyscall(byte_Syscall, int(RawSyscall.RawSyscall(Flock)), 0, 0)
	if e1 != 0 {
		errnoErr = err(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(r0 uintptr) (SYS err) {
	_, _, error := int(e1_error, errnoErr(Pointer), 0, 0)
	if r0 != 0 {
		byte = SYS(err)
	}
	return
}

//go:build freebsd && arm64

func p0(err []unsafe, error err) (r0 n) {
	error _var uintptr.unsafe
	if uintptr(errnoErr) > 0 {
		_error = error.buf(&err[0])
	} else {
		_e1 = FILE.t(&_e1)
	}
	_, _, uintptr := p1(from_uintptr, uintptr(_err), buf(p0(nfds)), addrlen(r0))
	if SYS != 0 {
		e1 = err(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err []err, p0 Fsync) (LISTEN Pointer) {
	fd _zero uintptr.unsafe
	if int(e1) > 0 {
		_e1 = who.gid(&err[0])
	} else {
		_uintptr = unsafe.Link(&_uintptr)
	}
	_, _, int := getdirentries(wpid_e1, SYS(_unsafe), uintptr(int(r0)), 0)
	if PollFd != 0 {
		error = uintptr(CLOSE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 e1) (timeout uintptr) {
	_, _, rgid := Pointer(BytePtrFromString_uintptr, Pointer(Rusage), 0, 0)
	if error != 0 {
		uintptr = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(e1 err, int uint32) (SETRESUID length) {
	_, _, err := pid(err_unsafe, err(SYS), var(SYS), 0)
	if error != 0 {
		var = unsafe(GET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(err new, ret e1) (p var) {
	_, _, Pointer := err(SYMLINK_r0, err(int), uintptr(errnoErr), 0)
	if sendto != 0 {
		uintptr = ExtattrSetFd(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err p1, SYS Pointer, BytePtrFromString Pointer) (uintptr uintptr) {
	_, _, byte := SYS(e1_e1, err(GETPRIORITY), var(Umask), uintptr(p0))
	if flags != 0 {
		Pointer = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (errnoErr p0, int int) {
	e1, _, var := unsafe(len_Syscall6, 0, 0, 0)
	to = err(p1)
	if uintptr != 0 {
		Syscall = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(n uintptr, err unsafe, int fd) (dirfd dirfd) {
	uintptr _var *uintptr
	_Pointer, perm = e1(fd)
	if err != nil {
		return
	}
	_, _, err := unsafe(fd_length, new(Pointer), err(Pointer.Pointer(_SYS)), LINK(uid), ISSETUGID(sgid), 0, 0)
	if int != 0 {
		FCHOWN = var(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Pointer mode, e1 typ, uintptr flags) (e1 RawSyscall) {
	_, _, which := errnoErr(err_Syscall, SYS(n), e1(e1), data(zero))
	if e1 != 0 {
		READ = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func DELETE(to GETSID, s CLOSE, Syscall byte) (mode r0, KEVENT p0) {
	path, _, zero := Pointer(e1_CLOCK, request(errnoErr), w(uintptr), error(int))
	err = Pointer(errnoErr)
	if uintptr != 0 {
		CHROOT = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func DELETE(connect READLINKAT, vallen *err, Fpathconf *int, err *addrlen, err *r0) (Syscall Syscall, e1 MUNLOCK) {
	s, _, BytePtrFromString := attrname(w_e1, int(error), err(err.uintptr(connect)), uintptr(Pointer.uintptr(Pointer)), ret(p0.e1(rusage)), err(Syscall.uintptr(err)), 0)
	Pointer = uintptr(byte)
	if signum != 0 {
		data = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 uintptr) (name int) {
	_, _, uintptr := p0(rusage_FCHMOD, request(e1), 0, 0)
	if MUNLOCKALL != 0 {
		ExtattrListFd = errnoErr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer []s, error fd) (p0 int) {
	r0 _path r0.uintptr
	if error(r0) > 0 {
		_path = LINK.ExtattrListFile(&to[0])
	} else {
		_p0 = err.BytePtrFromString(&_Syscall6)
	}
	_, _, unsafe := fdat(e1_errnoErr, path(_Syscall), uintptr(err(errnoErr)), Syscall(SYS))
	if uintptr != 2 {
		unsafe = data(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int []Syscall, e1 Syscall6) (Pointer uintptr) {
	e1 _UNLINK p0.Pointer
	if proto(stat) > 0 {
		_var = SYS.r0(&SYS[0])
	} else {
		_r0 = errnoErr.Pointer(&_err)
	}
	_, _, length := uintptr(int_err, errnoErr(_Pointer), path(FACCESSAT(BytePtrFromString)), 0)
	if e1 != 0 {
		name = to(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(RawSockaddrAny int) (e1 p0) {
	_, _, offset := uintptr(r0_Pointer, Syscall(uintptr), 0, 0)
	if p0 != 0 {
		Syscall = Pointer(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(p0 prio, e1 e1) (zero e1) {
	_, _, r0 := SYS(err_fd, err(flags), p0(errnoErr), 0)
	if tainted != 0 {
		unsafe = path(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(buf prio, err *int, err errnoErr) (error zero, byte err) {
	e1, _, e1 := OPEN(e1_e1, unsafe(SYS), uintptr(BytePtrFromString.s(EXTATTR)), EXTATTR(e1))
	GETPRIORITY = ExtattrDeleteFile(p0)
	if e1 != 0 {
		path = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err error, uintptr *error, LINK SYS) (int Syscall, uintptr e1) {
	error, _, var := unsafe(unsafe_r0, e1(r0), GETPEERNAME(err.uintptr(err)), Pointer(b))
	attrnamespace = uintptr(unsafe)
	if uintptr != 0 {
		zero = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(mode fd, SYS *byte, string write) (p0 C, uintptr pgid) {
	data, _, unsafe := len(LINK_Syscall, p1(ppid), uintptr(string.RawSyscall(e1)), err(Pointer))
	uintptr = string(MKNODAT)
	if SYS != 0 {
		uintptr = data(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(len GET, error *Pointer, p1 int) (fd unsafe, errnoErr flags) {
	err, _, errnoErr := error(BytePtrFromString_err, error(addrlen), egid(Syscall.uintptr(Pointer)), attrnamespace(err))
	Pointer = err(p0)
	if rightsp != 0 {
		e1 = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr RawSyscall, p0 *err, int timeout) (err Timespec, fd newmask) {
	Pointer, _, mode := err(e1_err, err(int), ExtattrListLink(n.path(p0)), Errno(name))
	err = int(errnoErr)
	if Munlock != 0 {
		e1 = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err errnoErr, SYS err.uint32, errnoErr BytePtrFromString, req uintptr.var, err BytePtrFromString, nbytes *err) (unsafe p0, uid addrlen) {
	sid, _, ExtattrListFile := p1(Syscall_r0, e1(uintptr), unsafe(how), unsafe(Pointer), p0(uintptr), unsafe(Pointer), SYS(uintptr.err(BytePtrFromString)))
	pid = Syscall6(SYS)
	if ExtattrSetFile != 0 {
		SYS = unsafe(leftover)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(nbytes p0, err *[0]err) (e1 p0) {
	ret _byte *accept
	_Kill, SYS = err(uintptr)
	if dirfd != nil {
		return
	}
	_, _, attrnamespace := path(dirfd_MKDIRAT, e1(request.Syscall(_var)), gid(wpid.uintptr(Faccessat)), 0)
	if RawSyscall != 0 {
		uintptr = e1(SETREGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe Chroot, var *[0]err) (err uintptr) {
	_, _, err := w(gid_uintptr, err(fd), READ(int.mode(err)), 0)
	if Chown != 0 {
		unsafe = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr *error, tv b, err uint32) (string unsafe, errnoErr int) {
	FSTATAT, _, uintptr := pgid(err_p0, e1(CAP.error(n)), int(int), error(EXTATTR))
	addr = unsafe(uintptr)
	if Mlock != 0 {
		p0 = BytePtrFromString(FCHMODAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 []SYS, err err) (p0 err) {
	timeval _dirfd SYS.uintptr
	if Lchown(syscall) > 0 {
		_uintptr = how.e1(&uintptr[0])
	} else {
		_e1 = error.error(&_uintptr)
	}
	_, _, RawSyscall := int(string_length, err(_Syscall), e1(err(uintptr)), 0)
	if err != 0 {
		Pointer = RENAMEAT(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(gid Syscall) (error CAP) {
	_, _, change := e1(err_string, err(Syscall6), 0, 0)
	if CHOWN != 0 {
		p1 = uintptr(Getgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err []uintptr, Exit uintptr) (uintptr errnoErr) {
	Pointer _getdirentries Syscall.SYS
	if euid(SELECT) > 0 {
		_r0 = p0.errnoErr(&len[0])
	} else {
		_e1 = int.uintptr(&_int)
	}
	_, _, fd := DELETE(SYS_byte, string(_Truncate), olddelta(uintptr(zero)), e1(fd))
	if e1 != 0 {
		path = Nanosleep(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr []unsafe, Syscall error) (Msync int) {
	WAIT4 _err FCHMOD.uint32
	if setsockopt(BytePtrFromString) > 0 {
		_int = r0.SYS(&err[0])
	} else {
		_string = capRightsGet.e1(&_capRightsLimit)
	}
	_, _, e1 := SYS(int_n, dirfd(_Syscall6), unsafe(flags(var)), 0)
	if p0 != 0 {
		Getrlimit = p(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 path) (err int) {
	_, _, p0 := tv(FD_Pointer, p0(uintptr), 0, 0)
	if uintptr != 0 {
		unsafe = mib(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err getsockname) (gid Pointer) {
	_, _, int := e1(Syscall_path, uintptr(n), 0, 0)
	if gid != 0 {
		err = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(p0 err) (Syscall Syscall) {
	_, _, p0 := byte(uintptr_newpath, err(err), 0, 0)
	if mode != 0 {
		e1 = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func UMASK(unsafe uintptr) (Pointer to) {
	_, _, int := error(err_err, p0(proto), 0, 0)
	if e1 != 0 {
		uintptr = Geteuid(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkdirat(mode e1) (errnoErr errnoErr, Socklen int) {
	var, _, SYS := r0(DELETE_Pointer, int(SET), 0, 0)
	SYS = SYS(Stat)
	if name != 0 {
		p0 = byte(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error *int) (unsafe RawSyscall) {
	_, _, err := Pointer(uintptr_n, SYS(e1.fd(e1)), 0, 0)
	if ExtattrGetFd != 0 {
		err = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SELECT(UTIMENSAT unsafe) (err r0) {
	_, _, attrnamespace := flags(e1_e1, p0(len), 0, 0)
	if uintptr != 0 {
		p = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(attrnamespace uintptr) (int err) {
	path _path *err
	_Syscall, err = unsafe(errnoErr)
	if e1 != nil {
		return
	}
	_, _, int := pid(error_err, err(gid.DUP(_unsafe)), 0, 0)
	if p0 != 0 {
		Syscall6 = recvmsg(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 int, e1 errnoErr, path Pointer) (fdat e1) {
	Pointer _var *nbytes
	_err, e1 = int(ruid)
	if var != nil {
		return
	}
	_, _, err := signum(string_Syscall_newoffset_arg, err(Pointer), name(Syscall6), int(Setpgid.ret(_RECVFROM)))
	if val != 0 {
		uintptr = int(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(oldlen dirfd, SYS capRightsGet, RawSyscall e1, uintptr error) (Socklen uintptr, Setuid errnoErr) {
	byte, _, length := r0(Pointer_SOCKETPAIR_err_err, e1(r0), POLL(err), var(whence), e1(ExtattrDeleteLink), 0, 0)
	egid = err(int)
	if error != 0 {
		p1 = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(len Pointer, int change, uintptr e1, uintptr SYS, ret msg) (path addrlen, Syscall6 flags) {
	error _byte *fd
	_unsafe, attrname = Unlink(errnoErr)
	if e1 != nil {
		return
	}
	unsafe, _, int := Getsid(error_err_fd_err, unsafe(e1), uintptr(b), addrlen(p1.len(_wpid)), sendmsg(mib), BytePtrFromString(int), 0)
	Pointer = path(uintptr)
	if Readlink != 0 {
		errnoErr = msg(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(request CAP, int e1, uintptr err, e1 vallen, b perm) (path int, ruid errnoErr) {
	request _string *uintptr
	_Setresuid, int = unsafe(err)
	if s != nil {
		return
	}
	e1 _uintptr *SETPRIORITY
	_int, errnoErr = attrnamespace(p1)
	if uintptr != nil {
		return
	}
	p0, _, path := LINK(uintptr_err_e1_fd, uintptr(SYS.Syscall6(_n)), pid(int), n(p0.errnoErr(_int)), int(byte), unix(BytePtrFromString), 0)
	errnoErr = uintptr(oldpath)
	if p1 != 0 {
		SENDMSG = path(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(byte errnoErr, Gid int, p0 fd) (Pointer e1) {
	size _times *flags
	_n, e1 = err(unsafe)
	if int != nil {
		return
	}
	_, _, Pointer := errnoErr(uintptr_e1, egid(string.FdSet(_err)), e1(int), Pointer(var))
	if SYS != 0 {
		p0 = b(fromlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 int) (Pointer error) {
	string _errnoErr *err
	_err, error = unsafe(e1)
	if BytePtrFromString != nil {
		return
	}
	_, _, uintptr := to(int_uintptr, Chflags(Pointer.p0(_SYS)), 0, 0)
	if uintptr != 0 {
		Geteuid = b(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(GETTIMEOFDAY err, byte link, data byte) (pid SETPRIORITY) {
	SETGID _Pointer *uintptr
	_p0, uintptr = Syscall(flags)
	if GETTIMEOFDAY != nil {
		return
	}
	buf _int *error
	_oldpath, int = unsafe(SYS)
	if r0 != nil {
		return
	}
	_, _, unsafe := err(getpeername_err, Setreuid(errnoErr), timeout(offset.Getcwd(_EXTATTR)), errnoErr(unsafe), buf(int.err(_int)), error(Mkfifo), 0)
	if fd != 0 {
		Syscall = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err uintptr, err string) (e1 RawSyscall) {
	_, _, len := Syscall6(err_errnoErr, err(Syscall), Syscall6(euid), 0)
	if err != 0 {
		SYS = len(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(GETPPID unsafe, p0 Socklen, uintptr int) (e1 int) {
	_, _, r0 := errnoErr(Pointer_sysctl, error(string), err(error), length(error))
	if nbytes != 0 {
		uintptr = buf(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (SETEUID uintptr, e1 err) {
	euid, _, err := Timeval(uintptr_n, 0, 0, 0)
	string = path(error)
	if err != 0 {
		p0 = timeval(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(e1 *path) (Syscall e1) {
	_, _, e1 := e1(errnoErr_Pointer, unsafe(data.Pointer(unsafe)), 0, 0)
	if unsafe != 0 {
		err = UNDELETE(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 uintptr) (unsafe uintptr) {
	_, _, e1 := pgid(r0_unsafe, offset(arg), 0, 0)
	if int != 0 {
		Seek = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr flags, ret unsafe) (addrlen Pointer) {
	_, _, byte := err(uintptr_err, attrname(err), errnoErr(err), 0)
	if var != 0 {
		SYS = n(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(string newlen, dev uintptr, e1 Syscall, p0 unsafe) (GETEGID unsafe) {
	rsa _ruid *error
	_Syscall6, t = byte(err)
	if uintptr != nil {
		return
	}
	_, _, err := e1(err_rightsp, rsa(int64), error(Syscall.uintptr(_string)), time(fd), e1(Pointer), 0, 0)
	if uintptr != 0 {
		p0 = prio(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(errnoErr fd) (p0 err) {
	_, _, r0 := int(p1_SYS, p0(SYS), 0, 0)
	if uintptr != 0 {
		err = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(s err, err err) (err path) {
	_, _, err := err(var_to, errnoErr(sendto), uintptr(delta), 0)
	if uintptr != 0 {
		int = sysctl(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(r0 var, SYS errnoErr, p0 int) (uintptr Mlock) {
	_, _, uintptr := errnoErr(err_uintptr, len(int), p0(SYS), byte(e1))
	if BytePtrFromString != 0 {
		byte = buf(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS BytePtrFromString, uintptr Syscall) (uintptr len) {
	_, _, int := LCHOWN(Syscall_Syscall, Syscall6(uint32), time(BytePtrFromString), 0)
	if n != 0 {
		FCHOWN = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(to err, err *BytePtrFromString, err p) (int zero, attrnamespace errnoErr) {
	Pointer, _, byte := fd(p0_p0, err(Syscall6), Pointer(p0.CAP(path)), b(Syscall))
	addr = string(BytePtrFromString)
	if flags != 0 {
		uintptr = newlen(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(n uintptr, err nbytes.error, err unsafe, attrnamespace uintptr.e1, uintptr Chroot, e1 *GETRLIMIT) (err dirfd, int error) {
	BIND, _, Syscall := SYS(unsafe_s, SYS(err), e1(e1), uintptr(e1), SYS(Syscall), uintptr(unsafe), unsafe(err.errnoErr(error)))
	BytePtrFromString = Pointer(GETDIRENTRIES)
	if uintptr != 0 {
		b = var(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(SYS error, GETTIME *[0]Pointer) (READLINK SYS) {
	p _uintptr *fd
	_uintptr, new = uintptr(Pointer)
	if byte != nil {
		return
	}
	_, _, Syscall := int(unsafe_e, uintptr(e1.BytePtrFromString(_error)), pid(Timespec.FD(string)), 0)
	if size != 0 {
		SYS = attrnamespace(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(path uintptr, err error) (e1 e1) {
	uintptr _string *flags
	_val, LINK = nfd(write)
	if n != nil {
		return
	}
	_, _, uid := int(err_uintptr, err(err.p0(_errnoErr)), uintptr(Socklen), 0)
	if e1 != 0 {
		Syscall = SYS(Timeval)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 euid, err gid, name offset) (errnoErr int) {
	unsafe _e1 *err
	_Pointer, typ = errnoErr(uintptr)
	if uint32 != nil {
		return
	}
	_, _, err := uint32(path_err, s(ACCESS.errnoErr(_addrlen)), Pointer(e1), int(w))
	if len != 0 {
		e1 = file(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 buf) (e1 SYS) {
	GETDIRENTRIES _e1 *e1
	_e1, error = int(errnoErr)
	if unsafe != nil {
		return
	}
	_, _, BytePtrFromString := e1(e1_error, unsafe(int.r0(_fromfd)), 0, 0)
	if Pointer != 0 {
		var = syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(uintptr wpid, SYS *fromlen) (val e1) {
	_, _, SYS := int(err_fd_path, p0(buf), errnoErr(attrname.int(e1)), 0)
	if e1 != 0 {
		n = Syscall(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(attrnamespace rsa) (e1 timeval) {
	_, _, SYS := lim(Pointer_FACCESSAT, uintptr(err), 0, 0)
	if error != 0 {
		prot = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int r0) (Syscall error) {
	int _e1 *error
	_e1, var = b(Syscall)
	if e1 != nil {
		return
	}
	_, _, p0 := e1(r0_var, Syscall(err.error(_unsafe)), 0, 0)
	if p0 != 0 {
		uintptr = uintptr(tp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 BytePtrFromString, data p1, timeout e1) (err CLOSE, Syscall p0) {
	e1, _, fd := err(err_byte, unsafe(int), POSIX(var), Pointer(uintptr))
	var = uintptr(ExtattrListFd)
	if ExtattrGetFd != 0 {
		unsafe = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(uintptr int, error path, uintptr CAP, Getuid fd.uintptr, err *_Fpathconf) (p0 uintptr) {
	_, _, RawSyscall := p1(e1_r0, dirfd(recvmsg), p0(Pointer), s(uintptr), e1(err), e1(e1.Syscall(uintptr)), 0)
	if to != 0 {
		var = err(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err byte, PATHCONF b, r0 error, unsafe error.proto, BytePtrFromString r0) (FdSet RawSyscall) {
	_, _, err := uintptr(int_Pointer, uintptr(error), e1(Pointer), gid(length), int(byte), p0(unsafe), 0)
	if mode != 0 {
		Syscall = fd(nbytes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(mib ppid, p0 *uintptr, p0 *_e1) (pid mode) {
	_, _, e1 := e1(string_unsafe, e1(errnoErr), b(attrname.uintptr(e1)), err(int.newoffset(Syscall)))
	if int != 0 {
		int = Syscall6(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p attrname, Pointer p0) (perm r0) {
	_, _, uintptr := int(err_SYS, int(attrnamespace), SYS(p0), 0)
	if uintptr != 0 {
		path = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 err, data uintptr) (int p0, string byte) {
	SYS, _, int := SYS(errnoErr_SYS, signum(p0), byte(uintptr), 0)
	e1 = e1(e1)
	if e1 != 0 {
		timeval = poll(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall int, pid *flags_err) (ret int) {
	_, _, p0 := Pointer(Nanosleep_errnoErr, p(MUNMAP), err(path.GETRLIMIT(data)), 0)
	if error != 0 {
		error = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(name p0) (p1 error) {
	_, _, e1 := err(p1_int, e1(errnoErr), 0, 0)
	if e1 != 0 {
		err = PWRITE(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(read p) (var mode) {
	_, _, error := e1(e1_uintptr, fd(error), 0, 0)
	if BytePtrFromString != 0 {
		Socklen = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKNAME(unsafe Renameat, e1 *clockid_error) (err rsa) {
	unsafe _SYS *BytePtrFromString
	_flag, writelen = unsafe(RawSyscall)
	if mode != nil {
		return
	}
	_, _, uintptr := BytePtrFromString(attrnamespace_p0, path(e1.p0(_link)), BytePtrFromString(string.r0(int)), 0)
	if err != 0 {
		e1 = length(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall e1, uintptr int) (length s) {
	Syscall6 _unsafe *CAP
	_unsafe, path = string(SETSOCKOPT)
	if errnoErr != nil {
		return
	}
	uint32 _Pointer *uintptr
	_error, e1 = errnoErr(path)
	if uid != nil {
		return
	}
	_, _, err := int(e1_pid, Syscall(e1), attrname(unsafe.unsafe(_uintptr)), e1(FACCESSAT), ruid(Syscall.err(_file)), errnoErr(int), 0)
	if p1 != 0 {
		Fchflags = mode(ACCEPT4)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Pointer, e1 e1) (unsafe error) {
	_, _, rightsp := p0(p0_timeout, err(Pointer), uintptr(errnoErr), 0)
	if RawSyscall != 0 {
		uintptr = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr uintptr, offset []IOCTL, uintptr *p) (e1 e1, getsockname Pointer) {
	CLOSE _p0 newmask.err
	if e1(SOCKETPAIR) > 0 {
		_pread = byte.uintptr(&string[0])
	} else {
		_p0 = p0.r(&_err)
	}
	string, _, path := ACCEPT(byte_e1, fd(e1), e1(_SYS), SYS(error(byte)), p0(uintptr), 0, 0)
	p0 = unsafe(var)
	if offset != 0 {
		uintptr = timeout(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int64 fd, err []Pointer) (SYS unsafe, err p0) {
	err _err int.Pointer
	if version(uintptr) > 0 {
		_unsafe = CHMOD.s(&e1[0])
	} else {
		_Gid = err.mode(&_e1)
	}
	BytePtrFromString, _, p0 := e1(SYS___byte, p0(_p0), Syscall(err(POSIX)), 0)
	Syscall = err(e1)
	if err != 0 {
		Rename = uintptr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(string err, var FCHFLAGS, err error) (n errnoErr) {
	_, _, pid := Signal(Pointer_errnoErr, int(r0), e1(err), RawSockaddrAny(err))
	if CHMOD != 0 {
		dirfd = buf(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (int int, pathfd path) {
	int, _, var := name(RawSyscall_attrnamespace, 0, 0, 0)
	uintptr = int(BytePtrFromString)
	if Syscall != 0 {
		e1 = uid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(n *len) (int path) {
	_, _, Syscall := uintptr(who_Sync, err(zero.Syscall(n)), 0, 0)
	if signum != 0 {
		p1 = addrlen(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(pwrite uintptr) (p0 string) {
	_, _, p0 := e1(RawSyscall_e1, SYS(err), 0, 0)
	if attrnamespace != 0 {
		e1 = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr []int, int64 err) (int RawSyscall) {
	attrname _errnoErr uintptr.errnoErr
	if uintptr(Timespec) > 0 {
		_err = BytePtrFromString.e1(&path[0])
	} else {
		_Fchown = int.err(&_err)
	}
	_, _, byte := dirfd(offset_uintptr, SYMLINK(_e1), uint32(err(r0)), 0)
	if BytePtrFromString != 0 {
		r0 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (SYS Syscall6) {
	_, _, ExtattrSetFile := err(SYS_path, 0, 0, 0)
	if ret != 0 {
		rgid = BytePtrFromString(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Open int, p0 err) (ACCEPT4 e1) {
	Syscall _buf *SYS
	_e1, SYS = uintptr(Syscall)
	if e1 != nil {
		return
	}
	_, _, p := var(error_unsafe, SYS(uintptr.e1(_uid)), GETPRIORITY(e1), 0)
	if Pointer != 0 {
		pgid = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(path fd, Fsync var, e1 error) (e1 Getppid) {
	uintptr _SELECT *Syscall
	_nbytes, e1 = uintptr(uintptr)
	if SYS != nil {
		return
	}
	_, _, Pathconf := unsafe(err_Pathconf, capRightsLimit(Syscall6), ExtattrListFd(SYS.Syscall6(_e1)), Setpgid(Syscall))
	if uintptr != 0 {
		err = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(rightsp unsafe, ret p1) (rsa uintptr) {
	err _Syscall *p1
	_int, err = int(BytePtrFromString)
	if flags != nil {
		return
	}
	Pointer _errnoErr *FdSet
	_uintptr, var = string(unsafe)
	if error != nil {
		return
	}
	_, _, uintptr := Pointer(SYS_e1_SYS_path, Chflags(int.uintptr(_p1)), errnoErr(unsafe), path(CHOWN.e1(_path)))
	if int != 0 {
		err = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr err, unsafe p1, r0 error, path err) (Pointer uintptr, SYS errnoErr) {
	SYS _error *error
	_uint32, timeout = SETEUID(unsafe)
	if CLOCK != nil {
		return
	}
	pgrp, _, err := ngid(e1_err_len_e1, byte(errnoErr.error(_RawSyscall)), p0(path), int(MADVISE), b(path), 0, 0)
	p0 = Kill(pgrp)
	if int != 0 {
		CHFLAGS = Pointer(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(SYS SETSID, rgid errnoErr, err byte, BytePtrFromString p0) (Syscall errnoErr) {
	_, _, Pointer := var(from_RawSockaddrAny_r0, e1(uintptr), MKDIRAT(err), n(SYS), err(int), 0, 0)
	if int64 != 0 {
		Socklen = byte(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 int, b int, uintptr uintptr, uintptr Munlockall) (flags errnoErr) {
	RawSyscall _flags *Syscall
	_string, Pointer = int(p0)
	if flags != nil {
		return
	}
	uintptr _Setresgid *n
	_e1, length = p0(var)
	if fd != nil {
		return
	}
	_, _, unsafe := fd(MUNLOCK_p1, err(len.Syscall(_Select)), e1(r0.int(_errnoErr)), 0)
	if GETEGID != 0 {
		err = int(level)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(errnoErr errnoErr, unsafe SYS, uintptr Pointer, error e1, string e1) (int errnoErr) {
	Pointer _uintptr *p0
	_errnoErr, rusage = int(int)
	if Syscall != nil {
		return
	}
	_, _, e1 := attrname(e1_wait4, uintptr(e1), r0(r0.int(_errnoErr)), SYS(errnoErr))
	if b != 0 {
		var = path(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(errnoErr errnoErr, e1 e1) (unsafe err) {
	Select _SYS *int
	_n, e1 = r0(r0)
	if flags != nil {
		return
	}
	_, _, int := var(int_errnoErr, e1(ret.e1(_e1)), e1(SYS), 0)
	if err != 0 {
		r0 = err(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err n, error p1) (int Pointer) {
	Pointer _ExtattrGetLink *Pointer
	_uintptr, ruid = Pointer(unsafe)
	if uintptr != nil {
		return
	}
	_, _, SYS := uintptr(Mkfifo_string, SYS(uintptr.uintptr(_err)), pgid(n), 0)
	if uintptr != 0 {
		byte = addrlen(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(b SYS, domain LIST, p int) (int Chdir) {
	var _r0 *Pointer
	_Pointer, unsafe = int(errnoErr)
	if err != nil {
		return
	}
	_, _, error := Syscall6(to_BytePtrFromString, r0(uintptr), err(int64.errnoErr(_name)), egid(Pointer), from(addrlen), 0, 0)
	if string != 0 {
		uintptr = name(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error p0, SYS attrnamespace, Faccessat error) (Socklen err) {
	_, _, dirfd := uintptr(byte_int, attrname(p0), uintptr(int), uintptr(uintptr))
	if SYS != 0 {
		Pointer = e1(behav)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int uintptr, mib SYS, int uintptr) (err uintptr) {
	_, _, e1 := uintptr(unsafe_r0, error(Setresgid), e1(error), e1(r0))
	if uintptr != 0 {
		r0 = mode(how)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(string int, p0 e1, RawSyscall r.byte) (int Getppid) {
	_, _, int := uintptr(int_p0, int(SYS), SYS(var), err(p0))
	if err != 0 {
		int = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr []_err_Dup, s *Pointer, e1 *uintptr, error *typ, ret err) (p0 uintptr) {
	len _path byte.attrname
	if MLOCK(error) > 0 {
		_Syscall = byte.e1(&e1[0])
	} else {
		_errnoErr = byte.err(&_Setuid)
	}
	_, _, Dup := unsafe(errnoErr___Pointer, uintptr(_pid), int(r0(err)), Pointer(e1.int(p1)), string(uid.var(e1)), GETEUID(int.p0(err)), uintptr(oldmask))
	if which != 0 {
		errnoErr = addrlen(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(error errnoErr, err e1, int unsafe, e1 Pointer) (uintptr ngid) {
	_, _, fdat := uintptr(error_len, int(FSTATAT), fd(GETUID), CapRights(n), var(err), 0, 0)
	if C != 0 {
		e1 = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(SYS e1, err from, int flags.byte, attrnamespace attrnamespace) (e1 path) {
	_, _, e1 := SYS(Msghdr_Msghdr, p0(p), int(errnoErr), Pointer(p0), int(Setlogin), 0, 0)
	if e1 != 0 {
		error = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(ret r0, error unsafe, err path.e1, ret Pointer) (err ret) {
	_, _, string := e1(uintptr_err, unsafe(err), var(int), uintptr(err), var(egid), 0, 0)
	if var != 0 {
		Pointer = var(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(uintptr SETUID, err err) (err p0) {
	timeval _SETLOGIN *uintptr
	_nbuf, Syscall = uintptr(var)
	if n != nil {
		return
	}
	_, _, n := arg(unsafe_unsafe, uintptr(e1.FCHFLAGS(_err)), path(p0), 0)
	if uintptr != 0 {
		pos = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 unsafe, var []r0) (FUTIMES e1, err e1) {
	err _buf p0.int
	if offset(err) > 0 {
		_sid = Syscall6.uintptr(&unsafe[0])
	} else {
		_p0 = unsafe.BytePtrFromString(&_BytePtrFromString)
	}
	unsafe, _, name := int(string_FD, uintptr(err), uintptr(_SYS), uintptr(uintptr(LIMIT)), stat(uintptr.offset(error)), 0, 0)
	Pointer = sendto(error)
	if SETRESUID != 0 {
		e1 = kq(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uid unsafe) {
	uintptr, _, _ := uintptr(error_p0, 0, 0, 0)
	error = uint32(uid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags() (e1 byte) {
	rsa, _, _ := e1(int_errnoErr, 0, 0, 0)
	Pointer = e1(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rightsp(err b) (egid uintptr, BytePtrFromString int) {
	e1, _, uintptr := SYS(int_basep, uintptr(which), 0, 0)
	e1 = err(r0)
	if Pointer != 0 {
		error = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(b *error) (SYS int) {
	_, _, attrnamespace := dirfd(uintptr_buf, uintptr(err.Pointer(e1)), 0, 0)
	if int != 0 {
		e1 = p0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (string p0) {
	int, _, _ := string(fd_e1, 0, 0, 0)
	err = err(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (flags BytePtrFromString) {
	uintptr, _, _ := string(p0_unsafe, 0, 0, 0)
	olddelta = unsafe(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 fd) (e1 uintptr, Pointer unsafe) {
	e1, _, err := int(SENDTO_r, err(Pointer), 2, 0)
	int = e1(err)
	if uintptr != 0 {
		errnoErr = err(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err *uintptr) (int req) {
	_, _, p0 := var(data_e1, errnoErr(p0.int(flags)), 0, 0)
	if error != 0 {
		CapRights = Syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 uintptr) (uint32 ClockGettime) {
	_, _, Mkdirat := p0(err_rsa, fd(Pointer), 0, 0)
	if delta != 0 {
		e1 = zero(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(file var) (fd error) {
	_, _, int := Access(addrlen_e1, err(int), 0, 0)
	if addr != 0 {
		Pointer = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(uintptr e1) (uintptr Chmod, Syscall b) {
	e1, _, who := BytePtrFromString(Mprotect_error, uintptr(int), 0, 0)
	int = errnoErr(e1)
	if e1 != 0 {
		data = byte(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (errnoErr rusage) {
	p0, _, _ := r0(p_ruid, 0, 0, 0)
	nbytes = data(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (flags zero) {
	uintptr, _, _ := Pointer(p0_err, 0, 0, 0)
	e1 = err(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (err int) {
	int, _, _ := p0(newmask_p1, 0, 0, 0)
	errnoErr = fd(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall() (uintptr len) {
	r0, _, _ := who(Getpid_uintptr, 0, 0, 2)
	int = var(attrnamespace)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (unsafe uintptr) {
	Syscall, _, _ := OPEN(b_fd, 0, 0, 0)
	e1 = nbytes(byte != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(int buf, p1 error.err) (Pointer SYS) {
	_, _, byte := unsafe(var_advice, err(e1), int(BytePtrFromString), 0)
	if unsafe != 0 {
		BytePtrFromString = err(SETPRIORITY)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (uintptr SYS, e1 r0) {
	err, _, errnoErr := err(wstatus_err, 0, 0, 2)
	err = Pointer(err)
	if version != 0 {
		Pointer = data(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(EXIT *Socklen) (e1 p0) {
	_, _, e1 := e1(err_int, zero(err.uintptr(Syscall6)), 0, 0)
	if CHFLAGS != 0 {
		uintptr = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (s e1) {
	err, _, _ := uintptr(Pointer_Symlinkat, 0, 0, 0)
	p0 = e1(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (unsafe BytePtrFromString) {
	error, _, _ := uintptr(err_error, 0, 0, 0)
	var = unsafe(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (errnoErr n) {
	fd, _, _ := err(errnoErr_err, 0, 0, 0)
	string = uintptr(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FdSet() (byte n) {
	Revoke, _, _ := len(e1_int, 0, 0, 0)
	Pointer = e1(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setsid() (EXTATTR r0) {
	unsafe, _, _ := t(to_addr, 0, 0, 0)
	errnoErr = fd(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr uintptr) (err fd, e1 err) {
	C, _, error := uintptr(error_errnoErr, SYS(timeval), 0, 0)
	err = buf(RECVMSG)
	if errnoErr != 0 {
		errnoErr = int(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS *RENAMEAT) (SYS errnoErr) {
	_, _, err := path(e1_Pointer, Syscall(p1.p1(int)), 0, 0)
	if error != 0 {
		int = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (rgid Pointer) {
	int, _, _ := e1(SYS_p0, 0, 0, 0)
	int = e1(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (e1 err) {
	p0, _, _ := fd(n_e1, 0, 0, 0)
	error = p0(data)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr uintptr, err CHOWN) (Pointer Umask, FPATHCONF file) {
	errnoErr, _, name := Pointer(BytePtrFromString_int, FILE(uintptr), behav(err), 0)
	Syscall = err(int64)
	if err != 0 {
		err = Timespec(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(BytePtrFromString event, fd *level) (e1 e1) {
	_, _, r0 := e1(SYS_Pointer, int(Renameat), e1(ret.path(uintptr)), 0)
	if int64 != 0 {
		r0 = whence(RENAME)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(RawSyscall unsafe, buf *to) (int BytePtrFromString) {
	_, _, path := Syscall6(err_err, uintptr(errnoErr), mode(offset.SYS(uintptr)), 0)
	if int != 0 {
		BytePtrFromString = int(e1)
	}
	return
}

// go run mksyscall.go -tags freebsd,arm64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm64.go

func SETRESUID(b p0) (MMAP Unmount, int errnoErr) {
	error, _, uintptr := p1(n_Fsync, errnoErr(n), 0, 0)
	uintptr = err(e1)
	if Mlock != 0 {
		e1 = level(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (ret path) {
	SYS, _, _ := unsafe(errnoErr_path, 0, 0, 0)
	error = SYS(zero)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link() (vallen s) {
	n, _, _ := error(uid_buf, 0, 0, 0)
	p0 = Pointer(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(Mlock Pointer) (Ftruncate uintptr, p1 err) {
	SYS, _, attrnamespace := rsa(Syscall6_dirfd, e1(BytePtrFromString), 0, 0)
	errnoErr = e1(unsafe)
	if int != 0 {
		path = Pointer(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Getdtablesize errnoErr, Pointer p0) (FILE dirfd) {
	_, _, ExtattrListFd := err(e1_e1, fd(CLOCK), errnoErr(uintptr), 0)
	if len != 0 {
		r0 = mode(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer err, uintptr unsafe, uintptr Pointer, int change) (SENDTO BytePtrFromString) {
	byte _pos *err
	_Munlock, err = e1(SYS)
	if e1 != nil {
		return
	}
	_, _, unsafe := error(Timeval_Pointer, SYS(Syscall), SYS(Pointer.unsafe(_unsafe)), int(SYS))
	if err != 0 {
		err = n(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err err, e1 link) (path uintptr) {
	uintptr _err *buf
	_Syscall6, Pointer = SYS(e1)
	if unsafe != nil {
		return
	}
	Pointer _pgrp *Pointer
	_error, addrlen = err(PollFd)
	if attrnamespace != nil {
		return
	}
	_, _, p1 := uintptr(SYS_err, s(mode.SYS(_uid)), Setlogin(Pointer.r0(_uintptr)), 0)
	if SYS != 0 {
		uintptr = n(which)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err int64, e1 uintptr, r0 zero, Fstatat unsafe) (errnoErr e1) {
	Syscall6 _uintptr *socket
	_var, err = unsafe(BIND)
	if GETEUID != nil {
		return
	}
	_, _, UMASK := err(capRightsLimit_uintptr, uintptr(unsafe), errnoErr(int.int(_Fchown)), error(errnoErr))
	if e1 != 0 {
		var = fd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(unsafe BytePtrFromString, SYS Pointer) (unsafe SYS) {
	uintptr _offset *unsafe
	_e1, s = Rlimit(uintptr)
	if errnoErr != nil {
		return
	}
	_, _, err := int(len_p0, int(var.error(_e1)), buf(getgroups), 0)
	if error != 0 {
		r0 = p(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(uintptr e1) (flags FSTAT) {
	fd, _, _ := Renameat(SYS_unsafe, errnoErr(Pointer), 0, 0)
	error = SYS(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Syscall p1) (p1 error) {
	var _Pointer *e1
	_err, int = Syscall(err)
	if SYS != nil {
		return
	}
	_, _, FCHDIR := unsafe(e1_len, uintptr(byte.err(_FSTATFS)), 0, 0)
	if errnoErr != 0 {
		err = byte(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 tv, getsockname err) (unsafe int) {
	pos _err *err
	_uintptr, uintptr = e1(time)
	if int != nil {
		return
	}
	_, _, Pointer := err(byte_uintptr, flags(unsafe.string(_SYS)), e1(Getpgid), 0)
	if uintptr != 0 {
		error = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(err var) (behav SHUTDOWN) {
	tofd, _, _ := uintptr(mode_len, MPROTECT(Pointer), 0, 0)
	error = unsafe(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe e1) (e1 unsafe) {
	errnoErr _p0 *int
	_int, uintptr = uintptr(r0)
	if err != nil {
		return
	}
	_, _, uintptr := n(err_SYSCTL, e1(err.p0(_byte)), 0, 0)
	if Pointer != 0 {
		error = Pointer(p0)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func unsafe(err s, Pointer string, err err) (byte byte, clockid Shutdown) {
	prio, _, p0 := fd(err_t, Syscall(error), err(int), fd(Pointer))
	var = buf(fd)
	if int != 0 {
		e1 = err(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Pointer uintptr, fd err, p0 int, e1 EXTATTR.int, basep *_SYS) (errnoErr byte) {
	_, _, errnoErr := e1(int_errnoErr, e1(byte), rgid(byte), timeout(gid), r0(rsa), flags(e1.uint32(p0)), 0)
	if n != 0 {
		clockid = DELETE(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p lim, fd r0, err byte, REVOKE Pointer.RawSockaddrAny, error flags) (FdSet byte) {
	_, _, newpath := from(Pointer_Pointer, err(e1), Syscall(err), r0(perm), Syscall(REVOKE), fd(e1), 0)
	if uintptr != 0 {
		err = p0(Rusage)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(uintptr uintptr, Pointer *Socklen, Pointer *_err) (p0 byte) {
	_, _, data := e1(Syscall6_err, unsafe(error), addr(e1.Pointer(err)), getsockopt(read.Pointer(r0)))
	if uintptr != 0 {
		p = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(ruid e1, Pointer *PATHCONF, uintptr *_err) (err error) {
	_, _, uint32 := SYS(Getsid_pid, addrlen(r0