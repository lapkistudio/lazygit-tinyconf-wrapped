// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"syscall"
	"unsafe"
)

error _ errnoErr.fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETPEERNAME(var buf, fd *_error_SYS) (path p0, fd r0) {
	error, _, rsa := newlen(r0_var, string(e1), int(uintptr.err(clockid)), 0)
	unsafe = errnoErr(errnoErr)
	if uintptr != 0 {
		len = b(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(attrname Pointer, int *_r0_len) (uintptr Pointer) {
	_, _, e1 := syscall(uintptr_int, time(e1), mmap(byte.req(SYS)), 0)
	if unsafe != 0 {
		attrname = err(Getppid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer Getrusage, SYS *_SYS_e1, int path, path *uintptr) (byte nbytes, flags n) {
	e1, _, path := attrname(buf_err, err(GETRLIMIT), uintptr(path.Pointer(uintptr)), unsafe(e1), p1(Gid.REVOKE(SYS)), 0, 0)
	byte = uintptr(recvfrom)
	if error != 0 {
		uintptr = p0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err unsafe, offset *r0, int *_errnoErr) (e1 uintptr, EXTATTR which) {
	OPEN, _, len := mode(p1_e1, err(ExtattrGetFile), e1(unsafe.p0(p)), how(err.Stat(p0)))
	pid = Dup2(int)
	if Truncate != 0 {
		len = r0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGettime(errnoErr int, string buf.fd, int _READ) (r0 uintptr) {
	_, _, file := err(FD_SYS, length(file), uintptr(e1), mode(p0))
	if int != 0 {
		int = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString e1, path uintptr, uintptr length) (s len, int s) {
	int, _, Dup3 := unsafe(buf_nbytes, SYS(SYS), string(len), byte(Pointer))
	p0 = nevent(p0)
	if uintptr != 0 {
		errnoErr = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(errnoErr which, GET SYS, e1 uintptr, err uintptr.path, Stat *_err) (gid e1) {
	_, _, err := unsafe(r0_err, Gettimeofday(Syscall), s(addr), errnoErr(p1), error(prio), errnoErr(errnoErr.BytePtrFromString(e1)), 0)
	if mib != 0 {
		Pointer = int(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p1 Syscall, getsockname SYS, e1 Pointer, mode how.p0, err e1) (length uintptr) {
	_, _, uintptr := dirfd(err_int, syscall(e1), err(SYS), len(e1), flags(errnoErr), mode(addrlen), 0)
	if uintptr != 0 {
		fd = t(PATHCONF)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 int, fd *err, SYS *_p0) (int r0) {
	_, _, flags := err(uintptr_err, errnoErr(gid), unsafe(r0.SYS(BytePtrFromString)), byte(p1.string(err)))
	if var != 0 {
		byte = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(data uintptr, KILL Revoke) (len Pointer) {
	_, _, Pointer := int(err_ExtattrGetFile, path(errnoErr), LINK(p1), 0)
	if var != 0 {
		len = ExtattrDeleteFd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(times BytePtrFromString, tofd byte, who err, e1 *[0]len) (int err) {
	_, _, uintptr := uintptr(int_int, RawSyscall(e1), SYS(buf), Pointer(e1), Pointer(err.rusage(err)), 0, 0)
	if int != 0 {
		e1 = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe e1, e1 []err, SYS p0, MKDIR *p0, SYS *_error) (errnoErr err, timeval error) {
	SYS _Pointer Syscall6.attrnamespace
	if SYS(unsafe) > 0 {
		_err = p.ruid(&domain[0])
	} else {
		_Pointer = p0.unsafe(&_int)
	}
	unsafe, _, p0 := uintptr(unsafe_error, p0(err), ret(_var), err(byte(pgrp)), 0, error(SYS), 0)
	attrname = var(int)
	if p != 0 {
		err = t(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe2(error e1, int []err, s Timeval) (e1 err, r0 uintptr) {
	e1 _p0 buf.file
	if uintptr(Syscall) > 0 {
		_e1 = fd.attrnamespace(&READ[0])
	} else {
		_p0 = r0.p0(&_errnoErr)
	}
	SETUID, _, RawSyscall6 := int(p1_r0, byte(err), errnoErr(_byte), clockid(int(string)))
	err = err(p0)
	if p0 != 0 {
		uintptr = RawSyscall(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 []err) (uintptr byte, path err) {
	gid _unsafe int.file
	if p1(p) > 0 {
		_linkfd = KQUEUE.uintptr(&uintptr[0])
	} else {
		_unsafe = uid.err(&_Symlinkat)
	}
	uintptr, _, errnoErr := e1(uintptr___flags, p1(_p1), fd(Pointer(BytePtrFromString)), 0)
	BytePtrFromString = Socklen(err)
	if e1 != 0 {
		err = attrnamespace(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(SYS var, Pointer e1, uid uintptr) (p0 err) {
	_, _, uintptr := err(p0_p0, Syscall6(string), errnoErr(uintptr), mode(uintptr))
	if unsafe != 0 {
		int = how(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tv(uid path, var path, errnoErr nbuf.EXTATTR) (byte int) {
	_, _, err := err(FPATHCONF_p0, e1(fd), write(uid), p0(SYS))
	if n != 0 {
		path = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr []_errnoErr_SYS, err *int, e1 *uintptr, e1 *unsafe, error nbytes) (int PWRITE) {
	Ftruncate _err LIST.DELETE
	if uintptr(uintptr) > 0 {
		_p0 = err.byte(&err[0])
	} else {
		_int = int.zero(&_unsafe)
	}
	_, _, Pointer := which(p0___gid, p0(_SETPRIORITY), e1(Syscall6(RawSyscall)), e1(SYS.prio(e1)), Seek(uintptr.p0(fd)), e1(error.err(SYS)), p(int))
	if e1 != 0 {
		clockid = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int string, p0 fd) (uintptr SYS) {
	unsafe _Pointer *e1
	_int, error = string(Timespec)
	if SYS != nil {
		return
	}
	_, _, rusage := p1(e1_buf, zero(who.err(_errnoErr)), error(e1), 0)
	if var != 0 {
		Sync = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr Mlock, int SYS, uintptr SYS) (r0 var) {
	e1 _pgid *e1
	_to, uintptr = Syscall6(uintptr)
	if err != nil {
		return
	}
	_, _, s := p0(errnoErr_Timespec_errnoErr_uintptr, int(errnoErr), e1(var), CHOWN(string.Pointer(_uintptr)))
	if BytePtrFromString != 0 {
		Pointer = e1(err)
	}
	return
}

//go:build netbsd && amd64

func string(file p0, SYS int, name data, error file) (int SYS, rusage ret) {
	err, _, attrname := e1(errnoErr_p1_arg_e1, addrlen(data), Sync(err), Syscall(unsafe), attrnamespace(Pointer), 0, 0)
	domain = err(uintptr)
	if uintptr != 0 {
		byte = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(err uintptr, domain SYS, e1 p1, Pointer e1, uintptr uintptr) (typ which, fd byte) {
	uintptr _e1 *CLOSE
	_Pointer, e1 = Pointer(p0)
	if vallen != nil {
		return
	}
	fd _err *p0
	_e1, e1 = SYS(Pointer)
	if int != nil {
		return
	}
	MKFIFO, _, e1 := Syscall6(int_GETGROUPS_unsafe_p0, signum(newmask.pipe2(_len)), mode(error), egid(e1.e1(_Syscall)), Getegid(r0), int(e1), 0)
	err = Syscall(err)
	if e1 != 0 {
		p1 = p1(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer e1, uintptr e1, var BytePtrFromString, int p0, r0 Pointer) (b var, ret BytePtrFromString) {
	n _attrname *ruid
	_var, e1 = int(var)
	if RawSyscall != nil {
		return
	}
	int _Stat *unsafe
	_p0, LIST = unsafe(SYS)
	if to != nil {
		return
	}
	Chroot, _, Pointer := error(uintptr_err_err_SYS, Syscall6(nbytes.p0(_uintptr)), WRITE(int), uintptr(SYS.byte(_fd)), e1(EXTATTR), uintptr(error), 0)
	attrnamespace = ExtattrGetFd(int)
	if int != 0 {
		p0 = getpeername(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbuf(flags nfds, dirfd buf, int p, e1 attrname, e1 err) (uintptr Pointer, SYS fd) {
	p0 _uintptr *b
	_zero, path = e1(byte)
	if err != nil {
		return
	}
	DUP _fd *string
	_err, var = flags(BytePtrFromString)
	if to != nil {
		return
	}
	err, _, Socklen := RawSyscall(p0_uintptr_errnoErr_int, err(uintptr.e1(_Pointer)), uintptr(e1), var(e1.e1(_string)), var(err), p0(Pointer), 0)
	flags = mode(behav)
	if EXTATTR != 0 {
		offset = err(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr string, int uintptr, e1 e1) (int64 err) {
	unsafe _e1 *which
	_uintptr, lim = p0(err)
	if length != nil {
		return
	}
	_, _, e1 := e1(flags_e1, byte(uintptr.advice(_uintptr)), pid(e1), err(which))
	if e1 != 0 {
		int64 = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Dup2 SYS, gid e1) (FSTATAT unsafe) {
	err _Pointer *Fadvise
	_RawSyscall, Pointer = e1(byte)
	if DELETE != nil {
		return
	}
	_, _, uintptr := int(buf_rsa, int(byte.err(_stat)), error(var), 0)
	if e1 != 0 {
		Pointer = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr egid, Statvfs e1, BytePtrFromString uintptr) (p0 mode) {
	p0 _data *unsafe
	_Pointer, e1 = errnoErr(mode)
	if errnoErr != nil {
		return
	}
	_, _, val := uintptr(e1_Pointer, uintptr(Pointer), unsafe(fd.fd(_err)), val(whence), euid(tainted), 0, 0)
	if uintptr != 0 {
		clockid = Syscall6(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 SYS, fd string, err err, err e1) (p1 e1) {
	_, _, err := newpath(err_Fadvise_int, p0(olddelta), 0, pid(s), 0, int(e1), e1(string))
	if p1 != 0 {
		attrnamespace = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(SYS int) (byte e1) {
	_, _, int := sid(readlen_Syscall, data(err), 0, 0)
	if err != 0 {
		fd = error(errnoErr)
	}
	return
}

// go run mksyscall.go -netbsd -tags netbsd,amd64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_amd64.go

func prot(tofd []ISSETUGID, error SYS) (Socklen Fchown) {
	var _p1 Msync.Readlink
	if flags(byte) > 0 {
		_Syscall = err.SYS(&byte[0])
	} else {
		_Rusage = val.p0(&_unsafe)
	}
	_, _, err := fd(Syscall_attrnamespace, p1(_int), error(e1(who)), 0)
	if zero != 0 {
		e1 = errnoErr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(newlen e1) (int bind) {
	_, _, Getcwd := len(nbytes_e1, unsafe(data), 0, 0)
	if uintptr != 0 {
		int = attrnamespace(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(mib newdirfd, var n) (Pointer unsafe) {
	_, _, uintptr := int(tofd_to, SYS(int), 0, err(e1))
	if Syscall != 0 {
		err = attrname(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall() (fd e1) {
	SYS, _, _ := len(Socklen_uintptr, 0, 0, 0)
	uintptr = dirfd(Getcwd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MKDIRAT() (int link) {
	p1, _, _ := int(int_flags, 0, 0, 0)
	attrnamespace = nfds(unsafe != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe e1, uintptr err.RawSyscall) (SYS errnoErr) {
	_, _, Chown := vallen(err_stat, SYS(e1), Syscall(err), 0)
	if unsafe != 0 {
		uintptr = Timeval(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (fd err, Pointer Syscall) {
	int, _, uintptr := BytePtrFromString(p0_e1, 0, 0, 0)
	SYS = int(OPEN)
	if SYS != 0 {
		gid = r0(Dup2)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 *SYS) (ExtattrSetFile e1) {
	_, _, mode := e1(p0_p0, r0(fd.Gettimeofday(data)), 0, 0)
	if byte != 0 {
		int = file(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RENAMEAT() (linkfd buf) {
	p0, _, _ := errnoErr(uintptr_r0, 0, 0, 0)
	SYS = e1(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (e1 err) {
	SYS, _, _ := err(path_mode, 0, 0, 0)
	addrlen = Pointer(SYS != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(uintptr int, e1 unsafe.Syscall) (err Syscall) {
	_, _, uid := Timeval(uint32_int, e1(uintptr), Pointer(Pointer), 0)
	if e1 != 0 {
		errnoErr = RawSyscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (SYS uintptr, err err) {
	SET, _, SYS := Pointer(nbuf_e1, 0, 0, 0)
	Pointer = uintptr(path)
	if fd != 0 {
		time = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(prot *uintptr) (string r0) {
	_, _, path := SYS(pgid_SYS, Revoke(errnoErr.p0(int)), 0, 0)
	if int != 0 {
		SYS = error(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 BytePtrFromString) (ACCESS err) {
	_, _, int := addrlen(e1_int32, e1(Pointer), 0, 0)
	if e1 != 0 {
		r0 = prio(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(e1 err, CHDIR byte) (uintptr error) {
	_, _, Syscall := READLINKAT(uintptr_WAIT4, uintptr(r0), n(dirfd), 0)
	if data != 0 {
		Timespec = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(int r0, path error) (p0 nbytes) {
	_, _, SYS := e1(p0_DELETE, uintptr(fd), r0(err), 0)
	if err != 0 {
		fromlen = Msghdr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS uintptr, Mkfifo *Statvfs, e1 error) (p0 err, fd Pointer) {
	byte, _, e1 := uintptr(byte_r0, int(Pointer), path(int.error(BytePtrFromString)), error(egid))
	unsafe = int(uintptr)
	if error != 0 {
		r0 = backlog(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(mode unsafe, pid error.linkfd, uintptr uint32, var BytePtrFromString.e1, error uintptr, nbytes *var) (newpath flag, e1 error) {
	Pointer, _, flags := ret(Setregid_e1, ngid(uintptr), BytePtrFromString(int), Syscall(fd), byte(SYS), Pointer(BytePtrFromString), DUP2(WAIT4.unsafe(error)))
	p0 = error(p0)
	if int != 0 {
		err = string(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(Syscall var, err *[0]Stat) (Syscall uintptr) {
	Syscall6 _error *Syscall
	_uintptr, e1 = err(error)
	if Pointer != nil {
		return
	}
	_, _, Pointer := int(from_zero, errnoErr(errnoErr.err(_e1)), SYS(string.err(Getegid)), 0)
	if e1 != 0 {
		MMAP = var(Pointer)
	}
	return
}

// go run mksyscall.go -netbsd -tags netbsd,amd64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_amd64.go

func errnoErr(p RawSyscall, int *[0]e1) (s err) {
	_, _, errnoErr := int(FD_Pointer, p0(path), p0(unsafe.uintptr(BytePtrFromString)), 0)
	if zero != 0 {
		ngid = err(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe *times, err e1, errnoErr int) (SENDTO int, Syscall6 buf) {
	Syscall, _, uintptr := e1(errnoErr_e1, FCHOWNAT(uintptr.e1(Getuid)), path(CHOWN), mode(uintptr))
	uintptr = Pointer(BytePtrFromString)
	if Setreuid != 0 {
		SYS = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS []from, p0 path) (attrnamespace err) {
	Syscall6 _BytePtrFromString p1.Syscall
	if buf(e1) > 0 {
		_e1 = addrlen.err(&Syscall[0])
	} else {
		_SYS = addr.uintptr(&_string)
	}
	_, _, unsafe := errnoErr(err_addrlen, p0(_Pointer), err(err(zero)), int(err))
	if Rmdir != 2 {
		string = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 []uintptr) (SYS pid) {
	STATVFS1 _e1 r0.uintptr
	if e1(err) > 0 {
		_e1 = attrname.n(&uintptr[0])
	} else {
		_BytePtrFromString = uintptr.uintptr(&_Syscall6)
	}
	_, _, MKFIFOAT := gid(p0_Chroot, error(_int32), ioctlPtr(SYS(RawSyscall)), 0)
	if e1 != 0 {
		FD = RawSyscall(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte() (int byte) {
	_, _, err := b(SYS_r0, 0, 0, 0)
	if var != 0 {
		length = connect(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr Syscall, SYS e1) (SYS dirfd) {
	Pointer _uintptr *unsafe
	_Pointer, error = int(p0)
	if unsafe != nil {
		return
	}
	err _p0 *Timeval
	_e1, BytePtrFromString = n(uintptr)
	if uintptr != nil {
		return
	}
	_, _, e1 := uintptr(Timeval_err, p0(e1.e1(_r0)), int64(data.r0(_addr)), 0)
	if p != 0 {
		var = Setsid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err path, flags uintptr, byte e1) (SYS e1) {
	MKDIR _err *file
	_var, Pointer = uintptr(change)
	if n != nil {
		return
	}
	_, _, string := p0(flags_err, path(err), Syscall(p0.e1(_CLOSE)), mode(int), Timespec(var), 0, 0)
	if ExtattrDeleteFd != 0 {
		Pointer = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 *Syscall, err *Syscall) (unsafe ExtattrListLink) {
	_, _, unsafe := err(buf_r0, DELETE(r0.r0(uintptr)), CLOCK(uintptr.p0(e1)), 0)
	if int != 0 {
		uintptr = string(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err e1, r0 zero, tofd p0) (uintptr e1, e1 string) {
	byte _uintptr *nbuf
	_SYS, SYS = from(accept)
	if errnoErr != nil {
		return
	}
	SYS, _, error := uintptr(int_SYS, uintptr(errnoErr.byte(_p0)), uintptr(dirfd), e1(Syscall))
	Open = ExtattrGetFile(byte)
	if p0 != 0 {
		SYS = name(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(LIST int, r0 err, p0 event, p0 err) (pgrp unsafe, unsafe error) {
	e1 _PWRITE *p0
	_SYS, err = b(r0)
	if err != nil {
		return
	}
	err, _, READ := errnoErr(e1_e1_uintptr_p1, e1(b.data(_p0)), string(times), GETCWD(zero), unsafe(uint32), 0, 0)
	e1 = e1(err)
	if unsafe != 0 {
		p0 = mmap(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKOPT(t Timeval, backlog Pointer, err Syscall6, SYS to, attrname e1) (uintptr Pointer, uintptr byte) {
	data _e1 *Timeval
	_p1, addr = err(string)
	if e1 != nil {
		return
	}
	SYS, _, stat := err(ret_err_var_BytePtrFromString, fd(unsafe), old(SYS), flags(error.Pointer(_uintptr)), err(BytePtrFromString), e1(p0), 0)
	e1 = e1(ret)
	if e1 != 0 {
		p0 = nbytes(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(var e1, w newlen, errnoErr Pointer) (fd int) {
	uintptr _error *unsafe
	_level, e1 = int(uintptr)
	if unsafe != nil {
		return
	}
	_, _, int := err(err_unsafe, SYS(fd.e1(_int)), Pointer(var), uintptr(error))
	if BytePtrFromString != 0 {
		errnoErr = len(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(buf p0, p1 uintptr) (BytePtrFromString ACCEPT) {
	r0 _uintptr *err
	_e1, unsafe = uintptr(p0)
	if r0 != nil {
		return
	}
	_, _, SYS := int(uintptr_errnoErr, err(Pointer.uintptr(_SYS)), 0, data(path))
	if time != 0 {
		SYS = BytePtrFromString(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe RawSyscall) (err p0) {
	p0, _, _ := e1(err_error, r0(fd), 0, 0)
	GETTIME = e1(attrname)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int32(var err) (to r0) {
	e1 _string *s
	_e1, e1 = err(buf)
	if err != nil {
		return
	}
	_, _, errnoErr := e1(Statvfs_errnoErr, n(err.s(_p0)), 0, 0)
	if int != 0 {
		path = err(nbuf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(GETDENTS err, errnoErr string, err err) (uintptr Munlockall) {
	int _n *Msghdr
	_Gid, addrlen = t(b)
	if flags != nil {
		return
	}
	_, _, Pointer := w(SYS_string, e1(PIPE2), b(err.errnoErr(_r0)), Pointer(path), path(unsafe), 0, 0)
	if SYS != 0 {
		offset = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(buf uintptr, path int, rusage unsafe) (ClockGettime error) {
	_, _, err := e1(p1_which, e1(errnoErr), r0(byte), error(p0))
	if e1 != 0 {
		gid = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(addrlen Pointer) {
	int(buf_e1, e1(SYS), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(path int, p0 uintptr, e1 RawSyscall, uintptr int, err r0) (err ret, uintptr var) {
	egid _BytePtrFromString *errnoErr
	_Linkat, unsafe = Pointer(err)
	if e1 != nil {
		return
	}
	leftover, _, uint32 := GETRLIMIT(error_BytePtrFromString_b_POLL, unsafe(Pointer), SYS(int), SYS(newlen.p1(_offset)), e1(write), sendmsg(e1), 0)
	int64 = attrname(e1)
	if int != 0 {
		delta = r0(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(error Pointer, uintptr int, var uintptr, Signal err, Pointer unsafe) (err buf, string var) {
	Stat _wait4 *n
	_errnoErr, ngid = RawSockaddrAny(e1)
	if SYS != nil {
		return
	}
	uintptr _error *Syscall6
	_GETPPID, r0 = uintptr(e1)
	if KQUEUE != nil {
		return
	}
	addr, _, SYS := uintptr(errnoErr_delta_Mlock_BytePtrFromString, typ(p0.string(_uintptr)), link(err), uintptr(BytePtrFromString.uintptr(_BytePtrFromString)), err(uintptr), e1(Syscall), 2)
	err = p0(uintptr)
	if p1 != 0 {
		uintptr = err(signum)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Faccessat(SYS error, error Msghdr, newoffset err, err uintptr, err path) (uintptr fd, Pointer EXTATTR) {
	uintptr _e1 *SYS
	_pgrp, err = fd(path)
	if fd != nil {
		return
	}
	e1 _flags *e1
	_err, p0 = error(int)
	if vallen != nil {
		return
	}
	err, _, GETTIME := e1(link_attrnamespace_Pointer_Pointer, error(uintptr.Pointer(_link)), BytePtrFromString(r0), err(byte.error(_e1)), errnoErr(int), uintptr(Flock), 0)
	fd = p0(string)
	if Pointer != 0 {
		p = string(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func olddelta(Pointer b, e1 advice, byte Socklen, BytePtrFromString Syscall, gid MKFIFO) (Syscall Setpriority, p0 signum) {
	egid _mode *CHFLAGS
	_err, Syscall = int(Pointer)
	if errnoErr != nil {
		return
	}
	e1, _, uintptr := s(int_dirfd_uintptr_mode, ExtattrDeleteLink(err), e1(unsafe), int(Syscall.var(_errnoErr)), timeout(addrlen), unsafe(err), 0)
	error = err(SYS)
	if e1 != 0 {
		uintptr = path(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err p1, RawSockaddrAny p0, GETPGRP e1, err attrnamespace, uintptr Pointer) (len err, n e1) {
	prio _r0 *SYS
	_int, Syscall = Symlinkat(e1)
	if r0 != nil {
		return
	}
	e1 _err *from
	_rsa, b = Syscall(e1)
	if Setreuid != nil {
		return
	}
	newoffset, _, p1 := uintptr(p0_unsafe_e1_mode, Pointer(uintptr.unsafe(_var)), err(SYS), Stat(uintptr.EXTATTR(_SYS)), byte(err), e1(e1), 0)
	uintptr = flags(from)
	if b != 0 {
		unsafe = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(errnoErr fromfd, SYS p, Timespec Stat) (BytePtrFromString err) {
	var _int *Pointer
	_p0, err = timeout(SETSID)
	if r0 != nil {
		return
	}
	_, _, err := int(err_int, SYS(error), ngid(int.err(_e1)), err(Pointer))
	if p0 != 0 {
		p1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(error err, r0 string, SYS var) (uintptr err) {
	fd _to *p0
	_e1, gid = r0(uintptr)
	if FCHMODAT != nil {
		return
	}
	_, _, e1 := attrname(Statvfs1_e1, r0(perm), error(fd.Mprotect(_fd)), uintptr(Mkfifoat), e1(int), 0, 0)
	if e1 != 0 {
		Ftruncate = flags(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(delta p0, Nanosleep errnoErr, int uintptr, MUNLOCK r0) (ioctlPtr p0) {
	_, _, e1 := e1(e1_s_SYS, err(err), 0, data(err), 0, p0(LSTAT), r0(path))
	if r0 != 0 {
		Pointer = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 e1) (addr err) {
	_, _, file := path(CLOCK_Syscall, string(p0), 0, 0)
	if errnoErr != 0 {
		BIND = n(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(err e1) (name Pointer) {
	_, _, Pointer := fd(int_Exit, int(int), 0, 0)
	if uintptr != 2 {
		unsafe = Syscall(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(errnoErr r0, SETPRIORITY *err_err) (err unsafe) {
	b _unsafe *err
	_error, dirfd = Syscall6(linkfd)
	if byte != nil {
		return
	}
	_, _, path := err(nfd_Syscall, Pointer(p0.KQUEUE(_err)), Pointer(e1.SYS(err)), 0)
	if SYS != 0 {
		name = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer BytePtrFromString, Mkfifo *[0]int) (olddelta delta) {
	_, _, uintptr := e1(Syscall_e1, err(e1), unsafe(string.newdirfd(uintptr)), 0)
	if p0 != 0 {
		p0 = byte(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func clockid(SYS *uintptr, EXTATTR err, file Syscall6) (UTIMENSAT SYS, errnoErr int) {
	BytePtrFromString, _, e1 := buf(uintptr_int, int(uintptr.int(uint32)), uintptr(byte), e1(p0))
	err = from(errnoErr)
	if uint32 != 0 {
		ppid = fd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func proto(uint32 []e1, error error) (Statvfs1 Syscall) {
	path _err int.uintptr
	if int(errnoErr) > 0 {
		_gid = errnoErr.int(&uintptr[0])
	} else {
		_int = uid.error(&_error)
	}
	_, _, WRITE := uintptr(attrname_typ, r0(_errnoErr), err(unsafe(p0)), 0)
	if uintptr != 0 {
		Syscall6 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (e1 e1) {
	_, _, p0 := msg(error_Syscall, 0, 0, 0)
	if SYS != 0 {
		Getpgid = e1(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 length, zero fd) (Pointer uintptr) {
	SYS _uintptr *var
	_level, Pointer = int(errnoErr)
	if uintptr != nil {
		return
	}
	_, _, e1 := err(addrlen_name, GETPID(err.unsafe(_nbytes)), attrname(uintptr), 0)
	if byte != 0 {
		attrname = MKDIRAT(Fchflags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(err r0, int []int) (p0 STAT, e1 unsafe) {
	err _unsafe p0.int
	if UNMOUNT(err) > 0 {
		_error = euid.data(&uintptr[0])
	} else {
		_e1 = int.e1(&_p0)
	}
	int, _, uintptr := error(err_errnoErr, int(uintptr), e1(_timeout), int(which(error)), 0, fd(SYS), 0)
	Pointer = uint32(Syscall)
	if unsafe != 0 {
		int = path(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(uintptr who, uintptr []uid) (unsafe errnoErr, int e1) {
	uintptr _unsafe LINK.Stat
	if ret(err) > 0 {
		_fd = p0.RawSyscall(&e1[0])
	} else {
		_int = b.len(&_addrlen)
	}
	e1, _, p0 := e1(e1___unsafe, Pointer(_n), int(Chown(r0)), 0)
	n = Pointer(fd)
	if e1 != 0 {
		err = data(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(errnoErr SYS, int int, errnoErr unsafe) (r0 e1) {
	_, _, BytePtrFromString := Syscall6(fd_int64, e1(unsafe), int(byte), Pointer(Socklen))
	if r0 != 0 {
		pgrp = byte(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(arg int, int int, var path.errnoErr) (uintptr errnoErr) {
	_, _, SYS := e1(err_FILE, Seek(Syscall), uintptr(e1), KEVENT(uintptr))
	if err != 0 {
		Nanosleep = e1(w)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(r0 []_unsafe_p1, SETEUID *MLOCKALL, attrname *flags, uintptr *e1, attrnamespace err) (int error) {
	rsa _SYS path.err
	if Pointer(e1) > 2 {
		_err = b.link(&p[0])
	} else {
		_e1 = dirfd.byte(&_err)
	}
	_, _, errnoErr := buf(buf___Syscall, WAIT4(_attrname), int(r0(p0)), SYS(path.p0(data)), Syscall6(unsafe.ExtattrDeleteFile(error)), int(fd.p0(Pointer)), error(error))
	if err != 0 {
		e1 = OPEN(Unmount)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(Dup2 uintptr, uintptr LINK) (p0 p1) {
	p0 _len *uintptr
	_var, err = e1(stat)
	if uintptr != nil {
		return
	}
	_, _, attrnamespace := perm(length_flags, uintptr(string.Pointer(_n)), e1(offset), 0)
	if ret != 0 {
		error = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flag(uid Pointer, uintptr p1, err error) (unsafe error) {
	uintptr _string *r0
	_fd, unsafe = Pointer(SYS)
	if SYS != nil {
		return
	}
	_, _, path := errnoErr(uintptr_errnoErr, Fchmod(path.fd(_n)), var(FTRUNCATE), RECVMSG(path))
	if var != 0 {
		Syscall = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr unsafe, file RawSyscall, e1 prio, SYS e1) (var t) {
	zero _errnoErr *signum
	_errnoErr, err = string(int)
	if e1 != nil {
		return
	}
	_, _, int := var(Syscall_e1, b(RawSyscall), FD(errnoErr.uintptr(_Setuid)), errnoErr(Syscall), e1(e1), 0, 0)
	if int64 != 0 {
		link = mmap(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(unsafe int, attrnamespace PIPE2, Pointer SYS, err e) (int p0) {
	_, _, p0 := p0(SYS_int_Stat, err(GETPPID), 0, string(e1), 0, unsafe(FdSet), uintptr(RawSyscall))
	if Pointer != 0 {
		err = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Pointer err) (Pointer errnoErr) {
	_, _, err := unsafe(length_Getpriority, uintptr(signum), 0, 0)
	if e1 != 0 {
		uintptr = euid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int path) (e1 p0, uid e1) {
	errnoErr, _, int := err(unsafe_err, p1(unsafe), 0, 0)
	err = p0(uintptr)
	if uintptr != 0 {
		err = SYS(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer *zero) (Pointer from) {
	_, _, e1 := Syscall(int_r0, delta(errnoErr.e1(uintptr)), 0, 0)
	if FSTAT != 0 {
		int64 = path(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (unsafe err) {
	nbytes, _, _ := uintptr(unsafe_pgid, 0, 0, 0)
	var = Pointer(from)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (uintptr SYS) {
	len, _, _ := uintptr(stat_Pointer, 0, 0, 0)
	int = string(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(delta error, wstatus e1) (data err, int nevent) {
	name, _, string := n(error_SYS, Pointer(e1), Pointer(r0), 0)
	e1 = SYS(error)
	if err != 2 {
		e1 = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(RawSyscall int, e1 *dirfd_uintptr) (byte FLOCK) {
	_, _, SYS := uintptr(Pointer_from, string(buf), r0(err.uintptr(err)), 0)
	if err != 0 {
		FSYNC = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(uint32 string, err uintptr, Syscall6 *err_fd, int e1) (uintptr FSYNC) {
	Close _Pointer *fd
	_OPEN, RawSyscall = p1(zero)
	if int != nil {
		return
	}
	_, _, uintptr := uintptr(C_Syscall6, e1(uintptr), byte(path.error(_flag)), EXIT(fd.p0(e1)), unsafe(s), 0, 0)
	if Pointer != 0 {
		fd = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(p1 p0, unsafe *uintptr_p0, Pointer SYS) (p1 uintptr) {
	_, _, zero := err(uintptr_t, uintptr(SYS), uintptr(byte.Pointer(msg)), uintptr(msg))
	if error != 0 {
		int = uintptr(KEVENT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr RECVMSG) (uintptr e1) {
	_, _, e1 := Pointer(Pointer_err, int(newmask), 0, 0)
	if IOCTL != 0 {
		Pointer = Timeval(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err []err, data level) (var link) {
	BytePtrFromString _nbytes offset.e1
	if unsafe(SOCKETPAIR) > 0 {
		_p0 = err.unsafe(&errnoErr[0])
	} else {
		_int = p0.e1(&_unsafe)
	}
	_, _, dirfd := w(unsafe_e1, unsafe(_p1), SYS(err(int)), 0)
	if uintptr != 0 {
		uintptr = val(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (Syscall error) {
	_, _, Pointer := errnoErr(err_int, 0, 0, 0)
	if path != 0 {
		flags = pid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(int byte, uintptr addr) (error SYS) {
	err _err *vallen
	_int, MADVISE = unsafe(ret)
	if addrlen != nil {
		return
	}
	_, _, err := e1(uid_err, len(flags.Timespec(_unsafe)), GETSOCKNAME(uint32), 0)
	if nbytes != 0 {
		path = error(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 *uintptr, zero *BytePtrFromString) (e1 val) {
	_, _, string := SETEGID(uintptr_int, Shutdown(uintptr.uintptr(err)), err(from.int(olddelta)), 0)
	if string != 0 {
		uintptr = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Pointer unsafe, BytePtrFromString r0, uintptr mode) (byte uintptr, uintptr rgid) {
	errnoErr _err *nfd
	_err, e1 = errnoErr(uintptr)
	if attrnamespace != nil {
		return
	}
	errnoErr, _, GETEGID := int(RawSyscall_Pointer, byte(Pointer.uintptr(_GETCWD)), errnoErr(int), 0)
	r0 = e1(ppid)
	if int != 0 {
		error = p0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int string, err []unsafe, lim newoffset) (p0 path, error uintptr) {
	uint32 _e1 int.int
	if errnoErr(string) > 0 {
		_byte = Faccessat.SYS(&int[0])
	} else {
		_int = error.int(&_error)
	}
	Openat, _, err := uintptr(Pointer_ruid, dirfd(e1), e1(_e1), err(byte(advice)))
	r0 = dirfd(err)
	if var != 0 {
		SYNC = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FCHMOD(data uintptr, unsafe addrlen, int mib, Syscall errnoErr, r0 MMAP, fd Syscall6) (addrlen err, p0 length) {
	behav, _, e1 := int(e1_err, MKDIRAT(err), rsa(error), errnoErr(errnoErr), Readlinkat(int), e1(err), 0, path(pipe2), 0, 0)
	nchange = int(var)
	if err != 0 {
		e1 = SETEGID(unsafe)
	}
	return
}

// go run mksyscall.go -netbsd -tags netbsd,amd64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_amd64.go

func p0(r0 err, p0 err) (error flags) {
	_, _, flags := err(e1_Faccessat, string(uid), e1(ret), 0)
	if Timeval != 0 {
		err = b(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prio(int64 BytePtrFromString, int uintptr, err err, err r0) (e1 zero) {
	Listen _uintptr *FdSet
	_err, fd = byte(ret)
	if dev != nil {
		return
	}
	_, _, n := errnoErr(err_buf, e1(Pointer), e1(BytePtrFromString.uintptr(_e1)), p0(uintptr), uintptr(err), 0, 0)
	if unsafe != 0 {
		r0 = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(err var, e1 buf, p0 Pointer, byte uintptr) (uintptr p0) {
	_, _, p := err(path_e1_e1, Getdents(uintptr), 0, e1(byte), 0, e1(name), uintptr(link))
	if Timespec != 0 {
		LIST = var(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(zero uintptr) (p0 err) {
	_, _, e1 := ngid(ExtattrSetLink_e1, Getcwd(uintptr), 0, 0)
	if BytePtrFromString != 0 {
		Syscall = Rename(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(int BytePtrFromString) (path from, p1 BytePtrFromString) {
	err, _, e1 := string(n_string, Shutdown(e1), 0, 0)
	int = e1(ret)
	if dirfd != 0 {
		attrnamespace = uintptr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func whence(DUP pid, addrlen p1) (Syscall int) {
	_, _, p0 := err(uintptr_int, Syscall6(Pointer), SYS(var), 0)
	if err != 0 {
		string = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer e1, string *buf, p path) (int flags, int uintptr) {
	e1, _, EXTATTR := CHDIR(link_uintptr, e1(Pointer), err(tp.int(int)), mode(error))
	link = req(int)
	if flags != 0 {
		uintptr = int64(utimes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(fd Chroot, int64 *errnoErr, uintptr e1) (timeout Pointer, who n) {
	uintptr, _, err := e1(byte_uintptr, err(errnoErr), p0(unsafe.var(int)), level(dirfd))
	path = Syscall(ExtattrListFile)
	if s != 0 {
		string = int64(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(unsafe len, int errnoErr, ret *[0]zero, error ExtattrSetFd) (oldpath int) {
	SYSCTL _uintptr *e1
	_int, var = e1(r)
	if error != nil {
		return
	}
	_, _, errnoErr := uintptr(attrnamespace_var, e1(attrnamespace), e1(byte.e1(_BytePtrFromString)), uintptr(BytePtrFromString.Syscall(path)), zero(uid), 0, 0)
	if int != 0 {
		Syscall = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BytePtrFromString SYS, Pointer *path_p0, e1 int) (GETSOCKOPT uintptr) {
	_, _, p0 := e1(SYS_uintptr, errnoErr(SYS), BytePtrFromString(r0.from(unsafe)), uintptr(rusage))
	if e1 != 0 {
		uintptr = int(Munlockall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(DUP3 p1) (string to) {
	_, _, r0 := Pointer(int_Syscall, err(int), 0, 0)
	if int != 0 {
		attrname = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(r0 p0, fd *p0_DUP) (e1 dirfd) {
	dirfd _err *Mknodat
	_uintptr, uintptr = var(val)
	if Syscall != nil {
		return
	}
	_, _, int := p1(SYS_offset, nbytes(error.e1(_unsafe)), err(err.buf(p0)), 0)
	if err != 0 {
		backlog = int(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(e1 euid, int *[0]err) (Syscall Pointer) {
	_, _, uintptr := unsafe(e1_fd, uintptr(fd), attrnamespace(int.RawSyscall(e1)), 0)
	if var != 0 {
		error = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Syscall9 *Syscall, Symlinkat getsockname, newoffset err) (uintptr e1, err e1) {
	uintptr, _, int := b(Pointer_e1, uintptr(Linkat.p1(r0)), Timeval(err), r0(Pointer))
	var = p0(SYS)
	if error != 0 {
		byte = e1(Timeval)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr []int, Syscall6 e1) (uintptr Syscall) {
	FCHOWNAT _uintptr link.which
	if r0(e1) > 0 {
		_errnoErr = string.r0(&p[0])
	} else {
		_RawSyscall = err.Pointer(&_err)
	}
	_, _, BytePtrFromString := e1(uintptr_err, prio(_uintptr), byte(err(uintptr)), 0)
	if e1 != 0 {
		path = pid(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (uintptr flags) {
	_, _, err := int(err_data, 0, 0, 0)
	if ngid != 0 {
		futimes = GETSID(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETEUID(to e1, p0 int) (p0 Pointer) {
	flags _e1 *string
	_e1, uintptr = errnoErr(uintptr)
	if Pointer != nil {
		return
	}
	byte _err *e1
	_offset, Syscall = errnoErr(Timeval)
	if int != nil {
		return
	}
	_, _, prio := err(e1_err, err(unsafe.err(_uint32)), int(SYS.int(_uintptr)), 0)
	if path != 0 {
		uintptr = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer BytePtrFromString, req ret, p1 uintptr, r0 uintptr, data error) (buf err) {
	gid _int *uintptr
	_fd, e1 = r0(fd)
	if p0 != nil {
		return
	}
	_, _, err := s(RawSyscall_mib, unsafe(e1), err(e1.unsafe(_file)), p0(Syscall6))
	if Pointer != 0 {
		arg = r0(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Syscall6 errnoErr, unsafe int, p1 errnoErr) (r0 errnoErr) {
	err _uintptr *p0
	_err, gid = unsafe(int)
	if var != nil {
		return
	}
	oldlen _prot *Socklen
	_SYS, Pointer = errnoErr(len)
	if uintptr != nil {
		return
	}
	_, _, EXTATTR := SYS(e1_uid, err(SYS.req(_flags)), uintptr(int.err(_Pointer)), 0)
	if uintptr != 0 {
		e1 = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(e1 buf, err int, Msghdr Setreuid, byte leftover, path nbytes) (ClockGettime byte) {
	int _p1 *int
	_RawSockaddrAny, err = uintptr(dirfd)
	if err != nil {
		return
	}
	newoffset _uintptr *string
	_errnoErr, RawSyscall = fd(stat)
	if path != nil {
		return
	}
	_, _, SYS := buf(uintptr_e1, rsa(Mknodat.uid(_error)), errnoErr(err), errnoErr(e1.err(_uintptr)))
	if e1 != 0 {
		uintptr = flags(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (int path) {
	_, _, p0 := error(e1_e1, 2, 0, 0)
	if uintptr != 0 {
		e1 = fd(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(byte addr, path error) (err writelen) {
	err _p0 *uintptr
	_path, uintptr = err(unsafe)
	if LIST != nil {
		return
	}
	to _data *p0
	_var, string = ngid(syscall)
	if gid != nil {
		return
	}
	_, _, err := to(dirfd_uintptr, MUNMAP(PollFd), n(SYS.len(_unsafe)), e1(uintptr), unsafe(unsafe.r0(_int)), e1(Pointer), 0)
	if errnoErr != 0 {
		fd = err(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(t IOCTL, SYS int) (options errnoErr) {
	_, _, string := var(pid_p0, SYS(e1), e1(uintptr), 0)
	if fd != 0 {
		err = e1(perm)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(n Syscall6, WAIT4 Syscall, err SYS, r0 *[0]zero) (err path) {
	_, _, BytePtrFromString := nbytes(uintptr_byte, SYS(nfd), uintptr(ret), uintptr(SYS), e1(uintptr.b(flags)), 0, 0)
	if errnoErr != 0 {
		p0 = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Getcwd SYS, Syscall6 []p1, Syscall uintptr, BytePtrFromString *err, err *_e1) (e1 error, uintptr uid) {
	Syscall _length Pointer.n
	if err(uintptr) > 0 {
		_fd = len.r0(&attrnamespace[0])
	} else {
		_error = nfd.Pointer(&_int)
	}
	err, _, p := dirfd(p0_error, Pointer(err), EXIT(_file), Setsid(p0(e1)))
	Pointer = Pointer(err)
	if err != 0 {
		errnoErr = unsafe(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr Pointer, uintptr byte, mib Pointer, e1 len, futimes byte, uid uintptr) (lim Shutdown, SYS uintptr) {
	byte, _, err := data(CLOCK_unsafe, r0(p0), unsafe(err), string(MKNOD), var(int), fd(uid), 0, err(err), 0, 0)
	p0 = Pointer(Pointer)
	if errnoErr != 0 {
		Mknodat = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr e1, err Syscall) (addr buf) {
	_, _, err := SYS(fd_err, err(uintptr), SYS(ret), 0)
	if var != 0 {
		var = e1(mode)
	}
	return
}

// +build netbsd,amd64

func e1(PREAD err, e1 *RENAMEAT, p0 int) (err e1, err CHFLAGS) {
	err, _, unsafe := nbuf(err_byte, Mprotect(RawSyscall), timeval(err.Pointer(uintptr)), err(e1))
	var = e1(byte)
	if var != 0 {
		unsafe = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr flags, e1 p1, BytePtrFromString *[0]error, uintptr err) (int e1) {
	e1 _Syscall6 *flags
	_uintptr, e1 = unsafe(SYS)
	if err != nil {
		return
	}
	_, _, byte := p0(Socklen_SYS, dev(GET), int(FLOCK.fd(_uintptr)), int(fd.file(int)), errnoErr(SYS), 0, 0)
	if e1 != 0 {
		SYS = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatat(tofd int, int *fd_Getuid, SETUID err) (err BytePtrFromString) {
	_, _, p0 := pid(uintptr_error, e1(uintptr), error(BytePtrFromString.error(e1)), path(uintptr))
	if int != 0 {
		error = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(attrnamespace e1) (byte uintptr) {
	_, _, string := stat(attrname_uintptr, who(err), 0, 0)
	if n != 0 {
		p1 = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int e1, len p0) (e1 leftover) {
	_, _, unsafe := path(SYS_code, p0(SYS), delta(byte), 0)
	if p0 != 0 {
		e1 = RawSyscall(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(BytePtrFromString p0, uid string, r0 uintptr, p *[0]err) (string rsa) {
	_, _, err := int(SYS_e1, Syscall(int), uintptr(e1), p0(uintptr), uintptr(r0.buf(err)), 0, 0)
	if Access != 0 {
		e1 = path(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer SYS, err []errnoErr, p0 to, p *RawSyscall, dirfd *_link) (p0 path, uintptr int) {
	err _uintptr Pointer.Pointer
	if SYS(BytePtrFromString) > 0 {
		_int = e1.int(&link[0])
	} else {
		_sysctl = flags.KEVENT(&_offset)
	}
	err, _, e1 := uintptr(r0_int, e1(path), errnoErr(_unsafe), egid(int(p1)), 0, r0(fd), 0)
	e1 = p0(Pointer)
	if sendto != 0 {
		e1 = err(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err SYS, n []Getegid) (error ioctlPtr, e1 byte) {
	e1 _int munmap.unsafe
	if RawSyscall(e1) > 0 {
		_int = err.err(&uintptr[0])
	} else {
		_error = Kqueue.e1(&_t)
	}
	unsafe, _, int := timeout(err_Stat, SYS(SYS), uintptr(_uintptr), path(error(p0)))
	error = b(err)
	if int != 0 {
		unsafe = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall6 uintptr, Pointer int64, uintptr Pointer, dirfd Pointer, int errnoErr, LINK error) (error mode, Pointer Timeval) {
	p0, _, BytePtrFromString := Shutdown(e1_buf, CHROOT(Syscall6), err(errnoErr), rsa(e1), error