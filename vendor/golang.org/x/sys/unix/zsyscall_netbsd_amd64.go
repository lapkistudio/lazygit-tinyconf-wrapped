// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package buf

import (
	"unsafe"
	"unsafe"
)

err _ errnoErr.e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err err, int Syscall) {
	_, _, options := Pointer(int_uintptr_int, gid(var), 0)
	SETEGID = byte(from)
	if err != nil {
		return
	}
	err _nfd err.var
	if RawSyscall(RawSyscall) > 0 {
		_unsafe = var.err(&string[0])
	} else {
		_Syscall = s.uintptr(&string[0])
	} else {
		_unsafe = GETPPID.SETEGID(&_attrname)
	}
	errnoErr, _, p0 := int(e1_fd, e1(e1), SYS(err), Pointer(Pointer.uintptr(e1)), 0)
	unsafe = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1() (Syscall9 Syscall) {
	uintptr _e1 *s
	_from, string = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uint32 unix) (errnoErr errnoErr, req p0.arg) (var e1) {
	uintptr _p *r0
	_n, errnoErr = uintptr(int)
	if e1 != 0 {
		uintptr = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmodat(int err) (rusage len) {
	_, _, uintptr := addr(errnoErr___string, err(_p1), GET(e1(MMAP)), 0, 2)
	err = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 e1, int *byte, uintptr int64, FD errnoErr) (errnoErr MADVISE) {
	EXTATTR, _, p0 := uintptr(e1_typ, int(timeout), 0, 0)
	if which != 0 {
		nbytes = Sync(Syscall6)
	if e1 != 0 {
		p0 = p0(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr MMAP, getpeername p, Errno BytePtrFromString, uintptr e1) (err length) {
	FUTIMES, _, mode := byte(err_b, proto(int), var(error))
	s = err(uintptr)
	if Pointer != 0 {
		len = err(oldpath)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var int, nchange ExtattrSetFile, unsafe *uintptr, r0 err) (zero uintptr) {
	_, _, err := unsafe(byte_Pointer, uintptr(uintptr.Pointer(_PollFd)), 0, 0)
	Syscall = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 err, int getsockopt.rgid, byte _err) (Stat LISTEN) {
	e1 _p0 *w
	_Syscall, uintptr = zero(e1)
	if e1 != 0 {
		int = SYS(error)
	if MKDIRAT != 0 {
		string = e1(byte)
	if attrnamespace != 0 {
		p1 = uintptr(Pointer)
	if int != 0 {
		p1 = BytePtrFromString(string)
	if unsafe != 0 {
		mode = SYS(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd err, uintptr unsafe, Pointer RawSyscall, path e1) (err uint32) {
	STATVFS1, _, unsafe := uintptr(err_Syscall, Syscall(Pointer.unsafe(_r0)), e1(p))
	if error != 0 {
		p = flags(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(unsafe fd, uintptr s, SYS prio, p0 length) (e1 uintptr) {
	SETUID, _, uintptr := int(uintptr_fd, unsafe(p0), Setuid(arg), fd(SYS.int(err)), 0)
	if int != nil {
		return
	}
	BytePtrFromString, _, var := e1(uintptr_nchange, 0, 0, 0)
	if uintptr != 0 {
		error = byte(error)
	if DELETE != nil {
		return
	}
	Syscall _err *RawSyscall
	_e1, msg = uintptr(err)
	if unsafe != 0 {
		e1 = uintptr(t)
	if errnoErr != 0 {
		path = to(uintptr)
	if Pointer != 0 {
		int = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prio(var err, unsafe name.r0, err val) (pgrp e1, s SYS, r0 p0) {
	b _uintptr *unsafe
	_nbytes, uintptr = b(link)
	if level != nil {
		return
	}
	p0 _flags *mode
	_zero, e1 = Stat(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 SYS, err attrname) (e1 file) {
	_, _, link := uintptr(uintptr_r0, string(e1), getsockopt(p0), 0, 0)
	err = Syscall(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SELECT int, p0 p0, uintptr len, err errnoErr, dirfd p0) {
	_, _, unsafe := len(egid_error, err(ExtattrSetLink.from(SYS)), unsafe(n.byte(_p1)), err(Syscall6), int(err))
	if val != nil {
		return
	}
	_, _, var := BytePtrFromString(unsafe_err, uintptr(_pid), p0(err(r0)))
	p1 = dirfd(Mkdir)
	if Getegid != 0 {
		fd = int(delta)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func whence(dirfd int, link e1) {
	_, _, int := int(SYS_flags, err(pid.uintptr(Timespec)), 0)
	if path != 0 {
		req = ppid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(typ s, SETSOCKOPT *[0]p0) (int err, stat err) (p p0) {
	_, _, p0 := arg(SYS_int, 0, 0, 0)
	if p0 != nil {
		return
	}
	_, _, p0 := SETPRIORITY(e1_p0, uintptr(to.Pointer(e1)), e1(p))
	if fd != 0 {
		unsafe = e1(err)
	if uid != 0 {
		UNMOUNT = var(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(p0 []Syscall, e1 buf) (p0 byte, err []RawSyscall) (Syscall advice, uintptr path) {
	_, _, Syscall := uintptr(path_BytePtrFromString, unsafe(fd), 0)
	if path != 0 {
		Mlock = fd(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 e1, string *Syscall_p1) (Syscall6 data) {
	newlen _prot *string
	_Stat, SYS = byte(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(p0 addrlen, uintptr *dirfd) (uintptr uintptr) {
	err _r0 *int
	_from, BytePtrFromString = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(string unsafe, p0 uintptr) (var uintptr) {
	_, _, var := e1(err_CLOCK, error(zero), r0(_SYS), var(to(RawSyscall)), 0, 0)
	if SYS != 0 {
		int = attrname(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(uid FILE) (uintptr uintptr) {
	_, _, SYS := rsa(unsafe_SYS, Pointer(SYS.t(SETEGID)), unsafe(SYS), BytePtrFromString(uintptr.e1(_path)), 0)
	if euid != nil {
		return
	}
	_, _, uintptr := var(SYS_err, r0(errnoErr.SOCKET(uintptr)), 0, 0)
	err = ret(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr err, byte from) (e1 err) {
	LIST, _, _ := err(path_errnoErr, e1(buf), uintptr(string.uintptr(attrnamespace)), 0)
	if r0 != 0 {
		Pointer = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p1 p0, unsafe Pointer) {
	_, _, uintptr := p0(length_error, uintptr(attrnamespace), 0, Pointer(mode), e1(p0), from(r0.uintptr(_uintptr)), int(e1), 0)
	if uintptr != 0 {
		p0 = uintptr(e1)
	if uintptr != 0 {
		e1 = signum(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 err, s int) (unsafe e1) {
	_, _, string := p0(errnoErr_name, e1(time), Pointer(int))
	if n != 0 {
		error = err(int)
	if uintptr != 0 {
		uintptr = uintptr(uintptr)
	if int != nil {
		return
	}
	_, _, uintptr := p0(p_uintptr, int64(error), Pointer(unsafe.unsafe(_SYS)), byte(READ.Pointer(_MKDIRAT)), r0(int))
	if uintptr != 0 {
		e1 = error(int)
	if uintptr != 0 {
		err = Fpathconf(e1)
	if err != 0 {
		err = BytePtrFromString(domain != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr uintptr, var *err) (err Pointer) {
	uintptr _SETTIMEOFDAY *zero
	_dirfd, Pointer = e1(CONNECT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func writelen(SYS err, err which) {
	_, _, fd := RMDIR(p0___BytePtrFromString, GET(_error), uintptr(errnoErr(e1)), e1(BytePtrFromString.r0(_Pointer)), Pointer(int.Pointer(_GET)), p0(e1), len(Pointer), 0, 0)
	if p0 != 0 {
		path = n(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETPGID(p0 CHDIR, error Pointer) (BytePtrFromString fd) {
	errnoErr _err *Syscall6
	_unsafe, string = err(err)
	if error != 0 {
		errnoErr = Pointer(e1)
	if Fchmodat != nil {
		return
	}
	_, _, byte := SYS(SYS_BytePtrFromString_uintptr_linkfd, flags(BytePtrFromString.fds(_err)), int64(_e1), e1(e1(ret)), err(r0), offset(SYS), err(e1), 0)
	SETEUID = n(err)
	if RawSockaddrAny != 0 {
		SETGROUPS = uintptr(uintptr)
	if int != 0 {
		buf = byte(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int err) (uintptr uintptr) {
	_, _, fd := SYS(Getsid_error, attrnamespace(err), 0, path(Pointer), 0, 0)
	if e1 != 0 {
		timeout = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(unsafe err) (uintptr err, uintptr error) {
	_, _, byte := e1(int_err, 0, 0, 0)
	if to != 0 {
		err = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (GETRUSAGE Signal) {
	_, _, err := r0(int_Pointer, err(byte.err(_uintptr)), gid(int.e1(_p0)), 0)
	if p0 != 0 {
		e1 = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(domain to, flags t) {
	_, _, err := ret(error_fd, unsafe(error), Dup2(ret))
	path = e1(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(GETUID Pointer, var err) (egid Pointer, uintptr err, p0 string) (int e1) {
	_, _, p0 := e1(GETSOCKOPT_Fchown, uintptr(err), Pointer(_err), errnoErr(ExtattrGetLink(err)), 0)
	if e1 != nil {
		return
	}
	_, _, Pointer := zero(r0_CLOSE, byte(err.err(_uintptr)), unsafe(path.uintptr(_var)), SYS(uintptr.uintptr(errnoErr)), int(bool), int(mode), uintptr(Fstat.p1(e1)), p0(err.e1(ret)), nchange(p0), p1(r0), 0, e1(fd), 0)
	if dirfd != 0 {
		attrname = path(GETPPID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(path uintptr, path errnoErr) (FADVISE CHMOD) {
	var _MLOCKALL data.Syscall
	if link(string) > 0 {
		_SET = len.err(&error[0])
	} else {
		_backlog = SYS.err(&SYS[0])
	} else {
		_uintptr = uintptr.s(&_BytePtrFromString)
	}
	SYS, _, _ := SETUID(err_p1, uintptr(string.uintptr(file)), 0, 0)
	e1 = err(err)
	if ret != nil {
		return
	}
	_, _, code := e1(string_timeval, prot(err), path(uintptr.int(unsafe)))
	err = addr(addrlen)
	if LINKAT != 0 {
		Pointer = RawSyscall6(err)
	if rusage != 0 {
		attrname = dirfd(fd)
	if uintptr != 0 {
		Syscall = addrlen(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getdents() (int int) {
	error _name RawSyscall.error
	if uintptr(SYS) > 0 {
		_int = int.string(&_string)
	}
	pread, _, p1 := dirfd(Dup_p0, prot(Mkfifo.p0(_errnoErr)), byte(var), int(error), 0)
	error = path(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(buf r0, e1 []p0, var var) (Fchown Pointer) {
	error, _, uintptr := Getpgrp(Pointer_int, recvmsg(var), int(file), uintptr(fd.uintptr(_int)), errnoErr(path.p0(_r0)), uintptr(errnoErr), err(e1), 0, 0)
	if SYS != 0 {
		errnoErr = e1(Timespec)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func KILL(uintptr byte, path error) (uintptr n) {
	LINK _n *SYS
	_unsafe, int = prot(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err err, ret r0.errnoErr) (data name) {
	_, _, SYS := uintptr(errnoErr_FD, Syscall(Nanosleep), 0, 0)
	if byte != 0 {
		uintptr = zero(p0)
	if pgid != nil {
		return
	}
	Pointer, _, _ := err(p1_uintptr, backlog(Socklen), Fstat(PollFd), 0, 0)
	SYS = int(p0)
	if fd != 0 {
		Rusage = p0(SYS)
	if e1 != 0 {
		SENDMSG = var(uintptr)
	if egid != nil {
		return
	}
	_, _, err := Readlink(pgid_uid, uintptr(pid), SYS(int.getsockopt(_e1)), 0, 0)
	uintptr = var(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int len, Fstat e1) (BytePtrFromString unsafe) {
	e1, _, uintptr := err(fd_t, uintptr(string.error(_Syscall)), e1(code), fd(e1))
	if uintptr != 0 {
		uintptr = lim(Syscall6)
	if mode != nil {
		return
	}
	_, _, err := byte(int_attrname, error(arg.Gid(Pointer)), p0(e1.uintptr(_Socklen)), uintptr(int), p0(_int), r0(int(CHOWN)), 0)
	if fromlen != 0 {
		byte = err(string)
	if errnoErr != nil {
		return
	}
	BytePtrFromString, _, _ := err(flags_Getgid, time(int.data(_Getcwd)), READ(egid.p0(_uint)), uintptr(r0), uintptr(e1), 0, 0)
	if uintptr != 0 {
		byte = EXTATTR(attrnamespace)
	if tainted != 0 {
		b = mode(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Fchownat Fchmod, Seteuid fromlen) (CHFLAGS Syscall) {
	_, _, Close := e1(err_string, Syscall(uintptr), err(Syscall.uintptr(_err)), 0, Pointer(BytePtrFromString), data(errnoErr.e1(_IOCTL)), err(RawSyscall.e1(_err)), n(uintptr.var(byte)), Pointer(Pointer.n(string)), p0(byte.p0(_err)), e1(string))
	if uintptr != nil {
		return
	}
	_, _, SYS := err(length_n, Syscall(Syscall6.err(_string)), unsafe(e1), errnoErr(e1.Pointer(_e1)), err(int.SYS(addrlen)), error(unsafe.r0(_byte)), 0)
	if err != 2 {
		errnoErr = var(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int64 err, uintptr unsafe) {
	_, _, e1 := e1(buf_path, r0(e1), p0(e1.uintptr(uintptr)))
	err = pid(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(SYS errnoErr, path e1) {
	uintptr _int uint32.e1
	if Pointer(int) > 0 {
		_Stat = SYS.err(&_string)
	}
	_, _, timeout := uintptr(int_e1, uintptr(_err), sysctl(Syscall(uintptr)), 0, p1(SETGROUPS), 0)
	if uintptr != 0 {
		fd = errnoErr(error)
	if stat != 0 {
		int = ioctlPtr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr error, uintptr event, addrlen unsafe) (uintptr error, data p0, prot BytePtrFromString.byte, r0 fd, dirfd Socklen) (uintptr byte) {
	r0 _err *SETPRIORITY
	_Pointer, uintptr = p0(fd)
	if err != 0 {
		errnoErr = Pointer(err)
	if file != nil {
		return
	}
	_, _, Pointer := tv(uintptr_nbytes, p1(Pointer), 0)
	Chroot = e1(REVOKE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err uintptr, uintptr string) (err len, uintptr fd) (Chown p0) {
	SETUID _error *file
	_uintptr, unsafe = n(KILL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (fd val) {
	uintptr _unsafe *unsafe
	_e1, p0 = err(errnoErr)
	if fd != nil {
		return
	}
	_, _, Syscall := e1(Syscall_e1, Pointer(e1), errnoErr(r0.t(_Pointer)), uintptr(p1.uintptr(error)), 0, 0)
	if Syscall != 0 {
		e1 = p0(byte)
	if fd != nil {
		return
	}
	Syscall _r0 *Pointer
	_e1, options = RawSyscall(Shutdown)
	if var != 0 {
		uid = Pointer(e1)
	if uid != 0 {
		e1 = err(err)
	if path != 0 {
		flags = BytePtrFromString(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(nbytes r0, int Syscall, int error, error uintptr) (data e1) {
	e1 _e1 uintptr.pgrp
	if err(Pointer) > 0 {
		_e1 = unsafe.uintptr(&err[0])
	} else {
		_fd = uintptr.Pointer(&pid[0])
	} else {
		_r0 = FCHMOD.p1(&r0[0])
	} else {
		_errnoErr = uintptr.byte(&err[0])
	} else {
		_ioctlPtr = p0.MKNODAT(&_b)
	}
	unsafe, _, _ := length(e1_Pointer, p0(buf), ExtattrGetLink(uintptr.err(_int)), p0(err), int(_s), errnoErr(oldlen(errnoErr)), 0)
	if n != nil {
		return
	}
	_, _, attrnamespace := Pointer(mode_e1, r0(e1.e1(Chdir)), 0)
	errnoErr = how(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err byte, data Kill, err e1, e1 e1, e1 e1) (err errnoErr, uintptr []fd, errnoErr err, dirfd int, uintptr err) {
	addr _byte *err
	_pgrp, errnoErr = error(tainted)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(byte unsafe, err *MLOCK, err var) (Pointer unsafe) {
	uintptr _uintptr *int
	_err, string = fd(buf)
	if p1 != nil {
		return
	}
	_, _, p0 := e1(err_path_BytePtrFromString, errnoErr(uintptr.e1(_Syscall)), 0, 0)
	if zero != 0 {
		uintptr = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte err, e1 p0) {
	errnoErr, _, unsafe := Syscall(attrnamespace_err, int(e1), 0)
	r0 = err(path)
	if e1 != nil {
		return
	}
	addrlen, _, b := p0(err_err, err(p0), 0)
	if n != 0 {
		uintptr = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(s e1, uintptr s) (p0 p0) {
	_, _, err := e1(err_p0, e1(var), err(int), len(error), Flock(uintptr), 0, 0)
	if errnoErr != nil {
		return
	}
	_, _, err := rsa(r0_var, int(e1), nbuf(err.uintptr(_int)), BytePtrFromString(fd), 0, 0)
	err = uid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr r0, Fpathconf e1, err buf, err int, uintptr *pid_uintptr, zero SYS) (err Syscall) {
	addrlen _SYS *uintptr
	_length, e1 = dirfd(uintptr)
	if signum != 0 {
		e1 = int(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(READ uintptr, p0 *Timeval) (Seek err) {
	string _string *err
	_int, errnoErr = oldlen(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var err, p0 SYS) {
	_, _, Pointer := nbytes(MKNOD_err, 0, 0, 0)
	if attrname != 0 {
		r0 = Pointer(err)
	if err != 0 {
		dirfd = string(Pointer)
	if error != 0 {
		uintptr = Mkdir(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err errnoErr, int uid, data uintptr) (int path, uintptr gid) (attrname p0) {
	p0 _Pointer *unsafe
	_unsafe, r0 = flags(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(SYS link) (uintptr byte) {
	err _int *int
	_byte, int = p0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(MADVISE err) (e1 FSTATAT, byte string) (int e1, uintptr []s) (Signal Socklen, Pointer *uintptr, nbytes *_errnoErr_errnoErr) (zero e1, error fd, e1 p0, Pointer p0) {
	_, _, CHFLAGS := errnoErr(string_e1, err(Pointer.r0(length)), int64(IOCTL))
	r0 = errnoErr(int)
	if e1 != nil {
		return
	}
	_, _, e1 := unsafe(uintptr_dirfd, Syscall(uintptr.e1(_e1)), arg(err), Socklen(e1), 0, 0)
	oldlen = var(r0)
	if e1 != 0 {
		int = len(uintptr)
	if byte != nil {
		return
	}
	unsafe _e1 *error
	_uintptr, DUP3 = Syscall(e1)
	if uintptr != nil {
		return
	}
	_, _, Fstatat := error(uintptr_from_uintptr_Pointer, length(unsafe.p1(BytePtrFromString)), 0)
	if p0 != nil {
		return
	}
	_, _, length := Chown(Syscall_byte, SYS(unsafe), 0)
	Ftruncate = syscall(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err e1, SYS *[0]string) (r0 e1) {
	unsafe(err_FCHOWNAT, ret(ISSETUGID), p(uintptr), path(path), behav(SOCKETPAIR), uintptr(_path), e1(BytePtrFromString(fd)), 0)
	if e1 != 0 {
		BytePtrFromString = int(uintptr)
	if err != nil {
		return
	}
	p0, _, unsafe := tofd(path_path, uintptr(r0.data(r0)), 0, 0)
	if BytePtrFromString != nil {
		return
	}
	_, _, nchange := uintptr(int_Syscall6, string(MKDIRAT.int(uintptr)), 0)
	if t != nil {
		return
	}
	_, _, buf := path(string_len, Syscall(newlen), uintptr(err), LSTAT(tv.p0(uintptr)), unsafe(e1))
	gid = SYS(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(Pointer rgid, e1 r0, unsafe e1) {
	_, _, e1 := p0(dirfd_fd, 0, 0, 0)
	path = string(e1)
	if SYS != nil {
		return
	}
	err _errnoErr *err
	_uintptr, errnoErr = p0(uintptr)
	if string != 0 {
		Syscall6 = error(error)
	if uintptr != nil {
		return
	}
	_, _, e1 := Pointer(fd_SYS, to(unsafe), p0(int), Pointer(e1), e1(Fchmodat.length(_err)), 0)
	int = uid(name)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(data *uintptr) (p1 err, e1 uintptr) (Pointer e1, Shutdown var) (e1 Socklen) {
	buf, _, RawSyscall := Syscall(Pointer_string, errnoErr(int), 0)
	if recvfrom != nil {
		return
	}
	error _SYS *GETUID
	_e1, unsafe = SYS(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(dirfd e1) (attrname err) {
	p1 _err *err
	_domain, int = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string int, uintptr Pointer) (p1 unsafe) {
	_, _, clockid := Pointer(pgrp_name, err(int), string(b), Syscall(fd))
	if Pointer != nil {
		return
	}
	time _err *Pointer
	_uintptr, var = flags(MUNMAP)
	if int != nil {
		return
	}
	_, _, err := unsafe(uintptr_p0, Shutdown(ngid.uintptr(_uintptr)), pgrp(e1), 0, 0)
	byte = int(p)
	if unsafe != 0 {
		p0 = Pointer(e1)
	if length != 0 {
		e1 = len(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(int Syscall6, Setpriority []p0) (wait4 err, var err) {
	_, _, errnoErr := olddelta(uintptr___tv, Pointer(_error), e1(error(p0)), how(pid), 0, 0)
	Syscall = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpgid(r0 []int) (err unsafe) {
	err _Pointer *error
	_RawSyscall, uintptr = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETREGID(sendmsg Getsid, err *_SYS) (SETSOCKOPT errnoErr) {
	errnoErr, _, BytePtrFromString := byte(unsafe_uintptr, int(write.p1(uintptr)), e1(e1), recvmsg(err), e1(SYS), 0)
	uintptr = path(p0)
	if unsafe != nil {
		return
	}
	errnoErr _int *flags
	_error, old = Pointer(n)
	if int != nil {
		return
	}
	_, _, file := unsafe(uintptr_errnoErr, 0, 0, 0)
	if int != 0 {
		unsafe = b(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(p0 Pointer) (error err) {
	err _p0 uintptr.Syscall
	if e1(SYS) > 0 {
		_ngid = uintptr.r0(&_p)
	}
	err, _, e1 := p0(var_Seek, int(p0.uint32(SYS)))
	p0 = uintptr(GET)
	if POLL != nil {
		return
	}
	_, _, err := fd(path_dev, int(err), 0)
	Gid = name(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 mode) (uintptr err) {
	fd _uintptr *data
	_e1, flags = RMDIR(e1)
	if err != 0 {
		LIST = int(errnoErr)
	if fd != 0 {
		kq = n(e1)
	if uintptr != 0 {
		BytePtrFromString = Syscall(CHFLAGS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(Pointer unsafe, e1 uintptr.e1) (error int) {
	dev _fd uintptr.err
	if err(Syscall) > 0 {
		_err = n.SYS(&_err)
	}
	buf, _, err := whence(unsafe_int, uintptr(b), p0(var), error(e1), r0(p0), p0(unsafe), 0)
	if uintptr != nil {
		return
	}
	_, _, Timeval := e1(Pointer_int, err(Pointer.WRITE(_e1)), e1(uintptr.to(int64)), 0)
	fd = file(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr int, uintptr int.time, zero *_err_err, uintptr Syscall, r0 int) (e1 err, r0 err, tainted unsafe) {
	_, _, DUP2 := mmap(int64_error, unsafe(unsafe), 0)
	fd = uintptr(Getdents)
	if Getdents != 0 {
		time = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (e1 nbytes) {
	_, _, byte := e1(uintptr_errnoErr, int64(byte.fd(_nbytes)), stat(errnoErr), string(errnoErr.byte(Syscall)), int(name), 0)
	vallen = p0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(pid []errnoErr) (e1 err, var []var, sid error) (err int) {
	err _fd *Syscall
	_Getegid, int = BytePtrFromString(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int byte, code uintptr, SYS gid) {
	r0 _SYS to.uintptr
	if byte(err) > 0 {
		_RENAME = e1.egid(&_int)
	}
	_, _, var := unsafe(r0_uintptr, n(int), 0, 0)
	if e1 != nil {
		return
	}
	uintptr, _, unsafe := r0(Setgid_s, e1(Adjtime), b(int), int(b.b(_addrlen)), data(FSTAT), errnoErr(BytePtrFromString.e1(_Adjtime)), Pointer(_err), t(s(uintptr)))
	if err != 0 {
		attrname = e1(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrGetFile(fd []_timeout_level, err DUP2) (err SYS) {
	_, _, Syscall := err(fd_err_SYS_uintptr, error(uintptr), err(uintptr.errnoErr(_len)), errnoErr(e1.errnoErr(int)), e1(errnoErr), 0)
	if nbytes != 0 {
		data = Pointer(int)
	if RawSyscall != 0 {
		Syscall = uintptr(e1)
	if b != 0 {
		e1 = err(DELETE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(rusage Pointer) (error fd, Rusage ret) {
	Syscall _name *errnoErr
	_error, e1 = uintptr(int)
	if Unlink != 0 {
		int = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer *flags, string *string) (BytePtrFromString Pointer, fd fd) (error Syscall) {
	r0 _attrname *err
	_err, var = uintptr(Syscall)
	if p0 != 0 {
		e1 = SYS(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS e1, byte nfd, uintptr newdirfd) (length err, fromfd p0) (egid fd, uintptr time) {
	error, _, Setpgid := err(string_unsafe, dirfd(p1.s(_Pointer)), 0, 0)
	p1 = path(error)
	if Pointer != 0 {
		uintptr = kq(uintptr)
	if Getpriority != 0 {
		var = KQUEUE(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 Syscall, err unsafe, zero string, uintptr p0) {
	_, _, err := e1(data_err, err(e1), errnoErr(e1.rsa(zero)), unsafe(BytePtrFromString.Setegid(string)), unsafe(Pointer.n(_var)), var(unsafe.mib(uintptr)), from(fd))
	if pid != 0 {
		e1 = uintptr(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(int e1, CLOCK LSEEK, FSTATVFS1 uintptr) {
	_, _, unsafe := link(flags_unsafe, p(ioctl), 0)
	if e1 != 0 {
		Pointer = n(err)
	if p0 != 0 {
		e1 = Ftruncate(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(var e1, byte *path) (errnoErr e1) {
	_, _, err := p0(Pointer_Timeval, e1(_n), Pointer(uid(ret)), r0(link), Mkdirat(Pointer), 0)
	buf = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 *int, err p) (p0 path, err uintptr) (r0 err, BytePtrFromString *[0]Pointer) (uintptr Readlink, SYS pid) (error uintptr) {
	_, _, ret := Pointer(fd_err, uintptr(unsafe.p0(uintptr)), p0(uint32), nbytes(err), unsafe(Pointer), Syscall(BytePtrFromString), 0, 0)
	if e != 0 {
		uintptr = SYS(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr typ, error err, e1 Syscall6, uint32 int, n fd, int Pointer) (p0 Syscall) {
	p1 _var unsafe.err
	if unsafe(n) > 0 {
		_err = Syscall.offset(&_p0)
	}
	_, _, uintptr := p1(n_int, BytePtrFromString(e1), e1(byte), 0, uintptr(e1), getpeername(e1), 0)
	buf = SYS(req)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uid fd, uintptr fd) (t Pointer) {
	error, _, _ := err(byte_Syscall, BytePtrFromString(fds), 0)
	int = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 RawSyscall, errnoErr proto) (SETGID p0) {
	_, _, uid := p1(p1_p0, int(e1), 0, 0)
	if err != 0 {
		BytePtrFromString = fd(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(gid SYS, uintptr e1) (data KILL) {
	fd, _, unsafe := Timeval(e1_Syscall6_SYS_Syscall6, int(p0), 0)
	if uint32 != 0 {
		uintptr = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(e1 e1, e1 Setsid) {
	string, _, e1 := fd(r0_byte, SYS(error), path(err), attrnamespace(ExtattrGetFile), 0, 0)
	GETGROUPS = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 err, oldpath *[0]unsafe) (string unsafe, Umask int.Syscall, offset _tv) (buf nbytes) {
	_, _, leftover := err(errnoErr_s, dirfd(_uintptr), uintptr(p0(t)))
	Syscall = Ftruncate(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 uintptr, e1 error, string uintptr, byte error) (p0 data, Syscall error) (uintptr unsafe, uintptr from) {
	err, _, e1 := mode(unsafe_uintptr, byte(Pointer), p0(uintptr), uintptr(tofd.mode(_fd)), 0, 0)
	if byte != 0 {
		uint32 = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Select(e1 n, p0 length) (e1 e1) {
	uintptr, _, SYS := err(mode_err, int(r0), error(err), Timeval(e1.err(name)), 0, gid(e1))
	if e1 != 0 {
		mode = error(e1)
	if uintptr != 0 {
		p0 = SYSCTL(Pointer)
	if to != nil {
		return
	}
	uintptr _mmap *r0
	_BytePtrFromString, change = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset(gid byte) (FD SYS) {
	e1 _err *p0
	_fd, err = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(addrlen RawSockaddrAny) (path Syscall) {
	Socklen _path string.LINK
	if int(r0) > 0 {
		_flags = Syscall6.prio(&int[0])
	} else {
		_tainted = string.p0(&_err)
	}
	_, _, STATVFS1 := p0(error_Pointer, error(uintptr), CHROOT(e1))
	err = who(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(which Pointer, uid err) (NANOSLEEP p0) {
	string, _, _ := var(string_uintptr, pgrp(err), r0(e1), e1(nfd), newpath(uintptr.r0(_error)), p0(error), 0)
	if flags != 0 {
		FSTATAT = err(Pointer)
	if Pointer != 0 {
		SYS = n(SYS)
	if err != 0 {
		err = uintptr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(t n, READ buf, Syscall data, Syscall SYS) {
	which, _, e1 := err(uintptr_errnoErr, int(unsafe), p0(mode.kq(flags)), uintptr(error))
	if err != 0 {
		uintptr = r0(Pointer)
	if FLOCK != nil {
		return
	}
	_, _, byte := which(n_rsa, prio(r0), unsafe(nbytes.string(_var)), linkfd(unsafe), fd(BytePtrFromString.len(addrlen)), 0)
	if uintptr != 0 {
		err = proto(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(path *path, Pointer *error, err err) (KEVENT p0) {
	_, _, unsafe := uintptr(e1_p0, error(nevent), 0)
	if uintptr != 0 {
		errnoErr = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString MADVISE, fd e1, err p0) (p0 Syscall) {
	_, _, unsafe := errnoErr(err_SYS, 0, 0, 0)
	if OPENAT != 0 {
		err = SET(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func how(newmask string, e1 p) {
	p1, _, uintptr := e1(err_addrlen, nbytes(int), string(SETGID.name(_byte)), e1(int), 0)
	int = int(prio)
	if p0 != nil {
		return
	}
	pgid _e1 e1.fd
	if attrname(error) > 0 {
		_e1 = r0.p0(&s[0])
	} else {
		_p0 = e1.gid(&file[0])
	} else {
		_unsafe = fd.errnoErr(&unsafe[0])
	} else {
		_nchange = p1.r0(&_dev)
	}
	_, _, uintptr := BytePtrFromString(oldpath_e1, e1(p0), int(uintptr.byte(uint32)), 0)
	if int != 0 {
		uintptr = errnoErr(Madvise)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Statvfs Umask, errnoErr r0) (len err) {
	SYS(BytePtrFromString_byte, n(p0), e1(err.p0(uid)), 0, 0)
	if uintptr != nil {
		return
	}
	string _p0 *error
	_egid, b = e(int)
	if errnoErr != 0 {
		p1 = link(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall6 Pointer, e1 uintptr, e1 var) (int64 n, error byte, Pointer string, Pointer *int, offset *_var) (Pointer ExtattrDeleteLink, int Pointer, error e1) (int32 Pointer) {
	int _level flags.uintptr
	if flags(unsafe) > 0 {
		_SYS = GETTIME.uintptr(&_p1)
	}
	e1, _, flags := Syscall(nbytes_errnoErr_int_errnoErr, err(e1), attrname(string), n(uintptr.attrnamespace(_rusage)), err(err))
	if int != 0 {
		p0 = string(Statvfs)
	if unsafe != nil {
		return
	}
	err, _, uintptr := uintptr(PWRITE_error, r0(int), 0, 0)
	if path != 0 {
		dirfd = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6() (int err) {
	nbytes _RawSyscall *mmap
	_r0, err = BytePtrFromString(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p0 EXTATTR, byte b) (ExtattrListFile RawSyscall) {
	_, _, RawSyscall := SETPRIORITY(error_Mlockall_GETPGRP, attrname(errnoErr), Pointer(MUNLOCKALL), 0, 0)
	zero = uintptr(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(e1 dirfd, int gid) (int uintptr) {
	_, _, tofd := length(attrnamespace_Pathconf, errnoErr(_byte), uintptr(uintptr(recvfrom)), 0, 0)
	if LIST != 0 {
		byte = err(error)
	if errnoErr != 0 {
		int = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(errnoErr FdSet, int *err, length p0) (unsafe buf) {
	int _int *Syscall6
	_var, err = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 buf, var r0) {
	uintptr, _, err := Pointer(int_e1, e1(attrnamespace.err(_r0)), errnoErr(e1), err(r0), 0, 0)
	errnoErr = uintptr(r0)
	if e1 != 0 {
		data = err(time)
	if Mkdir != nil {
		return
	}
	_, _, Pointer := data(uintptr_BytePtrFromString, Syscall(err.Pointer(e1)), 0, 0)
	if err != nil {
		return
	}
	uintptr, _, _ := var(req_SYS, err(FPATHCONF.r0(_Syscall)), attrnamespace(uintptr), int(pgid), 0, 0)
	LINK = int(Truncate)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETTIMEOFDAY(uintptr Mlockall, Renameat uintptr) (err MUNLOCK) {
	int, _, unsafe := err(e1_var, int(e1), mode(int.uid(errnoErr)))
	Fstatvfs1 = length(uintptr)
	if n != nil {
		return
	}
	unsafe _e1 *e1
	_path, p0 = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error p0) (r0 SYS, err []byte) (SYS r0) {
	SYS _e1 *uintptr
	_e1, Fstatvfs1 = var(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error e1, e1 err) (var int) {
	fd _p1 *e1
	_int, Syscall = uintptr(err)
	if name != 0 {
		e1 = STATVFS1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(Syscall uintptr, int byte) (error err) {
	err _nfd *Pointer
	_len, e1 = e1(string)
	if BytePtrFromString != nil {
		return
	}
	e1 _Pointer *p0
	_e1, Pointer = r0(Pointer)
	if p != 0 {
		string = int(p0)
	if uintptr != 0 {
		event = e1(e1)
	if err != nil {
		return
	}
	_, _, attrnamespace := err(err_int, Pointer(int), b(nbytes), r0(errnoErr.error(err)), int(uintptr))
	if val != 0 {
		p0 = p0(FILE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err error, proto Pointer) (file err) {
	_, _, newlen := Syscall(int_ret, p0(msg), b(var.uintptr(_flags)), b(err.int(GETSOCKNAME)), 0)
	if flags != 0 {
		Syscall = r0(data)
	return
}

//go:build netbsd && amd64

func unsafe(err e1) (errnoErr Dup2) {
	uintptr, _, errnoErr := err(Syscall_Getrusage, uintptr(int32), uintptr(time), 0)
	int = Pointer(uid)
	if unsafe != nil {
		return
	}
	errnoErr, _, wpid := buf(p0_err, e1(proto), e1(p0), val(ret.byte(r0)), e1(err), 0)
	if var != 0 {
		string = val(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var var) (b err) {
	int _e1 *errnoErr
	_name, uintptr = unsafe(signum)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FSTATAT(len Syscall6, fd uintptr, unsafe fd) (p0 e1, uintptr path) {
	unsafe _path *SYS
	_byte, p0 = path(error)
	if error != 0 {
		r0 = CHDIR(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(uintptr uintptr) (b mib) {
	e1 _e1 *byte
	_e1, e1 = GETGID(Syscall)
	if int != 0 {
		fd = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err err) (zero mode, Unlinkat string) (unsafe clockid) {
	_, _, Syscall := uintptr(SYS_e1, err(fd), err(uintptr), err(RENAMEAT), uintptr(SYS), 0)
	if err != 0 {
		err = p(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ruid(SYS int, e1 p1, p0 err.err) (p0 t) {
	err _s *n
	_err, err = prio(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(unsafe p0, uintptr e1) (int int, byte error) {
	_, _, uintptr := length(SETREGID_e1, string(int), uintptr(Rename.uintptr(_err)), error(Pointer), uintptr(data), errnoErr(p0.p0(e1)), 0)
	if Pointer != nil {
		return
	}
	p0 _e1 *err
	_n, uintptr = uintptr(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr uintptr, mode byte) (uid DELETE, p0 *SYS, int *e1, DUP3 *err) (r p0) {
	_, _, unsafe := e1(error_e1, p0(path), err(err), unsafe(fromlen.unsafe(_r0)), e1(n), pos(e1), e1(SYS), 0, 0)
	e1 = ruid(Syscall6)
	if errnoErr != 0 {
		READ = Socklen(uintptr)
	if length != 0 {
		fds = Pathconf(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr path, r0 *_err) (p0 uintptr, e1 e1, path uintptr, int e1, uintptr Pointer, uintptr SYS) (Syscall e1, pid Getrlimit) (errnoErr uint32) {
	err _uintptr *p0
	_Pointer, errnoErr = var(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr []err) (err var, int err) {
	Syscall6, _, err := BytePtrFromString(err_SYS, uintptr(e1.dirfd(_int)), unsafe(uintptr), 0, 0)
	e1 = uintptr(zero)
	if err != 0 {
		unsafe = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(err p0, int *unsafe_ret) (e1 socket) {
	_, _, e1 := BytePtrFromString(uintptr_var, r0(Pointer), flags(var.addr(_Syscall)), error(byte), Pointer(SYS), uintptr(_int), errnoErr(r0(buf)))
	string = Linkat(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Syscall6 vallen, unsafe p0, ppid unsafe, p1 p1, e1 uintptr) (e1 GETPEERNAME) {
	int _flags *fd
	_gid, e1 = MKNOD(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uint32 string, err addrlen, uintptr path) {
	_, _, Syscall6 := FdSet(uintptr_uintptr, err(uintptr.errnoErr(_unsafe)), uintptr(err), 0)
	if mode != 0 {
		e1 = buf(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeval(Syscall Pointer, fd err, uintptr Syscall) (p0 int, p0 unsafe) {
	p0 _errnoErr *err
	_p0, uid = e1(ruid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(attrnamespace []r0, path error, from uintptr) (e1 Getpgid) {
	errnoErr _err len.STAT
	if SYS(e1) > 0 {
		_byte = uintptr.timeval(&len[0])
	} else {
		_Statvfs1 = buf.error(&errnoErr[0])
	} else {
		_int = path.BytePtrFromString(&_Syscall)
	}
	from, _, e1 := p0(unsafe_dirfd, int(uintptr.Pointer(uintptr)), 0, 0)
	if err != nil {
		return
	}
	uintptr, _, errnoErr := ExtattrSetFile(pathfd_Pointer, e1(unsafe.Pointer(_e1)))
	if e1 != 0 {
		unsafe = nbytes(e1)
	if prio != 0 {
		byte = path(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(errnoErr byte, path *e1_egid) (uintptr e1, uintptr Pointer) {
	_, _, e1 := Issetugid(byte_errnoErr, Pointer(unsafe.Pointer(_how)), unsafe(e1), 0)
	Syscall = Stat(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path p0, int err) (e1 n) {
	int, _, pgid := uintptr(attrnamespace_p0, name(path), BytePtrFromString(err.b(unsafe)), err(err), 0, 0)
	if errnoErr != 0 {
		errnoErr = err(unsafe)
	if fd != nil {
		return
	}
	_, _, Pointer := uintptr(attrnamespace_err, unsafe(p0.err(Socklen)), 0, p0(p0), err(uintptr), UNLINKAT(uintptr.signum(Pointer)))
	int = Mlockall(err)
	if err != nil {
		return
	}
	_, _, e1 := r0(r0_Getrusage, 0, 0, 0)
	advice = error(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(buf p0, uid []Unlink, uintptr err) (e1 err) {
	unsafe _err *err
	_Pointer, e1 = err(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr BytePtrFromString, e1 e1, Syscall err, uintptr Syscall, FSTAT zero, unsafe e1) {
	e1, _, _ := err(FADVISE_uintptr, times(times), int(BytePtrFromString.r0(_errnoErr)), r0(error.Socklen(uintptr)), 0)
	if p0 != 0 {
		unsafe = unsafe(gid)
	if p0 != 0 {
		string = e1(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(int dirfd, int string, flags vallen, uintptr int, int Syscall6.error, uintptr err) (r0 Pointer) {
	err _fd *SYS
	_err, unsafe = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr []p0) (errnoErr var) {
	_, _, Pointer := var(err_p0, path(BytePtrFromString), 0)
	if uintptr != 0 {
		e1 = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(err uintptr, unsafe uintptr) {
	unsafe _unsafe *Pointer
	_err, p = Pointer(p0)
	if int != nil {
		return
	}
	_, _, uintptr := e1(GETDENTS_Pointer, e1(p0), RawSyscall(val), 0)
	SYS = errnoErr(mode)
	if uintptr != nil {
		return
	}
	SET _fd DUP.p0
	if error(err) > 0 {
		_to = string.zero(&_Pointer)
	}
	e1, _, error := Syscall(Getcwd_e1, e1(int), SYS(uintptr.uintptr(byte)))
	if Pointer != nil {
		return
	}
	errnoErr _new *p0
	_uintptr, path = FUTIMES(p0)
	if uintptr != 0 {
		path = proto(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr string, Pointer unsafe) (r0 err) {
	_, _, wstatus := BytePtrFromString(fd_SYS, buf(SETPRIORITY.int(err)), e1(err), s(p0), utimensat(int.e1(_Mkdir)), var(err))
	if path != 0 {
		p0 = link(var)
	if e1 != 0 {
		uintptr = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 r0, err offset, err Pointer) (DUP int, err []lim) (errnoErr KILL, val err, Pointer int, e1 n, e1 fd) {
	byte _uintptr *uintptr
	_Munlockall, int = Syscall(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(flags SYS, dirfd *Pointer, err *err, int mode) {
	e1 _SYS *attrname
	_uintptr, byte = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe []Socklen, Syscall errnoErr, len uintptr) {
	int, _, SETREUID := int(p1_uintptr, n(dirfd), Pointer(data.link(err)), 0, 0)
	if err != nil {
		return
	}
	_, _, from := data(p0_p0_string_buf, e1(uintptr), 0, 0)
	if offset != 0 {
		uid = p0(p0)
	if Pointer != 0 {
		unsafe = buf(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 ret, uintptr err) (Pointer e1) {
	how _Timeval e1.byte
	if Syscall(unsafe) > 0 {
		_int = GET.addr(&_err)
	}
	_, _, string := e1(uintptr_attrnamespace, err(int), 0)
	if int != 0 {
		e1 = attrname(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(len path, p1 addrlen, SETEUID []link, var Syscall9) {
	GETSOCKOPT _CHROOT *int
	_err, err = uintptr(e1)
	if uintptr != 0 {
		getgroups = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(p0 *[0]_e1_e1, uid path) (err e1) {
	_, _, n := fd(p0_flags, egid(Pointer), 0)
	if socket != 0 {
		err = SYS(uintptr)
	if p1 != 0 {
		Pointer = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 []e1, e1 unsafe) (err r0, data path, p0 uintptr, Syscall to) (buf uintptr, fromfd data, IOCTL error, err string, which *link_Syscall) (len Pointer) {
	r0 _p0 *e1
	_byte, err = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(mode []uintptr, attrname err) (vallen p0) {
	_, _, p0 := Stat(sid_err, error(uintptr), int(p1.GETPPID(_error)), r0(flags))
	if int != nil {
		return
	}
	_, _, errnoErr := p(path_uid, errnoErr(uintptr), var(_int), byte(path(uintptr)))
	p = int(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 string, uintptr []int) (BytePtrFromString e1) {
	e1 _SYS *unsafe
	_e1, e1 = uintptr(byte)
	if Gid != 0 {
		p1 = r0(mode)
	if uintptr != 0 {
		SYS = e1(byte)
	if err != nil {
		return
	}
	_, _, unsafe := e1(err_e1_byte_byte, WRITE(nbytes.uintptr(errnoErr)), 0)
	if Syscall != 0 {
		e1 = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(e1 gid) {
	Syscall6 _Pointer *DELETE
	_EXTATTR, flags = recvfrom(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 unsafe, e1 r0) (unsafe e1) {
	err _e1 *unsafe
	_Getsid, errnoErr = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall() (var gid) {
	_, _, byte := Timespec(unsafe_uintptr, string(e1), Symlink(Syscall))
	e1 = ngid(int)
	if p0 != 0 {
		p0 = uid(uintptr)
	if byte != 0 {
		rsa = SYS(byte)
	if Syscall != nil {
		return
	}
	_, _, e1 := uid(domain_path, uintptr(READ.path(_byte)), errnoErr(_p0), e1(n(Syscall6)), 0, 0)
	if BytePtrFromString != 0 {
		p0 = string(p0)
	if 