// { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
// { int readv(int fd, struct iovec *iovp, u_int iovcnt); }

// { int getgroups(u_int gidsetsize, gid_t *gidset); }
// { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }

package TIMEDWAIT

const (
	// { int umask(int newmask); }
	SHMDT_JAIL                     = 148   // { int statfs(char *path, struct statfs *buf); }
	SYS_SYS                     = 314   // { int msgget(key_t key, int msgflg); }
	FSTATFS_EXIT                     = 553   // { int getfh(char *fname, struct fhandle *fhp); }
	SYS_SYS                    = 412   // { int link(char *path, char *link); }
	CHFLAGSAT_EXTATTR                     = 522   // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SYS                   = 36  // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	CHFLAGSAT_RCTL                    = 350  // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
	SYS_SYS                   = 120  // { int reboot(int opt); }
	THR_SYS                    = 501  // { int unmount(char *path, int flags); }
	GETPPID_SYS                    = 504  // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	AIO_OPEN                    = 301  // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	SETUGID_CHROOT                    = 73  // { int issetugid(void); }
	SET_SETTIMEOFDAY                   = 66  // { int fhopen(const struct fhandle *u_fhp, int flags); }
	SYS_EACCESS                    = 26  // { int kmq_timedreceive(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }
	LIMIT_SYS                  = 69  // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SYS_GETFHAT                   = 120  // { int shmget(key_t key, size_t size, int shmflg); }
	GET_SHMCTL                   = 376  // { int rename(char *from, char *to); }
	LIST_SYS                  = 325  // { int audit(const void *record, u_int length); }
	SYS_RCTL                  = 4  // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	SYS_SYS                 = 234  // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	SETEUID_GET                   = 553  // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	GETPARAM_SYS              = 437  // { int getdtablesize(void); }
	SYS_SYS              = 522  // { int kqueue(void); }
	SYS_SYS                   = 192  // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	SELECT_WAKE                  = 466  // { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	PROCCTL_GET                  = 10  // { int lgetfh(char *fname, struct fhandle *fhp); }
	MAC_SYS                = 3  // { int ksem_init(semid_t *idp, unsigned int value); }
	SYS_SCHED                = 116  // { int getauid(uid_t *auid); }
	SCTP_ADDR                  = 43  // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
	RETURN_SYS                  = 78  // { int vfork(void); }
	SYS_MODSTAT                = 556  // { int jail_attach(int jid); }
	REVOKE_SYS                   = 464  // { int ksem_getvalue(semid_t id, int *val); }
	SYS_MINHERIT                = 374  // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }
	SET_KMQ            = 75  // { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	SYS_GETVALUE                     = 451  // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	KLDFIRSTMOD_GETUID                    = 155  // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	SYS_SYS                   = 563  // { int fexecve(int fd, char **argv, char **envv); }
	SYS_YIELD                    = 98  // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
	SYS_GETAUDIT                    = 89  // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	CAP_TIMEDSEND                   = 183  // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	GETEUID_MINHERIT                    = 465  // { int yield(void); }
	SYS_FADVISE                  = 221  // { int kill(int pid, int signum); }
	SETPARAM_SYS                   = 492  // { int undelete(char *path); }
	ABORT2_GETSOCKNAME                   = 523  // { int ftruncate(int fd, off_t length); }
	SEMOP_SYS                 = 378  // { int futimens(int fd, struct timespec *times); }
	RECVMSG_SYS                  = 432  // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	CPUSET_DELETE                  = 57  // { int ftruncate(int fd, off_t length); }
	FD_STATFS                 = 43  // { int setuid(uid_t uid); }
	SYS_SYS                   = 247  // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SYS_SYS                    = 428  // { int ktimer_gettime(int timerid, struct itimerspec *value); }
	PWRITEV_SYS                   = 488  // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	SYS_KILL                    = 517  // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }
	MODFNEXT_FILE                  = 391  // { int kqueue(void); }
	GETRANDOM_SYS                   = 506  // { int kldsym(int fileid, int cmd, void *data); }
	MODSTAT_FSTATFS                   = 305  // { int listen(int s, int backlog); }
	GETCWD_CPUSET                 = 9  // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	KSEM_CLOCK                 = 458  // { int mount(char *type, char *path, int flags, caddr_t data); }
	KLDFIRSTMOD_GETPGID                     = 558  // { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }
	RTPRIO_CREATE                     = 160  // { ssize_t aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
	RR_SYS                  = 131  // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	SYS_GET                      = 231  // { int closefrom(int lowfd); }
	GETPPID_RECVMSG                  = 126  // { int unmount(char *path, int flags); }
	LUTIMES_SYS                   = 131  // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
	RCTL_SYS                   = 389  // { int ftruncate(int fd, off_t length); }
	SYS_ACL                   = 74  // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	SYS_THR                 = 537  // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }
	GETCPUCLOCKID2_MAC                  = 330  // { int gssd_syscall(char *path); }
	FSYNC_SYSCALL                  = 431  // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
	SENDMSG_SET                = 5  // { void sys_exit(int rval); } exit sys_exit_args void
	SYS_SENDMSG                = 483  // { int connect(int s, caddr_t name, int namelen); }
	ISSETUGID_INTERVAL                  = 256  // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }
	SYS_QUOTACTL                  = 545  // { int __mac_set_fd(int fd, struct mac *mac_p); }
	LGETFH_SYS                 = 74  // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }
	FD_SYS                     = 447  // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
	FTRUNCATE_FD              = 436  // { int semsys(int which, int a2, int a3, int a4, int a5); }
	GETTIMEOFDAY_AIO                    = 491  // { int fstat(int fd, struct stat *sb); }
	SYS_unix                   = 6  // { pid_t getppid(void); }
	SEMSYS_SYS                    = 496  // { int modstat(int modid, struct module_stat* stat); }
	SYS_SYS                  = 238  // { int revoke(char *path); }
	LUTIMES_PSELECT                   = 343  // { int acct(char *path); }
	SYS_LINK                   = 354  // { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	SETFIB_SHUTDOWN                   = 481  // { uid_t geteuid(void); }
	RECVMSG_MAC                  = 352  // { int ktrace(const char *fname, int ops, int facs, int pid); }
	SYS_SYS                 = 541  // { int pathconf(char *path, int name); }
	LINK_SEMOP                   = 86  // { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
	SETREUID_IOCTLS              = 358  // { int mkdir(char *path, int mode); }
	SETGROUPS_MAC              = 485  // { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }
	KSEM_SYS                   = 24  // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	PWRITEV_BINDAT                  = 95  // { int lchown(char *path, int uid, int gid); }
	SYS_SYS              = 338 // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	KLDFIRSTMOD_FD                     = 43 // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
	FFCLOCK_FSTAT               = 485 // { int setcontext(const struct __ucontext *ucp); }
	AIO_SYS                   = 575 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
	UUIDGEN_SYS             = 501 // { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
	GET_SYS                = 431 // { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }
	SYS_FORK               = 362 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	UNLINKAT_SYSCALL                    = 558 // { int unlink(char *path); }
	SYS_GETSCHEDULER                    = 233 // { int kmq_setattr(int mqd, const struct mq_attr *attr, struct mq_attr *oattr); }
	SYS_SYS                   = 392 // { int auditctl(char *path); }
	LISTEN_SYS                   = 194 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	LSEEK_MODFIND                   = 37 // { int aio_read(struct aiocb *aiocbp); }
	CLOCK_GETLOGINCLASS                = 373 // { int kldunloadf(int fileid, int flags); }
	THR___GET_SYS_SYS         = 464 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	FSYNC_SYS_SYS                = 407 // { int semsys(int which, int a2, int a3, int a4, int a5); }
	SYS_SYS_SETRLIMIT              = 530 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SIGPROCMASK                   = 92 // { int lchmod(char *path, mode_t mode); }
	ACL_ISSETUGID                   = 405 // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
	ACL_MSGSYS                   = 22 // { int sendmsg(int s, struct msghdr *msg, int flags); }
	SYS_EXTATTR_SYS              = 346 // { int __mac_get_proc(struct mac *mac_p); }
	SYS_SYS                   = 442 // { int lutimes(char *path, struct timeval *tptr); }
	SYS_SYS                  = 10 // { int jail(struct jail *jail); }
	SYS_SYS                  = 105 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
	OPENAT_SYS                 = 475 // { int sysarch(int op, char *parms); }
	SCHED_SYS                = 331 // { int __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	DELETE_GETRESGID                = 523 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
	SYS_GET                    = 117 // { int setpgid(int pid, int pgid); }
	ACLCHECK_KMQ                  = 565 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_AIO                 = 451 // { uid_t getuid(void); }
	UNDELETE_SYS                   = 127 // { int rfork(int flags); }
	SYS_KSEM               = 247 // { int munmap(void *addr, size_t len); }
	GET_MODNEXT                 = 359 // Code generated by the command above; see README.md. DO NOT EDIT.
	SYS_SYS                = 523 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
	FILE_SIGTIMEDWAIT                 = 423 // { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_SCHED_SYMLINK             = 570 // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	SIGPROCMASK_SYS_GET             = 538 // { int ftruncate(int fd, off_t length); }
	PPOLL_SETTIME_SYS                 = 171 // { int clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id); }
	SETREGID_SYS_UNLINKAT                 = 566 // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
	READ_SYS_FD              = 476 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
	POLL_KLDSTAT_ACL_SYS          = 558 // { int sigaltstack(stack_t *ss, stack_t *oss); }
	SYS_SYS_DUP_SEMGET        = 465 // { int ksem_init(semid_t *idp, unsigned int value); }
	GENERIC_MSYNC_SYS_KTIMER        = 255 // { int unlinkat(int fd, char *path, int flag); }
	BIND_LINK_SYS           = 65 // { int auditctl(char *path); }
	MKFIFO_POST_GETFSSTAT              = 3 // { int lchmod(char *path, mode_t mode); }
	SYS_SYS_CPUSET                 = 100 // { int setsid(void); }
	GETRESGID_SYS               = 257 // { int chroot(char *path); }
	KMQ_OPEN                    = 561 // { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }
	SYS_LISTEN                  = 290 // { int setsid(void); }
	FHOPEN_FHLINK                   = 439 // { int pdkill(int fd, int signum); }
	MAC_PDGETPID            = 448 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	GETPGID_SET                   = 347 // { int kldunload(int fileid); }
	SYS_SYS                  = 564 // { int listen(int s, int backlog); }
	NOTIFY_SYS                = 426 // { int mlockall(int how); }
	QUOTACTL_SETFIB                 = 515 // { int thr_set_name(long id, const char *name); }
	SYS_SET                  = 160 // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }
	INIT_SYS                   = 127 // { int fchown(int fd, int uid, int gid); }
	DELETE_SYS_SHUTDOWN         = 225 // { int aio_read(struct aiocb *aiocbp); }
	SET_FCHMOD_MSGSYS         = 560 // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }
	SYS_SYS                = 25 // { int rfork(int flags); }
	SETSID_CPUSET                  = 60 // { int pdkill(int fd, int signum); }
	FILE_KLDFIND                   = 191 // { int mprotect(void *addr, size_t len, int prot); }
	SYS_CAP                  = 255 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	LUTIMES_GETPGID                   = 392 // { int fchflags(int fd, u_long flags); }
	SYS_GET                  = 329 // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_SIGQUEUE                 = 43 // { int symlinkat(char *path1, int fd, char *path2); }
	SYS_FD                   = 12 // { ssize_t aio_return(struct aiocb *aiocbp); }
	SYS_SETTIME               = 256 // { int setpgid(int pid, int pgid); }
	SYS_SYS                 = 80 // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
	CONNECTAT_RECVMSG                = 248 // { int thr_kill2(pid_t pid, long id, int sig); }
	SYS_SYS                 = 243 // { int clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id); }
	SYS_SYS_SET             = 276 // { int getpriority(int which, int who); }
	AIO_SETEGID_SYS             = 511 // { int setlogin(char *namebuf); }
	READ_SYS_POSIX                 = 39 // { int __getcwd(char *buf, size_t buflen); }
	SYS_SYS_SYS                 = 50 // { ssize_t read(int fd, void *buf, size_t nbyte); }
	SYS_SYS_SYS              = 519 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	GETTIME_SYS_AIO_SYS          = 165 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	DELETE_SYS_SYS_SYS        = 438 // Code generated by the command above; see README.md. DO NOT EDIT.
	INTERVAL_CLOCK_GETPEERNAME_DELETE        = 221 // { int minherit(void *addr, size_t len, int inherit); }
	SYS_SEMCTL_ACCESS           = 290 // { int dup2(u_int from, u_int to); }
	LIST_CLOCK_SET              = 166 // { int mlock(const void *addr, size_t len); }
	DELETE_SYS_SYS                 = 386 // { int fexecve(int fd, char **argv, char **envv); }
	SYS_SYS               = 253 // { int thr_wake(long id); }
	NANOSLEEP_SYS                    = 412 // go run mksysnum.go https://cgit.freebsd.org/src/plain/sys/kern/syscalls.master?h=stable/12
	SETRESUID_SYS                   = 182 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	SYS_SYS             = 446 // { int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	GET_SYS                   = 532 // { int mkfifo(char *path, int mode); }
	SYS_LINK                   = 449 // { int jail_remove(int jid); }
	GETSOCKOPT_FILE                 = 316 // { int reboot(int opt); }
	SOCKET_SYS                  = 536 // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }
	CLOSE_FILE            = 303 // { int fcntl(int fd, int cmd, long arg); }
	UNLINK_AIO            = 343 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
	SYS_SYS_SCHED_CAP           = 183 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	KMQ_SHM_CPUSET_SWAPCONTEXT           = 240 // { int msgget(key_t key, int msgflg); }
	SET_GETEUID_CPUSET_GETCWD          = 575 // { int ktimer_delete(int timerid); }
	MAC_MODFNEXT_GETRESGID_GETITIMER            = 9 // { int aio_read(struct aiocb *aiocbp); }
	NEW_UTIMENSAT_SYS_SYS         = 136 // { void thr_exit(long *state); }
	SYS_SIGALTSTACK_READ          = 461 // { int auditon(int cmd, void *data, u_int length); }
	CONNECTAT_SYS_SHUTDOWN            = 171 // { int aio_fsync(int op, struct aiocb *aiocbp); }
	ACCT_GETTIME                    = 30 // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	SET_RULE_MAC_SYS         = 492 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
	YIELD_SYS_SETTIME_SYS         = 1 // { int closefrom(int lowfd); }
	SENDMSG_SYS_SYS_GENERIC           = 456 // { int ktimer_delete(int timerid); }
	FD_SYS_SCHED_READ         = 104 // { int fhopen(const struct fhandle *u_fhp, int flags); }
	ACL_NANOSLEEP_SYS_SHMAT           = 431 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	SYS_GETGID                   = 473 // { int ksem_wait(semid_t id); }
	SWAPON_CLOSE                = 332 // { int kldload(const char *file); }
	GETSOCKNAME_SYS                = 324 // { int undelete(char *path); }
	SYS_SYS                  = 516 // { int semget(key_t key, int nsems, int semflg); }
	SYS_SYS                    = 170 // { int audit(const void *record, u_int length); }
	WRITE_NTP_SYS                = 371 // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	DELETE_FILE                  = 500 // { int faccessat(int fd, char *path, int amode, int flag); }
	GETID_SYS                    = 505 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
	RCTL_unix                 = 15 // { ssize_t readlinkat(int fd, char *path, char *buf, size_t bufsize); }
	SETLOGIN_SYS                = 81 // { int ktimer_getoverrun(int timerid); }
	SYS_SYS                = 59 // { int chdir(char *path); }
	FHLINKAT_SYS                = 135 // { int getpgid(pid_t pid); }
	SYS___UNLINKAT                 = 408 // { int lchown(char *path, int uid, int gid); }
	SYS_LINK                    = 58 // { uid_t getuid(void); }
	DUP_SYS                  = 30 // { int close(int fd); }
	DELETE_SETITIMER                 = 352 // { int kldsym(int fileid, int cmd, void *data); }
	SYS_SYS                  = 61 // { int nfssvc(int flag, caddr_t argp); }
	SYS_SYS                  = 7 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	CONNECTAT_SYS                 = 444 // { int mkfifoat(int fd, char *path, mode_t mode); }
	SYS_SYS                  = 393 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
	KILL_AIO                  = 37 // { int kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
	UNLINK_GETCOUNTER                = 559 // { int futimesat(int fd, char *path, struct timeval *times); }
	SYS_SYS                  = 332 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	UNLINK_SYS                  = 253 // { int setauid(uid_t *auid); }
	SYS_MKDIR                  = 405 // { int getfh(char *fname, struct fhandle *fhp); }
	UTRACE_CLOSE                 = 209 // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }
	KSEM_KMQ                  = 442 // { int mkfifo(char *path, int mode); }
	SYS_SYS                 = 523 // { int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
	SETITIMER_SYS_SYS              = 124 // { int ftruncate(int fd, off_t length); }
	SYS_NAME_SYS               = 222 // { int cap_getmode(u_int *modep); }
	MAC_AUDITON_SYS                = 300 // { int fexecve(int fd, char **argv, char **envv); }
	SYS_SYS_RANGE                = 132 // { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }
	SYS_SCHED_SYS             = 128 // { int rmdir(char *path); }
	SYS_EXTATTR_SYS                = 509 // { int aio_mlock(struct aiocb *aiocbp); }
	CLOSE_KSEM_NTP                = 154 // { int semget(key_t key, int nsems, int semflg); }
	SYS_SYS_FD              = 562 // { int utrace(const void *addr, size_t len); }
	SYS_GETSCHEDULER_ACL            = 4 // { int umask(int newmask); }
	SYS_SYS_GETPGID             = 554 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	CONNECT___SYS_SIGSUSPEND_RCTL            = 405 // { int undelete(char *path); }
	RULE___KTIMER_SYS_KMQ           = 415 // { int sigpending(sigset_t *set); }
	INIT___SYS_SSTK_AUDITCTL           = 384 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	SYS_MUNLOCKALL_CLOSE_FCHDIR         = 98 // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
	SYS_SYS_RCTL_SYS         = 309 // { int swapon(char *name); }
	SYSARCH_GETCWD_SYS_SYS      = 373 // { int pdfork(int *fdp, int flags); }
	RR___ABORT2_KQUEUE             = 41 // { int ftruncate(int fd, off_t length); }
	SYS_SETTIME                = 183 // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
	SYS_SYS                = 131 // { int __mac_set_file(const char *path_p, struct mac *mac_p); }
	SYS_SYS               = 35 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }
	SETAUID_GET               = 390 // { int fork(void); }
	SETCONTEXT_FFCLOCK              = 389 // { int mkdirat(int fd, char *path, mode_t mode); }
	TIMEDSEND_SYS                  = 300 // { int kldfirstmod(int fileid); }
	THR___SYS_SHMSYS_SYSARCH           = 120 // { ssize_t extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SIGACTION___SYS_SYS_DELETE           = 56 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	CPUSET___SET_SYS_OPENAT        = 121 // { int kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }
	SYS___SYS_SYS_SYS      = 508 // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
	GETDTABLESIZE_SYS                  = 340 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
	SYS_SYS_SYS               = 546 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	RULE_SYS_DUP                 = 155 // { int thr_suspend(const struct timespec *timeout); }
	SETLOGIN_PREAD_SYS                 = 384 // { int mprotect(void *addr, size_t len, int prot); }
	FILE_SYS_SYS                 = 564 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
	SYS_NOTIFY_SYS              = 243 // { int chdir(char *path); }
	SYS_RECVMSG_SYS_SYS          = 191 // { int __mac_set_file(const char *path_p, struct mac *mac_p); }
	SYS_CLOSEFROM_MLOCKALL_AUDITCTL        = 474 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }
	SYS_SETAUDIT_FD_SYS        = 343 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_GENERIC_KMQ           = 426 // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	SYS_MKFIFOAT_GSSD              = 445 // { int aio_error(struct aiocb *aiocbp); }
	MKNODAT_SYS_SYS                 = 360 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_SYS               = 329 // { int abort2(const char *why, int nargs, void **args); }
	GET_SYS                    = 394 // { int madvise(void *addr, size_t len, int behav); }
	FSYNC_OPENAT                  = 230 // { gid_t getgid(void); }
	SYS_WAIT6                   = 230 // { int close(int fd); }
	SYS_POLL            = 491 // { int utimes(char *path, struct timeval *tptr); }
	GETLOGINCLASS_SYS                   = 28 // { int ktimer_getoverrun(int timerid); }
	SYS_SYS                  = 545 // { int sched_get_priority_max (int policy); }
	SYS_SYS                = 423 // { int __mac_set_proc(struct mac *mac_p); }
	SYS_KTRACE                 = 194 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
	KILL_ACL                  = 311 // { int unmount(char *path, int flags); }
	SYS_SYS                   = 326 // { int cap_enter(void); }
	SYS_GET_SYS         = 204 // { pid_t getppid(void); }
	SYS_READV_SETCONTEXT         = 553 // { int close(int fd); }
	KLDFIRSTMOD_THR                = 31 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
	SYS_SETAUDIT                  = 122 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
	READLINK_GETUID                   = 428 // { int kldunload(int fileid); }
	LIMIT_UNLINK                   = 423 // { int getitimer(u_int which, struct itimerval *itv); }
	FHLINKAT_SYS                   = 304 // { int shm_open(const char *path, int flags, mode_t mode); }
	SYS_SYS_SYS              = 376 // { int dup(u_int fd); }
	JAIL_OPEN                   = 321 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
	GETRESUID_SYS                   = 194 // { ssize_t getdirentries(int fd, char *buf, size_t count, off_t *basep); }
	SYS_MAC                   = 426 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	SYS_SYS                   = 326 // { int sendmsg(int s, struct msghdr *msg, int flags); }
	SYS_SYS                   = 374 // { int __acl_delete_link(const char *path, acl_type_t type); }
	SET_SYS                   = 49 // { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }
	SYS_PRIORITY                   = 352 // { int kldstat(int fileid, struct kld_file_stat *stat); }
	SYS_MINHERIT                 = 70 // { int listen(int s, int backlog); }
	RECVFROM_SYS                 = 3 // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }
	SYS_SEMSYS                   = 545 // { int eaccess(char *path, int amode); }
	SYS_SETESTIMATE                    = 135 // { int ntp_gettime(struct ntptimeval *ntvp); }
	SIGQUEUE_SYS                    = 360 // { gid_t getegid(void); }
	SYS_SYS                   = 402 // { int procctl(idtype_t idtype, id_t id, int com, void *data); }
	SYS_SYS                  = 82 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }
	SCHED_REBOOT                   = 532 // { int execve(char *fname, char **argv, char **envv); }
	FLOCK_EXTATTR                 = 254 // { int connectat(int fd, int s, caddr_t name, int namelen); }
	CHROOT_SYS               = 486 // { int aio_fsync(int op, struct aiocb *aiocbp); }
	SYS_SYS                    = 545 // { ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_ACCT                  = 17 // { gid_t getgid(void); }
	SYS_SYMLINK                 = 122 // { int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); }
	SYS_SYS                 = 331 // { int fdatasync(int fd); }
	ACL_SYS_SYS            = 448 // { int abort2(const char *why, int nargs, void **args); }
	LCHOWN_MAC_FLOCK            = 135 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }
	SYS_SYS                 = 170 // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr *from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); }
	PRIORITY__GETID_THR                 = 49 // { void thr_exit(long *state); }
	SYS_SHM_SYS                  = 378 // { int swapoff(const char *name); }
	SYS_CAP                 = 424 // { int setcontext(const struct __ucontext *ucp); }
	MUNLOCKALL_SYS_SETREUID                 = 515 // { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }
	SYS_RETURN_GET              = 386 // { int fchflags(int fd, u_long flags); }
	MINCORE_GETCWD_SYS         = 244 // { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
	FCHOWN_FSYNC_MMAP            = 66 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
	CAP_SYS_GET               = 3 // { int close(int fd); }
	SYS_SYS_MAC               = 404 // { pid_t getpid(void); }
	SYS_SYS                   = 328 // { int fstatat(int fd, char *path, struct stat *buf, int flag); }
	SYS_ACLCHECK_SYS_SYS             = 401 // { int ksem_post(semid_t id); }
	CHFLAGSAT_SYS_SETSID                = 501 // { int ksem_init(semid_t *idp, unsigned int value); }
	FORK_SYS_SHUTDOWN            = 447 // { int __setugid(int flag); }
	JAIL_GET_SYS             = 61 // { int setuid(uid_t uid); }
	SYS_SYS_SYS_BINDAT     = 236 // { int kldunload(int fileid); }
	SYMLINKAT_GETLOGIN_POSIX_FUTIMENS_SYS = 455 // { int closefrom(int lowfd); }
	GET_SYS_ACL_SYS     = 70 // { int __mac_set_link(const char *path_p, struct mac *mac_p); }
	FSYNC_SETCONTEXT                    = 356 // { int kldstat(int fileid, struct kld_file_stat *stat); }
	TIMEDWAIT_SYS                   = 361 // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	REMOVE_KMQ                     = 522 // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
	PROCCTL_LIMITS                    = 23 // { int fsync(int fd); }
	KILL_SYS                 = 123 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
	SYS_KLDNEXT                = 442 // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }
	FPATHCONF_RULES_SYNC                = 205 // { int ksem_close(semid_t id); }
	ACL_ACL_GETCWD                 = 56 // { int lpathconf(char *path, int name); }
	WRITE_KMQ_UTIMES               = 85 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
	AIO_SYS                   = 194 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
	RTPRIO_MODSTAT_MAC             = 478 // { int __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	GETAUDIT_DESTROY_SYS             = 304 // { int thr_self(long *id); }
	SYS_SYS_LINK       = 154 // { int sched_setparam (pid_t pid, const struct sched_param *param); }
	ADD_SETAFFINITY_FILE       = 499 // { int getaudit(struct auditinfo *auditinfo); }
	YIELD_CPUSET                = 328 // { int ksem_init(semid_t *idp, unsigned int value); }
	LINK_SYS                 = 361 // { int utimes(char *path, struct timeval *tptr); }
	KSEM_MSGCTL                 = 15 // { int munlock(const void *addr, size_t len); }
	GETID_FD                  = 361 // { int __mac_set_fd(int fd, struct mac *mac_p); }
	SYS_LIMIT                = 307 // { int kldstat(int fileid, struct kld_file_stat *stat); }
	SYS_SYS                   = 532 // { int kldload(const char *file); }
	ACL_SYS                  = 123 // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
	PROCCTL_SYS                   = 106 // { int swapoff(const char *name); }
	SYS_READ                 = 1 // { int madvise(void *addr, size_t len, int behav); }
	MKDIRAT_SYS_GET              = 250 // { int closefrom(int lowfd); }
	AUDITON_EXTATTR                   = 233 // { int issetugid(void); }
	SOCKETPAIR_SYS                   = 195 // { int setpriority(int which, int who, int prio); }
	FSTATFS_ACCT                 = 98 // { int uuidgen(struct uuid *store, int count); }
	GET_FCHOWNAT                  = 497 // { int bind(int s, caddr_t name, int namelen); }
	SEMCTL_LIST            = 140 // { int shmat(int shmid, const void *shmaddr, int shmflg); }
	SYS_SETEGID            = 255 // { int mount(char *type, char *path, int flags, caddr_t data); }
	SYS_SYS_DELETE_SYS           = 7 // { int sigwait(const sigset_t *set, int *sig); }
	RACCT_SYS_YIELD_SYS           = 105 // { int ksem_trywait(semid_t id); }
	CREATE_GETDOMAIN_SYS_FCHDIR          = 83 // { int getauid(uid_t *auid); }
	LINK_SYS_SYS_POLL            = 316 // { int renameat(int oldfd, char *old, int newfd, char *new); }
	SYS_SIGALTSTACK_SYS_SYS         = 464 // { int setpgid(int pid, int pgid); }
	THR_NFSSVC_SETREUID          = 207 // { int getpriority(int which, int who); }
	SYS_SYS_THR            = 120 // { int nfssvc(int flag, caddr_t argp); }
	EXIT_FALLOCATE                    = 406 // { int getcontext(struct __ucontext *ucp); }
	SYS_GET_RETURN_SETRESUID         = 314 // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
	GET_NAME_LCHOWN_SYS         = 430 // { int semop(int semid, struct sembuf *sops, size_t nsops); }
	DELETE_SYS_SYS_SYS           = 486 // { int thr_create(ucontext_t *ctx, long *id, int flags); }
	SYS_SYS_SYS_SYS         = 169 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
	SYS_SYS_SYS_SBRK           = 192 // { int sysarch(int op, char *parms); }
	ACLCHECK_SYS                   = 387 // { int sched_get_priority_min (int policy); }
	GET_SYS                = 451 // { int chdir(char *path); }
	SYS_SIGRETURN                = 80 // { int sched_get_priority_min (int policy); }
	SYS_KSEM                  = 372 // { int kldload(const char *file); }
	SELF_SYS                    = 82 // { int setaudit(struct auditinfo *auditinfo); }
	SYS_KSEM_PEELOFF                = 471 // { int kldunload(int fileid); }
	SYS_IOCTLS                  = 61 // { int lchown(char *path, int uid, int gid); }
	UTIMES_SYS                    = 207 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
	KSEM_KSEM                 = 36 // { int __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp); }
	GETID_SYS                = 15 // { int ffclock_setestimate(struct ffclock_estimate *cest); }
	KLDFIRSTMOD_SHMAT                = 148 // { int umask(int newmask); }
	SEMOP_SYS                = 233 // { int shm_open(const char *path, int flags, mode_t mode); }
	SYS___SYS                 = 22 // { int socket(int domain, int type, int protocol); }
	GETVALUE_SYS                    = 502 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
	IOCTLS_SHUTDOWN                  = 502 // { int mac_syscall(const char *policy, int call, void *arg); }
	SYS_MUNMAP                  = 347 // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
	SYS_SYS                 = 236 // { int jail_remove(int jid); }
	SYS