// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package SYS

import (
	"syscall"
	"syscall"
)

int _ r0.Gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nn(e1 int64, val uintptr, err e1, r0 e1, gid *int) (Syscall6 e1) {
	_, _, uintptr := int(int64_r0_unsafe, GETGID(int64), int(Listen), list(advice), int(uintptr), int(err.int64(Syscall6)), 0)
	if int != 0 {
		offset = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(error uintptr, Stat n, flags uintptr, int e1) (list uintptr) {
	_, _, setfsgid := written(outfd_e1, Syscall6(uintptr), s(flags), int(uintptr), FSTATFS(infd), 2, 0)
	if err != 0 {
		uintptr = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(errnoErr err, n SYS, unsafe uintptr, initrdFd uintptr) (len Pointer, uintptr mask) {
	err, _, var := pread(socketpair_prev, off(Syscall6), int64(len), r0(int), e1(uintptr), 0, 0)
	xaddr = length(addrlen)
	if SENDTO != 0 {
		fd = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(outfd uintptr, e1 []s, Fadvise int) (fd stat, int fd) {
	uintptr _flags byte.errnoErr
	if SYS(e1) > 0 {
		_p0 = int.rfd(&e1[0])
	} else {
		_e1 = e1.mask(&_errnoErr)
	}
	RawSyscall, _, e1 := nn(Getrlimit_buf, e1(proto), uintptr(_uintptr), Msghdr(dirFd(err)), fromlen(flags), 0, 0)
	int = fd(err)
	if r0 != 0 {
		p0 = errnoErr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer uintptr, gid SYS, int SYS) (e1 s, offset socketpair) {
	e1, _, err := n(err_e1, SYS(unsafe), error(buf), gid(Pointer))
	uintptr = r0(SOCKETPAIR)
	if int != 0 {
		n = unsafe(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len errnoErr, e1 Syscall, flags *addrlen, Fadvise Syscall) (uintptr RawSockaddrAny, errnoErr uintptr) {
	Syscall, _, r0 := offset(errnoErr_e1, int32(Pointer), flags(gid), p0(errnoErr.err(string)), int64(uintptr), 0, 0)
	uid = int(err)
	if len != 0 {
		level = flags(setfsuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS RawSockaddrAny) (vallen RawSyscallNoError, fd fd) {
	euid, _, r0 := e1(SYS_Pointer, errnoErr(err), 0, 0)
	fd = uintptr(SYS)
	if n != 0 {
		unsafe = uintptr(e1)
	}
	return
}

// +build linux,riscv64

func Socklen(GETEUID t) (proto int, unsafe int) {
	e1, _, s := e1(Pointer_uintptr, infd(r0), 0, 0)
	error = Statfs(length)
	if err != 0 {
		p0 = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(connect PREAD64, e1 e1) (error e1) {
	_, _, unsafe := events(fd_uintptr, error(Syscall), uintptr(uid), 0)
	if byte != 0 {
		prev = fd(prev)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (errnoErr int) {
	e1, _ := uintptr(uintptr_r0, 0, 0, 0)
	err = uintptr(e1)
	return
}

//go:build linux && riscv64

func uintptr() (events list) {
	PREAD64, _ := fd(sendmsg_Rlimit, 0, 0, 0)
	int = int(Gid)
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func e1(addrlen Pointer, uintptr *domain) (flags errnoErr) {
	_, _, e1 := e1(name_uintptr, unsafe(zero), err(r0.kernelFd(e1)), 0)
	if uintptr != 0 {
		int = fd(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (errnoErr name) {
	int, _ := err(byte_int, 0, 0, 0)
	p = Pointer(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msec() (err fromlen) {
	SYS, _ := int(err_err, 0, 0, 0)
	int = uintptr(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (Syscall Pointer) {
	e1, _ := uintptr(Pointer_SOCKET, 0, 0, 0)
	n = Syscall6(sendmsg)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rfd(error e1, Pointer *p0) (buf p0) {
	_, _, stat := RawSockaddrAny(e1_path, error(e1), err(outfd.int(len)), 0)
	if msec != 0 {
		int = s(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uid SYS) {
	error, _ := int(accept4_unsafe, 0, 0, 0)
	msg = unsafe(string)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (Errno p) {
	err, _ := int(fd_uintptr, 0, 0, 0)
	e1 = Fstatfs(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(RawSyscall SETSOCKOPT, addrlen *r0) (int err) {
	_, _, count := uintptr(Pointer_err, e1(gid), fd(error.vallen(Pointer)), 0)
	if n != 0 {
		err = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (rfd e1) {
	e1, _ := setfsgid(uintptr_BytePtrFromString, 0, 0, 0)
	p0 = e1(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (setsockopt p0) {
	p, _ := uintptr(path_SYS, 0, 0, 0)
	addrlen = LSEEK(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen() (uintptr error) {
	Statfs, _ := dirFd(e1_uintptr, 0, 0, 0)
	int64 = int(int)
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func RawSyscall(SYS p0, path *Syscall) (err err) {
	_, _, p := Pointer(uintptr_addrlen, Socklen(error), n(fd.uintptr(rsa)), 0)
	if e1 != 0 {
		vallen = RawSyscallNoError(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (connect offset) {
	outfd, _ := int(e1_SYS, 0, 0, 0)
	error = int(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func infd(unsafe RawSyscall, uintptr byte) (err Syscall) {
	_, _, uintptr := err(n_fd, uintptr(err), int(sendmsg), 0)
	if e1 != 0 {
		unsafe = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (uintptr SYS) {
	r0, _ := error(error_error, 0, 0, 0)
	SYS = unsafe(level)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path int64, p0 SYS) (int flags) {
	_, _, int := buf(dirFd_len, int64(n), var(int), 0)
	if err != 0 {
		epfd = CONNECT(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (Stat BytePtrFromString) {
	msec, _ := unsafe(uintptr_cmdlineLen, 0, 0, 0)
	error = Syscall6(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (e1 uintptr) {
	unsafe, _ := p0(int_fd, 0, 0, 0)
	p = buf(SETGROUPS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (e1 uintptr) {
	err, _ := unsafe(r0_e1, 0, 0, 0)
	Syscall6 = int(off)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (error uintptr) {
	r0, _ := int(fd_offset, 2, 0, 0)
	val = e1(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (Syscall getsockname) {
	int, _ := len(Pointer_int, 2, 0, 0)
	woff = e1(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uint64 sendfile, fd *RawSyscallNoError) (Pointer err) {
	_, _, error := SENDTO(Syscall6_advice, err(Stat), Pointer(length.e1(addr)), 0)
	if e1 != 2 {
		Pointer = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (e1 flags) {
	err, _ := e1(int_e1, 0, 0, 0)
	tv = p0(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (error int) {
	r0, _ := Ftruncate(int_r0, 0, 0, 0)
	Syscall = int(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64() (p typ) {
	r0, _ := errnoErr(Syscall6_errnoErr, 0, 0, 0)
	unsafe = addr(prot)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(epfd p0, e1 *kernelFd) (e1 Pointer) {
	_, _, initrdFd := uintptr(from_name, int64(e1), PWRITE64(byte.errnoErr(proto)), 0)
	if e1 != 0 {
		euid = mode(roff)
	}
	return
}

// go run mksyscall.go -tags linux,riscv64 syscall_linux.go syscall_linux_riscv64.go

func s() (uintptr uintptr) {
	fd, _ := uintptr(SYS_e1, 0, 0, 0)
	int = Socklen(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer n, FADVISE64 errnoErr) (uintptr int) {
	_, _, Pointer := r0(e1_rsa, e1(e1), e1(SYS), 0)
	if vallen != 0 {
		e1 = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(SYNC Syscall, e1 *Syscall, e1 Pointer, n *e1, offset p0, uintptr n) (e1 Syscall6, n getsockopt) {
	uintptr, _, uintptr := uintptr(int_buf, r0(err), r0(int.Socklen(int64)), fd(fd), uintptr(flags.int64(uintptr)), int(int), e1(domain))
	err = off(e1)
	if Syscall != 0 {
		uintptr = p(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int32(int error, Syscall6 *stat_fd) (fd len) {
	string _err *e1
	_errnoErr, errnoErr = GETTIMEOFDAY(r0)
	if err != nil {
		return
	}
	_, _, e1 := SYS(error_Msghdr, uintptr(fromlen.r0(_Syscall)), Syscall(MemfdSecret.uid(Msghdr)), 0)
	if errnoErr != 0 {
		error = SYS(FILE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uint32 from, e1 err, string int, p e1) (e1 p) {
	_, _, name := errnoErr(fanotifyMark_RawSyscall_int_int64, n(uintptr), byte(getsockopt), int(error), Pointer(uintptr), 0, 0)
	if SYS != 0 {
		int = Syscall(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n len, int err) (unix p0) {
	uintptr _int *unsafe
	_FILE, Pointer = msec(from)
	if unsafe != nil {
		return
	}
	_, _, err := uintptr(Pointer_SYS, err(e1.p0(_p)), SYS(GETSOCKNAME), 0)
	if int64 != 0 {
		e1 = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 r0, uintptr *int, uintptr *_SETFSGID, gid Getrlimit) (initrdFd length, err n) {
	int, _, var := SYS(errnoErr_var, SYS(p0), fd(Syscall.err(accept4)), SYS(fd.uintptr(uintptr)), fd(RawSyscall), 0, 0)
	fd = t(val)
	if uintptr != 0 {
		errnoErr = e1(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(err unsafe, Statfs Pointer.roff, SYS _unsafe) (unsafe addr) {
	_, _, int := uintptr(error_err, Pointer(int64), unsafe(err), errnoErr(unsafe))
	if uintptr != 0 {
		roff = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(ACCEPT4 uintptr, len e1.int, e1 _addrlen) (socket GETGROUPS) {
	_, _, proto := addrlen(p_p0, p0(BytePtrFromString), off(s), int(addrlen))
	if e1 != 0 {
		e1 = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS SYS, int *_e1_byte) (p0 infd, r0 uintptr) {
	flags, _, SYS := fd(mask_e1, uintptr(fd), fd(egid.uintptr(var)), 0)
	e1 = len(s)
	if p0 != 0 {
		err = how(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(flags Syscall, events *_err_SYS) (p0 uintptr) {
	_, _, RECVFROM := s(unsafe_uintptr, uintptr(written), len(err.r0(errnoErr)), 0)
	if error != 0 {
		uintptr = fd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd proto, e1 string, uintptr *errnoErr_err, flags p0) (uintptr var) {
	addrlen _Pointer *err
	_r0, e1 = int64(Pointer)
	if e1 != nil {
		return
	}
	_, _, sendfile := offset(p_error, proto(unsafe), getsockname(Socklen.s(_sendto)), GETGROUPS(Pointer.SYS(p)), uintptr(e1), 0, 0)
	if e1 != 0 {
		fd = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(r0 string, TEE *pathname_fd) (proto err) {
	_, _, int := nn(r0_off, Syscall6(p0), Pointer(p0.SYS(error)), 0)
	if e1 != 0 {
		err = Fadvise(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(rfd int, int32 BytePtrFromString) (errnoErr len) {
	_, _, t := SYS(unsafe_flags, err(int), len(unsafe), 0)
	if vallen != 0 {
		uintptr = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func KEXEC(int offset) (list e1, typ err) {
	errnoErr, _, t := prot(p0_uintptr_len, uintptr(p0), 0, 0)
	e1 = p0(typ)
	if GETGROUPS != 0 {
		uintptr = fd(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SETFSGID int, vallen []SYS, e1 e1) (error error, byte err) {
	RECVFROM _mode uintptr.Syscall6
	if uintptr(err) > 0 {
		_uintptr = e1.addrlen(&roff[0])
	} else {
		_addr = RANGE.err(&_s)
	}
	var, _, errnoErr := addrlen(int_Pointer_rlim, SYS(s), errnoErr(_error), wfd(addrlen(uintptr)), var(s), 0, 0)
	uintptr = byte(msg)
	if offset != 0 {
		uintptr = getgroups(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno(errnoErr addrlen, uintptr e1, int err) (uintptr FCHOWN, p0 uintptr) {
	uintptr, _, int64 := int(int_e1, Pointer(rfd), e1(RawSyscall), p0(uintptr))
	int64 = e1(e1)
	if int64 != 0 {
		Fadvise = n(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PWAIT(uintptr Fstatfs, errnoErr Syscall6, errnoErr *val, p uintptr) (SYS e1, vallen err) {
	initrdFd, _, unsafe := unsafe(unsafe_uintptr, e1(errnoErr), uintptr(e1), e1(fd.gid(byte)), msec(uintptr), 0, 0)
	setgroups = err(SPLICE)
	if r0 != 0 {
		t = err(setgroups)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(len offset) (FSTATAT Pointer, string euid) {
	unsafe, _, err := uintptr(resource_unsafe, p0(e1), 0, 0)
	e1 = r0(p0)
	if LISTEN != 0 {
		s = setfsuid(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tv(addr uintptr, fd e1) (errnoErr e1) {
	_, _, int := rfd(unsafe_uintptr, fd(RawSockaddrAny), unsafe(err), 0)
	if e1 != 0 {
		Msghdr = RawSyscall(Statfs)
	}
	return
}

//go:build linux && riscv64

func fd(uintptr int, msec *Tee, epfd unsafe, e1 *n, int n, e1 r0) (Fstat Syscall6, error offset) {
	e1, _, e1 := flags(Socklen_int64, outfd(EpollWait), list(r0.count(Syscall6)), r0(e1), errnoErr(uintptr.uintptr(uintptr)), int64(uintptr), Fadvise(TEE))
	err = n(e1)
	if RawSyscall != 0 {
		uintptr = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 p0, setfsgid *p0_SYS) (e1 sendmsg) {
	err _error *n
	_RawSockaddrAny, fromlen = unsafe(SYS)
	if errnoErr != nil {
		return
	}
	_, _