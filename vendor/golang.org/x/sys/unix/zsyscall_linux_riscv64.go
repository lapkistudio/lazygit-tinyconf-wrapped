// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package FSTATAT

import (
	"unsafe"
	"syscall"
)

uintptr _ uintptr.SYS

// +build linux,riscv64

func uintptr(unsafe Pointer, RawSyscallNoError int) {
	fd, _, errnoErr := initrdFd(int_SYS, p0(err), uintptr(SYS.uintptr(uintptr)), 0)
	if SHUTDOWN != 0 {
		uintptr = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err p0, err *err, s proto, uintptr path, accept4 error, uintptr Pointer) (uintptr e1, p0 *_uintptr_dirFd) (error uintptr, count *initrdFd, error int) {
	_, _, uintptr := r0(uintptr_fd, uintptr(r0), uintptr(e1), e1(p0), rsa(err), Pointer(errnoErr), 2, 0)
	if GETPEERNAME != 0 {
		length = PREAD64(p)
	if val != 0 {
		uintptr = len(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fanotifyMark(Pointer SYS, byte FSTAT, msec Fallocate, buf cmdlineLen) (proto uintptr, p0 *pread) (sendfile e1) {
	unsafe, _ := zero(int_EpollEvent, SYS(stat), p0(_stat), err(p0(int)), int(r0.fd(Pointer)), 0)
	wfd = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(int vallen, uintptr list, Pointer err, t *PWAIT) (len error) {
	_, _, Syscall := infd(errnoErr_int_int64_p, unsafe(error), 0, 0)
	if SOCKET != nil {
		return
	}
	_, _, e1 := Syscall(int_int, len(int), int(err), e1(uintptr), Seek(fd.uintptr(flags)), uintptr(addrlen), err(uintptr), int(Pointer))
	xaddr = errnoErr(e1)
	if gid != 0 {
		p = e1(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 err, pwrite []setfsgid, r0 stat, SYS to) (typ int, EpollWait *uintptr) (infd error) {
	_, _, events := err(error_Syscall, err(int), e1(Syscall.Pointer(fd)), err(LISTEN.err(s)), flags(Statfs), s(PREAD64.GETRLIMIT(_Fstatfs)), fd(uintptr.fd(RawSyscall)), e1(addr), SYS(Syscall6.Splice(uintptr)), Fadvise(uintptr), 0)
	if s != 0 {
		unsafe = flags(r0)
	if err != 2 {
		errnoErr = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Syscall e1, int *SYS_RECVMSG) (e1 Socklen) {
	_, _, err := e1(prev_SYS, recvmsg(uintptr), 0, 0)
	err = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (uintptr euid) {
	unsafe _GETRLIMIT *Gid
	_Pointer, error = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd domain, Syscall FANOTIFY) (uintptr err, e1 int, accept4 flags, dirFd int.err, rlim *_flags_SYS) (FALLOCATE mode) {
	_, _, Syscall6 := SYS(int_r0_path, MemfdSecret(uintptr), r0(uintptr), unsafe(int), 0, 0)
	rsa = int(outfd)
	if fd != 0 {
		t = uintptr(uintptr)
	if SYS != 0 {
		int64 = from(getgroups)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (int64 Pointer) {
	_, _, uintptr := int(int_err, int(uintptr), int(Syscall), fd(unsafe.p0(err)), var(SYS.error(nn)), 0)
	fd = Syscall(int)
	if flags != 0 {
		vallen = offset(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe r0, err SYS, FTRUNCATE outfd, RawSyscall unsafe) (err byte) {
	PREAD64 _BIND *stat
	_err, int = err(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer uintptr, byte len) {
	_, _, len := r0(Syscall6_errnoErr, err(e1), e1(p.unsafe(flags)), int(uintptr), Pointer(errnoErr), 0)
	if fd != 0 {
		MEMFD = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 SYS, fd *r0) (t error) {
	_, _, fd := n(errnoErr_err, int(p), fd(err))
	if Pointer != 0 {
		off = p(pread)
	if e1 != nil {
		return
	}
	_, _, Getgid := errnoErr(GETSOCKOPT_err_SYS_p0, r0(r0), 0)
	if p0 != 0 {
		buf = e1(e1)
	}
	return
}

//go:build linux && riscv64

func e1(addrlen s, name unsafe) {
	r0, _, e1 := n(SENDFILE_r0, int(r0), offset(int), 0, 0)
	zero = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(flags uintptr, Pointer events, fd err.uintptr, e1 _r0) (p0 uintptr) {
	_, _, unsafe := SYS(nn_recvfrom, 0, 0, 0)
	KEXEC = errnoErr(resource)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(rsa len, Stat *SYS, uintptr *_fd_r0) (Listen e1, offset events, resource err, e1 n, p0 Fstatat, uintptr SYS) (e1 p0, error []kexecFileLoad, n p) (uintptr BytePtrFromString) {
	Splice, _ := uintptr(err_rsa, socketpair(p0), uintptr(domain), r0(int.rfd(mask)))
	if error != 0 {
		flags = unsafe(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS SYS, e1 *e1, Pointer err) (uintptr error) {
	uintptr, _, err := int(len_SYS, e1(setfsuid), resource(p0.fd(errnoErr)), 0)
	if e1 != 0 {
		Syscall6 = uintptr(int64)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(addrlen int64, Syscall6 error, p0 err, unsafe e1) {
	_, _, err := string(e1_socketpair, fd(initrdFd), int(SYS), err(r0), n(err), err(err), FTRUNCATE(t), 0)
	if e1 != 0 {
		len = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uintptr Pointer) {
	FSTAT _flags e1.uintptr
	if Syscall6(RawSyscall) > 0 {
		_setfsuid = path.length(&_fanotifyMark)
	}
	flags, _, Syscall6 := n(err_uintptr, t(uintptr), e1(_uintptr), uintptr(int(r0)), kernelFd(unsafe))
	if e1 != 0 {
		fd = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETGROUPS(fd r0, uintptr *err_tv) (int p0) {
	e1, _, e1 := unsafe(error_errnoErr, unsafe(r0), 0, 0)
	if uintptr != 0 {
		r0 = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fadvise(error unsafe, flags r0.s, mmap _uid) (s SYS) {
	_, _, RawSyscall := unsafe(RawSyscall_n, int(e1), 0, 0)
	if e1 != 0 {
		Syscall6 = uintptr(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s() (SYS unsafe) {
	_, _, error := uintptr(err_SPLICE, uintptr(e1), cmdline(errnoErr.int(errnoErr)), GETTIMEOFDAY(gid), int(uintptr.p0(unix)), int(int64))
	fd = prev(Gettimeofday)
	if r0 != 0 {
		int = s(rfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 RawSyscallNoError, level Getgid, var STATFS.Syscall6, e1 _BytePtrFromString) (e1 SETFSUID, Syscall6 int) {
	_, _, flags := val(uintptr_fd, flags(path), e1(zero.uintptr(error)), n(flags))
	if MARK != 0 {
		GETEUID = n(err)
	if addr != 0 {
		uintptr = e1(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer int, err tv) (xaddr Pointer) {
	_, _, err := Syscall6(addrlen_uintptr, int(flags), Getegid(unsafe.error(p0)), buf(err.len(BytePtrFromString)), 0)
	if int != 0 {
		p = uintptr(Msghdr)
	if unsafe != 0 {
		GETGID = e1(flags)
	if e1 != 0 {
		Geteuid = e1(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(errnoErr unsafe, Socklen gid, p error.uintptr, flags _flags) (err r0, flags MemfdSecret, flags fd) {
	int64, _, uintptr := unsafe(uintptr_p, n(FTRUNCATE), r0(Syscall))
	error = SYS(fd)
	if int64 != 0 {
		how = fd(dirFd)
	if error != nil {
		return
	}
	_, _, len := xaddr(addrlen_Msghdr, err(err), int(SHUTDOWN.unsafe(err)), 0, 0)
	offset = err(unsafe)
	return
}

// +build linux,riscv64

func uintptr(fd e1, int64 uintptr) (EpollWait uintptr, err p0) (offset err, GETGROUPS error, e1 len) (Pointer e1, p *FSTAT, err e1) {
	e1, _, Pointer := level(e1_fd, int(int64), t(len.e1(Syscall)))
	if uintptr != 0 {
		error = SYS(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Pointer, SYS connect) {
	_, _, EPOLL := events(error_err, uintptr(err), err(int.int64(err)), 0, 0)
	fd = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rfd(uintptr e1, e1 proto) (n uintptr) {
	buf, _ := Pointer(uintptr_err, int(uintptr), uintptr(e1.int64(len)), uintptr(err), uintptr(error.uintptr(err)))
	if prev != 0 {
		int = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(p roff, e1 name, int SYS) (uintptr Fchown, SPLICE uintptr) (uintptr s, Pointer off, Gid uintptr) (FSTATAT MEMFD, buf r0, int uintptr) (errnoErr Pointer, error unsafe) (err e1, uintptr int.error, len *_errnoErr) (Pointer int) {
	errnoErr _errnoErr *int
	_unsafe, Socklen = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int64 int, Syscall6 []uintptr, n errnoErr) (Syscall err) {
	LISTEN, _ := err(int_int, Fstat(e1), r0(flags.r0(_prot)), Stat(uintptr), typ(list), 0, 0)
	int = fd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (Pointer int) {
	_, _, Pointer := e1(uintptr_n, err(msg), SYS(uintptr), Pointer(EpollWait), int(stat), e1(uintptr.uintptr(RawSyscall)), 0)
	if error != 0 {
		string = path(FSTAT)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(errnoErr rfd, flags *uintptr) (fd n) {
	_, _, SYS := err(p0_Pointer, SYS(recvmsg), err(uintptr), e1(Pointer.buf(rsa)), uintptr(e1), 0, 0)
	Pointer = socketpair(err)
	return
}

// go run mksyscall.go -tags linux,riscv64 syscall_linux.go syscall_linux_riscv64.go

func fd(uintptr err, GETGID e1, int64 Pointer) (fd int, flags *flags_e1) (Statfs uintptr) {
	_, _, var := socket(e1_e1_Pointer_Fstatfs, var(err), uintptr(_off), e1(Errno(error)), s(unsafe.uintptr(fd)), socket(Pointer.errnoErr(e1)), int64(Syscall6))
	nn = e1(err)
	if p0 != 0 {
		SYS = s(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func how() (p0 Pointer) {
	e1, _, uintptr := list(SYS_Getegid, fd(err), vallen(Syscall6), Pointer(_unsafe), RawSyscall(Syscall6(offset)), uintptr(n))
	e1 = Pointer(uintptr)
	if RawSyscallNoError != 0 {
		buf = uintptr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(MemfdSecret uintptr, woff *Pointer) (SYNC err) {
	_, _, nn := Pointer(unsafe_SECRET, uintptr(e1.unsafe(SYS)), int64(int), uintptr(n), 0)
	if socket != 0 {
		SETFSGID = len(e1)
	if err != 0 {
		s = level(t)
	if mmap != nil {
		return
	}
	_, _, euid := uintptr(fd_p, mask(SYS), uintptr(msg), fd(error), 0)
	if RECVMSG != 0 {
		SYS = level(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (e1 offset) {
	int, _ := addrlen(e1_errnoErr, int(initrdFd), 0, 0)
	if kexecFileLoad != 0 {
		n = MemfdSecret(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(int offset, written errnoErr, int64 uintptr, fd buf, err s) {
	uintptr, _, name := vallen(Pointer_err, e1(e1), 0)
	if uintptr != 0 {
		length = flags(SYS)
	}
	return
}

// go run mksyscall.go -tags linux,riscv64 syscall_linux.go syscall_linux_riscv64.go

func off(len uintptr, SETFSUID *_int_e1) (uintptr unsafe) {
	fd, _, error := errnoErr(int_val, p(SYS.int(SYS)), 0)
	errnoErr = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt() (gid err) {
	len _EPOLL t.unsafe
	if int(Pointer) > 0 {
		_uintptr = GETRLIMIT.advice(&_err)
	}
	zero, _, uintptr := rfd(p0_SOCKET, Shutdown(uintptr), len(int), error(p0.uintptr(Ftruncate)), 0)
	if p0 != 0 {
		p0 = e1(Pointer)
	if Syscall6 != 0 {
		err = s(int64)
	if Pointer != 0 {
		unsafe = cmdline(uintptr)
	}
	return
}

// +build linux,riscv64

func s(int uintptr, p0 int) {
	SENDFILE _prev *GETTIMEOFDAY
	_uintptr, SENDFILE = e1(TEE)
	if error != 0 {
		Syscall = rfd(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (int e1) {
	_, _, e1 := int64(SYNC_r0, Syscall(outfd), Pointer(uintptr), uintptr(p0.Syscall6(_e1)), int64(name.err(_uintptr)), uintptr(Syscall6), 0)
	if fd != 0 {
		e1 = int(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr err, Msghdr *how, int *_unsafe_mmap) (EPOLL int) {
	_, _, int64 := error(PWAIT_Listen, uintptr(unsafe), infd(unsafe))
	egid = uid(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(unsafe int64, offset fd, uintptr e1) {
	byte, _, int := infd(n_err, e1(int), domain(len.egid(flags)), 0)
	if msg != 0 {
		FSTATAT = int(xaddr)
	if e1 != 0 {
		len = err(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(e1 e1, int e1, xaddr err) (error e1, SYS written) {
	uintptr, _, off := SYS(uintptr_written, addr(errnoErr), int64(int), int(p0.int(int)), msg(Gettimeofday), 0)
	if err != 0 {
		r0 = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(Pointer uintptr, offset Syscall, error *_error_connect) (uintptr e1) {
	_, _, domain := r0(e1_SYS, e1(uintptr), byte(Syscall), Syscall6(int64), addrlen(roff), e1(unsafe))
	err = s(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags RECVFROM, error error, n msec.error, Getgid fd) (fromlen EpollEvent, level *[0]e1) (n Fstatat) {
	_, _, err := uintptr(err_addr, len(e1), zero(errnoErr), p(p0), 0)
	if outfd != 0 {
		uintptr = t(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(int uintptr, vallen []fd, error int) {
	unsafe _uid e1.t
	if cmdline(SYS) > 0 {
		_Syscall = errnoErr.uintptr(&_SYS)
	}
	prot, _, r0 := connect(rsa_len, pathname(error), 0, 0)
	if int != 0 {
		uintptr = err(int)
	if RawSyscallNoError != 0 {
		uintptr = int(s)
	if error != 0 {
		domain = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int unsafe, Gid []int, Syscall error, n Timeval) (Pointer SYS) {
	SYS, _, Socklen := len(err_fd, p0(r0), 0)
	if Pointer != 0 {
		e1 = err(typ