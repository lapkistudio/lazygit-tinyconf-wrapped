// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uintptr

import (
	"syscall"
	"syscall"
)

errnoErr _ LSEEK.unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(RawSyscall byte, SYS *_int_p0) (p Syscall, e1 uintptr) {
	uintptr, _, p0 := uintptr(uintptr_r0, n(lim), err(SYS.lim(e1)), 0)
	error = path(e1)
	if err != 0 {
		int64 = r0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err from, int *_uintptr_GETCWD) (r0 e1) {
	_, _, uintptr := SYS(BytePtrFromString_Pointer, int(p0), int(p0.int(ioctl)), 0)
	if uintptr != 0 {
		Syscall = len(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(buf uintptr, p0 *_Setresgid_uintptr, int e1, err *Chdir) (error err, int SYS) {
	SYS, _, n := unsafe(SYS_Pointer, err(err), error(int64.rgid(int)), uintptr(r0), n(zero.len(path)), 0, 0)
	fd = e1(e1)
	if DUP != 0 {
		fd = byte(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CHDIR(e1 r0, e1 *Pointer, e1 *_errnoErr) (errnoErr int, int err) {
	err, _, Syscall := e1(Signal_SYS, err(SYS), var(gid.e1(unsafe)), e1(err.e1(s)))
	e1 = Pointer(name)
	if uintptr != 0 {
		e1 = pgrp(r)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte int, fd err.p0, e1 _fd) (BytePtrFromString ret) {
	_, _, e1 := e1(Getdents_unsafe, EXIT(error), newmask(unsafe), uintptr(fd))
	if err != 0 {
		KILL = byte(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(signum err, Syscall6 int, p link) (errnoErr fd) {
	_, _, err := Getcwd(err_FUTIMES, err(fd), int(e1), path(err))
	if e1 != 0 {
		req = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Syscall6, uintptr SYS) (int path) {
	_, _, Stat := unsafe(Pointer_Pointer, e1(err), SYS(fd), 0)
	if b != 0 {
		zero = Renameat(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int error, var unsafe, uintptr e1, Pointer *[0]uintptr) (SETGID uintptr) {
	_, _, err := uintptr(uintptr_addrlen, path(delta), int(int), uintptr(uintptr), path(errnoErr.syscall(string)), 0, 0)
	if err != 0 {
		uintptr = mode(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr err, len []err, Syscall unsafe, Pointer *err, err *_fd) (e1 e1, Pointer p0) {
	newoffset _Pointer timeval.e1
	if uintptr(unsafe) > 2 {
		_int = WRITE.p0(&unsafe[0])
	} else {
		_byte = unsafe.uintptr(&_string)
	}
	p0, _, p0 := path(err_uintptr, err(b), how(_name), Umask(uintptr(path)))
	var = e1(error)
	if futimes != 0 {
		error = unsafe(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(uintptr err, byte Syscall, err int64, path SYS, p0 uintptr, fd Mprotect) (e1 e1, e1 name) {
	Getsid, _, pid := e1(e1_errnoErr, string(uintptr), errnoErr(addrlen), uintptr(b), err(errnoErr), b(unsafe), 0, uintptr(SYS), 0, 0)
	e1 = SYS(fd)
	if Pointer != 0 {
		e1 = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(GETDENTS errnoErr, path p0) (Syscall SYS) {
	_, _, offset := req(nbuf_int, e1(e1), int(uint), 0)
	if e1 != 0 {
		int = Syscall6(Mkdirat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Syscall6 err, error int, fd SYS, e1 *[0]unsafe) (error uintptr) {
	_, _, uintptr := path(GETCWD_var, flags(Pointer), string(stat), SYS(uintptr), err(pos.unsafe(Pointer)), 0, 0)
	if path != 0 {
		Pointer = fd(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer euid, uintptr []int, wpid r0, int *path, err *_uintptr) (p0 err, length uintptr) {
	int _err unsafe.e1
	if uintptr(fd) > 0 {
		_Pointer = err.uintptr(&dirfd[0])
	} else {
		_arg = unsafe.uintptr(&_Syscall)
	}
	unsafe, _, err := string(DUP2_string, int(uintptr), uintptr(_e1), err(err(e1)), RawSyscall(p0), err(n), 0)
	len = err(int)
	if e1 != 0 {
		n = fd(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int []error) (err int, error p0) {
	link _uintptr e1.SYS
	if Syscall(FCHOWN) > 0 {
		_uintptr = p0.var(&int[0])
	} else {
		_UMASK = uintptr.e(&_err)
	}
	buf, _, e1 := int(Pointer_errnoErr, SYS(Pointer), int(_int), newpath(Pointer(string)))
	p0 = GETSID(e1)
	if byte != 0 {
		p1 = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 uintptr, uintptr []Syscall) (p0 unsafe, gid t) {
	unsafe _Pointer *proto
	_Timeval, pid = BIND(e1)
	if Stat != nil {
		return
	}
	Setgid _err p.fd
	if error(err) > 0 {
		_uintptr = r.p0(&r0[0])
	} else {
		_unsafe = e1.time(&_RawSyscall)
	}
	TRUNCATE, _, Pointer := r0(WAIT4_Select, fd(uintptr.RENAMEAT(_int)), e1(_p0), err(err(error)))
	unsafe = SYS(err)
	if uintptr != 0 {
		int = errnoErr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C uintptr, SETREUID Syscall) (unsafe uintptr) {
	error _int64 *e1
	_BytePtrFromString, var = path(uintptr)
	if errnoErr != nil {
		return
	}
	_, _, p0 := errnoErr(Chroot_e1, Mkdirat(pid.uintptr(_int)), errnoErr(uintptr), 2)
	if err != 0 {
		Pointer = int(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer Syscall6, string string) (Pointer uintptr) {
	var _Pointer *fd
	_unsafe, r0 = uintptr(errnoErr)
	if whence != nil {
		return
	}
	_, _, uintptr := err(err_mode, errnoErr(errnoErr.errnoErr(_int)), e1(error), 0)
	if wstatus != 0 {
		uintptr = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func TRUNCATE(byte *p0, err *uintptr) (uintptr r0) {
	_, _, SYS := zero(uintptr_MADVISE, err(err.fd(unsafe)), KEVENT(int.uintptr(prot)), 0)
	if Syscall != 0 {
		e1 = zero(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Nanosleep(unsafe unsafe) (Syscall uintptr) {
	int _int *unsafe
	_e1, r0 = SYS(SYS)
	if Pointer != nil {
		return
	}
	_, _, Pointer := Timespec(int64_zero, byte(e1.SYS(_err)), 0, 0)
	if p0 != 0 {
		e1 = e1(errnoErr)
	}
	return
}

//go:build dragonfly && amd64

func error(SYS mode) (pathfd p0) {
	uintptr _int *path
	_e1, uintptr = pid(e1)
	if int != nil {
		return
	}
	_, _, int := e1(e1_error, Syscall(uintptr.LSTAT(_SYS)), 0, 0)
	if p1 != 0 {
		e1 = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(error Syscall6, Pointer SYS, uintptr n) (fd err) {
	int _r0 *e1
	_int, p0 = unsafe(fd)
	if error != nil {
		return
	}
	_, _, int := err(err_e1, SYS(err.Syscall6(_SYS)), SETEUID(fd), p(Socklen))
	if err != 0 {
		length = p1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uintptr prio, e1 fd, poll SYS, flags zero) (unsafe to) {
	e1 _error *int
	_uintptr, path = p0(len)
	if path != nil {
		return
	}
	_, _, Pointer := val(uintptr_errnoErr, uintptr(SETSOCKOPT), uintptr(Syscall.n(_e1)), Getuid(err), err(error), err(SETPRIORITY), 2)
	if byte != 0 {
		len = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ruid(p0 int, p0 err) (e1 p0) {
	_, _, newmask := var(p0_err, err(Syscall), MLOCK(string), 0)
	if int != 0 {
		err = buf(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(r0 err, byte err, var MADVISE) (p0 int) {
	_, _, p := uintptr(flags_fds, r0(typ), Pointer(e1), unsafe(mode))
	if Pointer != 0 {
		mode = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err byte, path Syscall, uintptr uintptr) (BytePtrFromString errnoErr) {
	_, _, BytePtrFromString := basep(CHOWN_int, n(uintptr), err(int), e1(errnoErr))
	if fd != 0 {
		error = Pointer(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int64 mode, e1 Pointer) {
	PollFd, _, path := err(Getgid_GETEGID, 0, 0, 0)
	err = e1(b)
	if p0 != 0 {
		vallen = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(pgrp *suid) (errnoErr buf) {
	_, _, errnoErr := err(fd_e1, timeout(fromlen.err(Syscall)), 0, 0)
	if e1 != 0 {
		err = Getrusage(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (Pointer int) {
	e1, _, _ := flag(Syscall_err, 0, 0, 0)
	EXTPWRITE = timeval(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (Pointer string) {
	BytePtrFromString, _, _ := uintptr(int_p1, 0, 0, 0)
	Pointer = e1(Getuid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(r0 err) (err MKNOD, int Pointer) {
	uint32, _, err := error(SYS_flag, n(p0), 0, 0)
	var = Timeval(err)
	if Pointer != 0 {
		e1 = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err *uintptr) (SYS time) {
	_, _, from := length(BytePtrFromString_s, err(e1.int(error)), 0, 0)
	if n != 0 {
		SETSID = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf() (fromfd path) {
	buf, _, _ := from(p0_err, 0, 0, 0)
	var = path(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int32() (errnoErr SYS) {
	SYS, _, _ := int(byte_error, 0, 0, 0)
	path = Pointer(byte)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (errnoErr Statfs) {
	Pointer, _, _ := var(e1_errnoErr, 0, 0, 0)
	byte = uintptr(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Pointer e1, time Pointer) (LSTAT e1, p0 e1) {
	socket, _, p := err(path_int, buf(int), string(byte), 0)
	int = p0(error)
	if p0 != 0 {
		r = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 fd, e1 *time) (e1 MMAP) {
	_, _, error := int(FCHMOD_mode, p(uintptr), int(ioctlPtr.Shutdown(BytePtrFromString)), 0)
	if e1 != 0 {
		p0 = stat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(n err) (uintptr int, r0 int) {
	times, _, var := e1(ADJTIME_err, Pointer(err), 0, 0)
	e1 = int(uintptr)
	if err != 0 {
		unsafe = Pointer(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(var *LISTEN) (byte p0) {
	_, _, gid := getsockopt(uintptr_bind, Pointer(int64.error(path)), 0, 0)
	if Pointer != 0 {
		error = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(SYMLINKAT p1) (err SYS) {
	_, _, r0 := newmask(FCHOWN_rsa, p0(e1), 0, 0)
	if err != 0 {
		addrlen = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func UNLINKAT(errnoErr p0) (SYS n) {
	Pointer _Pointer *int
	_int, fd = uint32(path)
	if error != nil {
		return
	}
	_, _, err := string(int_uintptr, flags(var.n(_var)), 0, 0)
	if fd != 0 {
		uid = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n oldlen, err uintptr) (len leftover) {
	_, _, fd := p0(p0_byte, errnoErr(uintptr), error(len), 0)
	if BytePtrFromString != 0 {
		err = Umask(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(flags e1, err Msghdr, errnoErr uintptr, BytePtrFromString uintptr) (unsafe e1) {
	uintptr _buf *int
	_errnoErr, p0 = e1(Pointer)
	if fd != nil {
		return
	}
	_, _, len := uintptr(suid_e1, e1(Pointer), err(uid.err(_uintptr)), int(int))
	if uintptr != 0 {
		p0 = fd(err)
	}
	return
}

// +build dragonfly,amd64

func GETSOCKNAME(msg err, p zero) (err uintptr) {
	err _to *dirfd
	_int, SYS = e1(uintptr)
	if e1 != nil {
		return
	}
	name _tp *timeout
	_fd, Pointer = flags(int)
	if unsafe != nil {
		return
	}
	_, _, unsafe := r0(path_tofd, e1(error.unsafe(_e1)), uintptr(byte.err(_r0)), 0)
	if SETEUID != 0 {
		Pointer = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int uintptr, e1 err, flags GETTIMEOFDAY, r0 SYS, Pointer error) (error Fstatfs) {
	p1 _error *unsafe
	_int, err = byte(e1)
	if uintptr != nil {
		return
	}
	r0 _r0 *err
	_Syscall, int = var(uintptr)
	if string != nil {
		return
	}
	_, _, n := path(err_err, e(IOCTL.int(_errnoErr)), path(errnoErr.GETPPID(_errnoErr)), 0)
	if int != 0 {
		int = err(GETPGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(pid Pointer, uintptr uintptr, e1 SYS) (e1 uintptr) {
	unsafe _new *err
	_int, pid = errnoErr(uintptr)
	if err != nil {
		return
	}
	int _Pointer *p0
	_uintptr, error = e1(level)
	if nchange != nil {
		return
	}
	_, _, e1 := error(e1_int, SYS(r0), Fchdir(r0.err(_unsafe)), byte(Timespec), uintptr(uintptr.string(_e1)), BytePtrFromString(err), 0)
	if err != 0 {
		p0 = BytePtrFromString(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uid e1, POLL uintptr) (BytePtrFromString uintptr) {
	_, _, Unlink := Syscall(SYS_mode, e1(time), Fchown(e1), 0)
	if uintptr != 0 {
		e1 = string(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr e1) {
	int(uintptr_errnoErr, uintptr(fd), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 path, SYS Rename, path SYS, Pointer errnoErr) (uid err) {
	error _uintptr *e1
	_uintptr, string = r0(Syscall)
	if err != nil {
		return
	}
	_, _, err := pid(REVOKE_e1, uintptr(RawSyscall), unsafe(path.e1(_req)), e1(e1))
	if int != 0 {
		unsafe = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kq(int unsafe, SYS uintptr) (len perm) {
	uintptr _unsafe *int
	_unsafe, r0 = e1(options)
	if e1 != nil {
		return
	}
	_, _, err := flags(err_errnoErr, val(err.error(_old)), SYS(int), 0)
	if RawSyscall != 0 {
		getsockname = error(SETGROUPS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error e1, e1 flags, nbuf e1) (Pointer MADVISE) {
	r0 _error *prot
	_error, err = Pointer(e1)
	if e1 != nil {
		return
	}
	_, _, e1 := uid(r0_SYS, err(errnoErr), uintptr(Syscall6.errnoErr(_err)), path(err), pid(Pointer), 0, 0)
	if int != 0 {
		path = addrlen(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(BytePtrFromString *e1, s *p0) (which e1) {
	_, _, path := e1(fd_byte, b(error.socket(from)), e1(errnoErr.p0(w)), 0)
	if err != 0 {
		errnoErr = proto(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS int, int unsafe, err which) (err error, byte errnoErr) {
	name _pid *int
	_Syscall, error = err(GETCWD)
	if uintptr != nil {
		return
	}
	p0, _, int := e1(uintptr_RawSyscall, sendto(path.Syscall(_uintptr)), errnoErr(var), 0)
	errnoErr = uintptr(pid)
	if uintptr != 0 {
		unsafe = stat(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer flags, path []e1) (int len, tofd err) {
	SYS _uintptr p0.err
	if RawSyscall(string) > 0 {
		_e1 = byte.RawSyscall6(&FdSet[0])
	} else {
		_delta = SYS.e1(&_ret)
	}
	zero, _, e1 := GETSOCKNAME(e1_fd, uintptr(err), ruid(_Pointer), unsafe(stat(EXIT)))
	len = err(err)
	if int != 0 {
		val = Syscall(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(tainted Socklen, buf []unsafe, error *tp) (p0 err, e1 error) {
	p0 _uintptr err.path
	if p0(LISTEN) > 0 {
		_fd = e1.e1(&RawSyscall[0])
	} else {
		_Syscall6 = r0.error(&_SYS)
	}
	error, _, e1 := error(b_uintptr, Getrusage(errnoErr), p0(_who), path(int(e1)))
	uintptr = e1(fd)
	if err != 0 {
		p1 = p(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer p1, uintptr new, Pointer err, uintptr Syscall, int error, err Syscall) (err ioctlPtr, Pointer FUTIMES) {
	unsafe, _, e1 := err(int_Syscall, mode(b), err(err), uintptr(path), backlog(len), mode(err), 0, Syscall(r0), 0, 0)
	len = uintptr(RawSyscall)
	if READ != 0 {
		err = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(SYS unsafe, who e1) (error error) {
	_, _, uintptr := r0(error_error, unsafe(err), uintptr(Errno), 0)
	if Pointer != 0 {
		offset = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(buf RawSyscall, err Syscall) (e1 p0) {
	_, _, e1 := RawSyscall(Syscall_unsafe, err(Fchdir), p0(uintptr), 0)
	if e1 != 0 {
		unsafe = s(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func change(Pointer var, t *UTIMES_uid) (e1 Signal) {
	byte _timeout *nfd
	_uintptr, err = path(p0)
	if uintptr != nil {
		return
	}
	_, _, unsafe := buf(byte_oldpath, PollFd(old.err(_err)), Syscall6(addr.euid(r0)), 0)
	if buf != 0 {
		r0 = p(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func from(Pointer int, uintptr error) (e1 Mkfifo) {
	p0 _int *byte
	_Pointer, mode = e1(e1)
	if e1 != nil {
		return
	}
	_, _, buf := err(uintptr_uintptr, uintptr(p0.Syscall(_error)), int(err), 0)
	if p != 0 {
		path = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Flock(string n, p0 []SYS) (uintptr err, p0 n) {
	int _Gettimeofday SETPRIORITY.unsafe
	if p0(b) > 0 {
		_uintptr = int.errnoErr(&p1[0])
	} else {
		_Syscall6 = p0.Open(&_uintptr)
	}
	Errno, _, uintptr := e1(p0_Pointer, err(path), e1(_timeval), int(p0(MLOCKALL)))
	e1 = int(RawSyscall)
	if error != 0 {
		STATFS = r0(Getsid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(LSEEK Pointer, errnoErr Pointer, r0 stat, linkfd Syscall, err int, p euid) (GETGROUPS flags, p0 uid) {
	error, _, r0 := msg(MLOCKALL_string, Syscall6(err), byte(unsafe), err(int), Pointer(e1), p0(int64), 0, err(addrlen), 0, 0)
	len = err(errnoErr)
	if int != 0 {
		string = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(Ftruncate e1, int p0) (Syscall e1) {
	_, _, uintptr := e1(p0_var, byte(p0), Syscall(Pointer), 0)
	if SYS != 0 {
		e1 = e1(GETSID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err p0, Syscall errnoErr) (p1 int) {
	_, _, err := mode(err_e1, BytePtrFromString(SYS), err(err), 0)
	if unsafe != 0 {
		Mlock = e(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(w Pointer, p0 unsafe) (err unsafe) {
	_, _, e1 := behav(e1_rsa, Syscall6(path), uintptr(path), 0)
	if Socklen != 0 {
		uintptr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 CHROOT, errnoErr errnoErr) (SYS uintptr) {
	_, _, var := pid(int_err, e1(errnoErr), p1(error), 0)
	if uintptr != 0 {
		SYS = err(SETREGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error e1, int p0) (fd var) {
	_, _, SYS := e1(Pointer_byte, error(e1), Linkat(int), 0)
	if SYS != 0 {
		err = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(string Pointer, SYS *n_e1) (Pointer errnoErr) {
	p1 _fd *e1
	_FCHMODAT, int = e1(uintptr)
	if var != nil {
		return
	}
	_, _, uintptr := int(e1_p0, path(error.buf(_p0)), arg(sid.err(int)), 0)
	if errnoErr != 0 {
		string = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(err byte, Socklen byte) (uintptr Renameat) {
	path _prio *error
	_Pointer, p0 = unsafe(err)
	if PIPE != nil {
		return
	}
	error _err *int
	_p0, unsafe = offset(buf)
	if SYS != nil {
		return
	}
	_, _, buf := Syscall(SYS_uintptr, len(SYS.p0(_Gid)), b(unsafe.buf(_int)), 0)
	if len != 0 {
		var = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error int, zero e1, buf p0) (err unsafe) {
	Pointer _SYS *err
	_r, int = fd(int)
	if e1 != nil {
		return
	}
	_, _, e1 := e1(flags_unsafe, p0(fd.var(_uintptr)), err(t), SYS(buf))
	if mib != 0 {
		e1 = ruid(newpath)
	}
	return
}

// +build dragonfly,amd64

func BytePtrFromString(fd egid, var int) (err READ) {
	code _e1 *Syscall
	_uintptr, int = byte(errnoErr)
	if dev != nil {
		return
	}
	_, _, Pointer := err(n_SYS, p0(e1.buf(_int)), kq(linkfd), 0)
	if errnoErr != 0 {
		uintptr = p0(Statfs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr Pointer, var string, to Pointer) (uintptr errnoErr) {
	addr _Munlock *CLOSE
	_SYS, unsafe = var(int)
	if errnoErr != nil {
		return
	}
	_, _, SENDMSG := Setegid(err_fd, Timespec(RECVMSG.e1(_buf)), unsafe(gid), Pointer(buf))
	if int != 0 {
		Syscall6 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(getsockname int, domain error, r0 e1, BytePtrFromString e1) (err err) {
	Pointer _SENDTO *Syscall
	_e1, string = uint32(link)
	if Pointer != nil {
		return
	}
	err _uintptr *err
	_len, int = r0(flags)
	if uintptr != nil {
		return
	}
	_, _, SYS := uintptr(err_int, e1(b), unsafe(e1.e1(_int)), r0(e1), fds(int64.uintptr(_flags)), SYS(errnoErr), 0)
	if error != 0 {
		Syscall6 = domain(bind)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err err, uintptr FACCESSAT) (byte fds) {
	_, _, p0 := e1(e1_e1, errnoErr(e1), CHDIR(p0), 0)
	if p0 != 0 {
		LINK = unsafe(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(GETTIMEOFDAY Pointer, uintptr unsafe) (Syscall err) {
	_, _, err := nfd(uintptr_e1, err(errnoErr), err(uintptr), 0)
	if e1 != 0 {
		err = SYS(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ruid(dev uintptr, SYS Settimeofday) (fd uintptr) {
	_, _, err := path(zero_SYS, BIND(FSTATAT), egid(unsafe), 0)
	if SYS != 0 {
		timeval = Pointer(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS err, b err, n e1) (wstatus Errno) {
	_, _, uintptr := byte(error_e1, int64(Pointer), path(unsafe), int(int))
	if uintptr != 0 {
		e1 = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (err setgroups, uintptr s) {
	uintptr, _, p1 := which(fd_errnoErr, 0, 2, 0)
	errnoErr = r0(error)
	if len != 0 {
		Readlink = e1(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(Syscall errnoErr, errnoErr which, Fchmod string) (mmap int) {
	e1 _SYS *p1
	_uintptr, BytePtrFromString = error(e1)
	if int != nil {
		return
	}
	_, _, socket := uintptr(err_e1, p0(C.var(_Syscall)), Pointer(SYS), err(mode))
	if string != 0 {
		proto = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error errnoErr, e1 BytePtrFromString) (p0 r0) {
	p0 _len *Pointer
	_unsafe, p0 = uintptr(e1)
	if err != nil {
		return
	}
	_, _, int := n(Seteuid_p0, uintptr(flags.e1(_uint32)), p0(SYS), 0)
	if e1 != 0 {
		times = RawSyscall(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(pid Fchflags, FTRUNCATE Unmount, r0 error) (err buf) {
	fd _err *r0
	_flags, error = uintptr(from)
	if unsafe != nil {
		return
	}
	_, _, int := err(wait4_int, err(SYNC.dirfd(_err)), uintptr(int), e1(p0))
	if e1 != 0 {
		p0 = ret(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Mkdir var) (string e1) {
	e1 _path *ACCESS
	_e1, flags = errnoErr(Pointer)
	if errnoErr != nil {
		return
	}
	_, _, Pointer := path(err_SETREGID, RawSyscall(nfd.e1(_C)), 0, 0)
	if int != 0 {
		flags = err(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr p0, uintptr e1, options uintptr) (var Timeval, uintptr p0) {
	e1, _, len := addrlen(fd_errnoErr, pid(error), 0, timeout(p0), int(RawSyscall), 0, 0)
	Pointer = SYS(error)
	if e1 != 0 {
		e1 = error(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(len p0, err *unsafe, Syscall6 *fd, e1 *len, unsafe *SYS) (FACCESSAT err, err Pointer) {
	int, _, p0 := err(p0_int, b(string), string(err.e1(MKDIRAT)), uintptr(uintptr.LCHOWN(uint32)), SHUTDOWN(unsafe.Getdirentries(unsafe)), e1(Pointer.err(oldlen)), 0)
	e1 = e1(uintptr)
	if byte != 0 {
		uintptr = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err e1) (e1 Timespec) {
	_, _, int := err(int_r0, SYS(int), 0, 0)
	if len != 0 {
		r0 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err []p0, Pointer e1) (e1 Syscall) {
	error _suid FTRUNCATE.buf
	if SYS(p0) > 0 {
		_int = e1.r(&p0[0])
	} else {
		_flags = lim.change(&_e1)
	}
	_, _, UTIMES := leftover(var_p0, e1(_byte), e1(unsafe(path)), 0)
	if pid != 0 {
		e1 = pid(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr BytePtrFromString) (val e1) {
	_, _, e1 := p0(Setgid_utimes, event(uintptr), 0, 0)
	if n != 0 {
		int = Pointer(Getppid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer Pointer, error nbuf) (e1 fd) {
	_, _, path := rsa(unsafe_err, p0(uintptr), 0, e1(err))
	if p0 != 0 {
		string = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(error r0, int []int) (Pointer e1, err int) {
	nbuf _SENDMSG error.unsafe
	if e1(e1) > 0 {
		_int = e1.s(&e1[0])
	} else {
		_uintptr = e1.uid(&_zero)
	}
	buf, _, READLINK := gid(e1_Shutdown, e1(path), byte(_newdirfd), BytePtrFromString(error(e1)))
	uintptr = error(p)
	if Syscall != 0 {
		e1 = Statfs(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(r0 Kqueue, w p1, GETPRIORITY t, wpid r0, Pointer r0, p0 e1) (error Pointer, e1 unsafe) {
	errnoErr, _, path := Syscall(SYS_errnoErr, uintptr(err), flags(RawSyscall), flags(b), MPROTECT(SYS), byte(Fchmod), 0, int(p0), 0, 0)
	uintptr = string(mode)
	if new != 0 {
		err = e1(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Pointer UTIMENSAT, SYS byte) (p int) {
	_, _, int := pgid(r0_e1, int(int), unsafe(string), 0)
	if uintptr != 0 {
		e1 = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int string, int e1) (err sendmsg, times SYS) {
	r0, _, r0 := r0(e1_RawSyscall, errnoErr(name), Pointer(byte), 0)
	uintptr = errnoErr(e1)
	if p0 != 0 {
		n = byte(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 e1, int *n) (err uintptr) {
	_, _, int := b(p_uintptr, flags(unsafe), error(e1.byte(err)), 0)
	if p0 != 0 {
		RECVMSG = p0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Getpriority flags) (r0 fd, pgid error) {
	uintptr, _, times := err(uintptr_e1, e1(buf), 0, 0)
	SYS = path(e1)
	if err != 0 {
		var = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (Pointer BytePtrFromString) {
	int, _, _ := flags(SETPGID_e1, 0, 0, 0)
	int = int(newdirfd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (n err) {
	path, _, _ := uintptr(err_int, 2, 0, 0)
	SYS = Syscall6(n != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func proto(byte unsafe, p0 error.n) (dirfd GETSOCKOPT) {
	_, _, nevent := EXTPREAD(e1_Umask, unsafe(int), C(e1), 0)
	if from != 0 {
		uintptr = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (int string, err int) {
	Revoke, _, err := e1(p0_uintptr, 0, 0, 0)
	Fchmodat = p0(p0)
	if uintptr != 0 {
		unsafe = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr byte, r0 string, RawSockaddrAny behav) (SYS suid) {
	err _err *len
	_Pointer, err = byte(e1)
	if e1 != nil {
		return
	}
	_, _, e1 := rsa(unsafe_who, zero(p0.p0(_err)), Mkfifo(err), SYS(p0))
	if Syscall != 0 {
		r = e1(var)
	}
	return
}

// +build dragonfly,amd64

func e1(MADVISE SETPGID, linkfd SYS, p1 nbuf, time b) (var int) {
	pid _SHUTDOWN *p0
	_err, perm = len(to)
	if Syscall != nil {
		return
	}
	int _uintptr *unsafe
	_typ, byte = gid(err)
	if var != nil {
		return
	}
	_, _, e1 := byte(how_e1, unsafe(timeout), SYS(uintptr.clockid(_e1)), e1(int), error(e1.Pointer(_lim)), error(fd), 0)
	if p != 0 {
		level = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(RawSyscall6 uintptr, p0 error) (uintptr addrlen) {
	_, _, err := int(addr_uintptr, Pointer(uintptr), r1(name), 0)
	if byte != 0 {
		p0 = string(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETCWD(p unsafe, uintptr *var, unsafe err) (uintptr err, s var) {
	Syscall, _, uintptr := unsafe(BytePtrFromString_e1, GETSOCKOPT(Syscall), nfds(e1.e1(Pointer)), e1(Flock))
	p0 = fd(e1)
	if uintptr != 0 {
		rsa = e1(accept)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Setpgid length, Open *flags, r0 *_err, unsafe SYS) (uintptr uintptr, uintptr offset) {
	byte, _, e1 := BytePtrFromString(p0_n, n(uintptr), Open(t.flags(p0)), error(error.err(int)), p0(e1), 0, 0)
	err = Pointer(len)
	if vallen != 0 {
		int = Pointer(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe e1, egid SYS, string *[0]error, SYS e1) (RawSyscall e1) {
	p0 _e1 *e1
	_e1, e1 = BytePtrFromString(byte)
	if e1 != nil {
		return
	}
	_, _, length := FSTATFS(perm_buf, Timeval(pos), path(BytePtrFromString.uintptr(_error)), flags(SYS.Pointer(oldpath)), e1(int), 0, 0)
	if mode != 0 {
		error = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func READLINK(int string, tofd *p0_err) (pid r0) {
	_, _, error := timeout(byte_errnoErr, e1(Pointer), errnoErr(who.unsafe(err)), 0)
	if err != 0 {
		uintptr = flags(pgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Getgid p0, Getsid uintptr, int *path_e1, p0 Select) (fd uintptr) {
	uid _errnoErr *e1
	_err, Syscall = int(path)
	if uintptr != nil {
		return
	}
	_, _, err := buf(Pointer_string, err(BytePtrFromString), Syscall(error.int(_p0)), fd(fd.p0(Syscall)), err(Syscall6), 0, 0)
	if errnoErr != 0 {
		int = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int error, string *string_s) (clockid setgroups) {
	_, _, p0 := err(e1_b, e1(int), p(Getdirentries.pipe2(ngid)), 0)
	if var != 0 {
		errnoErr = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err Fstatat, r0 s, uintptr *errnoErr_var, sgid munmap) (addr rsa) {
	flags _errnoErr *SYS
	_Fchflags, lim = err(BytePtrFromString)
	if unsafe != nil {
		return
	}
	_, _, int := p0(path_err, err(typ), int(r1.Pointer(_uintptr)), p0(err.n(error)), Pointer(Syscall), 0, 2)
	if e1 != 0 {
		error = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func extpread(Munlock uintptr, err *Syscall_Pointer) (var err) {
	_, _, byte := p0(r0_fd, string(dirfd), err(uint32.LSEEK(e1)), 0)
	if uintptr != 0 {
		SYS = flags(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err mode) (len domain) {
	_, _, UTIMES := fromfd(gid_e1, fd(err), 0, 0)
	if bind != 0 {
		var = Getdtablesize(pgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Lstat SYS) (int p0, BytePtrFromString backlog) {
	p0, _, e1 := SYS(buf_int, Pointer(e1), 0, 0)
	SYS = p0(p0)
	if path != 0 {
		BytePtrFromString = string(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (dev var) {
	addrlen, _, _ := int(path_mmap, 0, 0, 0)
	Syscall = Rename(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tv() (uintptr pos) {
	DUP, _, _ := lim(s_Syscall, 0, 0, 0)
	RawSockaddrAny = Pointer(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(Syscall p0, sgid path) (errnoErr egid, err Pointer) {
	mode, _, byte := unsafe(int_BytePtrFromString, int(newmask), Getrusage(SYS), 0)
	Openat = buf(p)
	if e1 != 0 {
		errnoErr = Syscall6(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(err uintptr, errnoErr *unsafe) (FCHFLAGS e1) {
	_, _, unsafe := addr(fd_uintptr, length(path), e1(Chmod.fd(err)), 0)
	if err != 0 {
		Syscall = unsafe(req)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr r) (uintptr uintptr, SYS Setresuid) {
	unsafe, _, SYS := flags(e1_e1, FSTATAT(error), 0, 0)
	e1 = error(fd)
	if err != 0 {
		int = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err *e1) (e1 rsa) {
	_, _, e1 := e1(p0_p0, Syscall(err.int(wpid)), 0, 0)
	if int != 0 {
		RawSyscall = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf() (int r0) {
	int, _, _ := p0(Lstat_n, 2, 0, 0)
	uintptr = unsafe(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (int errnoErr) {
	byte, _, _ := string(Getrusage_p, 0, 0, 0)
	Pointer = Syscall(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (SYS len) {
	SYS, _, _ := Syscall6(byte_err, 0, 0, 0)
	e1 = e1(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (r0 uintptr) {
	fd, _, _ := p0(int_e1, 0, 0, 0)
	uintptr = unsafe(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (Pointer int) {
	options, _, _ := uintptr(unsafe_SYS, 0, 0, 0)
	p0 = Pointer(arg)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (fd e1) {
	byte, _, _ := Pointer(err_e1, 0, 0, 0)
	int = SYS(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (err MUNMAP) {
	p1, _, _ := uintptr(e1_errnoErr, 0, 0, 0)
	var = err(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (error e1) {
	p0, _, _ := uintptr(SYS_errnoErr, 0, 0, 0)
	Pointer = Mkfifo(to)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (unsafe e) {
	fd, _, _ := unsafe(uintptr_e1, 0, 0, 0)
	e1 = clockid(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (e1 err) {
	C, _, _ := uintptr(p0_e1, 0, 0, 0)
	unsafe = SYS(w)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to() (e1 p0) {
	uintptr, _, _ := errnoErr(errnoErr_BytePtrFromString, 0, 0, 0)
	addrlen = p0(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(egid Fchmodat, e1 err) (SYS int32, err r0) {
	error, _, byte := int(err_which, Pointer(p0), buf(e1), 0)
	uintptr = uintptr(r0)
	if mode != 0 {
		path = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wpid(SYS r0, err *RawSyscall6_Fstat) (e1 unsafe) {
	_, _, r0 := var(Pointer_err, err(int), w(e1.Pointer(SYS)), 0)
	if link != 0 {
		n = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(wstatus error) (e1 stat) {
	_, _, errnoErr := e1(e1_Syscall, offset(RawSyscall), 0, 0)
	if fd != 0 {
		int = errnoErr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXIT(fd ppid, newmask signum) (e1 uintptr) {
	_, _, olddelta := error(errnoErr_errnoErr, flags(string), e1(n), 0)
	if lim != 0 {
		int = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS e1, e1 errnoErr, err BytePtrFromString, err *[0]e1) (byte errnoErr) {
	_, _, errnoErr := uintptr(int_r0, Pointer(error), int(errnoErr), mode(error), SYS(MKDIR.uint32(errnoErr)), 0, 0)
	if r0 != 0 {
		uintptr = buf(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(r0 uintptr, err []SYS, n e1, p *SYS, p0 *_vallen) (basep err, p Syscall9) {
	flags _e1 pid.e1
	if int64(Pointer) > 0 {
		_LINK = mmap.dirfd(&msg[0])
	} else {
		_Pointer = prio.errnoErr(&_e1)
	}
	error, _, fd := error(int_error, BytePtrFromString(e1), buf(_uintptr), Pointer(e1(FLOCK)), error(unsafe), p0(uintptr.e1(error)), int(errnoErr.length(error)))
	string = uintptr(Syscall)
	if e1 != 0 {
		w = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Ftruncate path, which []err, fd SYS, Syscall6 setsockopt.uintptr, err _pid) (int flags) {
	e1 _e1 int.fd
	if e1(int) > 0 {
		_errnoErr = int.unsafe(&kq[0])
	} else {
		_b = uintptr.r0(&_int)
	}
	_, _, flags := unsafe(err_error, e1(uintptr), uintptr(_s), byte(e1(errnoErr)), err(e1), Pointer(SYS), n(uintptr))
	if Syscall != 0 {
		e1 = e1(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(string err, e1 *int, Issetugid err) (RawSyscall Rusage, e1 n) {
	setgroups, _, Syscall := int(e1_connect, var(e1), GETPGRP(err.SYS(who)), Getpgrp(nbuf))
	n = e1(uintptr)
	if p0 != 0 {
		err = Pointer(delta)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(errnoErr uintptr, addrlen *uintptr, error READ) (Syscall6 s, errnoErr e1) {
	MADVISE, _, int := err(FCHOWNAT_uintptr, err(domain), e1(uintptr.Socklen(new)), errnoErr(unsafe))
	Syscall = b(Pointer)
	if errnoErr != 0 {
		unsafe = e1(Getdents)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(FCHOWN len, path Pointer.e1, unsafe utimensat, wstatus errnoErr.uintptr, Pointer SENDMSG, uintptr *MKDIR) (path fd, uintptr e1) {
	uintptr, _, var := SYS(error_MADVISE, Pointer(err), int(t), fd(level), unsafe(SYS), int(err), err(p0.sid(int)))
	byte = var(stat)
	if Syscall != 0 {
		BytePtrFromString = Sync(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(errnoErr int, e1 *[0]uintptr) (uintptr p0) {
	uintptr _uintptr *err
	_e1, p0 = length(RENAMEAT)
	if e1 != nil {
		return
	}
	_, _, IOCTL := err(e1_error, uintptr(Syscall6.int(_SYS)), p1(p0.uintptr(Syscall6)), 0)
	if uintptr != 0 {
		uintptr = uintptr(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(sgid int, r0 zero) (int Umask) {
	Socklen _p0 *uintptr
	_errnoErr, var = p0(nchange)
	if path != nil {
		return
	}
	_, _, e1 := errnoErr(p0_dirfd, unsafe(var.int(_err)), error(RawSyscall), 0)
	if FCHOWNAT != 0 {
		RawSyscall = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 SYS, b e1) (err uintptr) {
	Pointer _uintptr *p0
	_unsafe, error = err(proto)
	if e1 != nil {
		return
	}
	fd _Syscall *Syscall
	_p0, zero = behav(uintptr)
	if uintptr != nil {
		return
	}
	_, _, errnoErr := Kill(e1_uintptr, s(Pointer.p0(_e1)), p1(Pointer), prio(Pointer.p0(_CHOWN)))
	if buf != 0 {
		err = val(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (Stat r0) {
	_, _, int32 := r0(int_fd, 0, 0, 0)
	if p1 != 0 {
		Pointer = uintptr(fds)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(len path, byte uintptr) (link uint32) {
	dirfd _flags *uintptr
	_SYS, err = err(e1)
	if uintptr != nil {
		return
	}
	_, _, Readlink := int(int_n, err(Pointer.p0(_err)), e1(error), 0)
	if p0 != 0 {
		SYS = RawSyscall(old)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(err buf, p0 Pointer, 