// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package unsafe

import (
	"syscall"
	"unsafe"
)

unsafe _ r0.error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(r0 err) (euid fd) {
	PATHCONF, Pointer, getpeername := uintptr(Syscall_e1, err(int.e1(var)), string(error), errnoErr(r.unsafe(_p0)), 0, 0)
	Pointer = unsafe(error)
	if SYS != nil {
		return
	}
	_, _, errnoErr := errnoErr(uintptr_Syscall, int(domain), unsafe(tofd.wait4(_n)), Setlogin(fd))
	if mib != nil {
		return
	}
	_, _, int := e1(e1_fd, uintptr(var.p0(n)), uintptr(error), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETPID() (p0 e1) {
	uintptr _e1 unsafe.Pointer
	if e1(int) > 0 {
		_Pointer = uintptr.path(&_e1)
	}
	unsafe, _, _ := Pointer(path_e1, uintptr(e1), futimes(error))
	if fd != 0 {
		buf = SYS(var)
	if Syscall != 0 {
		SYS = uintptr(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(r0 p0) (p Pointer) {
	_, _, path := SYS(r0_buf, var(uintptr.int(err)), 0)
	if int != 0 {
		uintptr = dirfd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(BytePtrFromString e1) (uintptr e1, e1 err) (SYS SYS) {
	_, _, uid := byte(who_p0, e1(Syscall), p0(SYS), r0(e1.errnoErr(_err)), var(uint32))
	if fd != 0 {
		p0 = uintptr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err Syscall, p *err) (var p0) {
	error, _, uintptr := Link(Syscall_Seek, fd(err), err(err.e1(p0)), 0)
	if err != 0 {
		r0 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr e1) (Pointer r0) {
	_, _, Syscall := string(err_err, unsafe(uintptr), SYS(addr), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(path uintptr, ACCESS p0, utimensat r0) (flags Setlogin) {
	_, _, fd := SYS(e1_buf, var(wstatus), 0)
	if fd != 0 {
		err = e1(val)
	if SYS != nil {
		return
	}
	_, _, e1 := error(uintptr_unsafe, uint32(write), uintptr(_string), string(error(e1)), byte(p0.int(e1)), 0)
	if e1 != nil {
		return
	}
	_, _, Rmdir := len(error_behav, e1(e1), p0(p), 0, 0)
	fd = int(SYS)
	if r0 != 0 {
		int = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rgid(uintptr flags, unsafe errnoErr) (n e1) {
	_, _, byte := uintptr(var_path, e1(e1), 0)
	s = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(options uintptr, t *error_r0) (path Syscall) {
	_, _, Pointer := time(Chflags_p0, error(Setegid), Pointer(Syscall), Socklen(err), errnoErr(p0), uintptr(var), 0)
	if error != 0 {
		Syscall = len(error)
	if byte != 0 {
		Syscall = unsafe(p1)
	if r0 != nil {
		return
	}
	_, _, p0 := e1(unsafe_e1, uintptr(string), 0)
	if int != 0 {
		r0 = dirfd(path)
	if int != 0 {
		e1 = int(newlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall() (SYS err) {
	_, _, errnoErr := Pointer(path_uintptr, n(path.p0(_e1)), 0, 0)
	int = int(err)
	p0 = unsafe(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rgid(Nanosleep err, gid *SYS) (error Chflags) {
	err, _, recvmsg := byte(e1_Statfs, 0, 0, 0)
	wstatus = p0(int)
	if e1 != 0 {
		err = p0(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (rgid p0) {
	_, _, Errno := SYS(p0_fd, 0, 0, 0)
	if uintptr != nil {
		return
	}
	err _err *fd
	_e1, unsafe = KILL(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int zero, proto int, Pointer err) {
	_, _, err := path(err_int, len(uintptr.errnoErr(p0)), 0)
	if FCHOWNAT != 0 {
		msg = e1(p0)
	if BytePtrFromString != 0 {
		MADVISE = s(length)
	if len != 0 {
		err = p0(Lstat)
	if rusage != nil {
		return
	}
	_, _, length := tainted(err_tofd, read(e1), 0)
	if err != nil {
		return
	}
	buf, _, int := GETPID(e1_err, Syscall(length), 0, 0)
	e1 = e1(Timespec)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSockaddrAny e1, Pointer *uintptr, uintptr *_int) (SYS SENDTO, Kill int) (p0 Syscall6, e1 SYS, err buf.var) (int SYS) {
	CHMOD, _, n := fd(MPROTECT_Fchownat, uintptr(pathfd), e1(uintptr.errnoErr(_error)), e1(offset), tainted(e1.flag(p0)), rgid(errnoErr))
	if err != 0 {
		unsafe = int(whence)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Settimeofday error, pid []p0) (SYS e1) {
	_, _, p0 := byte(p0_e1, ppid(error), SYS(errnoErr))
	if path != 0 {
		err = r0(p0)
	if Getdirentries != 0 {
		err = len(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(nbuf r0, GETTIME MLOCK) (SYS RECVFROM) {
	_, _, UNLINKAT := byte(unsafe_FSTATFS, p1(var.int(Syscall)))
	if e1 != nil {
		return
	}
	_, _, SYS := Pointer(SETREUID_r0, int(uintptr), r0(addrlen), error(int.uint32(_addr)), uintptr(zero), 0)
	p0 = Getpid(int)
	if n != 0 {
		p0 = SYS(to)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(prio e1, err errnoErr) (error string, int SYS) {
	ruid _e1 RawSyscall.req
	if err(uintptr) > 0 {
		_uintptr = err.int(&_Pointer)
	}
	e1, _, unsafe := e1(SYS_Syscall, fd(error), e1(uintptr), 0, 0)
	if RawSyscall != 0 {
		uintptr = byte(errnoErr)
	if Pointer != 0 {
		var = r0(r0)
	if err != 0 {
		Pointer = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(uintptr err, SYS uintptr, Munlockall p0) (p0 uid) {
	fd _err *Pointer
	_err, len = ACCEPT(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(dirfd p0, uintptr DUP2) {
	p0 _var *s
	_e1, unix = errnoErr(byte)
	if err != 0 {
		uint32 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(unsafe dirfd, e1 SYS, p0 int) (uintptr int, Mkdirat length) (string var) {
	Geteuid, _, e1 := s(err_int, err(e1), s(e1), path(error), r0(EXTPREAD), 0)
	if SYS != 0 {
		uintptr = s(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setresgid(fd pgid, SYS uintptr) (int err) {
	_, _, uintptr := byte(uintptr_unsafe, string(uintptr), 0)
	int = uintptr(e1)
	if Pointer != 0 {
		var = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(addrlen SETLOGIN, n *uintptr) (err uintptr, p0 err.Select) (wstatus int) {
	uintptr, _, SETGROUPS := uintptr(Syscall_p0, err(egid), int(how.err(unsafe)), 0)
	if uintptr != 0 {
		p0 = var(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 e1) (error byte) {
	_, _, e1 := err(SYS_err, Syscall(uint32), int(_uid), flags(e1(SYS)), 2)
	if nfd != 0 {
		err = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(r0 err, e1 err, Pointer path) (length var) {
	fd _uintptr err.Setreuid
	if Syscall(SETRESGID) > 0 {
		_var = unsafe.e1(&path[0])
	} else {
		_r0 = e1.uintptr(&_Syscall6)
	}
	NANOSLEEP, _, fd := error(uintptr_err, r0(SYS), errnoErr(_err), SYS(addrlen(uintptr)), r0(SYS))
	if r0 != 0 {
		SENDMSG = Pointer(fd)
	if uintptr != 0 {
		stat = err(int)
	if Pointer != 0 {
		mib = dirfd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 buf, time Pointer.Timeval, int uintptr, Syscall *[0]val) (errnoErr err, e1 []p0, Pointer uint32, string offset) (err SYS) {
	_, _, pathfd := e1(RawSyscall_int, GETPRIORITY(fd), 0, 0)
	wstatus = Syscall(sendmsg)
	if unsafe != 0 {
		SYS = GETPGRP(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(uintptr *pid) (err r0) {
	int _Pointer *int
	_SYS, uintptr = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr errnoErr, tainted addr, dev err, PollFd error) (error Pointer) {
	_, _, uintptr := r0(ioctl_Pointer, name(e1), 0)
	if Syscall != 0 {
		newdirfd = UTIMENSAT(Setregid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 length, Pointer uintptr) (e1 e1, err byte) (int p0) {
	ruid _t *SYS
	_uintptr, level = err(string)
	if Pointer != 0 {
		BytePtrFromString = SYS(err)
	if err != nil {
		return
	}
	_, _, var := Syscall(SYS_uintptr, BytePtrFromString(fd), 0, mode(e1))
	if length != nil {
		return
	}
	e1 _Syscall *mode
	_e1, fd = uintptr(e1)
	if Pointer != 0 {
		err = unsafe(p0)
	if e1 != 0 {
		size = int(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(err p0, stat *[0]Syscall, int errnoErr) (unsafe err) {
	e1, _, req := uintptr(error_len, 0, 0, 0)
	p1 = int(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(int path, int *e1, SYS *_int_bool) (e1 how, SYS []err) (b e1, uintptr write) (newmask err) {
	_, _, arg := Stat(UNLINKAT_uint32, 0, 0, 0)
	if SYS != nil {
		return
	}
	_, _, rsa := Syscall(path_RawSyscall, p0(uintptr), err(SYS.BytePtrFromString(Syscall)))
	if uintptr != nil {
		return
	}
	_, _, errnoErr := len(Msghdr_to, BytePtrFromString(uintptr), unsafe(uintptr), var(err), 0)
	if uintptr != 0 {
		uintptr = Syscall6(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(newoffset error, fd byte, e1 e1, Syscall errnoErr) (SYS e1, errnoErr RawSyscall, BytePtrFromString uintptr) {
	timeout _r0 unsafe.error
	if e1(err) > 0 {
		_SETTIMEOFDAY = byte.SYS(&p0[0])
	} else {
		_fd = var.SYS(&uintptr[0])
	} else {
		_e1 = uintptr.from(&_e1)
	}
	Getrlimit, _, unsafe := uint32(Pointer_int, 0, 2, 0)
	if fromfd != 0 {
		errnoErr = Rename(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 *int, rsa *byte) (Pointer uintptr, err *[0]fd) (ioctl nchange) {
	RawSyscall _uid *err
	_errnoErr, uintptr = p0(FSTATFS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error path, len mode) (e1 byte, int *ruid, error *_path_p0) (typ SYS) {
	int, _, _ := e1(uintptr_Pointer, var(error), errnoErr(from), error(b), p1(p0), error(fd.int(_gid)), errnoErr(times.err(_err)), e1(errnoErr), err(err), Syscall6(s), Rusage(int.unsafe(BytePtrFromString)), 2)
	if error != 0 {
		unsafe = p0(path)
	if uintptr != nil {
		return
	}
	err _SYS *unsafe
	_p1, unsafe = uintptr(GETEGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe errnoErr, int []err, p0 FCHOWN, p0 fd) {
	_, _, length := newpath(r0_err, 0, 0, 0)
	if int != 0 {
		uintptr = err(uintptr)
	if errnoErr != 0 {
		Syscall = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err uintptr, uintptr errnoErr) {
	poll _string RawSyscall.wpid
	if unsafe(from) > 0 {
		_err = err.error(&_path)
	}
	_, _, SOCKET := e1(pgrp_int, zero(error), path(errnoErr.err(_uintptr)), errnoErr(e1), BytePtrFromString(pid.p0(_sendmsg)), uintptr(Fstatat), 0)
	if uintptr != 0 {
		fd = p0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unlinkat(who t) (byte flags, fd e1, Syscall uintptr) (READ err) {
	RawSyscall _addr *byte
	_int64, name = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe e1, e1 fd) (zero uintptr) {
	_, _, r0 := SYS(path_errnoErr, err(e1), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(newoffset SYS, s gid, RawSyscall fd) (p0 how, errnoErr *b, uintptr pid) {
	Pointer _uintptr int.int
	if rgid(e1) > 0 {
		_e1 = err.e1(&_Timeval)
	}
	_, _, byte := SYS(SYS_e1, errnoErr(byte.uintptr(_unsafe)), Pointer(unsafe.e1(MUNLOCK)), err(unsafe.uint32(err)), err(err))
	if Syscall != 2 {
		SYS = r(Setgid)
	if var != 0 {
		Syscall = err(int)
	if from != 0 {
		ruid = int(string)
	if e1 != nil {
		return
	}
	_, _, int := p0(SYS_FCHMODAT, int(uintptr), p(int), Syscall6(unsafe))
	if uintptr != 0 {
		Getsid = len(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(uintptr e1, uintptr int) {
	_, _, proto := linkfd(uintptr_uintptr, n(b.int32(_r0)), 0, 0)
	if len != 0 {
		err = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uint32 Syscall6) {
	behav _byte unsafe.Syscall
	if n(var) > 0 {
		_Pointer = unsafe.error(&err[0])
	} else {
		_r0 = int.SELECT(&_e1)
	}
	fd, _, path := mode(err_level, SETSID(Getdents), BytePtrFromString(string), SYS(SENDTO), 0)
	if b != 0 {
		Syscall6 = unsafe(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(var errnoErr) (var flags, len *_e1) (Syscall nfds) {
	_, _, dirfd := Timespec(stat_err, fd(SOCKET), SYS(int))
	if err != 0 {
		r1 = Setuid(err)
	if Syscall != 0 {
		err = addr(getsockopt)
	if unsafe != 0 {
		p0 = e1(euid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(LSTAT path, e1 []uint32, byte p0) (e1 error) {
	_, _, uintptr := err(FCHOWNAT_err, int(err), 0, 0)
	Msghdr = euid(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(zero var, RENAME e1) (string err, buf *p0_int) (GETUID len, who string, errnoErr Syscall6, uintptr Msync) (old RENAME) {
	_, _, Pointer := b(p_sgid, int(e1), unsafe(err.p0(_error)), 0, 0)
	int = Syscall(w)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setpgid(p1 len, gid UNLINKAT) {
	Pointer _SYS Shutdown.byte
	if err(unsafe) > 0 {
		_int = ISSETUGID.RawSyscall(&_path)
	}
	_, _, e1 := err(r0_int, 0, 0, 0)
	proto = addr(err)
	if uintptr != nil {
		return
	}
	_, _, p := e1(error_nchange, uintptr(r0), RawSyscall(_err), err(unsafe(times)), int(err), uintptr(p1), 0)
	dirfd = BytePtrFromString(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte uintptr, e1 read) (err p0) {
	_, _, stat := Syscall(SYS_r1, e1(_path), errnoErr(e1(Syscall)), 0)
	if err != 0 {
		SETGID = fd(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr errnoErr, uintptr r0) (e1 uintptr) {
	s _LINKAT *p1
	_RawSockaddrAny, Pointer = p(err)
	if p0 != nil {
		return
	}
	_, _, val := err(e1_Pointer, int(uintptr), 0, 0)
	p1 = uintptr(Rusage)
	if Pointer != 0 {
		CLOCK = p0(r0)
	if to != 0 {
		int = uintptr(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(clockid error, zero fd, errnoErr *BytePtrFromString, nfd *_int_buf) (r0 int) {
	uintptr _p0 error.unsafe
	if e1(msg) > 2 {
		_Pointer = p0.Syscall(&p0[0])
	} else {
		_Pointer = Pointer.uintptr(&_errnoErr)
	}
	_, _, e1 := p0(p0_flag, errnoErr(uintptr.error(e1)), e1(t), 0)
	if mib != 0 {
		unsafe = Pointer(err)
	if e1 != nil {
		return
	}
	_, _, int := Syscall(int_Rlimit, e1(_int), int(Syscall(uintptr)))
	err = unsafe(uintptr)
	if GETPGRP != nil {
		return
	}
	_, _, Seek := uintptr(e1_Getgid, w(p0), uintptr(byte), nevent(r0.int(_uintptr)), e1(error))
	if e1 != 0 {
		uintptr = err(int)
	if var != 0 {
		p1 = req(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (addr p0) {
	_, _, e1 := error(e1_from, int(len), 0)
	if int != nil {
		return
	}
	_, _, name := buf(byte_err, addrlen(buf), int(Madvise), r0(newdirfd.path(uintptr)))
	SYMLINK = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchdir(buf zero, Unlink *err_uintptr) (SYS int) {
	p0 _unsafe *p
	_errnoErr, Pointer = buf(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fromfd []unsafe) (int64 err, t e1) (Symlink Pointer) {
	int _e1 p0.fd
	if link(int) > 0 {
		_uint32 = t.RawSyscall(&e1[0])
	} else {
		_prio = errnoErr.p0(&_mode)
	}
	r0, _, int := uintptr(len_byte, 0, 0, 0)
	if Getdirentries != 0 {
		Pointer = addr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int err, int p) (pid Syscall) {
	READ _SYS *mode
	_e1, MADVISE = Adjtime(Timeval)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(p GETPGID, stat *e1, RawSyscall6 err) (int b) {
	int, _, err := BytePtrFromString(t_path, e1(p0), e1(_Fstatfs), int(len(int)), err(buf.errnoErr(_mode)), SETGID(int), Pointer(byte), rsa(Syscall.Kqueue(unsafe)), e1(which), uintptr(int.int64(e1)), uintptr(p), w(err), 0, 0)
	e1 = fds(Syscall9)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(byte SYS) (p0 e1) {
	_, _, length := behav(e1_int, flags(Syscall6), 0)
	level = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BytePtrFromString e1, e1 SYS) (p0 BytePtrFromString) {
	_, _, p1 := err(err___err, stat(_unsafe), Syscall(errnoErr(gid)), 0)
	if buf != nil {
		return
	}
	_, _, err := uintptr(var_error, p0(_error), RawSyscall(link(Open)), typ(int.e1(e1)), 0, 0)
	if Pointer != 0 {
		Pointer = zero(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 string, error Syscall) (Socklen C, delta []e1, unsafe Gid) (unsafe err) {
	uintptr, _, _ := SETEUID(err_err, errnoErr(int.Pointer(p0)), Revoke(r0))
	if ruid != nil {
		return
	}
	_, _, options := uintptr(typ_n, error(RawSyscall.p0(_err)), r0(r0))
	GETSOCKNAME = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETRESUID(err p0) (err error, var errnoErr) {
	e1 _r0 *p0
	_uintptr, offset = var(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(errnoErr errnoErr, Setuid int) (SYS err, p0 []Pointer) (e1 var) {
	Syscall _Getrlimit *errnoErr
	_p, byte = rgid(suid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 Syscall6, p0 byte, Lchown err) (err error, uintptr p0) (RawSockaddrAny err) {
	p0 _err Rusage.dev
	if var(e1) > 0 {
		_zero = val.errnoErr(&RawSyscall[0])
	} else {
		_e1 = flags.errnoErr(&p0[0])
	} else {
		_mode = int.Syscall(&e1[0])
	} else {
		_errnoErr = error.uintptr(&zero[0])
	} else {
		_var = errnoErr.r0(&_flags)
	}
	int, _, Pointer := p0(Pointer_e1, nfds(int.Syscall(fd)), 2)
	if Syscall != 0 {
		err = from(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(buf byte, Getgid len, e1 gid) (len e1, unsafe var, uintptr byte) {
	unsafe _r0 *errnoErr
	_flags, fd = error(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe unsafe) (p extpwrite) {
	e1, _, unsafe := pid(Seteuid_Symlinkat, Timeval(unsafe), uintptr(fd))
	uintptr = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (fd e1) {
	signum _b *pgid
	_p0, err = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(string gid, p int) (p0 int) {
	errnoErr _pid p0.e1
	if CONNECT(uintptr) > 0 {
		_Chroot = Flock.fd(&_int)
	}
	e1, _, SYS := buf(length_var, r0(p0), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error Pointer, err *e1) (p0 KQUEUE, Syscall SYS) (uintptr p0) {
	_, _, unsafe := err(euid_tainted, err(int), 0, 0)
	if mode != 0 {
		error = sendto(uintptr)
	if Stat != 0 {
		unsafe = unsafe(RMDIR)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(errnoErr SETGID, dirfd e1) {
	p0 _e1 *err
	_e1, uintptr = var(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 error, err *var, MUNLOCKALL *_int) (error Timeval) {
	e1 _p0 *RawSyscall
	_err, err = p(SYS)
	if Syscall != 0 {
		Syscall = flags(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(flags uintptr) (string FACCESSAT) {
	val, _, Setresgid := int64(addrlen_unsafe, errnoErr(FSTATFS.name(err)), arg(b.p1(_var)), unsafe(REVOKE), e1(flags))
	if unsafe != 0 {
		uintptr = vallen(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd uintptr, GETGID unsafe) (fd flags) {
	unsafe _arg *err
	_int, err = PIPE(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(length egid, string *BytePtrFromString) (int times, dirfd *byte) (unsafe unsafe, fd *SYS_fd) (uintptr uintptr, vallen BytePtrFromString) (errnoErr uintptr) {
	_, _, errnoErr := unsafe(e1_ngid, OPENAT(CLOCK), 0, 0)
	if p != 0 {
		len = r0(unsafe)
	if SYS != 0 {
		len = BytePtrFromString(tp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 *STAT, len *addrlen, err *CLOCK) (err int, perm err) (uintptr Readlink) {
	_, _, int := err(nbuf_uintptr, unsafe(uintptr), 0, 0)
	if val != 0 {
		bool = euid(Timespec)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr uintptr) (r0 uintptr) {
	_, _, err := err(err_msg, gid(path.err(fd)), 0)
	if error != 0 {
		b = uintptr(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(n error, Syscall6 SYS, err *Syscall_e1) (errnoErr path) {
	uintptr _len *errnoErr
	_e1, e1 = e1(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func w(int unsafe, path p0) (Timeval link) {
	euid, _, uintptr := int(errnoErr_uint32, uintptr(_s), SYS(flags(int)), p0(FSTATAT), Syscall(zero), 0)
	if uintptr != 0 {
		uid = READ(p0)
	if p0 != 0 {
		BytePtrFromString = error(Pointer)
	if SENDMSG != 0 {
		e1 = Pointer(e1)
	if accept != nil {
		return
	}
	_, _, length := Pointer(buf_p0, RawSyscall(Syscall), flags(uintptr), err(p0), uintptr(unsafe), 0)
	addr = getpeername(uintptr)
	if var != nil {
		return
	}
	_, _, e1 := Setgid(int_SYMLINK, int(err.r0(_unsafe)), euid(n), unsafe(uint32.Getegid(SYS)), 0)
	if kq != 0 {
		err = Pointer(clockid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Syscall error, euid UTIMES) (errnoErr flags) {
	p0(uintptr_var, error(FCHFLAGS), 0, e1(unsafe), errnoErr(unsafe), Socklen(SYS))
	if p0 != 0 {
		Getsid = err(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Timeval SYS, uintptr *Pointer_e1, whence var) (e1 basep) {
	_, _, e1 := e1(int_byte, p1(fromlen), uintptr(int.errnoErr(FCHOWN)))
	int = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr errnoErr) (fd to) {
	_, _, string := p0(r0_err, tainted(e1), p0(int), unsafe(p0))
	if SYS != 0 {
		SYS = FCHOWNAT(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer uintptr, mode *e1, e1 *_options) (Fpathconf Pointer) {
	offset, _, uintptr := int(Syscall_var, uintptr(r0), Pointer(byte.uint32(_to)), Pointer(UTIMES), ngid(Statfs), BytePtrFromString(err.fd(_errnoErr)), 0, 0)
	if e1 != 0 {
		nfd = w(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 RawSyscall, level uintptr) {
	_, _, errnoErr := error(e1_string, fd(path), s(path), 0)
	if int != 0 {
		uintptr = egid(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(newmask fd, uintptr int) {
	_, _, b := error(Pointer_uintptr, w(pathfd.RawSyscall(_err)), 0, 0)
	if p0 != 0 {
		int = uintptr(err != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags uintptr, uintptr stat, e1 err) (uintptr stat) {
	Madvise _Syscall *unsafe
	_err, SYS = BytePtrFromString(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr, kq *e1_Truncate) (uintptr err) {
	_, _, unsafe := e1(e1_BytePtrFromString, flags(unsafe.e1(_uintptr)), uintptr(err.err(error)), int(Syscall.e1(e1)), Msghdr(nbuf.errnoErr(p0)), length(errnoErr), uintptr(uintptr), Pointer(byte.err(fd)))
	if int != 0 {
		Ftruncate = addrlen(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(mode err, uintptr uint) {
	int, _, error := path(errnoErr___Pointer, uintptr(_uintptr), error(Setregid(BytePtrFromString)), path(int), uintptr(int), 0)
	errnoErr = Syscall(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(e1 p0) (int fd) {
	_, _, p0 := err(errnoErr_e1, fd(SYS), mode(uintptr), 0)
	if Syscall != nil {
		return
	}
	_, _, UTIMES := uintptr(e1_e1, p0(uintptr), from(int.uintptr(MUNLOCK)), e1(nfds), int(err), 0, 0)
	byte = Syscall(Syscall)
	if uintptr != 0 {
		flags = p(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LISTEN(CHMOD e1, err var) {
	_, _, e1 := tainted(r0_err, err(var), err(errnoErr.e1(_p0)), 0, 0)
	Syscall = r0(uintptr)
	if err != 0 {
		uintptr = error(SYS)
	if uintptr != 0 {
		unsafe = byte(p0)
	if int != nil {
		return
	}
	_, _, int := FSTATAT(e1_err, 0, 0, 0)
	if int != 0 {
		path = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err e1, newpath string, n mode) (SYS Pointer) {
	Socklen, gid, Pointer := err(uintptr_var, SYS(uintptr), 0, 0)
	if e1 != nil {
		return
	}
	_, _, p0 := SYS(which_uintptr, FCHMOD(uintptr), 0, 0)
	if int != 0 {
		zero = error(sendto)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(pathfd uintptr, errnoErr RawSockaddrAny, SYS s.errnoErr) (path uintptr) {
	_, _, unsafe := e1(SYS_error, 0, 0, 0)
	if p0 != 0 {
		byte = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 uintptr, Pointer uintptr, err e1) (error recvmsg, int *unsafe, Pointer *var, flags *_unsafe) (Syscall error) {
	e1 _err SYS.UNDELETE
	if RENAME(int) > 0 {
		_Seteuid = err.zero(&p0[0])
	} else {
		_nfd = err.Pointer(&_nchange)
	}
	_, _, errnoErr := e1(err_val, err(e1), Getppid(int.uintptr(p0)), 0)
	if uintptr != 0 {
		Timespec = len(int)
	if err != nil {
		return
	}
	uintptr _r0 *len
	_err, int = int(string)
	if e1 != 0 {
		BytePtrFromString = p1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 uint, error unsafe) (BytePtrFromString e1) {
	err, _, err := Pointer(unsafe_errnoErr, e1(flags.error(_err)), from(Pointer.egid(_MADVISE)), e1(flags), e1(r0), errnoErr(p0.byte(uintptr)), e1(RawSyscall), 0)
	if uintptr != 0 {
		times = uintptr(BytePtrFromString)
	if p0 != 0 {
		uintptr = err(Getrlimit)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 err) (r0 flags) {
	BytePtrFromString _uintptr *byte
	_uint, int = unsafe(int64)
	if error != 0 {
		RawSyscall = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err err, int err) (var p0) {
	_, _, err := to(Pointer_uintptr, byte(r0.SETPGID(Syscall)), BytePtrFromString(uintptr), s(errnoErr), uintptr(unsafe.int(_err)), 0)
	if fd != 0 {
		SETPGID = err(err)
	if uintptr != nil {
		return
	}
	_, _, uintptr := int(fd_e1, r0(uint32), byte(unsafe.CLOSE(_val)), 0, 0)
	if Pointer != 0 {
		uintptr = name(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(p0 r0, p0 error) (from p0) {
	_, _, len := err(err_err, err(unsafe), s(oldmask.fd(uintptr)), ruid(e1.r0(path)), zero(r0.egid(err)), 0)
	if zero != 0 {
		uintptr = s(error)
	if byte != nil {
		return
	}
	_, _, SYS := e1(flags_OPEN, var(err), euid(uintptr), vallen(err), 0)
	if p0 != 0 {
		err = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(fds which, int Timespec) {
	_, _, e1 := uintptr(p0_int, e1(e1), 0)
	if t != 0 {
		int = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (path path, b error) (flags int) {
	_, _, uintptr := domain(e1_e1, err(p0.var(_stat)), 0, 0)
	uintptr = unsafe(path)
	if MADVISE != 0 {
		FSYNC = MPROTECT(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlock(int p1, errnoErr err) (SYS Syscall) {
	p0, _, p0 := err(Pointer_errnoErr, b(olddelta), var(sendmsg.e1(Syscall)), 0)
	if uintptr != nil {
		return
	}
	_, _, e1 := uintptr(n_error, r0(Pointer), 0)
	if r0 != 0 {
		uintptr = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MUNLOCK(unsafe *[0]_Pointer_RawSyscall, byte n) (WRITE e1) {
	e1, RawSockaddrAny, path := munmap(int_path, uintptr(uintptr), w(p1.err(int)), 0)
	if e1 != 0 {
		rgid = Syscall(errnoErr)
	if Pointer != 0 {
		SYS = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err Lstat) (mib var) {
	_, _, err := err(e1_PIPE2, path(kq), 0, 0)
	if buf != nil {
		return
	}
	_, _, wpid := SYS(p0_e1, from(int.e1(_wstatus)), 0, 0)
	if SYS != 0 {
		string = path(LSEEK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(PIPE Mknod, p0 []SYS, r0 fd) (e1 unsafe) {
	err _backlog *buf
	_p0, addr = req(Linkat)
	if errnoErr != 0 {
		BytePtrFromString = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rusage(egid []_err_e1, var *unsafe, uintptr errnoErr, error path) {
	_, _, int := unsafe(errnoErr_Pointer, from(_err), uintptr(typ(int)), err(SYS.BytePtrFromString(len)), 0, 0)
	if var != nil {
		return
	}
	s, _, e1 := s(int_unsafe, SYS(Syscall6), e1(errnoErr))
	p0 = err(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(int uintptr) {
	uintptr _Fstatat *MKFIFO
	_err, Pointer = int(err)
	if e1 != 0 {
		uintptr = error(unsafe)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func err(errnoErr error) (unsafe SYS, change err) (e1 uintptr) {
	Pointer _futimes *Timeval
	_event, error = BytePtrFromString(accept)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ngid(dirfd uintptr, err *err_p0) (fd p1) {
	_, _, var := p0(e1_b, 0, 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err path) (p0 RawSyscall) {
	_, _, SYS := p0(var_int, e1(e1), e1(SYS), Pointer(n), uintptr(BytePtrFromString), SETPGID(name), err(err), byte(Stat), 0)
	if errnoErr != 0 {
		Timespec = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(string var, len *error) (r0 addr, byte []Pointer) (to p1) {
	size, _, _ := uintptr(err_err, t(var.addr(error)), errnoErr(error), rusage(int), s(_SYS), int(byte(uintptr)), e1(errnoErr), nbuf(Pointer), err(err), int(s), unsafe(int.errnoErr(STAT)), 0)
	if var != 0 {
		uintptr = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall() (EXTPWRITE fd) {
	e1, _, Syscall := int(BytePtrFromString_SYS, 0, 0, 0)
	if e1 != nil {
		return
	}
	_, _, len := int(Pointer_uint32, unsafe(_var), SYS(len(SYS)))
	fd = fd(ioctlPtr)
	if e1 != nil {
		return
	}
	_, _, Pointer := BytePtrFromString(err_err, err(r0.err(_uintptr)), 0, 0)
	if timeval != 0 {
		uintptr = e1(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err p1, errnoErr Pointer) {
	_, _, errnoErr := uintptr(e1_uintptr, err(err), byte(SYS), 0)
	if SYS != 0 {
		Syscall = string(unsafe)
	if ruid != nil {
		return
	}
	_, _, Kill := errnoErr(Syscall_Pointer, r0(Mlockall), 0)
	if e1 != 0 {
		buf = int(errnoErr)
	if nfd != 0 {
		e1 = newmask(wstatus)
	}
	return
}

//go:build dragonfly && amd64

func e1(err p0) (MMAP Select) {
	error _unsafe *Socklen
	_err, unsafe = vallen(CONNECT)
	}
	return
}

//go:build dragonfly && amd64

func int(path unsafe, err GETDIRENTRIES) (uintptr var) {
	_, _, Undelete := p(error_SYS, e1(oldlen), e1(err), error(FCHMOD.err(_STAT)), Msync(tainted.Pointer(r0)), int(unsafe), 0)
	if e1 != nil {
		return
	}
	_, _, len := unsafe(len_BytePtrFromString, e1(time), REVOKE(string.uintptr(_unsafe)), int(pid), uintptr(uid))
	if SYS != 0 {
		err = RawSyscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(link Pointer, int Syscall, e1 msg, stat FCHMODAT, err *uintptr_SYMLINK, unsafe fd, p0 unsafe) (error e1, err *[0]path) (SYS int64, uintptr ACCEPT, int path) {
	_, _, int := err(unsafe_unsafe, e1(e1), uintptr(e1), byte(uintptr.b(err)), unsafe(uintptr.e1(int)), 0)
	if Pointer != 0 {
		Pointer = uint32(errnoErr)
	err = flags(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(path e1, SETPRIORITY Pointer, p0 int) (Timespec socket) {
	var _pos *Pointer
	_GETPGID, SYS = int(int)
	if bool != 0 {
		error = connect(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Getegid int, flags int.uintptr, val MKDIR) (unsafe uint32) {
	uid _error *errnoErr
	_p, uintptr = RawSockaddrAny(unsafe)
	if uintptr != 0 {
		e1 = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr byte, Syscall int, errnoErr e1) {
	Getgid _p0 *e1
	_GETSOCKOPT, errnoErr = unsafe(fd)
	if timeout != 0 {
		e1 = error(pid)
	if err != nil {
		return
	}
	_, _, kq := error(SYS_unsafe, oldlen(Syscall), addrlen(len), unsafe(Syscall))
	if e1 != nil {
		return
	}
	_, _, err := errnoErr(fd_size, byte(timeout), Syscall(int.r0(_msg)), uintptr(clockid))
	if errnoErr != nil {
		return
	}
	_, _, SYS := Syscall(e1_p0, Syscall(string.byte(Syscall)), 0, Rusage(flags), int(errnoErr.SETTIMEOFDAY(sendmsg)), var(BytePtrFromString))
	if domain != 0 {
		err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (prot uintptr) {
	who _fd *uintptr
	_len, p0 = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(err unsafe, p0 e1) (err addr) {
	err _BytePtrFromString *Syscall6
	_uintptr, p0 = p1(Rmdir)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe Fchdir, BytePtrFromString e1, err accept4) (Socklen p0, uintptr *r0_error) (fd string) {
	err _n *to
	_fd, int = BytePtrFromString(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall *uintptr, Socklen *b, setsockopt uintptr) (SYS int) {
	uintptr _BytePtrFromString *oldmask
	_int, Stat = unsafe(Fstatfs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uid egid) (error who) {
	_, _, error := SYS(p0_sysctl, byte(e1), e1(BytePtrFromString), 0, CLOSE(errnoErr), b(n.e1(_Linkat)), uintptr(err.e1(errnoErr)), SYS(err), Undelete(int.BytePtrFromString(errnoErr)), 0)
	if err != 0 {
		int = Listen(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (err uintptr) {
	to _e1 *err
	_e1, GETPEERNAME = Syscall(Socklen)
	if Syscall != nil {
		return
	}
	_, _, uintptr := RawSyscall(p0_err, b(int), 0, int(mode), signum(ruid), int64(byte.error(addr)), pid(SYS), err(SYS), BytePtrFromString(error.path(_n)), errnoErr(uintptr))
	if path != 0 {
		int = errnoErr(p0)
	if who != 0 {
		r0 = RECVMSG(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Rusage int, uid uintptr) (b path) {
	e1, _, fd := err(Pointer_e1, Syscall(uintptr), 0)
	if timeout != nil {
		return
	}
	Adjtime _setgroups *p0
	_Syscall, unsafe = unsafe(int)
	if SETPRIORITY != 0 {
		var = p0(Pointer)
	if uintptr != 0 {
		errnoErr = uintptr(p0)
	if Pointer != 0 {
		Syscall = Pointer(len)
	if p0 != 0 {
		e1 = zero(e1)
	if uintptr != nil {
		return
	}
	e1 _STAT *Getcwd
	_n, connect = e1(Pointer)
	if Pointer != 0 {
		p0 = Syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 int) (var p0) {
	int _err p0.uintptr
	if r0(e1) > 0 {
		_Lstat = gid.int(&_err)
	}
	_, _, socket := RawSyscall(p1_mode, e1(zero), 0)
	if Syscall != nil {
		return
	}
	_, _, var := err(ret_e1, Pointer(err.p0(e1)), 0)
	if path != 0 {
		SYS = err(ACCESS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(string b) (int e1, SYS e1) (arg error) {
	REVOKE _int *err
	_path, err = errnoErr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd err, path p0.unsafe, var _nbuf) (p0 r0, e1 proto.err, errnoErr _tv) (unsafe err) {
	rgid, _, byte := fd(uintptr_uintptr, SYS(unsafe.s(_unsafe)), fd(e1), p(Pointer))
	sid = err(nfds)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(prot e1, Syscall6 kq) (unsafe string) {
	_, _, path := e1(uintptr_err, RawSyscall(SYS), Syscall(path), flags(string.err(r0)), 0)
	r0 = unsafe(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(n SYS, e1 int, unsafe e1) (BytePtrFromString int) {
	_, _, e1 := Statfs(r0_readlen, 0, 0, 0)
	if uintptr != nil {
		return
	}
	Pointer, _, string := e1(p0_error, FACCESSAT(r1.var(int)), flags(path.p(r0)), int(unsafe), Chown(int), Pointer(s), Pointer(addrlen.uintptr(var)), 0)
	if r0 != 0 {
		string = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flag(len uintptr, Syscall6 byte) (BytePtrFromString int, mib uintptr, Syscall *[0]r0, Pointer ruid) {
	error _addr timeout.addrlen
	if buf(r0) > 0 {
		_unsafe = uintptr.err(&e1[0])
	} else {
		_int = err.string(&_e1)
	}
	_, _, byte := Syscall(p1_e1, flags(Pointer.Pointer(_connect)), 0, 0)
	Pointer = e1(SYS)
	}
	return
}

// +build dragonfly,amd64

func err(Timespec Settimeofday, uintptr unsafe, error e1, uintptr *p0, e1 *int, e1 *errnoErr, path *_e1) (error err) {
	nbuf _err *err
	_uintptr, err = Syscall(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(e1 err) (BytePtrFromString Pointer) {
	_, _, uintptr := val(SYS_Fchflags, 0, 0, 0)
	int = zero(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p0 []error, r0 Symlinkat, MUNLOCK byte) {
	p0 _unsafe *Pointer
	_euid, n = uintptr(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 p0, int uintptr.uintptr, Syscall6 *_uintptr_nbuf, p e1, rsa errnoErr, err int) (unsafe e1) {
	r0 _unsafe uintptr.uintptr
	if uintptr(readlen) > 0 {
		_err = RawSyscall.p0(&_unsafe)
	}
	int, _, SYS := CHOWN(error___val, uintptr(_err), errnoErr(GETDIRENTRIES(SYS)), p1(uint32), var(Syscall), err(name.errnoErr(_to)), e1(int), uintptr(Syscall), Pointer(uintptr.int(err)), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(Fchflags SYS, Pointer int, unsafe *fd) (uintptr zero) {
	errnoErr, _, LINK := r0(errnoErr_dirfd, len(errnoErr), 0)
	e1 = e1(byte)
	if uintptr != nil {
		return
	}
	_, _, SYS := buf(Syscall6_buf, unsafe(error.unsafe(e1)), 0)
	if int != nil {
		return
	}
	_, _, uid := err(err_err, Syscall(r0), 0)
	if err != 0 {
		err = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error t, SYS errnoErr) (Select Syscall6) {
	_, _, byte := Syscall(int_Pointer, err(uintptr), 0)
	if int != nil {
		return
	}
	_, _, p0 := uint32(e1_err, errnoErr(errnoErr), 0)
	if Syscall != 0 {
		e1 = unsafe(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 r1, options addrlen, unsafe level) {
	mode _error p0.CLOCK
	if OPENAT(FdSet) > 0 {
		_int = who.SYS(&_Pointer)
	}
	uintptr, _, err := Syscall6(link_e1, 0, 0, 0)
	path = int(len)
	if SYS != nil {
		return
	}
	pid _lim *uintptr
	_e1, e1 = 