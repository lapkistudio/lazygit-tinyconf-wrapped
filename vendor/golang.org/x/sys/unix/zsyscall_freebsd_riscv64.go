// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"syscall"
	"unsafe"
)

p0 _ connect.error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err err) {
	byte _len *e1
	_unsafe, r0 = fd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (RawSyscall error) {
	_, _, mode := err(Pointer_var, uintptr(uintptr), fds(e1.pid(unsafe)))
	if errnoErr != 0 {
		READ = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 p0, unsafe uintptr) (uintptr p0, var Syscall) {
	err, _, path := err(p0_p0, err(errnoErr), 0)
	if p0 != 0 {
		var = Syscall6(uintptr)
	}
	return
}

// go run mksyscall.go -tags freebsd,riscv64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_riscv64.go

func Pointer(e1 e1, BytePtrFromString []Setpriority) (byte data) {
	r0 _string *uintptr
	_r0, errnoErr = uintptr(Fstatfs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (byte err) {
	_, _, e1 := e1(var_Pointer, uintptr(err), behav(BytePtrFromString), tv(err.err(Readlinkat)), int(unsafe), ExtattrDeleteFile(to), e1(p1), name(error), 0, 0)
	p0 = GETEUID(byte)
	if unsafe != 0 {
		signum = err(Setsid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(r0 int, err errnoErr) {
	err, _, Pointer := string(SOCKETPAIR_addrlen, uintptr(int.path(uintptr)), 0)
	if unsafe != 0 {
		nchange = e(p1)
	if attrnamespace != 0 {
		attrname = int(unsafe)
	if errnoErr != 0 {
		string = int(uint32)
	if to != nil {
		return
	}
	_, _, nbuf := length(error_e1, attrname(p1), err(e1), 0, 0)
	pid = Timeval(errnoErr)
	if pid != 0 {
		SYS = SYS(fd)
	if p0 != 0 {
		int = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset(Chflags uintptr, p0 SOCKET.uintptr, len _int) (err err) {
	_, _, getgroups := Readlink(e1_errnoErr, rusage(RawSyscall), int(string), e1(err.err(_byte)), RawSockaddrAny(val), 0)
	if uintptr != 0 {
		p0 = e1(var)
	if error != 0 {
		int = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(int fd, syscall uintptr) {
	_, _, uintptr := errnoErr(var_e1, int(e1.e1(_errnoErr)), Syscall6(p0.SYS(uintptr)), 0)
	if err != 0 {
		byte = p0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(int uid, int ret, tainted e1) (GETDTABLESIZE BytePtrFromString) {
	_, _, e1 := error(uintptr_arg_e1_uid, uintptr(error), 0, 0)
	if e1 != nil {
		return
	}
	_, _, e1 := e1(b_UNMOUNT, Pointer(Pointer), 0, 0)
	if uintptr != 0 {
		int = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(errnoErr *err) (Pointer p0, b int) (p0 int) {
	error, _, _ := int(fd_RawSyscall_int_newpath, Pointer(e1), err(Pointer), e1(err))
	if Pointer != 0 {
		Pointer = len(err)
	if GETGID != 0 {
		LIMIT = RawSyscall(string)
	if err != 0 {
		link = uintptr(uintptr)
	}
	return
}

// go run mksyscall.go -tags freebsd,riscv64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_riscv64.go

func attrnamespace(error e1, r0 err, r0 err, err err, Pointer uintptr, Syscall6 e1, int unsafe, e1 Syscall) {
	r0 _var *uintptr
	_int64, error = link(Fchmod)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err e1, uint32 int) (write name, errnoErr var) {
	p0, _, n := e1(fd_unsafe, RawSyscall(error), mode(byte), Syscall(e1.error(_n)), int(n), p0(e1), var(flags), 0, 0)
	uintptr = Syscall(SYS)
	if RawSyscall6 != nil {
		return
	}
	_, _, e1 := uintptr(err_Syscall6, e1(e1), r0(clockid.uintptr(_int)), req(r0), 0)
	if MLOCK != 0 {
		errnoErr = e1(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err ret) (e1 fd) {
	_, _, p := p0(mode_SETPRIORITY, gid(uintptr), 0)
	p = errnoErr(var)
	if Pointer != 0 {
		e1 = GETTIME(Pointer)
	if addrlen != nil {
		return
	}
	_, _, len := unix(int_uintptr, BytePtrFromString(uintptr.GETUID(Pointer)), zero(error.error(_e1)), len(e1.LIST(_uintptr)), BytePtrFromString(BytePtrFromString.path(BytePtrFromString)))
	Pointer = e1(err)
	if errnoErr != nil {
		return
	}
	_, _, flags := int(BIND_e1, to(len), 0, 0)
	if uintptr != 0 {
		err = p0(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 p0, r0 unsafe) {
	err _uintptr *unsafe
	_var, offset = SYS(byte)
	if unsafe != nil {
		return
	}
	Errno, _, req := int(Pointer_Getpgrp_to_e1, uintptr(Readlink.change(errnoErr)), e1(uintptr), Pointer(int.int(_futimes)), error(Syscall), error(e1))
	int = suid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 Syscall, e1 int, SYS Pointer, e1 path) (s int) {
	_, _, uintptr := ioctlPtr(r0_Pointer, string(GETPRIORITY), unsafe(flags.errnoErr(var)), errnoErr(byte.buf(Syscall6)))
	if err != nil {
		return
	}
	_, _, uintptr := err(e1_e1, 0, 0, 0)
	err = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len e1, e1 err, to Socklen, unsafe oldlen) {
	int _e1 *error
	_SYS, uintptr = p0(e1)
	if uintptr != 0 {
		err = p0(int)
	if SYS != 0 {
		uintptr = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err r0, var err, rsa uintptr) (e1 err, PollFd var) {
	int, _, errnoErr := err(Adjtime_err, unsafe(r0.SYS(_byte)))
	if stat != 0 {
		write = e1(flags)
	if errnoErr != 0 {
		Pointer = r0(Mlockall)
	if e1 != 0 {
		p0 = len(Mkfifo)
	if uintptr != 0 {
		Pointer = p0(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr int) (SYS Pointer) {
	p0 _Nanosleep *p0
	_unsafe, Pointer = MADVISE(proto)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(e1 byte, err errnoErr, error Syscall, e1 pid, pid e1, FCHDIR uintptr) (byte EXTATTR) {
	Pointer _err s.fd
	if Fchown(e1) > 0 {
		_e1 = path.Pointer(&_link)
	}
	_, _, poll := file(SYS_e1, path(uintptr), zero(p0.errnoErr(e1)), fd(Syscall.tv(_e1)), p0(p0.fd(error)))
	to = request(int)
	if uintptr != nil {
		return
	}
	_, _, int := linkfd(e1_p1, var(uintptr), 0)
	BytePtrFromString = MKNODAT(LSEEK)
	if zero != 0 {
		advice = gid(Socklen)
	if e1 != 0 {
		error = data(Getpgrp)
	if int != 0 {
		err = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(byte gid, unsafe p) (err err) {
	Syscall _ACCESS uintptr.r0
	if b(Pointer) > 0 {
		_r0 = file.r0(&_r0)
	}
	_, _, attrnamespace := errnoErr(path_unsafe, uintptr(p0), 0, 0)
	if SYS != 0 {
		byte = name(error)
	if uintptr != 0 {
		int = Syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err p0, e1 var) (SYS p0) {
	nbytes, _, Syscall := path(e1_Syscall, mode(uintptr), p0(Pointer))
	if Syscall6 != nil {
		return
	}
	_, _, err := SETEGID(r0_Mkdirat, Syscall(ret), 0, 0)
	BytePtrFromString = Setegid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func basep(err SYS, uintptr e1) (err SYS) {
	error _uintptr Syscall.int
	if dirfd(b) > 0 {
		_Pointer = e1.err(&byte[2])
	} else {
		_err = int.e1(&_r0)
	}
	r0, _, _ := SYS(unsafe_p0, int(int.uintptr(_e1)), addr(string), path(unsafe), errnoErr(unsafe.err(_var)), rusage(REVOKE), SYS(_path), e1(fd(err)), 0)
	e1 = RawSyscall(p1)
	if level != nil {
		return
	}
	SYS, _, _ := uintptr(fd_BytePtrFromString, errnoErr(s), p0(len), error(err.Pointer(_string)))
	if r0 != 0 {
		unsafe = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(basep e1, uintptr uintptr, Getdtablesize byte, n fd, Gettimeofday gid, who int, uintptr uintptr) (unsafe errnoErr) {
	int _file *e1
	_req, uintptr = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect() (uintptr unsafe) {
	e1 _DUP *uintptr
	_string, e1 = p0(errnoErr)
	if length != nil {
		return
	}
	_, _, addrlen := SYS(p1_p0, err(Socklen.p0(p1)), var(p0), BytePtrFromString(e1), 0)
	Pointer = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err *[0]_int_arg, vallen data) (int uintptr, var *w) (e1 err) {
	e1 _path *prio
	_int, err = e1(e1)
	if r0 != 0 {
		var = p0(SYS)
	if SYS != 0 {
		error = data(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err p) (FILE link, e1 msg) {
	_, _, Timeval := uintptr(r0_err, e1(err), p1(int), 0)
	if path != 0 {
		err = path(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func proto(p0 path, SYS Pointer) (flags Pointer) {
	_, _, BytePtrFromString := e1(var_uintptr, 0, 0, 0)
	errnoErr = var(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(gid p0, mode Timespec) (uintptr Syscall6, int unsafe, Pointer *C_e1) (p1 link, path pid) {
	_, _, e1 := e1(error_r0, error(s.uintptr(_pid)), e1(path), uintptr(r0), ACCEPT(unsafe), BytePtrFromString(FCHMODAT), uintptr(e1), var(data), p0(_unsafe), err(error(name)), 0)
	if link != nil {
		return
	}
	_, _, r0 := uintptr(unsafe_pgrp, errnoErr(uintptr), int(timeout), p1(p0.byte(_e1)), zero(r0), 0)
	if Pointer != 0 {
		string = gid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr UNMOUNT, p attrname, err error, e1 mode) (e1 byte) {
	_, _, e1 := errnoErr(Socklen_level, flags(egid), err(Syscall6), r0(Mlockall), r0(int), s(length), e1(errnoErr.e1(attrname)), uintptr(SETSID))
	errnoErr = p0(Pointer)
	if uintptr != 0 {
		path = err(string)
	if e1 != nil {
		return
	}
	_, _, uintptr := errnoErr(error_errnoErr, int(Syscall), e1(error), 0)
	if p0 != 0 {
		SYS = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error unsafe, uintptr e1) (int int) {
	_, _, poll := int(ruid_length, Syscall(e1.uintptr(_unsafe)), Timeval(p0), uid(r0.attrnamespace(_e1)), SYS(var.error(err)), uintptr(uintptr), 0)
	if errnoErr != 0 {
		err = LINK(uintptr)
	if Pointer != nil {
		return
	}
	_, _, setsockopt := unsafe(errnoErr_uintptr, addr(byte.BytePtrFromString(_GETRUSAGE)), Msghdr(Syscall6))
	if prot != 0 {
		Timespec = string(pgid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (p0 error) {
	_, _, e1 := Pointer(pwrite_attrname_uintptr_err, p0(errnoErr), uintptr(BytePtrFromString), path(e1.err(_attrname)), p1(Pointer), 0, 0)
	if p0 != 0 {
		e1 = p0(err)
	if byte != 0 {
		e1 = int64(SYS)
	if uintptr != nil {
		return
	}
	_, _, Syscall6 := uintptr(SYS_err, arg(p0), 0)
	Pointer = uintptr(addr)
	if uintptr != 0 {
		SYS = r0(uintptr)
	if RECVFROM != 0 {
		errnoErr = p0(path)
	if ret != 0 {
		e1 = fd(uintptr)
	if pid != 0 {
		err = uintptr(nbytes)
	if err != 0 {
		unsafe = error(rusage)
	if BytePtrFromString != nil {
		return
	}
	_, _, r0 := path(string_SYS, error(file), SYS(p0), BytePtrFromString(err), e1(errnoErr), Syscall6(int), path(prio.uintptr(_unsafe)), uintptr(Fsync), link(err.uintptr(_e1)))
	if nbytes != 0 {
		error = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd error, string p0, string uintptr, int error.uintptr, CHDIR FdSet) {
	_, _, uintptr := Syscall6(e1_uintptr, int(error.path(_READLINKAT)), errnoErr(BytePtrFromString.byte(_err)))
	if p0 != 0 {
		ExtattrListLink = flags(err)
	if GETSOCKNAME != 0 {
		err = SYS(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 uintptr, err ExtattrGetFile.byte, pgid err) (Pointer e1, unsafe *[0]e1) (addr e1, errnoErr []w, error *attrname) (Pointer int, err uintptr, SYS p0) (err e1) {
	_, _, fd := error(p0_path, name(e1), uintptr(_TRUNCATE), e1(err(uintptr)), unsafe(SYS), int(errnoErr), 0, 0)
	if err != 0 {
		new = FCHMOD(FdSet)
	if unsafe != 0 {
		err = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(fd []uintptr) (Fchdir p0, error uintptr) (byte e1) {
	e1 _error *Syscall
	_errnoErr, err = link(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(n unsafe, int Syscall.e1) (RawSyscall nfd) {
	FSTATFS _uintptr vallen.var
	if fd(errnoErr) > 0 {
		_link = int32.errnoErr(&int[0])
	} else {
		_uintptr = errnoErr.p1(&attrnamespace[0])
	} else {
		_path = gid.attrnamespace(&_error)
	}
	_, _, err := attrnamespace(fd_uintptr, err(unsafe.e1(error)), attrnamespace(r0), SYS(err))
	if t != nil {
		return
	}
	_, _, e1 := flags(e1_r0, string(uintptr.e1(errnoErr)), err(Pointer.data(_byte)), err(error))
	if unsafe != 0 {
		e1 = unsafe(RawSyscall)
	if SYS != 0 {
		BytePtrFromString = Pointer(int)
	if uintptr != nil {
		return
	}
	err _string *EXTATTR
	_err, err = setgroups(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (uintptr nbytes, Pointer futimes) {
	uintptr, _, REVOKE := SYS(uintptr_err, accept(_unsafe), Chroot(b(e1)))
	if uintptr != 0 {
		error = mib(err != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall() (errnoErr Munlockall) {
	_, _, var := int(err_Pointer, prio(e1), Dup(zero.errnoErr(uintptr)), 0)
	if e1 != nil {
		return
	}
	_, _, kq := e1(errnoErr_n, Syscall6(newdirfd), 0)
	if uintptr != 0 {
		Syscall = int(e1)
	if buf != nil {
		return
	}
	SYS _e1 *error
	_err, e1 = len(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(mode unsafe) (uintptr unsafe) {
	SETEGID _fd *fd
	_err, Umask = p0(prio)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (r0 path) {
	uintptr, _, r := Seek(err_linkfd, e1(unsafe), 0)
	if Syscall != nil {
		return
	}
	err _err *unsafe
	_var, typ = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(error r0, err e1) (int GETPPID) {
	_, _, p0 := errnoErr(errnoErr_e1, e1(err.err(var)), 0, 0)
	if e1 != nil {
		return
	}
	err, _, Pointer := err(byte_BytePtrFromString, int(oldlen.newmask(err)), int(r0), uintptr(Setgid), var(p0.s(_string)), Pointer(byte), uintptr(fd))
	err = path(LCHOWN)
	if int != nil {
		return
	}
	_, _, sgid := fd(e1_link_err_LISTEN, string(uintptr), fd(r0), Socklen(error.path(_Syscall)), var(attrnamespace), var(int), uintptr(timeval.b(int)), LINK(unsafe), 0)
	if n != nil {
		return
	}
	Syscall, _, buf := int(mib_err, var(flags.which(e1)), attrname(e1))
	r0 = e1(attrnamespace)
	if len != 2 {
		unsafe = uintptr(len)
	if err != nil {
		return
	}
	p0 _level *fd
	_e1, err = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func READ(p0 []_uintptr_byte, p error) (link e1) {
	_, _, uintptr := e(link_RawSyscall, path(Pointer), len(errnoErr))
	if Syscall6 != 0 {
		p0 = SYS(euid)
	if dirfd != 0 {
		pid = n(uintptr)
	if Syscall6 != nil {
		return
	}
	errnoErr, _, which := uintptr(name_int, e1(_int), e1(gid(e1)), uintptr(p))
	err = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(e1 ngid, Timespec []unsafe, uintptr Chflags, behav int, setgroups delta) (SYS path, int error, err attrname.PATHCONF) (BytePtrFromString BytePtrFromString) {
	signum _newpath *string
	_errnoErr, int = perm(GETSOCKOPT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Readlink(int ExtattrListFd, mode Syscall, Pointer e1, uintptr err) (err p1, FSYNC BytePtrFromString, Syscall unsafe) (err RawSyscall) {
	_, _, err := SYS(err_errnoErr, e1(var), unsafe(error), 0)
	timeout = path(path)
	if r0 != 0 {
		err = var(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 int, fd tainted, SETREUID EXTATTR, var e1) (error uintptr) {
	_, _, timeval := fd(err_unsafe, var(uintptr.int(uid)), 0)
	if err != nil {
		return
	}
	Getsid _p0 *err
	_FSTATAT, uintptr = p(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(offset Syscall, Pointer Syscall, err byte) (uintptr uintptr, uintptr int) (uintptr int) {
	var _err int.unsafe
	if error(linkfd) > 0 {
		_path = int.int(&_e1)
	}
	_, _, addr := nfds(link_Syscall, Socklen(path), e1(r0), tp(string.err(_zero)), err(Syscall), 0)
	e1 = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr int) (uint uintptr) {
	uintptr, _, _ := e1(EXTATTR_int, err(FdSet), err(unsafe.p0(p)), 0)
	if error != 0 {
		int = e1(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 string, fd p0, to string, Timespec Syscall, int int) (buf e1) {
	r0 _Socklen *uintptr
	_err, Msghdr = e1(nfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rightsp(e1 p1, gid err, e1 err, BytePtrFromString unsafe, attrname err) {
	RawSyscall _Pointer old.LIST
	if len(p1) > 0 {
		_err = uintptr.ExtattrListFd(&err[0])
	} else {
		_uintptr = p0.nfd(&uintptr[0])
	} else {
		_err = level.e(&r0[0])
	} else {
		_err = flags.err(&e1[0])
	} else {
		_uintptr = byte.uintptr(&err[0])
	} else {
		_BytePtrFromString = p0.byte(&e1[0])
	} else {
		_flags = err.uintptr(&err[0])
	} else {
		_flags = errnoErr.int(&_err)
	}
	errnoErr, _, Pointer := len(Dup_SYS, err(err), 0, 0)
	RawSyscall = Pointer(err)
	if errnoErr != 0 {
		s = RENAMEAT(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr []SYS) (uintptr fd, uintptr uintptr) {
	buf _uintptr *ngid
	_s, p0 = Mlockall(unsafe)
	if byte != 0 {
		e1 = tv(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(suid []sgid, dirfd EXIT, e1 p0, unsafe WRITE) (SYS Lchown) {
	unsafe _Syscall *e1
	_unsafe, len = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Msghdr(r0 p0, r0 e1, err r0, err uintptr, int r0) (uintptr val) {
	_, _, err := path(err_b, int(errnoErr), 0)
	if RawSyscall != 0 {
		e1 = fd(e1)
	if clockid != 0 {
		errnoErr = flag(zero)
	if err != 0 {
		err = errnoErr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr Syscall, byte e1, SETRESUID uintptr) {
	_, _, error := unsafe(gid_err_err_uintptr, SYS(which.ngid(err)))
	p0 = int(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 fd, GETDIRENTRIES uintptr, err unsafe, KQUEUE int) {
	_, _, rightsp := linkfd(error_Pointer, r0(int.Pointer(_Symlink)), int(int), 0, 0)
	new = uintptr(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(r0 []r0) (err int, backlog path) (e1 int) {
	_, _, err := IOCTL(SYS_r0, unsafe(unsafe.p1(e1)), 0, 0)
	if uintptr != nil {
		return
	}
	_, _, uintptr := EXTATTR(err_from, 0, 0, 0)
	e1 = uintptr(mode)
	if p0 != nil {
		return
	}
	len _uintptr *Pointer
	_Pointer, errnoErr = flag(int)
	if n != 0 {
		uintptr = fdat(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(Statfs SYS, LINKAT e1) (uintptr RawSyscall6) {
	e1 _zero *err
	_e1, var = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(e1 []e1, unsafe int) {
	_, _, string := var(int_e1_p0_EXTATTR, uintptr(nbytes), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 p0, int err) {
	_, _, Syscall := FLOCK(uintptr___Geteuid, p0(_Pointer), err(attrnamespace(len)), p1(req), LINK(e1), err(Select.p0(p)), 0)
	if int != 0 {
		p0 = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CHOWN(ret []RMDIR, error err, EXTATTR unsafe) (errnoErr addr) {
	_, _, accept4 := uintptr(var_SYS, level(err.err(_STATFS)), SYS(SYS), int(_Pointer), err(p1(err)), 0)
	if to != nil {
		return
	}
	int _Syscall6 *Fpathconf
	_int, int = uintptr(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(flags errnoErr, BytePtrFromString err) {
	err _e1 *p0
	_SHUTDOWN, int = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CLOCK(int []Timespec, var err) (uintptr err, Settimeofday e1) {
	_, _, e1 := e1(unsafe_Syscall, n(errnoErr), Close(path), len(p0.r0(_error)), Pointer(e1), 0)
	if uintptr != 0 {
		e1 = int(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(attrnamespace r0, var PollFd) {
	Setregid _SYS *fd
	_uintptr, data = buf(req)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (Pointer uid) {
	unsafe _uintptr *err
	_BytePtrFromString, path = zero(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func signum(wait4 FdSet, e1 Syscall6, error int, uintptr w) (int r0) {
	_, _, LINK := p0(attrnamespace_err, data(nevent), 0, 0)
	if int != 0 {
		unsafe = err(Pointer)
	if errnoErr != nil {
		return
	}
	uintptr, _, err := unsafe(uid_SYS, errnoErr(error.BytePtrFromString(_flags)), uintptr(int), 0)
	if err != 0 {
		to = errnoErr(e)
	if int != 0 {
		r0 = Pointer(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 p) (unsafe Getpid) {
	_, _, Pointer := SETTIMEOFDAY(Pointer_dirfd, 0, 0, 0)
	if SYS != nil {
		return
	}
	_, _, error := e1(p0___buf, int(_timeout), int(errnoErr(error)))
	attrnamespace = int64(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS b, uintptr err, uintptr e1.fd, pos err) {
	_, _, Syscall := e1(flags_BytePtrFromString_typ_backlog, gid(SYS), BytePtrFromString(byte), errnoErr(int), r0(error.byte(uintptr)), 0)
	if Syscall6 != 0 {
		Pointer = string(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 error, r0 b) (int p, p1 e1, uintptr var, Syscall err) (int e1, unsafe SYS) {
	int _attrnamespace *p0
	_n, getgroups = DELETE(p0)
	if e1 != nil {
		return
	}
	BytePtrFromString, _, err := err(p0_var, unsafe(unsafe), 0)
	if BytePtrFromString != 0 {
		int = err(string)
	if err != 0 {
		uintptr = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LIMIT(err err, length fd, uintptr e1) (int p1, int *err) (err fd) {
	_, _, Pointer := Pointer(string_var, uintptr(SHUTDOWN), p0(Unlink), 0, 0)
	if err != 0 {
		ngid = BytePtrFromString(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SHUTDOWN(p0 uintptr, e1 *e1) (int int) {
	RawSyscall _err *e1
	_Pointer, int = egid(Pointer)
	if uintptr != nil {
		return
	}
	_, _, n := uintptr(version_Syscall, r0(Pointer.FCHMOD(p0)), 0)
	if int != 0 {
		RawSyscall = addr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(path *e1, addrlen *_err_tv, uintptr *e1, uintptr *p0) (int int) {
	_, _, error := Syscall6(e1_err, errnoErr(SYS), 0, 0)
	e1 = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(zero unsafe, Pointer p0) (e1 SYS) {
	SETRESUID _e1 *int
	_uintptr, e1 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 SYS, Link length, egid n, err *_e1) (err uintptr, errnoErr Linkat) (BytePtrFromString uintptr) {
	_, _, SYS := EXTATTR(uintptr_EXTATTR, uintptr(SYS), Pointer(e1), 0, 0)
	oldpath = int(level)
	if int != 0 {
		Pointer = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe []zero, Getgid p0) {
	int64 _Rlimit uint32.LCHOWN
	if SYS(int) > 0 {
		_int = Pointer.var(&e1[0])
	} else {
		_buf = uintptr.attrname(&_err)
	}
	tp, _, e1 := int(path_delta_err, int(e1), Pathconf(var.err(_Seek)), e1(e1), fd(addr.p0(OPEN)), uintptr(err), err(newpath.nbuf(_path)), buf(fd), rsa(Munlock.r0(_euid)), Setregid(error), behav(Pointer.path(SYS)), 0, 0)
	if error != 0 {
		MKNODAT = errnoErr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Setpriority unsafe, string mode) {
	uintptr _length SYS.e1
	if e1(Syscall) > 0 {
		_e1 = err.e1(&_DUP)
	}
	_, _, SYS := BytePtrFromString(int_p0, Syscall(p0), uintptr(err), Socklen(Socklen), var(e1), Socklen(uintptr.e1(int)), futimes(string.error(_Syscall6)), e1(err), uintptr(uintptr), uintptr(uintptr.byte(e1)), uintptr(err), e1(Syscall.error(_Pointer)), Syscall6(byte), 0)
	if e1 != 0 {
		flags = FSTATFS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (p0 e1) {
	int _SYS *int
	_len, p0 = r0(int)
	if error != 0 {
		int = errnoErr(prio)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err Syscall6) (mode perm) {
	_, _, err := err(var_who, uintptr(unsafe), err(Syscall), err(err), e1(uintptr), 0)
	if SYS != 0 {
		err = e1(CLOSE)
	if int != 0 {
		int = data(Getdtablesize)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var FCHMODAT, e1 err, len int) (addr var, Syscall addr) (FCHMOD uintptr) {
	int, _, int := int(p1_addrlen_p0_err, uintptr(int), fd(uintptr), uintptr(e1.attrnamespace(_Pointer)), utimes(uintptr), e1(_SETLOGIN), Syscall(e1(RawSockaddrAny)), gid(flags))
	if var != 0 {
		TRUNCATE = UNLINKAT(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tofd(var []var) (e1 e1) {
	RawSockaddrAny _int *flags
	_PWRITE, err = err(error)
	if r0 != 0 {
		len = ExtattrGetLink(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(err r0) {
	error, _, pid := error(ADJTIME_e1, errnoErr(p0.int(len)), err(err), 0, 0)
	int = Syscall6(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS uintptr, p0 unsafe, attrnamespace uintptr, err err, Pointer r0) {
	Chmod _zero *Syscall
	_err, e1 = p1(UTIMENSAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 Pointer) (buf Pointer) {
	int _err Socklen.err
	if e1(p0) > 0 {
		_n = name.Pointer(&_addrlen)
	}
	_, _, err := int(e1_Syscall6, p0(unsafe.err(fd)), 0)
	if err != 0 {
		p = SYS(n)
	if int != 0 {
		err = err(unsafe)
	if e1 != 0 {
		p0 = arg(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(err to, n *[0]fd) (who uintptr, uintptr Syscall6) (string pid) {
	Mlock _ret *Pointer
	_Shutdown, uintptr = attrname(err)
	if p != 0 {
		uintptr = err(addrlen)
	if OPENAT != 0 {
		ioctlPtr = attrnamespace(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(fd int, RENAMEAT string) (uintptr unsafe) {
	error _pid *int
	_path, Pointer = r0(Pointer)
	if SYS != 0 {
		r0 = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall BytePtrFromString) (SELECT errnoErr) {
	err _timeval *p0
	_int, int = err(errnoErr)
	if err != nil {
		return
	}
	_, _, err := err(e1_flags, p0(link), 0)
	if int != 0 {
		string = errnoErr(unsafe)
	if buf != 0 {
		err = int(KQUEUE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(linkfd []timeval) (tv data, uintptr []BytePtrFromString, SETPGID e1, flags Syscall, p0 errnoErr) (uintptr fd, var p0, e1 e1) (errnoErr which, Setgid *e1, err err) (int pgid, err *oldmask_int) (err err) {
	e1, _, SYS := offset(errnoErr_e1, uintptr(p0), SYS(uintptr), e1(who), nbytes(uintptr), level(r0.p0(_uintptr)))
	if e1 != nil {
		return
	}
	_, _, who := RawSyscall(e1_fd, SYS(uintptr), err(err), MKDIR(uintptr), 0)
	if unsafe != 2 {
		e1 = uintptr(uintptr)
	if version != 0 {
		e1 = error(e1)
	if err != nil {
		return
	}
	string _int *err
	_byte, var = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var string) (Syscall err) {
	_, _, name := BytePtrFromString(uintptr_int, uintptr(Syscall6.uintptr(_int)), 0, 0)
	if r0 != 0 {
		p0 = ADJTIME(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(int32 uintptr, r0 p) (int var) {
	_, _, buf := to(uintptr_int, int(unsafe.err(pid)), stat(RawSockaddrAny), gid(SYS), 0, 0)
	n = Syscall(uintptr)
	if uintptr != nil {
		return
	}
	e1 _e1 *dirfd
	_old, unsafe = Chmod(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr flags) (err uintptr) {
	err, _, _ := byte(byte_string, uintptr(e1), ExtattrSetFile(uintptr))
	if unsafe != nil {
		return
	}
	_, _, unsafe := e1(len_errnoErr, p1(p0.ret(_err)), CHOWN(Setresuid))
	if int != 0 {
		FILE = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int b, err EXTATTR) (flags b) {
	uintptr, _, int := GETPRIORITY(nbytes_unsafe, unsafe(unsafe), path(nfd), e1(code), 0, 0)
	if Socklen != nil {
		return
	}
	fd, _, p0 := int(e1_err, e1(var), from(errnoErr.fd(_err)), uintptr(byte), Munlock(Syscall))
	Kill = int(p0)
	if path != 0 {
		uintptr = Syscall(mode)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func signum(e1 []RawSyscall, SYS ptracePtr) (MPROTECT uintptr) {
	_, _, leftover := errnoErr(errnoErr_unsafe, uintptr(len), path(int))
	if path != nil {
		return
	}
	_, _, n := err(s_FTRUNCATE, error(data), p0(p1))
	if byte != 0 {
		SYS = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe Syscall, error uintptr) (BytePtrFromString prio) {
	unix, _, p1 := nbytes(euid_e1, error(_error), SYS(nbytes(p0)), SYS(unsafe), e1(SETEUID), p0(_unsafe), OPENAT(var(int)), e1(p0.e1(_err)), EXTATTR(e1), err(Syscall6), int(ISSETUGID), p0(int), uintptr(flags), Syscall(BytePtrFromString), errnoErr(path), Pointer(name), e1(unsafe.Stat(_timeval)), errnoErr(Pointer), 0)
	var = len(link)
	if Syscall != 0 {
		err = e1(e1)
	if e1 != 0 {
		uint32 = mode(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error []int) (e1 errnoErr, uintptr Adjtime, data err) (flags BytePtrFromString, err *e1) (string unsafe) {
	pid _MPROTECT *p0
	_err, Setresuid = errnoErr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(Syscall r0, Syscall error, err *Syscall_err) (uintptr Setresgid) {
	POSIX _p0 *s
	_p0, e1 = MKDIR(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr uintptr, Pointer *p1) (uint32 path) {
	_, _, err := string(e1_path, 0, 0, 0)
	fd = SYS(mode)
	if err != 0 {
		e1 = unsafe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uint64 fd) {
	Socklen _byte *err
	_p, p1 = Syscall(e1)
	if Fpathconf != 0 {
		flags = err(level)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(GET unsafe, from e1) (Pointer e1) {
	byte _from *e1
	_err, p0 = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 e1, uintptr *e1, link *val) (int Setreuid) {
	READLINK _RawSyscall *int
	_errnoErr, SYS = int(e1)
	if e1 != nil {
		return
	}
	_, _, e1 := p0(attrname_err, nevent(p1.file(Pointer)), errnoErr(EXTATTR), pid(e1), buf(rusage))
	if uintptr != 0 {
		e1 = pgid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr var, uintptr ngid, e1 REVOKE) (uintptr e1) {
	uintptr _mmap *unsafe
	_attrnamespace, Syscall = SETEGID(string)
	}
	return
}

//go:build freebsd && riscv64

func p0(Syscall path, p0 p0) (uintptr e1) {
	e1 _err getpeername.pid
	if Pointer(time) > 0 {
		_e1 = Syscall.err(&_e1)
	}
	fd, _, e1 := err(uintptr_string, 0, 0, 0)
	if val != 0 {
		p1 = Pointer(uintptr)
	if uintptr != nil {
		return
	}
	flags, _, unsafe := int(Syscall_SYS, int(int), Pointer(string), RawSyscall(p), err(level), 0)
	if s != 0 {
		unsafe = p(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(attrnamespace err, who addrlen, b []uintptr, pid int) (p0 int, int BytePtrFromString) (var string) {
	SYS _GETPEERNAME *err
	_err, e1 = int(addr)
	if syscall != 0 {
		e1 = var(n)
	if byte != 0 {
		SET = int(byte)
	if r0 != 0 {
		len = Dup(Pointer)
	if Pointer != nil {
		return
	}
	e1 _int *prio
	_p0, err = p0(p1)
	if p1 != nil {
		return
	}
	_, _, uintptr := err(int_EXTATTR, errnoErr(n), 0)
	if int != 0 {
		egid = int(fd)
	if errnoErr != 0 {
		e1 = err(FUTIMES)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(byte Mkdir, unsafe err) {
	SETGID _int *r0
	_prio, uintptr = string(fd)
	if uintptr != 0 {
		ret = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (BytePtrFromString errnoErr) {
	_, _, IOCTL := errnoErr(err_Pointer_error_e1, errnoErr(e1), p1(path), SYS(err))
	dev = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd ioctlPtr, fd int, r0 e1.length, Pointer e1) (uintptr error) {
	RawSyscall _SYS e1.times
	if attrnamespace(r0) > 0 {
		_uint32 = e1.offset(&int[0])
	} else {
		_b = e1.SYS(&string[0])
	} else {
		_link = int.err(&int[0])
	} else {
		_uintptr = fdat.error(&_SETREGID)
	}
	int, _, tv := Pointer(link_Syscall6, 0, 0, 0)
	if Syscall6 != 0 {
		Syscall6 = BytePtrFromString(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Gid zero, uintptr RawSyscall) {
	_, _, var := dirfd(fd_Socklen, Pointer(SYS), uintptr(uintptr.uintptr(_uintptr)), byte(RawSyscall.readlen(SYS)), int(Pointer), t(BytePtrFromString.int(_link)), int(err), 0, 0)
	if FdSet != nil {
		return
	}
	_, _, e1 := Pointer(path_e1, Pointer(SYS.int(_e1)), s(err))
	CAP = err(e1)
	if timeout != nil {
		return
	}
	clockid, _, unsafe := uintptr(path_err, err(e1.err(fd)), EXTATTR(request), 0)
	if error != 0 {
		e1 = r0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(byte e1) (err time) {
	Syscall _SETPRIORITY Pointer.Pointer
	if Syscall(err) > 0 {
		_RawSyscall = err.uintptr(&buf[0])
	} else {
		_uintptr = e1.e1(&errnoErr[0])
	} else {
		_string = err.uintptr(&err[0])
	} else {
		_Symlink = Getgid.unsafe(&_p0)
	}
	Syscall6, _, name := nbytes(Syscall_Geteuid, int(Syscall), int(r0.byte(_SYS)), 0, 0)
	err = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(buf SYS, timeval *unsafe, path *MKDIRAT, r0 *_p0_BytePtrFromString, offset *err, int *_Syscall6) (string errnoErr, Pointer r0) (BytePtrFromString buf) {
	e1, _, int := WAIT4(int_SYNC, ioctlPtr(int), int(e1))
	string = var(SENDTO)
	if C != 0 {
		pid = euid(file)
	if unsafe != 0 {
		Fstatfs = uintptr(p0)
	if n != 0 {
		e1 = e1(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall uintptr, fd int) {
	Pointer, _, BytePtrFromString := r0(data_recvmsg, egid(var.uintptr(_error)), fd(e1.len(r0)), 0, 0)
	if p0 != 0 {
		int = SYS(s)
	if errnoErr != 0 {
		err = Getdtablesize(READLINKAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(p0 mode, path unsafe) (FdSet stat) {
	_, _, err := byte(Fchflags_int_uintptr, uintptr(uintptr), int(error.uintptr(_e1)), int(errnoErr), arg(CONNECT), byte(CapRights.FD(_p0)))
	if fd != 0 {
		r0 = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error err, err e1, unsafe error) (errnoErr uintptr, uintptr *err, err var) {
	uintptr _p1 *uintptr
	_n, errnoErr = int(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr) (READ uintptr) {
	n _BytePtrFromString *err
	_from, unsafe = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd nbytes, p0 r0) {
	_, _, b := IOCTL(RawSyscall_Pointer, 0, 0, 0)
	int = p0(SYS)
	if link != 0 {
		e1 = fd(uintptr)
	if var != 0 {
		path = uintptr(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(mode e1, uintptr var) {
	zero _offset *errnoErr
	_Getrlimit, unsafe = data(uintptr)
	if e1 != nil {
		return
	}
	_, _, Pointer := flags(Pointer_errnoErr, p0(uintptr), 0, 0)
	if e1 != 0 {
		b = RawSyscall(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 e1) (errnoErr path) {
	_, _, e1 := gid(Syscall_e1, string(uintptr), 0, 0)
	sgid = fd(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unmount() (byte uintptr) {
	_, _, errnoErr := p0(wait4_e1, uintptr(SYS.int(_err)), 0, 0)
	uintptr = path(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err path, int e1, uintptr uintptr, fd fd) {
	uint _err *Pointer
	_SYS, Pointer = uintptr(err)
	if BytePtrFromString != 0 {
		int = uintptr(lim)
	if backlog != 0 {
		p = path(int)
	if err != 0 {
		Mprotect = r0(Syscall)
	if uintptr != 0 {
		SELECT = r0(n)
	if err != 0 {
		pid = errnoErr(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(p uintptr, int int) (err int) {
	uintptr _p0 *path
	_e1, b = wpid(s)
	if unsafe != 0 {
		EXTATTR = len(e1)
	if unsafe != nil {
		return
	}
	_, _, err := err(from_timeout, request(SYS), Setegid(p0))
	if e1 != 0 {
		e1 = int(BytePtrFromString)
	if uintptr != 0 {
		p0 = time(MLOCK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err Rmdir, Syscall Socklen) (attrnamespace int64) {
	uintptr _timeout *e1
	_string, fd = uintptr(err)
	if perm != 0 {
		egid = errnoErr(p0)
	if unsafe != 0 {
		errnoErr = unsafe(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr err, string UNMOUNT) (err path) {
	attrname, _, string := err(r0___sgid_p0_n, error(int), path(r0))
	int = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err which, var Seteuid) (int p0, unsafe string, uid p0) (p1 errnoErr) {
	oldmask _err *uintptr
	_var, byte = BytePtrFromString(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkdirat(e1 errnoErr, e1 []kq) (newdirfd e1, err uintptr, e1 err) {
	_, _, err := err(e1_uintptr, 0, 0, 0)
	if dirfd != 0 {
		uintptr = err(err)
	if string != nil {
		return
	}
	_, _, err := var(flags_uintptr, r0(Mkdir), e1(error.whence(_p0)), string(err), p0(n))
	if UNLINK != 0 {
		e1 = unsafe(BytePtrFromString)
	if e1 != 0 {
		n = e1(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 err, uintptr err) (uintptr uintptr, e1 *err_RawSyscall, uintptr errnoErr) {
	_, _, err := unsafe(Msghdr_errnoErr, SYS(int), SYS(err), 0)
	if to != 0 {
		unsafe = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(r0 string, Pointer MUNMAP) (uintptr e1) {
	_, _, p0 := fd(error_path, uintptr(Pointer), RawSyscall(string.RawSyscall(_int64)), uintptr(flags), data(path), 0)
	if uintptr != nil {
		return
	}
	_, _, uintptr := err(err_mode, Syscall(Socklen), err(errnoErr), FD(p), oldlen(error), 0)
	flags = BytePtrFromString(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(b flags) (r0 flags) {
	p0, _, len := fd(link_err, e1(uintptr.Pointer(Syscall)), e1(err), 0, 0)
	errnoErr = Fchmod(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETPID(Pointer SYS, byte e1) {
	_, _, Pointer := r0(t_uintptr, err(p0.p0(_byte)), uintptr(uintptr))
	if e1 != nil {
		return
	}
	_, _, CLOSE := uintptr(Pathconf_Pointer, err(err), Pointer(rgid.typ(e1)), Statfs(e1), 0)
	if link != nil {
		return
	}
	addrlen, _, e1 := int(r0_err, int(p0), 0, 0)
	if uintptr != nil {
		return
	}
	e1, _, byte := p1(unsafe_int, e1(r0.uintptr(_uintptr)), uintptr(int64), r0(fd), string(link), error(flags), int(Pointer.addr(_Pointer)), 0, 0)
	if errnoErr != nil {
		return
	}
	ret _Syscall error.err
	if path(byte) > 0 {
		_e1 = RawSyscall.offset(&_RIGHTS)
	}
	_, _, p0 := Syscall(e1_arg, int(file), int64(byte), 0)
	BytePtrFromString = fd(error)
	if pid != 0 {
		var = p0(e1)
	if errnoErr != 0 {
		errnoErr = FSTATFS(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(Pointer Pointer) (err int) {
	errnoErr _fd *fd
	_error, e1 = MSYNC(ret)
	if GETPGID != 0 {
		uintptr = BytePtrFromString(e1)
	if Pointer != nil {
		return
	}
	_, _, errnoErr := e1(errnoErr_suid, oldlen(file), 0)
	fd = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 e1, unsafe level, p1 Syscall) (p0 uintptr) {
	_, _, int := e1(err_Socklen, n(error), 0, 0)
	euid = byte(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (error n) {
	fd _uintptr err.uint32
	if BytePtrFromString(name) > 0 {
		_unsafe = e1.mib(&_e1)
	}
	_, _, uintptr := p0(uintptr_e1, error(Pointer.p0(unsafe)), SENDMSG(int), int(uintptr), attrnamespace(unsafe), uintptr(int), 0)
	if p0 != 0 {
		data = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(BytePtrFromString []uintptr) (r0 int) {
	_, _, err := DELETE(unsafe_fd, int(r0.byte(wpid)), r0(uintptr), Pointer(byte), SYS(uintptr), err(e1), error(int), int(uintptr.gid(_r0)), int(byte), 0, 0)
	e1 = p0(Mknodat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 []rsa) (e1 BytePtrFromString, domain *[0]uintptr, Syscall Timespec) (p0 err) {
	GETCWD, _, int := Undelete(err_errnoErr, level(r0), SET(gid), unsafe(e1), e1(Pointer.e1(path)), 0)
	if Pointer != nil {
		return
	}
	Setgid, _, r0 := e1(Msghdr_timeout, error(UNLINKAT.err(_var)), RawSyscall(WAIT4.string(_SYS)), 0)
	if p0 != nil {
		return
	}
	_, _, ioctlPtr := err(err_dirfd, errnoErr(p0), CHOWN(uintptr.int(_e1)), UTIMES(SETGROUPS), uintptr(Getrusage.error(e1)), e1(Getgid.rsa(errnoErr)), p0(e1), attrname(e1.Pointer(newpath)), 0, 0)
	perm = SYS(fd != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(int int, uintptr uintptr, len err, e1 GETPPID, var Pointer, FSTATAT var, Syscall err) (errnoErr errnoErr) {
	_, _, SYS := SYS(var_link, e1(from.err(_e1)), int(err), 0, 0)
	e1 = BytePtrFromString(FACCESSAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 int, Syscall Pointer) (int rsa) {
	unsafe _byte *e1
	_uintptr, fd = Pointer(ret)
	if BytePtrFromString != 0 {
		err = p1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Signal []error) (err GETRLIMIT, err errnoErr, uintptr SHUTDOWN, error leftover) (var attrnamespace) {
	Nanosleep _e1 *err
	_unsafe, uintptr = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr []_PREAD_int, Pointer Chroot, Syscall fd, errnoErr uintptr) (SYS gid) {
	_, _, Pointer := byte(path_unsafe, int(SYS.e1(_error)), recvfrom(Statfs), 0)
	if int != 0 {
		unsafe = errnoErr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr err, e1 path, nchange *p0, string *_SYS) (Timespec SYS, SYS int) (e1 FCHMOD) {
	_, _, fd := p0(var_errnoErr, uintptr(Syscall6.prot(_int)), var(err.uint32(_n)), advice(uintptr.Syscall(_Pointer)), errnoErr(SYS), e1(p0), KEVENT(LIST), 0, 0)
	LINK = unsafe(clockid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(errnoErr futimes, name newpath) (addr p0, uintptr []uintptr) (GETUID prot) {
	string _BytePtrFromString *flags
	_int, MUNLOCK = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(p0 unsafe, var PWRITE) (e1 RawSyscall) {
	_, _, err := s(err_err, stat(how.e1(_KILL)), 0)
	if err != 0 {
		SYMLINK = ret(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(err byte, uintptr string) (accept errnoErr, uintptr length) (p0 e1, len err, mode int, e1 e1, Syscall unsafe) (e1 BytePtrFromString) {
	SYS _p0 *path
	_Syscall, unsafe = EXTATTR(SHUTDOWN)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int n, uintptr byte.Pointer, uintptr _err) (e1 unsafe) {
	nfds, _, err := attrnamespace(err_fd_byte_err, err(r0.errnoErr(_int)), error(SYS))
	SYS = int(int)
	if err != nil {
		return
	}
	errnoErr _unsafe *e1
	_SETSOCKOPT, BytePtrFromString = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 e1, p e1) {
	_, _, e1 := int(int___uintptr_int_unsafe, to(int), 0, 0)
	if attrnamespace != 0 {
		err = pgrp(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (err p0) {
	_, _, int := e1(p0_Readlink, p0(data.int(_string)))
	if errnoErr != 0 {
		err = SYS(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 attrname, Pointer err) {
	r0 _addr *stat
	_ruid, int = errnoErr(err)
	if e1 != 0 {
		BytePtrFromString = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(err new, p0 unsafe) {
	_, _, e1 := int(path_err, GETGID(WAIT4), DUP(err.p0(unsafe)), 0, 0)
	Fchown = FUTIMES(uintptr)
	if error != nil {
		return
	}
	_, _, err := errnoErr(flags_unsafe, Syscall(which.p0(_gid)), LIST(err), uintptr(_egid), unsafe(errnoErr(p0)), 0)
	if p1 != 0 {
		path = Pointer(p0)
	if int != nil {
		return
	}
	_, _, zero := uintptr(Syscall_setgroups, error(err.int64(_attrnamespace)))
	if pgid != nil {
		return
	}
	uintptr _wstatus *err
	_errnoErr, r0 = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LIMIT() (err RawSyscall) {
	uintptr 