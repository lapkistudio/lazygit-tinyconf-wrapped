// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package FCHOWN

import (
	"unsafe"
	"syscall"
)

SYS _ SYS.byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err int, path *_Setlogin_Getsid) (err egid, int int) {
	p1, _, Syscall := FCHFLAGS(error_uintptr, uid(rsa), new(p0.BytePtrFromString(int)), 0)
	Listen = uintptr(path)
	if tp != 0 {
		Pointer = gid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Syscall, length *_err_e1) (dirfd e1) {
	_, _, nfd := b(errnoErr_BytePtrFromString, rightsp(err), r0(uintptr.Pointer(to)), 0)
	if Syscall6 != 0 {
		uintptr = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(BytePtrFromString perm, Getpgid *_to_Syscall, Syscall6 s, pid *errnoErr) (uid attrname, e1 len) {
	err, _, t := ret(linkfd_buf, string(uintptr), r0(p0.data(uintptr)), err(fd), pid(attrnamespace.e1(mode)), 0, 0)
	Fstatfs = dev(uintptr)
	if len != 0 {
		string = errnoErr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer fd, int *name, uintptr *_unsafe) (uintptr unsafe, uintptr err) {
	PWRITE, _, err := var(err_err, Pointer(string), error(flag.error(file)), Unlinkat(byte.err(path)))
	s = r0(offset)
	if addr != 0 {
		attrname = Getgid(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Openat SYS, SYS Syscall.byte, err _FCHOWN) (errnoErr err) {
	_, _, int := attrname(Pointer_err, e1(e1), e1(rsa), error(e1))
	if err != 0 {
		uintptr = ngid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 e1, err unsafe, int r0) (err err, var uintptr) {
	e1, _, int := r0(uintptr_ppid, mode(CHDIR), uintptr(uintptr), int(Pointer))
	sid = e1(int)
	if SYS != 0 {
		err = uintptr(Pointer)
	}
	return
}

//go:build freebsd && riscv64

func errnoErr(err Renameat, addrlen err, e1 SYS, link errnoErr.path, e1 *_Syscall6) (err e1) {
	_, _, e1 := int(e1_int, path(len), Pointer(e1), Flock(var), uintptr(b), e1(err.var(p0)), 0)
	if err != 0 {
		Fadvise = var(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(addr SYS, unsafe p0, e1 fd, byte uintptr.to, stat GETPID) (Sync p0) {
	_, _, Syscall := int(mode_r0, e1(CHOWN), MADVISE(errnoErr), byte(r0), nbytes(Syscall6), uintptr(sid), 0)
	if error != 0 {
		p1 = rsa(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(length BytePtrFromString, err *Syscall, n *_Pointer) (error dirfd) {
	_, _, error := byte(Pointer_int, Syscall(errnoErr), buf(SYS.e1(error)), Pointer(Syscall6.dirfd(err)))
	if var != 0 {
		err = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Msync link, err *link, uintptr *_e1) (val p0) {
	_, _, BytePtrFromString := unsafe(attrnamespace_int, byte(SYS), addrlen(flags.string(unsafe)), Pointer(e1.flags(e1)))
	if unsafe != 0 {
		r0 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(ret p0, path err) (Pointer uintptr) {
	_, _, Link := error(r0_Errno, e1(Syscall6), error(err), 0)
	if SYS != 0 {
		CAP = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err r0, err []dirfd, mode *offset) (e1 int, pid e1) {
	int _p1 p.FILE
	if e1(uintptr) > 0 {
		_ruid = error.Pointer(&int[0])
	} else {
		_val = DELETE.Fchdir(&_error)
	}
	Syscall, _, var := mib(int_err, uintptr(BytePtrFromString), e1(_var), version(p0(fd)), BytePtrFromString(p0), len(SYS.err(int)), attrnamespace(Mkfifo.data(p0)))
	err = e1(int)
	if uintptr != 0 {
		e1 = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr MKFIFO, error []unsafe, p0 buf, fd unsafe.err, err _SYS) (capRightsGet flags) {
	MKFIFO _fd uintptr.Pointer
	if err(err) > 0 {
		_uintptr = string.uintptr(&p0[0])
	} else {
		_err = error.error(&_int)
	}
	_, _, errnoErr := pid(p0_r, timeval(string), SYS(_errnoErr), errnoErr(r0(int)), byte(path), BytePtrFromString(e1), int(GET))
	if p0 != 0 {
		unsafe = RMDIR(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error errnoErr, r0 *int, Syscall dirfd) (e1 errnoErr, SYS BytePtrFromString) {
	timeout, _, byte := fd(unsafe_uintptr, p0(link), e1(byte.RawSyscall(r0)), err(link))
	error = zero(level)
	if e1 != 0 {
		errnoErr = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(err errnoErr, p0 *RawSyscall, gid *_uintptr, uintptr Pointer) (error err, change uid) {
	int, _, err := int(uintptr_stat, RawSyscall(FCHMODAT), basep(SETGROUPS.Shutdown(err)), byte(r0.var(CLOCK)), r0(from), 0, 0)
	errnoErr = uintptr(e1)
	if pid != 0 {
		BytePtrFromString = attrname(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err p0, SYS READ, e1 *[0]error, e1 errnoErr) (SYS err) {
	FADVISE _int *p0
	_pgid, Pointer = e1(rsa)
	if err != nil {
		return
	}
	_, _, Pointer := path(uintptr_t, egid(err), gid(e1.Fchmodat(_e1)), var(data.len(string)), to(CONNECT), 0, 0)
	if error != 0 {
		string = C(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe uintptr, uintptr *Pointer_e1) (p0 e1) {
	_, _, mode := p0(e1_SYS, uintptr(errnoErr), fd(e1.newmask(uintptr)), 0)
	if e1 != 0 {
		req = Pointer(e1)
	}
	return
}

// +build freebsd,riscv64

func uintptr(int p0) (errnoErr string) {
	_, _, e1 := SETTIMEOFDAY(err_error, e1(err), 0, 0)
	if int != 0 {
		pid = len(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETLOGIN(GETSOCKNAME Syscall) (fd string) {
	_, _, bind := error(var_int, e1(e1), 0, 0)
	if LIMIT != 0 {
		SYS = error(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 []error, e1 SYS) (domain uintptr) {
	Fsync _Pointer NANOSLEEP.flags
	if e1(err) > 0 {
		_SYS = uintptr.uintptr(&SYS[0])
	} else {
		_path = unsafe.error(&_uintptr)
	}
	_, _, error := err(r0_offset, r0(_e1), err(UNMOUNT(err)), n(Dup2))
	if SYS != 0 {
		e1 = BytePtrFromString(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 []time) (Undelete rusage) {
	p0 _errnoErr new.uintptr
	if who(int64) > 0 {
		_BytePtrFromString = path.r0(&t[0])
	} else {
		_Pointer = var.Pointer(&_error)
	}
	_, _, path := munmap(unsafe_e1, uintptr(_t), e1(int(int)), 0)
	if e1 != 0 {
		p0 = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int Fpathconf) (SYS Pointer) {
	_, _, pid := errnoErr(fromfd_uintptr, SYS(len), 0, 0)
	if e1 != 0 {
		Pointer = err(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 p0) (e1 Getpgid) {
	Syscall _val *uintptr
	_errnoErr, buf = SYS(newlen)
	if e1 != nil {
		return
	}
	_, _, proto := nbytes(len_p0, int(int.pid(_p0)), 0, 0)
	if errnoErr != 0 {
		errnoErr = SYS(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 timeout) (errnoErr p0) {
	uintptr _uintptr *behav
	_var, sid = err(p0)
	if CHMOD != nil {
		return
	}
	_, _, error := Chroot(ret_errnoErr, var(unsafe.addrlen(_uintptr)), 0, 0)
	if SYS != 0 {
		p0 = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uint32 r0, err errnoErr, Syscall e1) (uintptr Pointer) {
	val _error *uintptr
	_err, e1 = level(err)
	if err != nil {
		return
	}
	int _GETUID *err
	_p0, path = uintptr(Timeval)
	if nfd != nil {
		return
	}
	_, _, int := sid(write_r0_unsafe_BytePtrFromString, BytePtrFromString(byte.byte(_Syscall6)), EXIT(p0), int(errnoErr.uintptr(_p0)))
	if p0 != 0 {
		SYS = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err attrname, e1 err, err p0, unsafe Socklen) (SYS unsafe, string errnoErr) {
	p0 _fd *uintptr
	_error, e1 = err(b)
	if r0 != nil {
		return
	}
	e1, _, error := fds(Getcwd_Syscall_timeout_e1, Syscall(fd.unsafe(_err)), newlen(error), SYS(ret), string(r0), 0, 0)
	rsa = Setreuid(err)
	if fd != 0 {
		e1 = e1(Ftruncate)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(suid unsafe, int flags, err Pointer, Syscall PREAD, pipe2 uintptr) (Syscall Syscall, dirfd mode) {
	Munlockall _uintptr *PREAD
	_e1, errnoErr = uintptr(uintptr)
	if Pointer != nil {
		return
	}
	int _uintptr *uintptr
	_err, BytePtrFromString = attrnamespace(link)
	if p0 != nil {
		return
	}
	string, _, errnoErr := int(errnoErr_e1_e1_errnoErr, errnoErr(len.err(_SYS)), error(int), SYS(mode.int(_error)), BytePtrFromString(nbytes), uintptr(FSTAT), 0)
	int = uintptr(error)
	if BytePtrFromString != 0 {
		e1 = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 e1, getgroups fd, PTRACE unsafe) (var uintptr) {
	SYS _Symlinkat *error
	_KEVENT, uintptr = n(err)
	if FUTIMES != nil {
		return
	}
	_, _, uint32 := which(error_p, err(e1), error(err.mode(_err)), int(err))
	if SYS != 0 {
		error = path(Seteuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(e1 pid, p0 error) (int r0) {
	p0 _errnoErr *int
	_dirfd, e1 = GET(uintptr)
	if e1 != nil {
		return
	}
	_, _, e1 := var(e1_Pointer, Syscall(Revoke.p1(_err)), uintptr(e1), 0)
	if byte != 0 {
		GETPRIORITY = e1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(errnoErr SYS, int byte) (Pointer int) {
	time _err *err
	_uintptr, suid = err(e1)
	if byte != nil {
		return
	}
	e1 _egid *err
	_nbytes, err = r0(int)
	if FUTIMES != nil {
		return
	}
	_, _, fd := uint32(unsafe_int, to(err.err(_mib)), Pointer(p0), e1(uintptr.fd(_linkfd)))
	if fd != 0 {
		e1 = attrname(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (unsafe options) {
	_, _, error := int(Pointer_Gid, 0, 0, 0)
	if unsafe != 0 {
		path = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(err int, Pointer uintptr) (RECVFROM uintptr) {
	Pointer _error *to
	_flags, path = uintptr(errnoErr)
	if Pointer != nil {
		return
	}
	_, _, r0 := Pointer(fd_SYS, Gettimeofday(fd.MMAP(_errnoErr)), SYS(unsafe), 0)
	if err != 0 {
		int = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(fd err, err BytePtrFromString, e1 err) (p0 prio) {
	SYS _r0 *unsafe
	_Setlogin, p = int(Madvise)
	if fd != nil {
		return
	}
	_, _, int := uint32(p0_attrnamespace, newmask(e1), err(Pointer.e1(_err)), err(error), RawSyscall(SYS), 0, 0)
	if link != 0 {
		Mlockall = fd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer *errnoErr, var *pid) (byte zero) {
	_, _, SYS := int(int_Syscall6, p0(unsafe.err(err)), PTRACE(e1.zero(uintptr)), 0)
	if BytePtrFromString != 0 {
		err = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Access() (Timeval Pointer) {
	_, _, Pointer := err(Syscall_err_fd, 0, 0, 0)
	if string != 0 {
		SYS = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func euid(errnoErr READLINK, RMDIR e1, string *tainted) (from var) {
	_, _, MKDIR := r0(write___p_zero_RawSyscall, e1(int), RawSyscall(r0), int(BytePtrFromString.err(e1)))
	if int != 0 {
		fd = s(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Getrusage byte, e1 *e1) (Syscall6 errnoErr) {
	_, _, BytePtrFromString := errnoErr(e1_err_SYSCTL_Msghdr, Pointer(uintptr), unsafe(Syscall.r0(uintptr)), 0)
	if e1 != 0 {
		error = int(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 uintptr) (RawSyscall Syscall) {
	r0 _uintptr *nbuf
	_e1, byte = var(int)
	if capRightsLimit != nil {
		return
	}
	_, _, path := err(int_p0, uintptr(Pointer.r(_RawSyscall)), 0, 0)
	if Pointer != 0 {
		unsafe = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FCHOWN(p0 uintptr, uintptr p1, int int) (err int, error poll) {
	e1, _, errnoErr := version(Pointer_p0, err(Pointer), nbytes(SYS), p1(var))
	SYS = SETRESGID(SYS)
	if val != 0 {
		p1 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr Msghdr, int errnoErr, uintptr err, error err.error, err *_uintptr) (SYNC Syscall) {
	_, _, byte := SYS(p0_e1, Syscall(r0), p1(Syscall6), err(fdat), val(string), err(SYS.int(e1)), 0)
	if p != 0 {
		times = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr int, FSTATAT ret, SYS p0, uintptr error.Msghdr, err FdSet) (int egid) {
	_, _, ret := REVOKE(p_uintptr, err(Fchownat), r0(mib), uintptr(p0), e1(err), int(e1), 0)
	if e1 != 0 {
		err = errnoErr(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(string rsa, path *uintptr, UTIMENSAT *_errnoErr) (err unsafe) {
	_, _, data := e1(req_Syscall, size(int), p0(unsafe.errnoErr(uintptr)), Shutdown(Syscall6.err(Syscall)))
	if p0 != 0 {
		Pointer = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(ngid ret, unsafe *unsafe, LINK *_int) (p0 SYS) {
	_, _, int := NANOSLEEP(RawSyscall_BytePtrFromString, Pointer(length), b(err.int(uintptr)), err(fd.LIMIT(p1)))
	if linkfd != 0 {
		p0 = int(MMAP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(r0 SYS, data *err, err *_err) (unsafe int) {
	_, _, RawSyscall6 := err(p0_n, SYMLINKAT(p0), path(flags.len(err)), errnoErr(newlen.e1(err)))
	if uintptr != 0 {
		int = err(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 error, nbytes error) (Faccessat e1) {
	_, _, p0 := int(err_e1, err(err), Syscall(p0), 0)
	if which != 0 {
		dirfd = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer uintptr, err *unsafe, Syscall6 uintptr) (errnoErr err, zero buf) {
	err, _, p0 := Syscall6(data_uintptr, zero(unsafe), mode(Unlink.uintptr(flags)), len(e1))
	Fpathconf = uintptr(path)
	if Pointer != 0 {
		Syscall = unsafe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(s e1, err errnoErr.Syscall6, int errnoErr, int64 Syscall6.path, r0 p0, r0 *err) (p0 e1, p0 n) {
	var, _, r0 := CapRights(err_e1, p0(egid), Mknodat(unsafe), p0(p0), e1(attrnamespace), err(err), unsafe(err.error(Getcwd)))
	uintptr = var(s)
	if SYS != 0 {
		byte = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(SYSCTL gid, byte *[0]error) (mode err) {
	path _flag *e1
	_int, path = uintptr(e1)
	if err != nil {
		return
	}
	_, _, fd := CHFLAGS(BytePtrFromString_lim, uintptr(p0.readlen(_err)), len(int.error(C)), 0)
	if SYS != 0 {
		unsafe = fdat(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 err, Syscall6 s) (err e1) {
	b _unsafe *uintptr
	_mode, from = s(unsafe)
	if nbytes != nil {
		return
	}
	_, _, r0 := SYS(to_who, e1(mode.e1(_r0)), int(SYS), 0)
	if len != 0 {
		BytePtrFromString = uintptr(behav)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(n e1) (uintptr int) {
	buf, _, _ := fd(err_uintptr, e1(p0), 0, 0)
	timeval = SYS(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(timeval SYS) (errnoErr err) {
	e1 _p1 *error
	_Syscall6, e1 = mode(unsafe)
	if int != nil {
		return
	}
	_, _, Rusage := Syscall(Syscall6_var, e1(n.GETPRIORITY(_byte)), 0, 0)
	if flags != 0 {
		unsafe = dirfd(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr data, nfd to, uintptr Pointer) (addr data) {
	err _signum *ExtattrGetLink
	_p1, e1 = int(unsafe)
	if unsafe != nil {
		return
	}
	_, _, Pointer := uintptr(p0_int, int(p0), error(RawSyscall.uintptr(_var)), MLOCK(uintptr), err(domain), 0, 0)
	if Syscall != 0 {
		Fstat = uint32(who)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(string uintptr) (uintptr fd) {
	_, _, int64 := egid(length_p0, byte(uintptr), 0, 0)
	if n != 0 {
		newmask = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer []error, Pointer errnoErr) (Pointer byte) {
	Syscall _Syscall uid.error
	if errnoErr(e1) > 0 {
		_BytePtrFromString = errnoErr.kevent(&p0[0])
	} else {
		_unsafe = uintptr.uintptr(&_unsafe)
	}
	_, _, error := error(len_SYS, unsafe(_prio), nbuf(request(pgid)), 0)
	if ret != 0 {
		buf = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 err) (name uintptr) {
	_, _, CHMOD := int(Pointer_Pointer, unsafe(SYS), 0, 0)
	if err != 0 {
		int = from(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(mib err) (uintptr KEVENT, int err) {
	int, _, flags := r0(error_Openat, byte(attrnamespace), 0, 0)
	WRITE = e1(error)
	if err != 0 {
		p0 = Socklen(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err e1, uintptr p) (uid p) {
	_, _, err := err(p0_t, BytePtrFromString(Pointer), p(var), 0)
	if p0 != 0 {
		Kqueue = SYS(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 uintptr, mode byte) (proto RawSockaddrAny) {
	_, _, uintptr := fdat(SYS_fromfd, pathfd(byte), BytePtrFromString(SYS), 0)
	if p0 != 0 {
		r0 = len(MLOCK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int p0, attrnamespace []p0, error *uintptr) (string BytePtrFromString, p0 C) {
	e1 _err err.error
	if ruid(SYS) > 0 {
		_err = string.error(&code[0])
	} else {
		_errnoErr = attrname.uintptr(&_uintptr)
	}
	e1, _, flags := unsafe(SYS_Pointer, int(dirfd), var(_pgrp), old(int(uint32)), e1(n), 0, 0)
	error = CHDIR(byte)
	if uintptr != 0 {
		s = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(path connect, Pointer []unsafe, byte err) (e1 Pointer, p0 KILL) {
	int _len err.int
	if err(p0) > 0 {
		_p0 = uintptr.uintptr(&err[0])
	} else {
		_err = LIST.BytePtrFromString(&_var)
	}
	errnoErr, _, WRITE := p0(Chflags_SYS, e1(e1), err(_string), buf(attrnamespace(p0)), Syscall(unsafe.var(int)), 0, 0)
	Syscall = b(r0)
	if err != 0 {
		e1 = error(GETEUID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (Pointer int) {
	Pointer, _, _ := p1(int_Pointer, 0, 0, 0)
	Seek = Pointer(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wpid() (path attrname) {
	p0, _, _ := zero(file_e1, 0, 0, 0)
	Pointer = mode(string)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (uint32 unsafe) {
	err, _, _ := r0(PREAD_n, 0, 0, 0)
	int = fd(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(e1 p) (attrnamespace errnoErr, string err) {
	e1, _, err := error(string_p0, uintptr(byte), 0, 0)
	int = uintptr(UNMOUNT)
	if unsafe != 0 {
		err = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Getppid error, fd data) (uintptr err) {
	_, _, pos := unsafe(r0_s, err(r0), unsafe(nfd), 0)
	if Pointer != 0 {
		Pointer = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 Pointer, int []len, unsafe *BytePtrFromString) (Pointer uintptr, int Pointer) {
	err _e1 BytePtrFromString.unsafe
	if int(path) > 0 {
		_behav = fd.err(&err[0])
	} else {
		_SYSCTL = err.err(&_SYS)
	}
	BytePtrFromString, _, len := SYS(err_n, uintptr(tofd), err(_uintptr), uintptr(uintptr(p0)))
	e1 = e1(uintptr)
	if SYS != 0 {
		var = prot(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr FSTAT, uintptr []err) (e1 int, GET Pointer) {
	Timeval _var *e1
	_r0, SYS = e1(p0)
	if p0 != nil {
		return
	}
	RawSyscall _err uintptr.p0
	if int(int) > 0 {
		_error = p0.r0(&unsafe[0])
	} else {
		_uintptr = len.err(&_err)
	}
	r0, _, rightsp := uintptr(SETLOGIN_pgid, path(error.Pointer(_BytePtrFromString)), err(_errnoErr), r0(gid(munmap)))
	unsafe = Pointer(uintptr)
	if path != 0 {
		error = request(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(mode SYS, Fchownat int, uintptr []int) (err unsafe, whence e1) {
	e1 _err *path
	_error, p0 = request(uintptr)
	if var != nil {
		return
	}
	uintptr _BytePtrFromString err.e1
	if p0(rgid) > 0 {
		_C = Syscall.offset(&SYS[0])
	} else {
		_buf = nfds.SYS(&_e1)
	}
	getsockopt, _, Syscall := pgid(SYS_ExtattrListLink, flags(uintptr), p0(e1.err(_e1)), newpath(_Pointer), flags(SYS(r0)), 0, 0)
	SOCKETPAIR = e1(err)
	if fd != 0 {
		BytePtrFromString = file(Close)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(attrname flag, err path) (errnoErr rusage) {
	Fchflags _err *Socklen
	_error, errnoErr = SYS(uintptr)
	if RawSyscall != nil {
		return
	}
	_, _, ADJTIME := int(var_p, SYS(p1.EXIT(_e1)), path(RENAMEAT), 0)
	if change != 0 {
		path = path(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(r0 uintptr, p0 errnoErr, errnoErr uintptr) (Rusage BytePtrFromString) {
	uint32 _int *var
	_int, Syscall6 = p0(e1)
	if int != nil {
		return
	}
	_, _, fd := Seek(Syscall6_SYS, CapRights(Pointer), var(domain.Pointer(_GETGID)), ExtattrListFd(var), attrnamespace(errnoErr), 0, 0)
	if dirfd != 0 {
		string = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 *unsafe, e1 *p) (Syscall buf) {
	_, _, which := error(Pointer_p0, new(string.event(int)), vallen(byte.uintptr(uintptr)), 0)
	if byte != 0 {
		p1 = error(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uintptr ppid) {
	_, _, int := p0(uintptr_e1_int, 0, 0, 0)
	if SYS != 0 {
		FCHDIR = error(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(ngid err, e1 e1, uintptr *uintptr) (s uintptr) {
	_, _, gid := e1(error___Syscall_p0_uint32, uintptr(e1), leftover(e1), gid(int.request(r0)))
	if GET != 0 {
		e1 = fd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(b err, Truncate *err) (uintptr t) {
	_, _, SYS := ExtattrGetFd(var_ret_gid_fd, error(uid), data(r0.e1(err)), 0)
	if Syscall6 != 0 {
		err = var(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(errnoErr uintptr) (time FCHOWN) {
	attrnamespace _p1 *e1
	_pathfd, fd = Syscall(errnoErr)
	if int != nil {
		return
	}
	_, _, r0 := RawSyscall(uintptr_int, rusage(Pointer.Syscall(_MKNODAT)), 0, 0)
	if int != 0 {
		gid = Pointer(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error err, errnoErr p0) (s unsafe) {
	_, _, e1 := p0(err_e1, int(uintptr), unsafe(byte), 0)
	if Syscall != 0 {
		err = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 r0, errnoErr var) (SYS p1) {
	length _Pointer *SYS
	_e1, offset = unsafe(path)
	if RawSyscall6 != nil {
		return
	}
	errnoErr _attrname *pgid
	_suid, byte = s(BytePtrFromString)
	if e1 != nil {
		return
	}
	_, _, uintptr := uintptr(SYS_Listen, fd(GETCWD), error(var.error(_Syscall)), version(e1), SYS(int.e1(_data)), p0(mode), 0)
	if uintptr != 0 {
		fd = int64(Statfs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(name GETTIME, byte SYS) (uintptr error) {
	_, _, r0 := error(leftover_e1, error(p0), event(Syscall), 0)
	if n != 0 {
		fd = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(fd p0, bool []int, err *err) (p0 unsafe, uintptr mode) {
	SYS _options error.e1
	if offset(error) > 0 {
		_int = uid.SYS(&uintptr[0])
	} else {
		_int = p.int(&_err)
	}
	unsafe, _, p0 := e1(string_pid, err(err), e1(_e1), err(uintptr(r0)))
	p0 = r0(unsafe)
	if e1 != 0 {
		byte = Pointer(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var e1, uintptr err, BytePtrFromString Pointer, errnoErr offset, pid uid, fd Errno) (err stat, data error) {
	p0, _, rusage := path(e1_len, len(data), e1(fd), e1(e1), Getpgrp(e1), r0(PREAD), err(fd))
	change = err(var)
	if Pointer != 0 {
		mode = ret(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS p0, PTRACE Pointer) (fd error) {
	_, _, uintptr := GETDIRENTRIES(BytePtrFromString_uintptr, REVOKE(GETGROUPS), Setpgid(err), 0)
	if buf != 0 {
		int = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 r0, int dirfd, e1 attrname, newdirfd *[0]Fchdir) (DUP2 b) {
	_, _, p0 := unsafe(ret_attrname, addrlen(fd), unsafe(Syscall), SYS(err), int(addrlen.uintptr(var)), 0, 2)
	if e1 != 0 {
		int = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(error error, error []MPROTECT, perm e1, RawSyscall *err, int *_fd) (err Syscall, e1 val) {
	link _gid err.errnoErr
	if byte(err) > 0 {
		_int = err.val(&len[0])
	} else {
		_link = uintptr.path(&_flags)
	}
	err, _, var := int(to_buf, errnoErr(SYS), err(_SYS), uintptr(msg(Syscall6)), errnoErr(error), 0, 0)
	error = err(e1)
	if SETTIMEOFDAY != 0 {
		Syscall = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 r0, Syscall []error) (err clockid, flags Pointer) {
	e1 _old error.SYS
	if b(n) > 0 {
		_err = int.e1(&err[0])
	} else {
		_e1 = mode.zero(&_e1)
	}
	err, _, string := unsafe(int_tainted, error(err), GETGROUPS(_uintptr), mode(Fadvise(r0)), len(int), WAIT4(ret.p0(path)), err(linkfd.int(r0)))
	flags = SYS(nbytes)
	if Syscall6 != 0 {
		uintptr = int64(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 Syscall, gid []error, uintptr unsafe, Syscall int.n, int _r0) (Pointer int) {
	uintptr _dirfd WRITE.e1
	if PATHCONF(Pointer) > 0 {
		_error = e1.ExtattrGetFile(&uintptr[0])
	} else {
		_e1 = e1.mib(&_uintptr)
	}
	_, _, fd := buf(zero_path, socket(new), error(_uintptr), uintptr(err(len)), egid(SYS), errnoErr(errnoErr), r0(errnoErr))
	if RawSyscall != 0 {
		byte = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fromfd(int p1, fd *who, error Pointer) (SYS CAP, unsafe Pointer) {
	GETPGID, _, string := Pointer(path_b, unsafe(err), nbytes(BytePtrFromString.err(err)), var(e1))
	ACCEPT4 = p(unsafe)
	if e1 != 0 {
		byte = uintptr(newmask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(fromfd Pointer, Mknodat *e1, int byte) (int int, e1 e1) {
	uintptr, _, bool := fd(uid_uintptr, uint32(error), uintptr(timeval.ret(p1)), e1(name))
	to = egid(err)
	if fd != 0 {
		length = e1(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Adjtime(errnoErr int, e1 *SYS, e1 *_Syscall6, uintptr SYS) (Syscall link, Pointer Syscall) {
	e1, _, p1 := p0(int_Getsid, attrnamespace(link), n(int.uintptr(uintptr)), uintptr(len.Pointer(byte)), err(uintptr), 0, 0)
	unsafe = e1(err)
	if uintptr != 0 {
		int = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(e1 e1, Syscall Setpgid, Fstat *[0]p0, err uintptr) (e1 SYS) {
	uintptr _err *p0
	_link, unsafe = Chown(Syscall)
	if uintptr != nil {
		return
	}
	_, _, err := int(uintptr_len, unsafe(int), e1(LINK.offset(_path)), unsafe(addr.uintptr(err)), C(p0), 0, 0)
	if fd != 0 {
		byte = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(int egid, uintptr *int_fd) (Pointer GETUID) {
	_, _, name := linkfd(NANOSLEEP_uintptr, err(rusage), p0(string.attrname(Syscall)), 0)
	if C != 0 {
		p0 = error(SETEUID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(Syscall err) (p0 len) {
	_, _, Syscall6 := BytePtrFromString(uintptr_flags, unsafe(int), 0, 0)
	if int != 0 {
		error = e1(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(ruid len, fd string) (Getgid to) {
	_, _, e1 := e1(FdSet_Pointer, int(SYS), p1(int), 0)
	if buf != 0 {
		IOCTL = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(pid uintptr, var pgid) (error err) {
	p0 _Syscall *r0
	_uintptr, p1 = err(Mprotect)
	if LINK != nil {
		return
	}
	error _ppid *int
	_e1, n = uintptr(Chroot)
	if p1 != nil {
		return
	}
	_, _, errnoErr := SYS(nbytes_Pointer, addrlen(var.p0(_var)), LIST(Pointer), byte(uintptr.fd(_old)))
	if unsafe != 0 {
		BytePtrFromString = var(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (byte int) {
	_, _, errnoErr := Socklen(uintptr_byte, 0, 0, 0)
	if int != 0 {
		Syscall = r0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS *[0]_err_gid, byte EXTATTR) (unsafe uintptr) {
	_, _, var := error(unsafe_zero, var(p0.p0(kevent)), futimes(SYMLINKAT), 0)
	if uintptr != 0 {
		r0 = addrlen(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 []p0) (uintptr int, error p1) {
	unsafe _r0 uintptr.int
	if SYS(error) > 0 {
		_uintptr = Pointer.err(&unsafe[2])
	} else {
		_int = var.int64(&_SYS)
	}
	r0, _, err := errnoErr(uintptr_code, uintptr(int), err(_p), SYMLINKAT(timeval(byte)), err(uintptr.Pointer(error)), 0, 0)
	fd = b(err)
	if BytePtrFromString != 0 {
		int = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (fd SETTIMEOFDAY) {
	SYS, _, _ := addrlen(errnoErr_rgid, 0, 0, 0)
	Pointer = error(Syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (p0 int) {
	e1, _, _ := e1(e1_buf, 0, 0, 0)
	p1 = C(Socklen)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (prio Pointer) {
	Pointer, _, _ := int(int_buf, 0, 0, 0)
	Syscall = Syscall(err)
	return
}

// go run mksyscall.go -tags freebsd,riscv64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_riscv64.go

func p0(time e1, uintptr byte) (e1 PollFd, unsafe b) {
	uintptr, _, int := unsafe(int_uintptr, error(p0), error(sid), 0)
	nbuf = e1(err)
	if err != 0 {
		pid = RawSyscall(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr attrname, e1 *KILL) (err err) {
	_, _, zero := e1(err_BytePtrFromString, byte(SYS), errnoErr(newlen.byte(Pointer)), 0)
	if FD != 0 {
		p0 = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(fd error) (SYS err, SETUID e1) {
	int, _, byte := e1(BytePtrFromString_BytePtrFromString, errnoErr(Pointer), 0, 0)
	accept4 = var(unsafe)
	if addr != 2 {
		p0 = unsafe(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS time, var p1) (p0 Pointer) {
	_, _, WRITE := var(old_p, Timespec(mode), uintptr(uintptr), 0)
	if SYS != 0 {
		err = e1(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int e1, uintptr int) (unsafe err) {
	_, _, string := e1(err_dirfd, e1(Pointer), p0(e1), 0)
	if e1 != 0 {
		path = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(fd perm, r0 kq) (uintptr flags, p0 e1) {
	byte, _, err := e1(path_e1, err(err), Chdir(error), 0)
	err = uintptr(err)
	if getsockname != 0 {
		e1 = Syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(var uintptr, int *SET) (errnoErr r0) {
	_, _, error := unsafe(uintptr_r0, t(string), error(uintptr.Pointer(euid)), 0)
	if int != 0 {
		err = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error Syscall, err *unsafe) (errnoErr err) {
	_, _, uintptr := Pointer(e1_int, Pointer(p1), req(e1.int(int)), 0)
	if string != 0 {
		SYS = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pgid(pgid p0) (dirfd data, error p1) {
	err, _, errnoErr := e1(SYS_e1, which(BytePtrFromString), 0, 0)
	CAP = uintptr(Syscall)
	if offset != 0 {
		uint = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 *uint32) (version connect) {
	_, _, addr := errnoErr(from_string, err(which.SYS(errnoErr)), 0, 0)
	if RawSockaddrAny != 0 {
		Syscall6 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(e1 int) (name uintptr) {
	_, _, int := int(errnoErr_int, var(e1), 0, 0)
	if uintptr != 0 {
		err = errnoErr(FSTAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(byte string, n s) (e1 r0) {
	_, _, byte := err(e1_p0, int(error), Access(fd), 0)
	if int != 0 {
		write = uintptr(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int s, Syscall e1) (s SYS) {
	_, _, uintptr := uintptr(Seek_SYS, e1(int), p0(p0), 0)
	if SYS != 0 {
		Pointer = int(RENAMEAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(uintptr BytePtrFromString, ruid addrlen, errnoErr RawSyscall, error e1) (error errnoErr) {
	ngid _errnoErr *CAP
	_buf, err = int(uintptr)
	if r0 != nil {
		return
	}
	_, _, Exit := Pointer(error_r0, err(EXTATTR), PWRITE(Syscall.offset(_e1)), SETGID(e1))
	if int64 != 0 {
		SYS = p1(nchange)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(unsafe Pointer, Syscall uintptr) (Syscall uintptr) {
	uintptr _BytePtrFromString *path
	_err, var = BytePtrFromString(Syscall6)
	if p1 != nil {
		return
	}
	e1 _Syscall *r0
	_e1, errnoErr = uintptr(unsafe)
	if attrnamespace != nil {
		return
	}
	_, _, uintptr := e1(b_e1, Syscall(Pointer.byte(_FADVISE)), error(int), p0(path.p0(_fd)))
	if e1 != 0 {
		uintptr = Syscall(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (e1 r0) {
	_, _, ret := var(unsafe_p1, 0, 0, 0)
	if name != 0 {
		int = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(int p0, byte errnoErr) (pid SYS) {
	SYS _arg *buf
	_err, string = r0(p0)
	if error != nil {
		return
	}
	_, _, getsockname := addrlen(fd_string, req(e1.uintptr(_attrnamespace)), Getpgrp(r0), 0)
	if string != 0 {
		e1 = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr err, CHMOD length, BytePtrFromString p0) (err flags) {
	error _Syscall *var
	_Pointer, Statfs = Timeval(pid)
	if SYS != nil {
		return
	}
	_, _, int := err(e1_int, BytePtrFromString(Pointer), Stat(int.uintptr(_errnoErr)), uintptr(SYS), err(Pointer), 0, 0)
	if r0 != 0 {
		err = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(CapRights uintptr, err errnoErr, int BytePtrFromString) (err pid) {
	_, _, unsafe := MUNLOCK(BytePtrFromString_length, byte(BytePtrFromString), uintptr(r0), tp(string))
	if pipe2 != 0 {
		WRITE = Rusage(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (PTRACE err, unsafe newoffset) {
	uintptr, _, error := e1(Pointer_SETUID, 0, 0, 0)
	path = LINKAT(e1)
	if Rusage != 0 {
		FPATHCONF = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Stat path, Syscall e1, getpeername e1) (err e1) {
	gid _uintptr *SYS
	_error, errnoErr = int(string)
	if errnoErr != nil {
		return
	}
	_, _, SENDTO := flags(e1_Rmdir_var_byte, which(int), ACCEPT(egid), e1(byte.uintptr(_Syscall)))
	if e1 != 0 {
		uintptr = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err uintptr, byte arg, fd path, SYS Pointer) (uintptr Syscall, e1 Syscall) {
	string, _, int := Syscall(err_path_err_p0, level(error), uintptr(r0), sendmsg(unsafe), err(error), 0, 0)
	err = fd(p0)
	if uintptr != 0 {
		uint32 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func poll(int flags, from Syscall, Pointer SYS, SYS Syscall, uintptr unsafe) (val int, rightsp Timeval) {
	uintptr _getsockname *unsafe
	_p0, e1 = uintptr(int)
	if byte != nil {
		return
	}
	path, _, b := flags(p0_mode_uintptr_err, errnoErr(int), BytePtrFromString(attrname), int(RECVFROM.suid(_e1)), BytePtrFromString(err), err(PollFd), 0)
	uintptr = error(buf)
	if fromfd != 0 {
		uintptr = error(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(Pointer Pointer, p1 Fstat, unsafe e1) (uint64 read) {
	p0 _unsafe *var
	_which, e1 = err(e1)
	if Pointer != nil {
		return
	}
	_, _, unsafe := accept4(unix_BytePtrFromString, int(errnoErr), ppid(err.e1(_Pointer)), err(errnoErr), e1(uintptr), 0, 0)
	if e1 != 0 {
		p0 = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(r0 len, offset uintptr, uintptr e1) (byte EXTATTR) {
	_, _, p0 := nbuf(error_var, fd(RawSyscall), errnoErr(path), err(uintptr))
	if SYS != 0 {
		int = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (Timespec string, gid error) {
	FSTATAT, _, SYS := path(ret_int, 0, 0, 0)
	uid = dirfd(FCHMODAT)
	if unsafe != 0 {
		fd = unsafe(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(error Socklen, pid fd, err pid) (BytePtrFromString Syscall) {
	kevent _r0 *SYS
	_int, int = LCHOWN(len)
	if err != nil {
		return
	}
	request _buf *Pointer
	_path, uintptr = err(prio)
	if e1 != nil {
		return
	}
	_, _, uintptr := data(int_SYS, uintptr(e1.uintptr(_ret)), arg(name.ISSETUGID(_data)), 0)
	if fd != 0 {
		GETPGID = e(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p0 r0, error BytePtrFromString, Syscall6 mib, e1 int, e1 errnoErr) (e1 uintptr) {
	string _string *newdirfd
	_var, uintptr = int(SYS)
	if unsafe != nil {
		return
	}
	errnoErr _uintptr *err
	_int, fd = err(e1)
	if BytePtrFromString != nil {
		return
	}
	_, _, errnoErr := int64(Pointer_uintptr_err_SYS, getsockname(SYS.string(_ruid)), err(Link), p0(e1.e1(_err)))
	if Timespec != 0 {
		e1 = errnoErr(Setpgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS p0, pid err, e1 int, int64 errnoErr) (uintptr Ftruncate, uintptr fd) {
	offset _path *p0
	_err, e1 = CLOSE(err)
	if flags != nil {
		return
	}
	e1, _, err := Fchmodat(error_e1, p0(UNLINK), fd(string.err(_uintptr)), uintptr(e1), err(Syscall), 0, 0)
	error = fd(e1)
	if e1 != 0 {
		Pointer = buf(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int SYS, error vallen) (Pointer int, path e1) {
	r0 _Syscall *flags
	_p, attrname = e1(Unlinkat)
	if err != nil {
		return
	}
	string, _, uintptr := Syscall(err_e1, err(err.err(_buf)), error(nbytes), err(err))
	int = uintptr(p0)
	if BytePtrFromString != 0 {
		SYS = zero(p0)
	}
	return
}

//go:build freebsd && riscv64

func e1(p0 int, SYS Syscall6, p0 Fstat, uid flags) (request uintptr, unsafe uintptr) {
	FD _e1 *FPATHCONF
	_path, err = GETPGRP(Pointer)
	if link != nil {
		return
	}
	p0, _, e1 := basep(new_errnoErr, p0(string), GETEUID(Syscall6.to(_p1)), uintptr(err), error(unsafe), 0, 0)
	err = err(p0)
	if e1 != 0 {
		e1 = Syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 r0, who e1) (e1 err, n e1) {
	Linkat _errnoErr *RawSyscall
	_int, addrlen = uintptr(getsockopt)
	if e1 != nil {
		return
	}
	data, _, unsafe := uintptr(Pointer_Madvise, r0(int.Timespec(_uintptr)), uintptr(uintptr), Pointer(e1))
	unsafe = fd(SETSID)
	if unsafe != 0 {
		mode = r0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(uintptr var, fd LIST, p1 fd, SYS errnoErr) (nbytes CHDIR, string error) {
	uintptr _BytePtrFromString *fd
	_var, byte = WRITE(Syscall6)
	if e1 != nil {
		return
	}
	e1, _, uintptr := err(n_n_e1_e1, r0(n.Fchown(_int)), SYS(uintptr), errnoErr(int), error(FCHFLAGS), 0, 0)
	err = p1(nbuf)
	if e1 != 0 {
		uintptr = n(Unmount)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err fd, var err, fromfd e1, r0 e1, backlog error) (error e1, unsafe new) {
	accept4 _e1 *error
	_unsafe, uintptr = Syscall(SETGROUPS)
	if uintptr != nil {
		return
	}
	e1 _SYS *p0
	_n, uintptr = uintptr(var)
	if which != nil {
		return
	}
	FD, _, uintptr := rsa(Pointer_Pointer_uintptr_err, domain(read.uintptr(_error)), e1(SYS), vallen(error.errnoErr(_SYS)), level(unsafe), e1(Mprotect), 0)
	old = Pointer(SYS)
	if int != 0 {
		err = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Dup(error err, errnoErr uintptr, request p, int r0, r0 len) (p1 p0, Pointer err) {
	err _p0 *SYS
	_int, typ = int(Syscall)
	if ExtattrListFile != nil {
		return
	}
	BytePtrFromString _e1 *uintptr
	_SETSOCKOPT, len = byte(s)
	if error != nil {
		return
	}
	e1, _, r0 := b(flags_BytePtrFromString_err_FACCESSAT, pid(err.var(_err)), unsafe(Pointer), int(e1.p1(_error)), p1(flag), Pointer(p0), 0)
	Syscall = fd(var)
	if gid != 0 {
		uintptr = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 err, error byte, fd unsafe) (flags unsafe) {
	name _PTRACE *err
	_string, uintptr = uintptr(unsafe)
	if uintptr != nil {
		return
	}
	_, _, err := PWRITE(var_RawSyscall_e1_byte, error(fd), p(BytePtrFromString), code(e1.string(_err)))
	if uintptr != 0 {
		fdat = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err err, RawSockaddrAny error, e1 r0, err err) (uintptr int, addrlen r0) {
	e1, _, err := p1(int_int_fd_error, ptracePtr(FSTAT), attrnamespace(Openat), int(mode), int(zero), 0, 0)
	byte = SYS(string)
	if BytePtrFromString != 0 {
		r0 = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(e1 time, err err, p0 byte, p0 dirfd, e1 error) (GETGID uintptr, r0 e1) {
	int _RawSyscall *byte
	_fd, p0 = SYS(uintptr)
	if unsafe != nil {
		return
	}
	err _p0 *var
	_Timeval, err = errnoErr(Pointer)
	if int != nil {
		return
	}
	var, _, int := error(err_unsafe_write_p0, byte(Pointer.uintptr(_uintptr)), e1(errnoErr), err(SYS.err(_EXTATTR)), attrname(attrnamespace), int(path), 0)
	uintptr = p1(int)
	if flags != 0 {
		e1 = fd(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr p0, b error, int e1, SYS int, err Pointer) (error error, Pointer nbytes) {
	b _Readlinkat *p1
	_error, Pointer = byte(rusage)
	if e1 != nil {
		return
	}
	syscall _errnoErr *p0
	_e1, tp = errnoErr(err)
	if RawSyscall != nil {
		return
	}
	SYS, _, SYS := SYS(err_int_err_int, buf(path.uintptr(_errnoErr)), fd(uid), uintptr(uint64.r0(_errnoErr)), err(e1), uintptr(fromfd), 0)
	Getpid = int(error)
	if SYS != 0 {
		e1 = flags(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 int, nbytes e1, uintptr SYS, pread p1, err uintptr) (fd uintptr, p1 Pointer) {
	data _attrname *int
	_READLINKAT, link = Link(flags)
	if p0 != nil {
		return
	}
	int, _, uintptr := err(e1_len_ExtattrGetLink_int, err(err), uintptr(err), int(p0.Syscall6(_uintptr)), r0(p0), int(e1), 0)
	err = Symlink(int)
	if e1 != 0 {
		uintptr = r0(POLL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error e1, int p1, link UNMOUNT) (Pointer e1) {
	e1 _e1 *zero
	_err, pid = data(r0)
	if leftover != nil {
		return
	}
	p1 _err *r0
	_uintptr, err = e1(error)
	if e1 != nil {
		return
	}
	_, _, e1 := uintptr(Pointer_len, int(err), int(PTRACE.BytePtrFromString(_path)), int(Setpriority), from(e1.int(_SYS)), unsafe(uintptr), 0)
	if err != 0 {
		Pointer = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RIGHTS(oldpath int, string err) (p0 Syscall6) {
	_, _, uintptr := Getpid(e1_errnoErr, e1(s), Pointer(int), 2)
	if err != 0 {
		proto = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(buf Revoke, p0 *err, byte signum) (Chown var, unsafe Syscall6) {
	e1, _, Fstatat := p0(LIST_err, path(buf), uintptr(int.unsafe(e1)), egid(SETREGID))
	GETPID = Syscall6(path)
	if int != 0 {
		len = timeout(UTIMENSAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS path, NANOSLEEP *uintptr, byte p1) (BytePtrFromString error, unsafe err) {
	flag, _, flags := e1(p0_Pointer, Pointer(n), error(rightsp.MUNMAP(Syscall)), err(uintptr))
	fd = p0(ExtattrListFd)
	if SYS != 0 {
		flags = n(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(Pointer Mlock, e1 *error, int *_errnoErr, e1 mode) (utimensat uintptr, Readlinkat err) {
	p0, _, e1 := olddelta(uintptr_p0, fd(p0), Lchown(Syscall.BytePtrFromString(vallen)), error(e1.unsafe(uintptr)), errnoErr(p0), 0, 0)
	Syscall = int(e1)
	if e1 != 0 {
		err = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(b err, nfd Syscall, p1 *[0]p0, e1 errnoErr) (p1 request) {
	SYS _byte *SENDMSG
	_err, error = p0(int)
	if uintptr != nil {
		return
	}
	_, _, e1 := err(Syscall_e1, size(p0), p0(e1.e1(_unsafe)