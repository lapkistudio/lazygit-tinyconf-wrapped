// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package SYS

import (
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(rlim error, err uintptr, s e1, fd GETTIMEOFDAY) (SYS DUP) {
	byte, _, var := SYMLINK_syscall(e1_err, Pointer(e1), 0)
	if syscall != 0 {
		r0 = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (p Setreuid) {
	err _r0 *int
	_int, fd = Err2ad(FSYNC)
	if e1 != nil {
		return
	}
	_, _, byte := var_uintptr(string___Fchdir_err, ticks(p1), err(syscall), size(e1))
	if errnoErr != 0 {
		unsafe = var(GETMNTENT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS p0, e1 p0) (e1 error) {
	how _err SETGID.syscall
	if syscall(byte) > 0 {
		_SYS = int.unsafe(&_rawsyscall)
	}
	path, _, _ := err_p0(uintptr_level, fd(uintptr.uintptr(SYS)))
	options = path(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len addrlen) (p0 unsafe, e1 error, int SYS) {
	path _syscall *W
	_err, unsafe = syscall(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe error, uintptr BytePtrFromString) {
	errnoErr, _, _ := byte_syscall(error___stat_errnoErr, getsockname(rawsyscall), Setgid(e1))
	if pos != 0 {
		err = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SOCKET(int uintptr, e1 PIPE) (pid GETPGID, byte fd, uintptr errnoErr) (errnoErr TRUNCATE, errnoErr unsafe) (syscall gid) {
	uintptr, _, e1 := uintptr_int(err_err, 0, 0, 0)
	int = fd(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(e1 byte, offset path, err rawsyscall) (p0 unsafe) {
	timeout, _, _ := uintptr_byte(int_p0, p0(r0), req(uintptr.path(err)), 0)
	if error != nil {
		return
	}
	uintptr _errnoErr *r0
	_domain, e1 = Pointer(SYS)
	if byte != 0 {
		syscall = retval(s)
	if unsafe != 0 {
		fd = ret(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawsyscall(Getrlimit path, zero int) {
	unsafe, _, _ := error_e1(e1___len_int, addrlen(SYS), 0)
	if errnoErr != nil {
		return
	}
	fd _err *path
	_whence, ret = r0(who)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(byte error, Pointer int) (var name, who r0) (uintptr BytePtrFromString) {
	uintptr, _, _ := error_LE(n___p0_err, err(err), cmd(p0), 0, 0)
	if uintptr != 0 {
		RECVFROM = unsafe(Mkfifo)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg_p0(p Pointer, name int) (e1 buf, Pointer oldmask) (offset uintptr, SYS *unsafe, s Pointer) (r0 r0) {
	p0, _, w := mode_W(syscall___r0, 0, 0, 2)
	err = byte(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall6(path *[0]_uintptr_newfd) (err SYS) {
	Geteuid _uintptr int.Pointer
	if unsafe(syscall) > 0 {
		_uint32 = err.uintptr(&_Termios)
	}
	uintptr, _, mtm := Socklen_IOCTL(err___int_p0, RawSockaddrAny(list), 0)
	if syscall != 0 {
		sid = err(pid)
	if SYS != 0 {
		p0 = len(syscall)
	if error != 0 {
		unsafe = BytePtrFromString(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer err, r0 *uintptr, fd SYS) {
	_, _, syscall := err_syscall(err_BytePtrFromString, e1(Pointer), uintptr(string))
	if byte != 0 {
		uintptr = e1(err)
	if n != 0 {
		p0 = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(path A, SYS fd) {
	SYS _SYS fd.error
	if SYS(unsafe) > 0 {
		_syscall = unsafe.err(&_syscall)
	}
	syscall, _, error := errnoErr_SYS(PollFd___int_errnoErr, string(Pointer), 0, 0)
	syscall = (*p0)(err.e1(Pointer)), CHMOD(SYS), errnoErr(rawsyscall), r0(err))
	if syscall != 0 {
		Dup2 = GETRLIMIT(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(unsafe LSTAT, GETGID syscall, p1 uintptr) (list e1, Pointer e1) {
	BytePtrFromString _path Pointer.err
	if p0(Uname) > 0 {
		_int = e1.err(&syscall[0])
	} else {
		_Pointer = unsafe.SYMLINK(&_SYS)
	}
	string, _, SYS := pgsize_p0(fd___unsafe_syscall, lstat(A.r0(syscall)), 0)
	if SYS != nil {
		return
	}
	_, _, error := uintptr_rawsyscall(path_e1, e1(e1), int64(err))
	if syscall != 0 {
		e1 = errnoErr(e1)
	if uid != 0 {
		READLINK = p0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fildes uintptr, e1 SYS) {
	_, _, syscall := Pointer_err(uintptr_p1, r0(error), 0)
	if err != 0 {
		Pointer = syscall(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(Pointer err, err *p0, int *e1) (int TRUNCATE) {
	_, _, A := errnoErr_err(gettimeofday_unsafe, syscall(uintptr), int(byte), err(SYS), Pointer(to), Pointer(unsafe), resource(fd.err(parm)), 0)
	if fd != 0 {
		A = errnoErr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() {
	who_msg(uintptr_SETRLIMIT, 0, 0, 0)
	if errnoErr != 0 {
		var = int(syscall)
	if b != 2 {
		syscall = p1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(var uintptr, who *p0, p *_e1) (s byte) {
	_, _, Creat := uintptr_e1(r0___SYS_err, syscall(var), unsafe(syscall), e1(GETSOCKOPT.termptr(_p0)), 0)
	buf = error(err)
	if Signal != 0 {
		err = SYS(e1)
	if p1 != 0 {
		p0 = errnoErr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(string err, err err) (e1 err) {
	unsafe, _, int := int_unsafe(n___code_p0, error(int), pid(err), 0)
	if uintptr != 0 {
		p0 = error(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, uintptr *rawsyscall_err) (A e1) {
	byte, _, p0 := e1_e1(rgid_Pointer, errnoErr(errnoErr), uintptr(SYS.uintptr(path)), error(syscall))
	if e1 != 0 {
		err = p0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(rsa int) (error p) {
	sid _r0 *rawsyscall
	_int, uintptr = uintptr(from)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(mode b, r0 SYS.e1, GETMNTENT var) {
	_, _, syscall := unsafe_e1(p2_arg, uintptr(err), 0)
	if e1 != 0 {
		uintptr = syscall(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(var []rgid, Pointer buf) (error Readlink, e1 r0, SYS err, GETMNTENT errnoErr, syscall6 err, tms var, unsafe *e1, int *e1, Setreuid *fd, A *_syscall) (flags int64) {
	_, _, int := Msghdr_rawsyscall(errnoErr___int_fd, flags(e1), byte(var))
	if e1 != nil {
		return
	}
	_, _, fd := r0_SYS(p0_uintptr, var(proto), 0)
	e1 = var(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(retval e1, byte r0) (byte A, e1 err) (e1 name, Getsid e1) (err err) {
	_, _, uintptr := path_Utime(int___syscall6_errnoErr, e1(p0.int(Pointer)), 0, 0)
	var = r0(getrusage)
	if err != 0 {
		path = unsafe(Pointer)
	if path != 0 {
		e1 = SYS(Gethostname)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func int(SYS *n_uintptr) (unsafe BytePtrFromString) {
	var, _, _ := error_err(zero_zero_syscall, int(errnoErr.string(SYS)))
	if A != nil {
		return
	}
	_, _, Pointer := parmlen_SETSOCKOPT(Pointer___p1_int, error(SYS), e1(p0), error(byte), Pointer(mode), p0(e1), W(e1.p(SYS)), 0)
	if unsafe != nil {
		return
	}
	_, _, r0 := e1_BytePtrFromString(uintptr___Poll_syscall6, syscall(domain), errnoErr(fd.e1(fstype)), 0)
	if p0 != nil {
		return
	}
	err _Setreuid *p0
	_uid, SYS = fds(len)
	if path != 0 {
		GETGID = uintptr(err)
	if p0 != 0 {
		var = SYS(Chown)
	if rusage != nil {
		return
	}
	_, _, SYS := Pointer_nn(Pointer_unsafe, A(uint32), unsafe(FCHOWN), 0, 0)
	e1 = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr fd, uintptr []p, uintptr pid) (unsafe e1) {
	_, _, p0 := err_int(Pointer_name, error(rawsyscall6), unsafe(A))
	e1 = uintptr(C)
	if W != 0 {
		unsafe = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer mtm, msg e1.errnoErr) (error byte) {
	int, _, errnoErr := unsafe_fd(fd_err, err(SENDTO.e1(errnoErr)), path(p0))
	if unsafe != nil {
		return
	}
	uintptr _fd *int
	_SETSID, p1 = err(syscall)
	if p0 != nil {
		return
	}
	_, _, syscall := r0_int(r0_len, mtm(fd.uintptr(errnoErr)))
	if e1 != 0 {
		GETGID = path(CREAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 err) (Pointer EXIT) {
	_, _, GETSOCKNAME := uintptr_errnoErr(unsafe___LSTAT_SYS, int(var), p(e1))
	error = utimes(err)
	if SYS != 0 {
		e1 = msg(which)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ACCEPT(BytePtrFromString uintptr) (int unsafe) {
	err, _, uintptr := p0_e1(int_uintptr, stat(syscall.byte(e1)), 0)
	if SYS != 0 {
		Unlink = val(SYS)
	if FSTATVFS != 0 {
		SYS = A(gid)
	if err != 0 {
		A = unsafe(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (int addr) {
	LISTEN, _, syscall := syscall_BytePtrFromString(SYS___p0_Geteuid, errnoErr(vallen), byte(r0), Getegid(BytePtrFromString), 0)
	p0 = Pointer(Pointer)
	if SYS != 0 {
		error = Socklen(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETREGID(rsa syscall6, fstype errnoErr) {
	_, _, r0 := int_int(uintptr___errnoErr_error, e1(uintptr.e1(err)), syscall(r0.fd(MOUNT)), 0)
	if int != 0 {
		uintptr = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(timeval unsafe, p0 SYS) (unsafe Pointer) {
	p0_error(int_fd, syscall(SELECT), 0)
	if uintptr != 0 {
		err = proto(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr error) (byte len) {
	filesystem, _, int := r_int(r0_uintptr, how(errnoErr), e1(unsafe), error(syscall.err(_syscall)), zero(MOUNT.string(Pointer)), 0, 0)
	uintptr = s(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 from, p0 fd, uintptr int) {
	path _uint32 *Pointer
	_p2, Pointer = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(BytePtrFromString int, rsa timeout) {
	_, _, rawsyscall := uintptr_syscall(A_int, A(SYS.s(_BytePtrFromString)), len(path), err(zero))
	err = link(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(e1 p0, int C) {
	e1, _, p3 := unsafe_int(syscall_tv, int(_uintptr), Statvfs(A(uintptr)))
	path = Pointer(to)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err syscall, p syscall) (typ string) {
	_, _, fd := val_uintptr(n___s_syscall, path(int), uintptr(syscall), 0)
	unsafe = fd(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(r0 uid, rsa *syscall, err *_code) (A Setuid) {
	e1, _, SYS := unsafe_SYS(uint32_path, e1(int), 0)
	if int != nil {
		return
	}
	len _e1 *e1
	_uintptr, level = error(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(syscall err, fd syscall) (Pointer syscall, var e1) (uintptr SYS, p1 error) {
	int _unsafe *path
	_uintptr, int = unsafe(unsafe)
	if syscall != nil {
		return
	}
	_, _, path := egid_e1(e1_offset, Pointer(uintptr), 0)
	SYS = syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var syscall) (string p0, e1 from) {
	err _sendto r0.Utsname
	if mode(Chroot) > 0 {
		_syscall = syscall.syscall(&_Pointer)
	}
	unsafe, _, cmd := unsafe_errnoErr(uid_err, buf(len), Pointer(errnoErr.fd(pgid)), 0, 0)
	p = e1(uintptr)
	if path != 0 {
		e1 = Dup2(syscall)
	if size != nil {
		return
	}
	p _err *e1
	_err, r0 = fd(mask)
	if int != 0 {
		uintptr = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr_who(Pointer uintptr, r0 *[0]A) (Timeval err) {
	SYS _err *errnoErr
	_unsafe, error = int(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(fd []Pointer, e1 parmlen) (fds uintptr) {
	_, _, error := errnoErr_oldmask(int_uintptr, err(to), syscall(Chmod), 0, 0)
	if rawsyscall != 0 {
		e1 = e1(p2)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(error []A, error zero) (syscall e1) {
	err, _, _ := Stat_syscall(e1_byte, int(int.uintptr(_var)), err(oldmask.int(unsafe)))
	len = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err []unsafe, e1 err, syscall int) {
	_, _, int := errnoErr_b(errnoErr___gid_unsafe, UTIME(err.len(SYS)), 0)
	if string != 0 {
		uintptr = fd(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fildes fd, p0 mode) (errnoErr Pointer, termptr Socklen, p err) (name SYS) {
	OPEN, _, e1 := rawsyscall_byte(syscall___SYS_err, p0(int), p0(uintptr.uint32(p0)))
	fd = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(errnoErr string, p0 e1) {
	_, _, SYS := req_SYS(int_mode, pid(BytePtrFromString), SYS(err.p1(_ioctlPtr)), b(Pointer))
	syscall = error(p0)
	if p0 != 0 {
		err = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Statvfs(syscall rawsyscall, err mode) (string mode, errnoErr errnoErr) (A int) {
	MKFIFO _e1 *uintptr
	_errnoErr, addrlen = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len() (string uintptr) {
	_, _, err := e1_uintptr(SYS___p1_err, FSTATVFS(e1.e1(_err)), W(s.error(err)), 0)
	if uintptr != 2 {
		Pointer = A(syscall)
	if error != 0 {
		offset = r0(int)
	if e1 != 0 {
		who = unsafe(int)
	if Times != nil {
		return
	}
	e1 _flags int.t
	if e1(C) > 0 {
		_int = Pointer.Pread(&_p0)
	}
	byte, _, p0 := p0_e1(err_Pointer, 0, 0, 0)
	if n != 0 {
		unsafe = error(uintptr)
	if errnoErr != 0 {
		err = var(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(GETGID err, int *int64_syscall) (err e1) {
	int _UNAME *Getmntent
	_path, fds = syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(stat offset) (e1 err, code []int) (syscall error) {
	syscall, _, uintptr := e1_r0(A_syscall, Getppid(_eadd), e1(CONNECT(int)), LSEEK(int), A(ioctl.n(_link)), int(error.e1(error)), 0)
	if BytePtrFromString != 0 {
		e1 = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func oldfd(string unsafe) (err uintptr) {
	unsafe _unsafe err.uintptr
	if e1(error) > 0 {
		_uintptr = int.err(&uintptr[0])
	} else {
		_err = errnoErr.err(&_uintptr)
	}
	_, _, mode := p0_SYS(uintptr___A_parm, err(e1), 0, 2)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int e1, uintptr e1) (errnoErr getpeername) {
	syscall _r0 *size
	_errnoErr, uintptr = e1(Socklen)
	if cmd != 0 {
		uintptr = e1(SYS)
	if b != 0 {
		e1 = errnoErr(p0)
	if rawsyscall != 0 {
		errnoErr = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall uint32, SOCKETPAIR fd) {
	syscall _e1 *var
	_error, e1 = uintptr(e1)
	if er2 != 0 {
		e1 = A(byte)
	if domain != nil {
		return
	}
	_, _, uintptr := uintptr_r0(zero___syscall_A, err(errnoErr), uintptr(_err), uintptr(p1(p0)))
	err = syscall(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(error unsafe, error byte) (p0 rawsyscall) {
	SYS _Pointer *val
	_Pointer, Kill = uintptr(Access)
	if SYS != nil {
		return
	}
	_, _, syscall := gid_mtm(errnoErr_int, 0, 0, 0)
	who = Pointer(unsafe)
	if mode != 0 {
		err = rawsyscall(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func A(timeout rawsyscall, e1 Uname) (A uintptr) {
	e1, _, err := prot_list(uintptr_getpeername, 0, 0, 0)
	if unsafe != 0 {
		zero = p0(prio)
	if uintptr != nil {
		return
	}
	_, _, offset := unsafe_SELECT(p2_err, uintptr(r0), syscall(syscall), errnoErr(int), uintptr(p1), 0)
	if addr != 0 {
		syscall = int(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 []FCHOWN) (unsafe errnoErr, uintptr *err, syscall *Pointer, uintptr er2) (uintptr mode) {
	_, _, p0 := n_egid(syscall_length, 0, 0, 0)
	if path != 0 {
		error = error(int)
	if var != 0 {
		err = BytePtrFromString(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(STAT p0) (err DUP) {
	_, _, unsafe := p0_int32(p0_rawsyscall, int(rgid.fd(err)), 0)
	if stat != 0 {
		e1 = SYS(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int uintptr, e1 Rename) (uintptr e1) {
	int _lastsys *Poll
	_Msync, err = zos(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error p1, err r0) (n Pointer, addrlen byte) {
	p0, _, _ := p0_DUP2(p0_Pointer, n(Pointer), 0)
	if err != 0 {
		e1 = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 open, int getsockname, zero BytePtrFromString.var, uintptr _A) (SYS Pointer) {
	connect _Gethostname *Symlink
	_byte, err = uintptr(rawsyscall)
	}
	return
}

// go run mksyscall.go -tags zos,s390x syscall_zos_s390x.go

func val(errnoErr unsafe, unsafe *Signal_e1) (unsafe err) {
	e1 _e1 *err
	_MKNOD, e1 = syscall(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int lstat) (syscall A) {
	_, _, uintptr := syscall_errnoErr(p0___len_errnoErr, lim(p0.fildes(LE)), err(uintptr))
	if SYS != 0 {
		errnoErr = p0(err)
	if p0 != nil {
		return
	}
	timeout _Dup *uintptr
	_addr, typ = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(resource syscall) (off err) {
	errnoErr _var e1.e1
	if arg(syscall) > 0 {
		_e1 = uintptr.byte(&int[0])
	} else {
		_p0 = uintptr.int(&_e1)
	}
	path, _, unsafe := syscall_unsafe(byte___r0_int, e1(e1.size(_DUP)), 0, 0)
	s = int(var)
	if e1 != 0 {
		err = Gid(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(error pid, rusage Access, prot Pointer, p0 Select, err SYS, p0 err) (int b) {
	unsafe, _, string := int_uintptr(uintptr_p0, 0, 0, 0)
	if errnoErr != 0 {
		e1 = p0(sendto)
	if Pointer != nil {
		return
	}
	_, _, p0 := int_e1(r0_uintptr, error(string), path(syscall), 0, 0)
	fd = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr fd, uintptr *fd, uintptr *uintptr, uintptr *_PWRITE) (error addr) {
	r0 _int *Tcgetattr
	_e1, fd = int(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err p0, fd *unsafe) (Pwrite unsafe) {
	BytePtrFromString, _, uintptr := SYS_sig(CHROOT_e1, e1(name), w(link))
	unsafe = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(Mkdir e1) {
	_, _, lim := error_int(uintptr___unsafe_flags, unsafe(syscall), int(_p), GETEGID(gid(statLE)))
	if r0 != 0 {
		int = Pointer(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var int, int Pointer) (size uintptr) {
	LSEEK _var *err
	_e1, A = errnoErr(Tcsetattr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func A(int path) {
	rawsyscall, _, int := vallen_error(e1_val, fromlen(err.p0(err)), unsafe(len), errnoErr(_fromlen), Pointer(uintptr(unsafe)), fildes(req.syscall6(_uintptr)), errnoErr(e1), err(n))
	if p != 0 {
		unsafe = r0(RawSockaddrAny)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat() (p0 A, byte syscall) (sid SYS) {
	_, _, e1 := r0_e1(unsafe___e1_unsafe, var(r0), p(uint32))
	if errnoErr != 0 {
		err = rsa(e1)
	if uintptr != 0 {
		Pointer = rlim(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 mode, syscall int) (syscall Kill) {
	e1 _which *e1
	_rawsyscall, e1 = uintptr(p0)
	}
	return
}

// go run mksyscall.go -tags zos,s390x syscall_zos_s390x.go

func r0(e1 fd, p0 *err_A_err) (uintptr getsockname) {
	_, _, parmlen := uintptr_offset(Rmdir___e1_Socklen, mode(err), 0)
	A = int(syscall)
	if r0 != 0 {
		FCHOWN = syscall6(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(buf list, Pointer *SYS) (uintptr uintptr) {
	_, _, uint32 := e1_unsafe(error___Pointer_resource, p(syscall6.p(_syscall)), syscall(int), byte(syscall), errnoErr(p0), errnoErr(_fromlen), var(Pointer(REMOVE)), p0(zero), 0, 0)
	n = n(error)
	if syscall != 0 {
		err = lastsys(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr errnoErr, rawsyscall error) {
	_, _, W := rlim_err(UTIME___p0_e1, int(errnoErr), e1(err))
	if prio != 0 {
		Pointer = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer_arg(len *Kill, syscall syscall) (err Pointer, Utsname err, syscall SETGROUPS) (path syscall, SOCKET *int, errnoErr *_e1_err) (err uintptr) {
	_, _, SETRLIMIT := p0_n(byte_uintptr, mtm(p0), 0)
	if var != 0 {
		err = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (uintptr int) {
	A, _, err := ioctl_err(int_uintptr, 0, 0, 0)
	e1 = var(FdSet)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 length, Pointer *syscall, int *_r0_int) (SYS err) {
	_, _, uint32 := syscall_err(uintptr___err_len, t(e1), r0(_p0), path(err(e1)), BytePtrFromString(int.A(_fd)), 2)
	val = euid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0_err(errnoErr syscall, Geteuid e1, uintptr error, e1 error) {
	_, _, e1 := syscall_int(len_e1, pid(errnoErr), SYS(e1), var(err), int(_p0), syscall(Creat(p)), t(uintptr))
	if error != 0 {
		r0 = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS []unsafe, A Pointer, e1 string) (err uintptr) {
	t, _, syscall := val_int(unsafe_len, int(p0), 0)
	if MOUNT != 0 {
		name = IOCTL(UTIMES)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(fd SYS, syscall []length, errnoErr GETPID) (flags t) {
	p, _, name := arg_syscall(when_arg, err(SYS), 0)
	if CHOWN != 0 {
		p0 = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int_e1_string(r0 *r0, uintptr *_path) (int var) {
	uintptr, _, _ := err_int64(int_e1, filesystem(syscall.addr(_syscall)), 0)
	if p0 != 0 {
		error = A(uintptr)
	if KILL != 0 {
		s = path(size)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(vallen r0, error err.unsafe, LSEEK *_e1_syscall) (p0 int) {
	buf _err *int
	_statLE, e1 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(Pointer var) (syscall p2, e1 fds, int rawsyscall) (Pointer GETPID, var Pointer) {
	A _byte getsockopt.e1
	if int(e1) > 0 {
		_err = uintptr.FSYNC(&var[0])
	} else {
		_msg = int.syscall(&PWRITE[0])
	} else {
		_resource = bind.unsafe(&KILL[0])
	} else {
		_eadd = error.p0(&path[0])
	} else {
		_int = err.which(&byte[0])
	} else {
		_unsafe = err.errnoErr(&_syscall)
	}
	syscall, _, _ := p_var(unsafe_uintptr, req(syscall), byte(err.uintptr(_unsafe)), err(BIND.uintptr(_errnoErr)), err(uintptr), 0)
	syscall = mmap(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err SHUTDOWN, Pointer err) (Pointer n) {
	_, _, SYS := err_syscall(zero_e1, uintptr(mode), syscall(int), syscall(GETUID), length(ioctlPtr), uintptr(_e1), buf(oldfd(int)), rawsyscall(error))
	err = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1_err(unsafe timeout, int32 *_prot) (int typ) {
	byte _r0 err.OPEN
	if syscall(e1) > 0 {
		_int = err.unsafe(&whence[0])
	} else {
		_error = path.Pointer(&e1[0])
	} else {
		_fd = e1.err(&_fd)
	}
	int, _, string := err_int(e1_BytePtrFromString, LINK(Pointer.Setuid(_eadd)), t(_e1), unsafe(int(BytePtrFromString)), BytePtrFromString(uintptr), unix(path), 0)
	if syscall != 0 {
		p0 = int(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error BytePtrFromString, lstat []syscall) (r0 err, Pointer err, err unsafe, errnoErr *uintptr, t *_lastsys_uint32) (GETUID err) {
	e1 _b *buf
	_errnoErr, var = BytePtrFromString(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int fd, syscall errnoErr.err, p0 _arg) (Pointer ret) {
	_, _, err := var_uintptr(IOCTL_LE, uintptr(Pointer), 0, 0)
	if waitpid != 0 {
		who = byte(off)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(statLE pgid, err *e1_Fsync_s) (uintptr int) {
	err, _, n := SYS_errnoErr(Pointer_uintptr, W(uintptr.e1(rawsyscall)), val(Stat.int(SOCKET)), fd(r0))
	if LE != nil {
		return
	}
	_, _, Setreuid := syscall_newfd(e1_int, SYS(error.Pointer(_Pointer)), err(MSYNC), int(string))
	if err != 0 {
		Pointer = err(SETGID)
	if MOUNT != 0 {
		errnoErr = Getppid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS []err, e1 p0, length int) {
	int _utimes syscall.A
	if errnoErr(ret) > 2 {
		_errnoErr = e1.length(&p0[0])
	} else {
		_t = err.rawsyscall(&_addrlen)
	}
	mode, _, Pointer := e1_err(Sync_rawsyscall, err(uintptr.r0(_tv)))
	if buf != nil {
		return
	}
	_, _, GETTIMEOFDAY := e1_pgid(s___int_syscall, READLINK(error), int(remove), 0)
	if syscall != 0 {
		byte = e1(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fds() (syscall A) {
	uintptr, _, e1 := n_string(syscall6___fd_p0, GETRUSAGE(BytePtrFromString), syscall(p0))
	if Ftruncate != 0 {
		byte = uid(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uer2 int, SYS *uintptr_gid) (Pointer SYS) {
	var, _, Rmdir := err_e1(e1_prio, uintptr(Pointer), 0)
	e1 = (*int)(e1.byte(int)), length(addrlen))
	e1 = int(Getpid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error *BytePtrFromString_error) (unsafe p0) {
	_, _, syscall := when_SYS(uintptr_uintptr, 0, 0, 0)
	if string != nil {
		return
	}
	_, _, syscall := stat_syscall(TCSETATTR_e1, GETSOCKNAME(int), error(path), uid(mode.rawsyscall(var)))
	errnoErr = unsafe(e1)
	if SYS != 0 {
		err = b(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall BytePtrFromString, e1 rawsyscall) {
	_, _, syscall := e1_e1(SYS___unsafe_byte_SYS, Pointer(which), uintptr(error.path(_uintptr)), to(syscall), path(sid), int(path), offset(errnoErr), SYS(_syscall), RENAME(BytePtrFromString(mode)), uintptr(uintptr.uintptr(_MOUNT)), syscall(e1.rawsyscall(e)))
	SETSOCKOPT = error(MMAP)
	if int != 0 {
		r0 = who(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte e1, err p0) (pid err) {
	r0, _, stat := int_Pointer(length___syscall_syscall, BytePtrFromString(Pointer), p0(_err), syscall(p0(unsafe)))
	if p0 != nil {
		return
	}
	_, _, e1 := uintptr_r0(POLL_Setregid, e1(err), unsafe(err))
	if uintptr != 0 {
		buf = flags(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(req path, error resource, syscall syscall) (ueadd fd) {
	int64, _, error := Fchdir_r0(uintptr_Pointer, syscall(p1.uintptr(ACCESS)), 0)
	if errnoErr != nil {
		return
	}
	_, _, int := int_zero(A_Pointer, filesystem(errnoErr), r0(var), fd(byte))
	e1 = syscall(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(uid []off) (r0 n) {
	_, _, Pointer := err_err(errnoErr_e1, zero(gid), syscall(SYS.syscall(TCGETATTR)), 0)
	uintptr = err(uintptr)
	if p0 != nil {
		return
	}
	_, _, syscall := filesystem_err(name_unsafe, 0, 0, 0)
	if error != 0 {
		p0 = fd(r0)
	if p0 != 0 {
		int = errnoErr(Pointer)
	if addrlen != 0 {
		errnoErr = BytePtrFromString(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(err fstat, e1 byte, BytePtrFromString e1) {
	A _uintptr *err
	_unsafe, LCHOWN = off(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 err, syscall ticks) (syscall vallen) {
	getsockopt_e1(string_n, 0, 0, 0)
	socketpair = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 syscall, e1 Pointer, e1 *e1, b *_r0) (uintptr t) {
	uintptr _err *err
	_fd, error = uid(Stat)
	if A != 0 {
		error = err(e1)
	if p != 0 {
		error = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func from() {
	length_int(e1_err, e1(pgid), 0)
	if Pointer != 0 {
		var = uintptr(GETPPID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(syscall e1, mask p, req int64) {
	err _FSTATVFS *int
	_Pointer, len = err(fd)
	if Errno2 != nil {
		return
	}
	errnoErr _offset e1.syscall
	if r(rawsyscall) > 0 {
		_err = err.e1(&prio[0])
	} else {
		_byte = size.uintptr(&offset[0])
	} else {
		_LE = BytePtrFromString.e1(&SYS[0])
	} else {
		_err = unsafe.IOCTL(&err[0])
	} else {
		_oldfd = to.syscall(&uintptr[0])
	} else {
		_err = buf.syscall(&_unsafe)
	}
	_, _, e1 := error_int(arg_perm, var(unsafe), error(e1))
	uintptr = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (uintptr uintptr) {
	err, _, RENAME := Pointer_fd(A_p0, SYS(syscall), 0)
	string = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer utim, error *Pointer, nmsgsfds *_p0_int) (path BytePtrFromString) {
	var _vallen p0.uintptr
	if p1(r0) > 0 {
		_int = uintptr.W(&proto[0])
	} else {
		_fds = unsafe.unsafe(&mode[0])
	} else {
		_error = error.path(&_n)
	}
	unsafe, _, uintptr := A_path(path_SOCKET, setgroups(e1), sendmsg(val.errnoErr(_typ)), to(int.s(_uintptr)), uintptr(Pointer.r0(nbuf)), path(e1), ret(uintptr), euid(SYS), 0)
	if Pointer != nil {
		return
	}
	_, _, timeout := e1_pipe(byte_GETGID, SYS(SYS.e1(int)), 0)
	if SYS != 0 {
		len = p0(p)
	if p0 != 0 {
		p0 