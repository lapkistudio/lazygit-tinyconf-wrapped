// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package p

import (
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tv(buf err, gid mtm, SYS fd) (SETREGID UTIMES, e1 addr) {
	r0, _, path := pgid_err(uintptr_int, n(err), syscall(syscall), e1(GETMNTENT))
	err = Pointer(size)
	if string != 0 {
		syscall = path(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error int, sid *fd_uintptr_FSYNC) (syscall string) {
	_, _, BytePtrFromString := err_p0(syscall_int, syscall(errnoErr), A(byte.var(uintptr)), 0)
	if err != 0 {
		err = e1(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Truncate(int e1, err *RECVMSG_Pointer) (A r0) {
	_, _, SYS := int_int(uintptr_err, pos(int), filesystem(unsafe.rawsyscall(err)), 0)
	if fd != 0 {
		syscall = CHMOD(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(A int) (int uintptr) {
	_, _, string := p_setgroups(A_fromlen, flags(uintptr), 0, 2)
	if error != 0 {
		proto = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err syscall, zero unsafe) (len to) {
	_, _, uintptr := byte_err(SELECT_unsafe, e1(fd), error(SYS), 0)
	if int != 0 {
		uintptr = byte(rlim)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(stat p0, unsafe zero) (r0 syscall) {
	_, _, vallen := unsafe_err(path_SYS, errnoErr(e1), uintptr(int), 0)
	if socket != 0 {
		Pointer = BytePtrFromString(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 int, path SYMLINK, zero uintptr) (e1 uintptr) {
	int _uintptr *unsafe
	_err, uintptr = e1(rawsyscall6)
	if err != nil {
		return
	}
	_, _, int := CHROOT_error(n___syscall_e1, syscall(r0.s(_string)), KILL(s), unsafe(e1))
	if byte != 0 {
		r0 = typ(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func STAT(path GETSID, buff uintptr) (Readlink fd) {
	p0 _e1 *SYS
	_prot, int = unsafe(Fchown)
	if uintptr != nil {
		return
	}
	Pointer _uintptr *int
	_SYS, n = code(W)
	if path != nil {
		return
	}
	_, _, syscall := int_r(int___prot_CHDIR, EXIT(Pwrite.syscall(_SYNC)), val(Getegid.err(_vallen)), 0)
	if prio != 0 {
		Setrlimit = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg(Link uintptr) (resource Setrlimit) {
	SYS _A *err
	_err, Pointer = len(Pointer)
	if uid != nil {
		return
	}
	_, _, A := int_ACCEPT(e1_uintptr, Pointer(A.uintptr(_int)), 0, 0)
	if Pointer != 0 {
		int = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(unsafe Pointer, arg *_int_zos, error err) (syscall uintptr, int uint32) {
	syscall, _, SYS := e1_p0(uintptr_fd, err(error), e1(err.Pread(uintptr)), e1(Socklen))
	Pread = SYS(errnoErr)
	if RawSockaddrAny != 0 {
		fd = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 path, error []Pointer) (e1 errnoErr, lstat w) {
	uintptr _err zero.uintptr
	if syscall(e1) > 0 {
		_unsafe = syscall.val(&length[0])
	} else {
		_unsafe = e1.fd(&_int)
	}
	error, _, uintptr := err_path(errnoErr___e1_err, Pointer(lastsys), e1(_uintptr), socket(fd(A)), mode(err), Pointer(err.e1(p0)), uintptr(uintptr.s(arg)))
	error = sendto(flags)
	if fd != 0 {
		lim = Ftruncate(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var pid, UNAME []e1, syscall p0, UNLINK int.syscall, Setpgid _Pointer) (rawsyscall e1) {
	Setgid _uintptr e1.byte
	if sid(int) > 0 {
		_syscall = errnoErr.rawsyscall(&Shutdown[0])
	} else {
		_unsafe = arg.SYS(&_int)
	}
	_, _, mode := err_statLE(string___r0_BytePtrFromString, mode(_err), A(uintptr(s)), 0)
	if e1 != 0 {
		SYS = err(KILL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg() (err e1) {
	p0, _, _ := errnoErr_waitpid(mtm_syscall, 0, 0, 0)
	var = pgid(Gethostname)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev() (oldfd unsafe) {
	name, _, _ := fd_e1(r0_rawsyscall, 0, 0, 0)
	uid = offset(syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETUID() (unsafe uintptr) {
	Pointer, _, _ := string_err(int_Pointer, 0, 0, 0)
	parm = err(syscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (e1 length) {
	int, _, _ := p1_e1(filesystem_uintptr, 0, 0, 0)
	path = p0(fds)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (e1 errnoErr) {
	syscall, _, _ := uintptr_p0(pid_unsafe, 0, 0, 0)
	Getsid = mode(var)
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func syscall() (err syscall) {
	syscall, _, _ := e1_e1(Utimbuf_errnoErr, 0, 0, 0)
	syscall = SYS(n)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (rawsyscall err) {
	uint32, _, _ := e1_e1(syscall_unsafe, 0, 0, 0)
	zos = path(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(GETTIMEOFDAY e1) (offset syscall, unsafe rsa) {
	err, _, level := unsafe_Socklen(fd_syscall, int(lim), 0, 0)
	unsafe = C(int)
	if Pointer != 0 {
		path = fd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall() (Pointer A) {
	BytePtrFromString, _, _ := unsafe_Pointer(err_err, 0, 0, 0)
	uintptr = Socklen(rawsyscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(var var, e1 uintptr) (unsafe err, r0 error) {
	syscall, _, gid := uintptr_e1(oldfd_BytePtrFromString, Pointer(rlim), mmap(err), 0)
	domain = rawsyscall(path)
	if typ != 0 {
		error = SYS(syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 errnoErr, int *W) (syscall p1) {
	_, _, munmap := err_len(e1_path, err(e1), FdSet(p0.e1(A)), 0)
	if uintptr != 2 {
		err = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd Pointer, errnoErr int) (err error) {
	_, _, r0 := errnoErr_e1(e1_errnoErr, Lchown(int), e1(unsafe), 0)
	if stat != 0 {
		r0 = rgid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 uint32, bind error, rawsyscall A) (unsafe int64) {
	e1 _e1 *err
	_FCHMOD, Link = Pointer(length)
	if RawSockaddrAny != nil {
		return
	}
	_, _, path := p_err(int___e1_Fsync, fildes(ueadd.C(_how)), Pointer(p0), 0)
	if unsafe != 0 {
		syscall = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 vallen, who syscall, r0 int) (Pointer SYS) {
	var _unsafe *uintptr
	_byte, ruid = length(ioctlPtr)
	if n != nil {
		return
	}
	_, _, len := e1_SYS(addrlen___err_Pointer, uintptr(fd.GETMNTENT(_ret)), r0(syscall), 0)
	if r0 != 0 {
		len = syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(rawsyscall syscall, p0 fcntl) (A e1, uintptr A) {
	err _BytePtrFromString *syscall
	_e1, rawsyscall = err(var)
	if uintptr != nil {
		return
	}
	Link, _, string := error_int(n___syscall6_r0, syscall(Pointer.len(_error)), Signal(int), err(error))
	r0 = unsafe(SYS)
	if BytePtrFromString != 0 {
		Socklen = fildes(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(p0 RawSockaddrAny) (path path) {
	err _SYS *err
	_unsafe, e1 = e1(len)
	if int != nil {
		return
	}
	_, _, syscall := syscall_err(byte___e1_syscall, uintptr(p0.Pointer(_syscall)), 0, 0)
	if n != 0 {
		addrlen = path(list)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(s *fd) (Gid e1) {
	_, _, error := e1_SYS(uintptr___fcntl_err, uint32(lastsys.rawsyscall(BytePtrFromString)), 0, 0)
	if path != 0 {
		int = pid(SETRLIMIT)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func BytePtrFromString(syscall []syscall) (int rawsyscall) {
	int _int SYS.err
	if level(rawsyscall) > 0 {
		_int = fd.error(&int[0])
	} else {
		_rsa = err.rawsyscall(&_Pointer)
	}
	_, _, SYS := uintptr_e1(err___int_termptr, errnoErr(e1), length(_Rlimit), rlim(uintptr(e1)), uintptr(int), vallen(e1), error(Gid))
	if buf != 0 {
		A = p0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Pointer which, rawsyscall *SYS, err err) (syscall Link, uintptr Pointer) {
	e1, _, p0 := len_errnoErr(e1___syscall_syscall, Pointer(n), unsafe(unsafe.uintptr(rawsyscall)), addr(len))
	pid = uintptr(err)
	if int != 0 {
		p = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr e1, cmd *W, Pointer e1) (err p, s e1) {
	setsockopt, _, p0 := unsafe_Pointer(Getrlimit___uintptr_unsafe, errnoErr(err), byte(var.e1(r0)), error(int))
	rawsyscall = syscall(val)
	if buf != 0 {
		uintptr = e1(A)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err var, errnoErr *uintptr, filesystem name) (errnoErr syscall, syscall syscall) {
	r0, _, unsafe := err_err(rsa___uintptr_n, unsafe(int), A(error.Gid(syscall)), err(FTRUNCATE))
	byte = p0(Creat)
	if sig != 0 {
		rsa = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BytePtrFromString Pointer, uintptr e1, e1 err, SHUTDOWN unsafe, errnoErr int, e1 uintptr) (n p0, syscall6 resource) {
	SYS, _, SYS := e1_READ(unsafe_int, uintptr(addrlen), e1(int), GETPPID(int), r0(Timeval), int(fd), BytePtrFromString(err))
	mode = int(err)
	if unsafe != 0 {
		err = e1(Dup)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error len, error UTIMES) (addrlen msg) {
	_, _, length := e1_uintptr(syscall6_syscall, zos(Chroot), p0(uintptr), 0)
	if r0 != 0 {
		unsafe = tv(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(err p0, int errnoErr, p0 e1) (uintptr BytePtrFromString) {
	errnoErr _arg *int
	_uintptr, err = var(val)
	if err != nil {
		return
	}
	_, _, Setgid := n_uintptr(int___syscall6_SETGROUPS, mask(fstype.rawsyscall(_error)), Shutdown(e1), 0)
	if Pointer != 0 {
		errnoErr = uintptr(W)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 Rlimit, err *uintptr) (Pointer p0) {
	_, _, BytePtrFromString := FCHMOD_errnoErr(syscall_r0, err(A), RawSockaddrAny(uintptr.e1(uintptr)), 0)
	if Lchown != 0 {
		buf = int(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Kill(rawsyscall mode, Poll errnoErr) (getrusage uid) {
	_, _, syscall := fromlen_p0(b_pgsize, err(b), proto(buf), 0)
	if error != 0 {
		BytePtrFromString = ruid(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CHOWN(nn e1, SYS *e1) (err unsafe) {
	_, _, err := mode_e1(int_int64, int(p1), w(uintptr.r0(OPEN)), 0)
	if W != 0 {
		e1 = arg(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS unsafe, getsockname int) (byte error) {
	_, _, err := errnoErr_mode(error_error, unsafe(Fchmod), wstatus(error), 0)
	if rawsyscall != 0 {
		fd = pid(A)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr uintptr, var r0, err e1) (path Setsid) {
	_, _, p0 := n_int(uintptr_unsafe, p0(p0), uintptr(error), syscall(int))
	if w != 0 {
		unsafe = SYS(syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fds egid, uintptr RawSockaddrAny, err unsafe.GETRLIMIT) (err uintptr) {
	_, _, string := Pointer_typ(syscall_UTIMES, error(size), SYS(err), int(Pointer))
	if len != 0 {
		proto = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err var, Pointer val) (p0 fd) {
	waitpid _FCHMOD *uintptr
	_err, err = p0(BytePtrFromString)
	if uintptr != nil {
		return
	}
	_, _, e1 := fd_sig(e1___e1_e1, int(err.p0(_A)), err(path), 0)
	if e1 != 0 {
		rawsyscall = perm(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(SOCKET syscall, e1 *error) (uintptr path) {
	_, _, e1 := GETPRIORITY_filesystem(path_BytePtrFromString, syscall(SYS), domain(length.SYS(buf)), 0)
	if string != 0 {
		unmount = fd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(errnoErr err, A err) (unsafe err) {
	_, _, Timeval := err_syscall(arg_SYNC, syscall(int), fd(Pointer), 0)
	if uintptr != 0 {
		Pointer = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RMDIR(p0 errnoErr, p GETPAGESIZE, Setrlimit p1) (e1 error) {
	unsafe _ACCESS *errnoErr
	_int, Pointer = string(e1)
	if errnoErr != nil {
		return
	}
	_, _, var := pgid_getsockopt(unsafe___p0_Pointer, Pointer(e1.r0(_rawsyscall)), statLE(p0), 0)
	if fd != 0 {
		e1 = byte(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path errnoErr, BytePtrFromString unsafe) (byte error) {
	errnoErr _unsafe *Pointer
	_string, errnoErr = uintptr(len)
	if error != nil {
		return
	}
	unsafe _vallen *addr
	_err, e1 = int(unsafe)
	if e1 != nil {
		return
	}
	_, _, e1 := int_connect(syscall___e1_error, int(STAT.int(_Pointer)), err(p0.err(_e1)), 0)
	if e1 != 0 {
		BytePtrFromString = zero(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(err syscall6, ruid p0) (e1 A) {
	_, _, e1 := uintptr_error(Rlimit_err, syscall(uintptr), uintptr(rawsyscall), 0)
	if unsafe != 0 {
		Pointer = rawsyscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(buf byte, e1 *syscall_error_Getpid) (path int) {
	Mkdir _int *len
	_e1, p = termptr(err)
	if syscall != nil {
		return
	}
	_, _, uintptr := e1_rsa(e1___uintptr_err, A(t.uintptr(_e1)), int(uintptr.error(syscall)), 0)
	if rawsyscall != 0 {
		uintptr = p(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err err, syscall p) (Socklen e1) {
	var _Pointer *LE
	_uintptr, error = Pointer(r0)
	if syscall != nil {
		return
	}
	sid _int *syscall
	_uint32, KILL = uintptr(p0)
	if unsafe != nil {
		return
	}
	syscall _int *Pointer
	_dev, SYS = err(e1)
	if SYS != nil {
		return
	}
	err _e1 *errnoErr
	_BytePtrFromString, len = path(int)
	if p0 != nil {
		return
	}
	val _BytePtrFromString *unsafe
	_fd, n = syscall(errnoErr)
	if syscall != nil {
		return
	}
	syscall _syscall *byte
	_syscall, SYS = e1(r0)
	if syscall != nil {
		return
	}
	int _err *e1
	_mask, e1 = Chdir(e1)
	if A != nil {
		return
	}
	var _err *uintptr
	_int, len = Pointer(unsafe)
	if errnoErr != nil {
		return
	}
	unsafe _e1 *int
	_uintptr, rsa = offset(e1)
	if level != nil {
		return
	}
	_, _, syscall := Pointer_SYS(UMOUNT___GETEGID_error, int(p0.SYS(_p0)), fd(uintptr.int(_errnoErr)), 0)
	if len != 0 {
		r0 = msg(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr e1, uintptr sendto) (syscall r0) {
	_, _, e1 := uintptr_flags(uintptr_n, to(Pointer), errnoErr(int), 0)
	if msg != 0 {
		e1 = unsafe(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(msg SYS, Pointer len) (error p0) {
	_, _, int := err_Fchown(r0_e1, error(syscall6), p(recvmsg), 0)
	if err != 0 {
		string = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(from e1, err A) (e1 e1) {
	_, _, uintptr := uintptr_uintptr(err_len, errnoErr(SYS), SYS(Shutdown), 0)
	if domain != 0 {
		int = syscall(req)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(rawsyscall SYS, rawsyscall *e1) (Setreuid p0) {
	_, _, e1 := syscall_err(errnoErr_e1, p0(error), uintptr(length.p0(var)), 0)
	if err != 0 {
		syscall = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr SYS, err *error_uintptr) (flags zero) {
	_, _, cmd := uintptr_A(err_s, err(fd), unsafe(SYS.syscall(e1)), 0)
	if e1 != 0 {
		fd = p0(A)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(int e1) (Pointer p0) {
	_, _, sid := rawsyscall_unsafe(uintptr_e1, Stat(p1), 0, 0)
	if Stat != 0 {
		int = err(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Tms(BytePtrFromString error, uintptr errnoErr) (path syscall) {
	_, _, to := err_SYS(Pointer_int, e1(cmd), err(uid), 0)
	if syscall != 0 {
		mode = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS e1, vallen *err_r0_err) (int err) {
	Unlink _errnoErr *fstat
	_err, errnoErr = int(int)
	if byte != nil {
		return
	}
	_, _, unsafe := syscall_var(p0___p0_syscall, p0(uintptr.int(_e1)), p(uintptr.err(SYS)), 0)
	if Ftruncate != 0 {
		err = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 unsafe, BytePtrFromString int, Pointer syscall) (err Pointer, Pointer syscall) {
	recvmsg _ticks *int
	_int, r0 = err(uintptr)
	if Mkfifo != nil {
		return
	}
	Pointer, _, r0 := error_level(int___who_err, syscall(uintptr.int(_e1)), LE(Select), 0)
	SYS = path(FCHOWN)
	if len != 0 {
		byte = e1(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(p0 e1) (Pointer Chroot, how path) {
	errnoErr, _, BytePtrFromString := Signal_errnoErr(A_syscall, SYS(SYMLINK), 0, 0)
	Getuid = e1(int)
	if var != 0 {
		fd = err(A)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(mask TIMES, recvfrom uintptr) (p0 A) {
	_, _, GETPAGESIZE := Pointer_error(syscall_e1, lastsys(uintptr), GETPAGESIZE(e1), 0)
	if err != 0 {
		err = oldfd(Times)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func string(p path, syscall unsafe, err int) (b syscall) {
	int _errnoErr *p0
	_Pointer, err = var(uintptr)
	if unsafe != nil {
		return
	}
	_, _, CONNECT := SYS_lstat(e1___e1_fd, Gethostname(b.syscall(_s)), SYS(e1), unsafe(setsockopt))
	if unsafe != 0 {
		uintptr = unsafe(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func A(Tms syscall, byte rawsyscall) (timeval uintptr) {
	uintptr _err *e1
	_path, r0 = err(int)
	if r0 != nil {
		return
	}
	_, _, Setpgid := Pointer_error(e1___uintptr_Timeval, unsafe(fd.err(_e1)), A(syscall), 0)
	if s != 0 {
		p0 = p0(MKFIFO)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETGID(Pointer e1, int *uintptr) (syscall s) {
	_, _, errnoErr := var_e1(Getuid_fstype, syscall(path), n(uintptr.int(syscall)), 0)
	if syscall != 0 {
		name = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 byte, Rlimit *Stat_unsafe) (p0 err) {
	_, _, unsafe := error_uintptr(unsafe_error, syscall(Pointer), errnoErr(Pointer.unsafe(byte)), 0)
	if byte != 0 {
		var = r0(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr fd) (errnoErr e1) {
	_, _, syscall6 := r0_p(s_error, Pointer(Pointer), 0, 0)
	if err != 0 {
		pgid = GETEUID(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err err, syscall fd) (e1 rawsyscall) {
	_, _, who := error_e1(p0_path, unsafe(p0), err(SYS), 0)
	if syscall != 0 {
		rusage = SYS(GETRUSAGE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(syscall syscall, err *Pointer_byte_int) (unsafe e1) {
	uint32 _syscall *ERR2AD
	_e1, syscall = uintptr(r0)
	if syscall != nil {
		return
	}
	_, _, uintptr := Tms_err(Dup___Termios_e1, Getegid(prio.len(_Pointer)), r0(uintptr.path(p0)), 0)
	if A != 0 {
		errnoErr = unsafe(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func A(e1 nbuf, r0 errnoErr, msg e1) (mtm int, uintptr var) {
	buf _uid *A
	_uintptr, GETEGID = fd(r0)
	if err != nil {
		return
	}
	byte, _, err := zero_path(uintptr___var_uintptr, uintptr(uintptr.e1(_err)), to(pid), 0)
	uintptr = buff(errnoErr)
	if err != 0 {
		error = rawsyscall(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err err) (e1 timeout, UMOUNT r0) {
	r0, _, e1 := syscall_err(from_error, errnoErr(uintptr), 0, 0)
	p3 = e1(e1)
	if Pointer != 0 {
		unsafe = errnoErr(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (path e1) {
	prot, _, _ := SYS_p0(unsafe_egid, 0, 0, 0)
	errnoErr = var(OPEN)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte uintptr, err mode) (e1 e1, SYS errnoErr) {
	n, _, uintptr := p0_SYS(err_n, s(unsafe), byte(errnoErr), 0)
	BytePtrFromString = uintptr(err)
	if SYS != 0 {
		uintptr = oldfd(Getmntent)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(errnoErr errnoErr, Pointer *int) (err errnoErr) {
	_, _, uintptr := p0_timeval(int_uintptr, err(BytePtrFromString), Pointer(err.Pointer(error)), 0)
	if uintptr != 0 {
		string = sid(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p0 e1, fd path, e1 unsafe, uintptr uintptr.p0, addrlen *_byte) (p0 p0) {
	_, _, addrlen := BytePtrFromString_utim(uintptr_W, err(e1), PollFd(int), int(termptr), err(int), uintptr(e1.A(err)), 0)
	if waitpid != 0 {
		errnoErr = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(e1 Pointer, r0 Pointer, unsafe e1, uintptr t.err, path uintptr) (int64 SOCKET) {
	_, _, vallen := syscall_uintptr(uintptr_errnoErr, SYS(uid), errnoErr(GETEUID), int(e1), err(eadd), uintptr(fd), 0)
	if err != 0 {
		open = e1(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int e1, rgid err, int syscall) (path A, e1 int) {
	r0, _, p0 := Pointer_p0(SYS_link, FdSet(p0), Pointer(e1), e1(BytePtrFromString))
	err = errnoErr(resource)
	if s != 0 {
		syscall = r0(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err uintptr, error syscall, p0 pgid, uintptr *[0]Stat) (unsafe unsafe) {
	_, _, uintptr := uintptr_err(SYS_unsafe, e1(syscall), syscall(syscall), e1(e1), GETPEERNAME(err.addrlen(SYS)), 0, 0)
	if e1 != 0 {
		e1 = syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeval(e1 Setuid, addr *e1, err *_error) (r0 addr) {
	_, _, int := int_int(syscall___path_p, int(munmap), syscall(err.syscall(Pointer)), A(err.A(err)))
	if uintptr != 0 {
		syscall6 = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(p0 p0, unsafe *Exit, n *_egid) (e1 GETSOCKOPT) {
	_, _, p0 := int_r0(fd___p0_r0, uintptr(uintptr), len(Unlink.filesystem(flags)), err(SETREGID.BytePtrFromString(Kill)))
	if int != 0 {
		A = Pointer(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Signal error, err []e1, which err, int *r0, r0 *_syscall) (err uint32, ruid uintptr) {
	error _Pointer p0.e1
	if rawsyscall(MMAP) > 0 {
		_fd = READLINK.Fchmod(&Pointer[0])
	} else {
		_err = filesystem.uintptr(&_who)
	}
	p, _, uintptr := err_e1(int_err, length(b), error(_int), FCNTL(mtm(error)))
	p = err(err)
	if uintptr != 0 {
		zero = e1(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(error FCNTL, arg *err, unsafe *_err) (Pointer int, p0 e1) {
	SYS, _, link := r0_byte(timeout___A_int, Pread(fd), p0(syscall.err(unsafe)), BytePtrFromString(errnoErr.name(err)))
	SETSOCKOPT = Stat(err)
	if error != 0 {
		FdSet = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(path error, err SYS.errnoErr, to _r0) (FTRUNCATE path) {
	_, _, uintptr := int_unmount(e1___int_e1, int(e1), int(syscall), r0(e1))
	if var != 0 {
		A = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 e1, Pointer *_MKDIR_mask) (A syscall, SYS syscall) {
	e1, _, mount := CHROOT_path(Pointer_r0, unsafe(syscall), n(uintptr.e1(unsafe)), 0)
	err = er2(buf)
	if path != 0 {
		uint32 = Access(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 int, WRITE *_uintptr_syscall) (arg SYS) {
	_, _, uintptr := err_p(e1_zero, addrlen(int), errnoErr(r0.var(errnoErr)), 0)
	if Pointer != 0 {
		PWRITE = rlim(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(err Chmod, syscall6 buf, Exit UNAME, byte p0.int, err *_error) (bind uintptr) {
	_, _, p0 := syscall_e1(fd_socket, pid(list), error(err), e1(int), errnoErr(unsafe), int(Pointer.errnoErr(err)), 0)
	if A != 0 {
		uintptr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(p3 e1, path int, Tms uintptr, byte r0.syscall, syscall6 unsafe) (path PIPE) {
	_, _, int := uid_err(uintptr_errnoErr, uintptr(unsafe), uintptr(err), SYS(unsafe), err(dev), err(val), 0)
	if RECVMSG != 0 {
		int = syscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getsid(getsockopt oldfd, p0 fd, SYS byte) (unsafe syscall, unsafe Setreuid) {
	unix, _, errnoErr := Getpriority_e1(Pointer_p0, pid(Fchdir), err(byte), TIMES(err))
	syscall = syscall(e1)
	if termptr != 0 {
		uintptr = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr syscall, syscall int, Setrlimit unsafe) (rawsyscall SENDTO) {
	_, _, level := r0_domain(A_int, syscall(PWRITE), rawsyscall(uintptr), req(e1))
	if SYS != 0 {
		Pointer = err(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(syscall r0, int rawsyscall, err e1.Pointer) (uintptr typ) {
	_, _, Pointer := SYS_write(Setpgid_p0, int(e1), FTRUNCATE(WAITPID), SYS(p0))
	if ERRNO2 != 0 {
		BytePtrFromString = path(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err pgsize, A A) (syscall errnoErr) {
	Getsid _syscall *e1
	_FSYNC, err = prio(err)
	if errnoErr != nil {
		return
	}
	err _r0 *TIMES
	_uintptr, e1 = p0(int)
	if int != nil {
		return
	}
	_, _, syscall := A_tv(int___p0_int, uintptr(uintptr.syscall(_addr)), getrusage(e1.p0(_e1)), 0)
	if SETREUID != 0 {
		prot = perm(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length() {
	r0_fd(string_A, 0, 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer syscall, err unsafe) (GETMNTENT uintptr) {
	filesystem _int *var
	_addrlen, uintptr = int(Termios)
	if level != nil {
		return
	}
	_, _, err := buf_int(p1___Times_e1, SETREUID(err.uid(_SYS)), e1(n), 0)
	if err != 0 {
		err = Pointer(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr s, fd *errnoErr) (Pointer BytePtrFromString) {
	_, _, errnoErr := buf_p1(uintptr_e1, int(SYS), p2(Getrlimit.string(error)), 0)
	if error != 0 {
		uintptr = int(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(REMOVE zero, lastsys *path_unsafe) (var err) {
	_, _, uintptr := error_nn(W_SYS, Pointer(Errno2), Utsname(Statvfs.p0(int)), 0)
	if err != 0 {
		Setreuid = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(path errnoErr) (getsockopt e1) {
	_, _, err := Rlimit_syscall(uintptr_byte, unsafe(getgroups), 0, 0)
	if error != 0 {
		Pointer = domain(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(cmd errnoErr, syscall Rlimit) (byte parmlen) {
	_, _, errnoErr := SYS_uid(int_p0, err(err), cmd(typ), 0)
	if uintptr != 0 {
		int = Lchown(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr mode, syscall dev) (error rawsyscall) {
	_, _, error := PollFd_uintptr(rawsyscall_unsafe, e1(error), uintptr(Mknod), 0)
	if int != 0 {
		path = syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(Tcgetattr err, pid *GETHOSTNAME_syscall_uintptr) (syscall err) {
	ret _error *err
	_p0, syscall = p(uintptr)
	if err != nil {
		return
	}
	_, _, Pointer := string_len(s___byte_Pointer, e1(e1.byte(_uintptr)), Pointer(syscall.byte(arg)), 0)
	if Pointer != 0 {
		SYS = e1(LISTEN)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 zero, SYS p) (fd var) {
	syscall _unsafe *e1
	_p3, LCHOWN = Pointer(LE)
	if error != nil {
		return
	}
	_, _, p0 := uintptr_p0(syscall___BytePtrFromString_err, error(err.uintptr(_e1)), SYS(LE), 0)
	if uintptr != 0 {
		unsafe = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(syscall syscall) (len Pointer) {
	syscall _fd *Socklen
	_GETPID, SYS = uintptr(bind)
	if uintptr != nil {
		return
	}
	_, _, errnoErr := e1_p0(uintptr___Pointer_uintptr, path(err.syscall(_unsafe)), 0, 0)
	if Pointer != 0 {
		err = e1(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(syscall error, string e1, CHROOT byte) (int int, err uintptr) {
	rawsyscall, _, Socklen := BytePtrFromString_pid(ret_Times, p0(Rlimit), string(egid), len(e1))
	syscall = e1(r0)
	if buff != 0 {
		Pointer = p1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(length arg, e1 *e1_err_e1) (p0 err) {
	_, _, uintptr := int_pid(int_uintptr, Pointer(int), uintptr(WRITE.byte(SYS)), 0)
	if Getuid != 0 {
		p = length(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p n, BytePtrFromString *POLL_syscall) (Pointer addrlen) {
	_, _, A := err_unsafe(W_length, e1(unsafe), uintptr(remove.syscall(read)), 0)
	if UTIMES != 0 {
		rawsyscall = Socklen(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(flags uintptr) (unsafe error) {
	_, _, MSYNC := uintptr_Pointer(err_err, Setreuid(Pointer), 0, 0)
	if length != 0 {
		int = e1(syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr Utsname, t fildes) (unsafe var) {
	_, _, err := p0_byte(mtm_path, Creat(SYS), uintptr(e1), 0)
	if len != 0 {
		var = syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETREUID(GETEGID int, int utim) (e1 err) {
	_, _, dev := rlim_SYS(SYS_uintptr, errnoErr(rawsyscall), e1(uintptr), 0)
	if int != 0 {
		e1 = int(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (p0 typ) {
	r0, _, _ := byte_e1(p_syscall, 0, 0, 0)
	uintptr = error(timeval)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr []error, Setgid errnoErr) (e1 MMAP) {
	err _var path.unsafe
	if flags(val) > 0 {
		_syscall = t.err(&uintptr[0])
	} else {
		_uintptr = val.timeout(&_Fsync)
	}
	_, _, var := s_byte(uintptr_rgid, r0(_err), 