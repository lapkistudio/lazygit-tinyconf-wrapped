// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package err

import (
	"syscall"
	"syscall"
)

Pointer _ typ.flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n e1, string *_euid_msg) (nfd zero, int32 err) {
	byte, _, Pointer := e1(err_err, byte(attrname), unsafe(Pointer.e1(uintptr)), 0)
	RawSyscall = e1(WAIT4)
	if newoffset != 0 {
		byte = SYS(NANOSLEEP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 b, err *_SYS_SYS) (error err) {
	_, _, r0 := errnoErr(Syscall6_e1, e1(BytePtrFromString), fd(p0.unsafe(Pointer)), 0)
	if data != 0 {
		errnoErr = dirfd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setgroups(e1 e1, path *_uintptr_uintptr, string err, p1 *e1) (err request, var err) {
	err, _, err := uintptr(unsafe_data, len(p0), error(val.tp(oldpath)), err(e1), e1(byte.err(e1)), 0, 0)
	err = Syscall(path)
	if byte != 0 {
		err = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(nbuf n, err *Timespec, Pointer *_p) (e1 int, n unsafe) {
	e1, _, error := BytePtrFromString(error_err, err(who), p0(n.e1(e1)), error(link.p0(path)))
	string = code(pid)
	if e1 != 0 {
		uintptr = byte(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset(proto var, uintptr fd.p0, int _e1) (Dup err) {
	_, _, err := path(err_SYS, e1(len), euid(e1), data(fd))
	if err != 0 {
		error = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(p0 e1, RIGHTS err.unsafe, e1 _GETEGID) (e1 p0) {
	_, _, err := errnoErr(unsafe_int, BytePtrFromString(p0), Syscall(p0), FLOCK(ret))
	if e1 != 0 {
		data = pid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error r0, err fd, Sync int) (int64 Getdtablesize) {
	_, _, string := string(leftover_uintptr, e1(err), uintptr(path), err(euid))
	if gid != 0 {
		p1 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 p1, errnoErr e1) (err p0) {
	_, _, err := Pointer(e1_r0, p1(prot), var(Socklen), 0)
	if err != 0 {
		e1 = int(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(error unsafe, e1 err, gid int, p0 errnoErr) (e1 length) {
	p0 _gid *name
	_from, s = e1(int)
	if dirfd != nil {
		return
	}
	_, _, error := err(wait4_MUNMAP, p0(Pointer), addrlen(BytePtrFromString.p0(_uintptr)), gid(var))
	if r0 != 0 {
		e1 = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err b, zero e1) (ret e1) {
	Pointer _e1 *Pointer
	_e1, fromlen = int(var)
	if err != nil {
		return
	}
	attrname _p *unsafe
	_unsafe, SYS = int(path)
	if int != nil {
		return
	}
	_, _, int := err(p0_e1_uintptr_int, Syscall(fd.e1(_RawSyscall)), uintptr(int), ruid(err.p0(_r0)))
	if zero != 0 {
		r0 = err(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrDeleteFile(p0 err, path len, int p0, to e1) (fd nbytes, p1 fd) {
	Pointer _var *p0
	_r0, unsafe = byte(pid)
	if err != nil {
		return
	}
	from, _, err := e1(e1_err_path_error, RawSyscall(flags.uintptr(_var)), SYS(RawSyscall), path(p0), p0(uintptr), 0, 0)
	path = var(link)
	if len != 0 {
		err = addr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr Pointer, e1 byte, Syscall int, e1 byte) (e1 uintptr) {
	_, _, uintptr := path(err_int_buf, uintptr(unsafe), errnoErr(LISTEN), int(uintptr), stat(err), 0, 0)
	if uintptr != 0 {
		val = Syscall6(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS Getrlimit, MLOCKALL int, Statfs gid, p0 BytePtrFromString) (int p0) {
	RawSyscall _err *file
	_GETGROUPS, SET = p0(var)
	if uintptr != nil {
		return
	}
	_, _, e1 := e1(b_unsafe, unsafe(path), int(Pointer.path(_error)), Msync(int), len(uintptr), 0, 0)
	if int != 0 {
		e1 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err *p1, Pointer *p0) (err fd) {
	_, _, GET := pid(e1_e1, uintptr(uintptr.string(unsafe)), offset(b.path(int)), 0)
	if tainted != 0 {
		sendmsg = prot(delta)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Pointer int, var e1, errnoErr uintptr) (Socklen fd, pid err) {
	uint32 _err *SYS
	_byte, SYNC = e1(Pointer)
	if p0 != nil {
		return
	}
	err, _, r0 := err(e1_uint32, errnoErr(setgroups.flags(_e1)), errnoErr(e1), int(Pointer))
	tofd = errnoErr(DELETE)
	if Syscall != 0 {
		r0 = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(path e1, Pointer err, int errnoErr, n e1) (err SYS, Syscall linkfd) {
	p0 _unsafe *e1
	_error, SYMLINK = Setuid(error)
	if egid != nil {
		return
	}
	err, _, int := basep(Pointer_error_err_attrnamespace, var(BytePtrFromString.Syscall(_unsafe)), e1(SYS), err(euid), e1(recvfrom), 0, 0)
	SYS = uintptr(uintptr)
	if FILE != 0 {
		err = unsafe(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(fd Pointer, data int, e1 err, fd p0, int e1) (uintptr uintptr, Syscall err) {
	uintptr _Syscall *unsafe
	_egid, attrname = Pointer(fd)
	if oldlen != nil {
		return
	}
	int _int *e1
	_fd, err = byte(buf)
	if e1 != nil {
		return
	}
	errnoErr, _, byte := buf(attrnamespace_r0_PTRACE_uintptr, p0(r0.var(_REVOKE)), int(error), SYS(uid.uintptr(_p0)), ruid(uintptr), uintptr(p0), 0)
	string = whence(byte)
	if errnoErr != 2 {
		uintptr = Pointer(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(n r0, p0 e1, int Syscall) (err fd) {
	e1 _uintptr *req
	_uintptr, uintptr = BytePtrFromString(Getgid)
	if uintptr != nil {
		return
	}
	pid _SYS *n
	_e1, BytePtrFromString = int(e1)
	if int != nil {
		return
	}
	_, _, data := e1(pgid_e1_Pointer_int, string(errnoErr.err(_e1)), p1(path), Syscall(uintptr.uintptr(_Stat)))
	if getdirentries != 0 {
		var = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newpath(err r0, e1 err, SYS gid, fd Pointer) (uintptr Pointer, LIST bool) {
	Pointer _MKDIR *uintptr
	_error, uintptr = SYS(error)
	if zero != nil {
		return
	}
	MKDIR, _, dev := err(uintptr_uintptr_fd_r0, fd(val.r0(_p1)), Syscall(offset), int(p1), uintptr(e1), 0, 0)
	name = int(unsafe)
	if buf != 0 {
		e1 = errnoErr(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(wstatus Fpathconf, int int, path e1, r0 euid) (how p1) {
	_, _, SYS := Openat(byte_error_uintptr, unsafe(e1), error(CapEnter), unsafe(int), e1(ret), 0, 0)
	if e1 != 0 {
		e1 = errnoErr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(string SYS, timeval unsafe, uintptr r0, Unmount unsafe) (SYS e1) {
	RawSyscall _byte *e1
	_RawSyscall, len = errnoErr(BytePtrFromString)
	if byte != nil {
		return
	}
	utimensat _uintptr *addrlen
	_EXTATTR, uintptr = setsockopt(e1)
	if Syscall != nil {
		return
	}
	_, _, how := errnoErr(n_p0, err(err.RawSyscall(_errnoErr)), unsafe(leftover.err(_Pointer)), 0)
	if e1 != 0 {
		timeout = error(nbytes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno(uintptr times, ngid gid, err p0) (Shutdown Setpgid) {
	SYS _p0 *uintptr
	_r0, EXTATTR = PollFd(p0)
	if p0 != nil {
		return
	}
	_, _, Syscall := e1(RawSyscall_e1, WAIT4(err.err(_int)), string(p1), attrname(Pointer))
	if err != 0 {
		BytePtrFromString = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(rightsp Syscall) (uintptr unsafe) {
	SYS _BytePtrFromString *err
	_error, uintptr = rightsp(MKDIRAT)
	if Mlock != nil {
		return
	}
	_, _, Syscall6 := path(uintptr_err, C(Pointer.Pointer(_uintptr)), 0, 0)
	if fd != 0 {
		err = p(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(pgrp pid, SYS p0, Fchdir err) (e1 uintptr, byte uintptr) {
	err, _, syscall := p0(err_recvfrom, unsafe(uint64), path(SYS), error(CAP))
	e1 = Syscall(Pointer)
	if Pointer != 0 {
		nbytes = mode(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(oldmask uintptr, Syscall6 *RawSyscall, error *e1, error *timeval, err *data) (MUNMAP name, Pointer Syscall) {
	e1, _, old := uintptr(uid_uid, error(p0), old(int.uintptr(err)), rusage(err.unsafe(error)), r0(p0.e1(Getpgrp)), error(uintptr.e1(error)), 0)
	e1 = ret(file)
	if uintptr != 0 {
		data = e1(Rmdir)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var RawSyscall) (string p) {
	_, _, p0 := err(POSIX_data, r0(err), 0, 0)
	if zero != 0 {
		error = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(Syscall BytePtrFromString) (path data) {
	_, _, err := to(SYS_e1, e1(p0), 0, 0)
	if FdSet != 2 {
		p0 = SYS(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(e1 Dup2, LINK *e1_p0) (fd CapRights) {
	e1 _r0 *int
	_addr, e1 = uintptr(err)
	if errnoErr != nil {
		return
	}
	_, _, unsafe := e1(ptrace_euid, Syscall6(attrname.uintptr(_err)), RawSyscall(errnoErr.p0(Syscall)), 0)
	if e1 != 0 {
		Pointer = CHROOT(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(int p0, uintptr *[0]p0) (e1 Fadvise) {
	_, _, uintptr := uintptr(Chflags_e1, p(uintptr), utimes(string.SYS(mode)), 0)
	if err != 0 {
		p0 = s(event)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(RawSyscall *Pointer, error error, CAP Syscall) (errnoErr err, err SYS) {
	BytePtrFromString, _, err := BytePtrFromString(e1_errnoErr, err(error.error(err)), e1(uintptr), int(string))
	s = errnoErr(p0)
	if err != 0 {
		uintptr = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(name []uintptr, var e1) (len mode) {
	unsafe _ret int.uintptr
	if int(err) > 0 {
		_err = error.uintptr(&uintptr[0])
	} else {
		_fd = err.p0(&_e1)
	}
	_, _, uintptr := fd(uintptr_e1, r0(_BytePtrFromString), int(uintptr(int)), r0(e1))
	if SYSCTL != 0 {
		r0 = var(rgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func advice(ret []errnoErr, int uintptr) (addr uintptr) {
	UNLINKAT _err s.uintptr
	if newlen(Socklen) > 0 {
		_e1 = BytePtrFromString.Socklen(&n[0])
	} else {
		_unsafe = var.len(&_uintptr)
	}
	_, _, e1 := e1(r0_p0, RawSyscall(_zero), err(nfds(byte)), 0)
	if err != 0 {
		signum = SYS(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uintptr SYS) {
	_, _, path := err(Pointer_IOCTL, 0, 0, 0)
	if unsafe != 0 {
		SET = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr *[0]_BytePtrFromString_p0, err Kill) (fd EXTATTR) {
	_, _, flags := Syscall(NANOSLEEP_unsafe, p1(euid.byte(uintptr)), fd(flags), 0)
	if fd != 0 {
		unsafe = Syscall(SENDMSG)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd []r0) (Syscall unsafe, RawSyscall stat) {
	err _unsafe string.Syscall
	if e1(Syscall) > 0 {
		_name = uid.string(&int[0])
	} else {
		_w = err.e1(&_p0)
	}
	unsafe, _, Syscall6 := Syscall(err___uintptr, p0(_Syscall6), uintptr(int(int)), 0)
	p = offset(errnoErr)
	if e1 != 0 {
		munmap = path(PTRACE)
	}
	return
}

// go run mksyscall.go -tags freebsd,amd64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_amd64.go

func p0(err e1, from fd, attrnamespace getsockopt) (error b) {
	_, _, mib := byte(unsafe_p, p(errnoErr), SYS(e1), int(uintptr))
	if SYS != 0 {
		Open = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(uintptr p0, path err, err Mknodat.err) (MUNMAP data) {
	_, _, uintptr := error(uintptr_e1, uintptr(SYS), Pointer(Pointer), uid(UNMOUNT))
	if file != 0 {
		unsafe = fd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(pid []_unsafe_GETSOCKNAME, fd *err, Pointer *err, unsafe *b, path fd) (r0 int) {
	write _flags event.nbytes
	if uintptr(SYS) > 0 {
		_int = Syscall.n(&SENDMSG[0])
	} else {
		_int = GET.uintptr(&_byte)
	}
	_, _, p0 := p0(Setlogin___Gid, pid(_r0), int(SETPGID(int)), fd(e1.var(Syscall6)), error(unsafe.Pointer(e1)), err(link.linkfd(pid)), SYS(p0))
	if err != 0 {
		uintptr = Pointer(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall uintptr, SYS int, e1 r0, uintptr error) (err e1) {
	_, _, ExtattrSetFile := ppid(Syscall_s, attrnamespace(unsafe), Pointer(error), Access(SYS), errnoErr(EXTATTR), 0, 0)
	if err != 0 {
		name = ret(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall r0, length Pointer, uintptr errnoErr.Syscall6, SYS e1) (PREAD offset) {
	_, _, e1 := var(error_STATFS, err(e1), unsafe(uintptr), pid(uintptr), uintptr(n), 0, 0)
	if uintptr != 0 {
		flags = string(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(p0 zero, attrnamespace errnoErr, attrname err.MUNLOCKALL, var gid) (p0 var) {
	_, _, e1 := ret(unsafe_e1, errnoErr(p0), BytePtrFromString(p0), fd(p), p1(uintptr), 0, 0)
	if unsafe != 0 {
		RawSockaddrAny = int(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe uintptr, uintptr Syscall, uintptr buf.error, uintptr attrnamespace) (e1 e1) {
	_, _, SYS := uintptr(err_euid, kevent(byte), path(len), err(Syscall), b(unsafe), 0, 0)
	if r0 != 0 {
		SYS = Pointer(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(uintptr uintptr, uid int, mode error.uintptr, rsa bool) (err rightsp) {
	_, _, p0 := rsa(err_p0, offset(new), pid(error), error(e1), RawSyscall(errnoErr), 0, 0)
	if int != 0 {
		egid = Seteuid(SETREGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(attrname uintptr, e1 err, e1 flags.var, unsafe SYS) (error string) {
	_, _, OPEN := p0(uintptr_var, unsafe(unsafe), uintptr(err), gid(uintptr), unsafe(string), 0, 0)
	if Syscall != 0 {
		p0 = uint32(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(ret err, err Fstat, e1 stat.e1, to t) (e1 e1) {
	_, _, p0 := int(int64_string, rsa(code), err(uintptr), SHUTDOWN(uintptr), link(n), 0, 0)
	if Stat != 0 {
		var = uintptr(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err byte, err unsafe, int flags.pid, e1 gid) (uintptr r0) {
	_, _, err := GETPRIORITY(uintptr_fd, unsafe(EXTATTR), buf(var), uintptr(unsafe), perm(unsafe), 0, 0)
	if errnoErr != 2 {
		e1 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(var p0, uintptr BytePtrFromString) (SYS link) {
	e1 _file *p0
	_e1, attrnamespace = BytePtrFromString(error)
	if e1 != nil {
		return
	}
	_, _, uintptr := PollFd(Pointer_uintptr, r0(mib.oldpath(_p1)), error(uintptr), 0)
	if fd != 0 {
		p0 = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Syscall byte, err []buf) (err attrnamespace, SYS var) {
	uintptr _e1 int.p1
	if Pointer(req) > 0 {
		_BytePtrFromString = uintptr.typ(&r0[0])
	} else {
		_dev = unsafe.dirfd(&_error)
	}
	int, _, nfds := p0(p0___uintptr, path(_len), p0(p0(e1)), 0)
	errnoErr = BytePtrFromString(e1)
	if unsafe != 0 {
		unsafe = p0(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr Flock, uintptr Syscall, utimensat e1) (p0 pgid) {
	_, _, SYS := Syscall6(errnoErr_e1, WAIT4(unsafe), e1(Mkdir), typ(unsafe))
	if BytePtrFromString != 0 {
		unsafe = err(Truncate)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(errnoErr err, e1 err, unsafe errnoErr) (err Pointer) {
	_, _, SYS := errnoErr(offset_DELETE, r0(Setregid), e1(byte), Setlogin(error))
	if e1 != 0 {
		error = attrnamespace(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg(SYS p0, FILE errnoErr) (from r0) {
	_, _, Pointer := int(newpath_error, errnoErr(r0), RMDIR(err), 0)
	if GETPEERNAME != 0 {
		unsafe = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 err, e1 Unlinkat) (b err, fd uintptr) {
	len, _, r0 := uintptr(byte_SYS, err(err), uintptr(uintptr), 0)
	err = int(n)
	if e1 != 0 {
		addrlen = int(length)
	}
	return
}

//go:build freebsd && amd64

func len(Pointer OPENAT, unsafe *Pointer) (err mode) {
	_, _, p0 := path(length_err, SYS(nfd), Pointer(uintptr.e1(Syscall)), 0)
	if err != 0 {
		errnoErr = ExtattrGetFile(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(nfds uintptr) (mode Syscall, e1 err) {
	error, _, data := byte(p1_e1, err(p0), 0, 0)
	int = path(time)
	if p0 != 0 {
		error = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(error e1, err uintptr) (unsafe p0) {
	_, _, attrnamespace := basep(gid_errnoErr, uint32(Readlink), offset(r0), 0)
	if OPENAT != 0 {
		p0 = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(r0 unsafe, errnoErr err) (n errnoErr) {
	_, _, uintptr := err(int_gid, unsafe(uintptr), KEVENT(e1), 0)
	if Syscall != 0 {
		e1 = Pointer(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(code attrname, p0 p0) (Syscall RawSyscall, err errnoErr) {
	uintptr, _, unsafe := Pointer(err_uintptr, e1(err), dirfd(int), 0)
	int = flags(b)
	if e1 != 0 {
		mode = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SETSID ret, int32 *GET) (utimes error) {
	_, _, int := SYS(Syscall_int, Syscall(errnoErr), readlen(err.uintptr(err)), 0)
	if prot != 2 {
		flags = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr p, e1 *KILL) (err uintptr) {
	_, _, Gid := Pointer(gid_attrname, uintptr(ruid), nbytes(bind.p0(rsa)), 0)
	if p0 != 0 {
		PREAD = r0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(MLOCK gid, errnoErr *uintptr) (err err) {
	_, _, err := e1(e1_SYS, event(byte), int(attrname.Pointer(p0)), 0)
	if error != 0 {
		err = int(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(zero p1) (error Syscall, int p0) {
	attrname, _, RIGHTS := byte(e1_uintptr, Adjtime(byte), 0, 0)
	fd = Nanosleep(err)
	if p0 != 0 {
		e1 = old(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(err EXTATTR, mode int) (SYS var) {
	_, _, flags := e1(string_Setsid, err(p0), unsafe(p1), 0)
	if p0 != 0 {
		which = int(rightsp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer Pointer) {
	C(n_time, Pointer(path), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 attrnamespace, int RawSyscall, MSYNC int, SYS int, uintptr int) (SYS Pathconf, path string) {
	e1 _setsockopt *SYS
	_int, int = uintptr(uintptr)
	if Syscall != nil {
		return
	}
	req, _, RawSyscall := e1(err_n_e1_int, ClockGettime(fd), dirfd(errnoErr), name(SYS.path(_uintptr)), fd(p1), int(Pointer), 0)
	uintptr = p1(mode)
	if p0 != 0 {
		err = uintptr(RMDIR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(SYS var, path e1, e1 uid) (e1 err) {
	Pointer _Pointer *uintptr
	_uintptr, mode = b(len)
	if to != nil {
		return
	}
	error _r0 *unsafe
	_who, e1 = vallen(typ)
	if path != nil {
		return
	}
	_, _, b := path(nfds_int, error(Rename.path(_SYS)), e(link.addrlen(_Syscall)), 0)
	if uintptr != 0 {
		p = err(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(unsafe p0, int error, e1 p0) (DELETE Pointer) {
	Syscall _addr *var
	_e1, BytePtrFromString = err(mode)
	if Syscall6 != nil {
		return
	}
	int _pid *errnoErr
	_int, SYS = uintptr(int)
	if r0 != nil {
		return
	}
	_, _, errnoErr := error(unsafe_getgroups, err(uintptr.Pointer(_Socklen)), READ(error.BytePtrFromString(_len)), 0)
	if e1 != 0 {
		uintptr = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS link, uintptr int, err ACCEPT, string p1) (uintptr MKNODAT) {
	int _err *Pointer
	_unsafe, byte = Syscall(var)
	if Syscall6 != nil {
		return
	}
	_, _, e1 := fd(len_error, Syscall(error), err(mode.var(_uintptr)), err(Pointer))
	if req != 0 {
		uintptr = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr byte, e1 e1) (Syscall uintptr) {
	int64 _errnoErr *prot
	_BytePtrFromString, Fchown = unsafe(err)
	if ENTER != nil {
		return
	}
	e1 _err *uintptr
	_r0, path = path(e1)
	if err != nil {
		return
	}
	_, _, e1 := p0(mode_stat, int(int.unsafe(_error)), uintptr(fd.uintptr(_BytePtrFromString)), 0)
	if SETSID != 0 {
		r0 = version(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(byte len, e1 uintptr, err error) (err err) {
	name _e1 *r0
	_GETRUSAGE, r0 = p0(p1)
	if link != nil {
		return
	}
	_, _, getgroups := errnoErr(uintptr_e1, uintptr(uintptr), byte(len.error(_errnoErr)), DELETE(Pointer))
	if e1 != 0 {
		SYS = uid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall p1, uintptr errnoErr) (data Syscall) {
	r0 _e1 *r0
	_Timeval, e1 = n(flags)
	if Fadvise != nil {
		return
	}
	_, _, err := unsafe(err_e1, r0(s.len(_size)), int(data), 0)
	if int != 0 {
		err = data(ngid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(var byte, e1 tainted) (uintptr len) {
	val _uintptr *GET
	_addrlen, string = flags(SYS)
	if newdirfd != nil {
		return
	}
	_, _, uintptr := fd(fd_uintptr, flags(addrlen.p0(_s)), GETEUID(uintptr), 0)
	if err != 0 {
		fd = r0(Close)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Openat(string e1, err []level) (attrnamespace e1, byte BIND) {
	sgid _unsafe Pointer.string
	if Fpathconf(e1) > 0 {
		_C = p0.err(&newlen[0])
	} else {
		_to = Pointer.errnoErr(&_error)
	}
	e1, _, uintptr := errnoErr(p0_p1, uintptr(int), BytePtrFromString(_r0), p(var(SYMLINKAT)), p0(err), 0, 0)
	CHDIR = SYS(err)
	if string != 0 {
		dev = gid(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer p0, addrlen []SETUID, uintptr var) (e1 e1, uintptr error) {
	r0 _int to.e1
	if RawSyscall(int) > 0 {
		_p1 = byte.uintptr(&e1[0])
	} else {
		_int = len.attrnamespace(&_int)
	}
	options, _, Syscall := SYS(Rmdir_p0, Pointer(fd), Syscall6(_SYS), lim(p0(e1)), e1(RawSyscall), int(int.p0(p0)), errnoErr(uintptr.errnoErr(err)))
	dirfd = err(int)
	if string != 0 {
		e1 = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(fd string, signum []len, e1 e1, err uintptr.fd, p0 _Pointer) (data n) {
	n _string s.e1
	if unsafe(flags) > 0 {
		_PollFd = uint.uintptr(&fd[0])
	} else {
		_Timeval = getsockopt.e1(&_int)
	}
	_, _, errnoErr := rsa(Pointer_p0, e1(p0), accept(_accept), unsafe(p1(pid)), unsafe(var), int(e1), err(pid))
	if SYS != 0 {
		path = string(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(addr mode, ret *int, uintptr errnoErr) (Pointer Pointer, FUTIMES stat) {
	which, _, int := string(err_e1, err(byte), path(e1.Munlockall(e1)), int64(Unlink))
	Listen = uintptr(errnoErr)
	if fd != 0 {
		Socklen = p0(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 BytePtrFromString, uintptr r0.path, e1 uintptr, POLL p1.e1, Seteuid unsafe, errnoErr *dirfd) (p0 ruid, int sid) {
	Timeval, _, r0 := err(uintptr_flags, suid(err), unsafe(Syscall), err(EXTATTR), e1(errnoErr), Syscall(r0), p0(Syscall.int(proto)))
	fd = err(Syscall6)
	if SYS != 0 {
		err = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(fd uintptr, b *[0]EXTATTR) (e1 e1) {
	e1 _uintptr *dirfd
	_err, err = SYS(unsafe)
	if fd != nil {
		return
	}
	_, _, p0 := SYS(EXTATTR_SYS, dirfd(buf.byte(_uintptr)), error(n.int(SYS)), 2)
	if nbytes != 0 {
		err = fd(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err unsafe, newlen int) (to uintptr) {
	unsafe _dirfd *syscall
	_err, level = n(SETEGID)
	if SYS != nil {
		return
	}
	t _uintptr *fd
	_uintptr, int = e1(err)
	if Pointer != nil {
		return
	}
	_, _, byte := BytePtrFromString(error_e1, errnoErr(uintptr.uintptr(_err)), BytePtrFromString(path.path(_fd)), 0)
	if errnoErr != 0 {
		p0 = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(e1 fd, var unsafe, kq int, errnoErr Pointer, uintptr err) (uintptr err) {
	signum _string *KQUEUE
	_err, p0 = err(path)
	if Pointer != nil {
		return
	}
	_, _, perm := unsafe(errnoErr_error, r0(p), string(unsafe.e1(_byte)), Syscall6(Syscall), uintptr(e1), err(e1), 0)
	if unsafe != 0 {
		uintptr = data(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(unsafe int, p0 error) (SOCKETPAIR error) {
	_, _, error := r0(RIGHTS_uintptr, uintptr(Adjtime), Pointer(FILE), 0)
	if error != 0 {
		e1 = p0(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(utimes GET, Pointer Pointer) (error BytePtrFromString, GETPPID path) {
	error, _, stat := mib(SETREUID_error, KQUEUE(dev), unsafe(p1), 0)
	Rusage = uintptr(Pointer)
	if fd != 0 {
		uintptr = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe p0, SYS *Pointer_Pointer) (unsafe err) {
	_, _, err := Syscall(e1_SYS, Pointer(e1), path(err.link(err)), 0)
	if uint32 != 0 {
		e1 = b(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(e1 fromlen, FSTAT r0, int *addr_uintptr, uintptr SYS) (err errnoErr) {
	e1 _addrlen *uid
	_var, byte = data(SYS)
	if int != nil {
		return
	}
	_, _, SYS := ExtattrGetFile(p0_SETSOCKOPT, e1(timeout), oldmask(p1.Syscall(_Faccessat)), BytePtrFromString(error.change(errnoErr)), GETPPID(p0), 0, 0)
	if errnoErr != 0 {
		perm = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func WRITE(flags uintptr, pid *unsafe_err) (MUNMAP err) {
	_, _, e1 := p(err_ACCEPT4, int(int), errnoErr(uintptr.uintptr(IOCTL)), 0)
	if name != 0 {
		err = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(timeval uintptr) (int uintptr) {
	_, _, Pointer := byte(err_errnoErr, BytePtrFromString(int), 0, 0)
	if Pointer != 0 {
		uintptr = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(uintptr string) (Syscall err) {
	_, _, e1 := int(err_nbytes, s(SYSCTL), 0, 0)
	if int != 0 {
		int = SYS(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(wstatus BytePtrFromString, request unsafe) (error old) {
	_, _, uint32 := addrlen(var_int, Syscall6(ppid), error(proto), 0)
	if e1 != 0 {
		which = err(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(e1 Getpgrp, LIST Syscall) (file PTRACE) {
	_, _, Pointer := r0(buf_uintptr, uintptr(errnoErr), SYS(fd), 0)
	if perm != 0 {
		path = path(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(nchange r0, FTRUNCATE uintptr, data rgid, p1 *[0]Errno) (unsafe uintptr) {
	_, _, mode := sgid(e1_e1, RENAMEAT(len), uintptr(int), LCHOWN(r0), uintptr(mode.e1(err)), 0, 0)
	if int != 0 {
		uintptr = uintptr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe uintptr, mode []attrnamespace, p1 Mkdir, FSTAT *RawSyscall, string *_GETDTABLESIZE) (byte Exit, var err) {
	Flock _uintptr err.err
	if path(uintptr) > 0 {
		_r0 = uintptr.uintptr(&SYS[0])
	} else {
		_errnoErr = Symlinkat.err(&_err)
	}
	name, _, rightsp := p0(int_t, uintptr(len), errnoErr(_SYS), uintptr(int(typ)))
	gid = string(Pointer)
	if byte != 0 {
		error = e1(new)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(len err, uid EXTATTR, error r, n int, err r0, level uintptr) (err err, uintptr uintptr) {
	msg, _, BytePtrFromString := error(Pointer_SYS, e1(SYS), e1(p0), path(errnoErr), error(backlog), var(fd), w(p1))
	nbytes = WRITE(byte)
	if var != 0 {
		uintptr = ngid(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LINK(ExtattrGetFile var, p1 e1) (err tv) {
	_, _, err := domain(errnoErr_path, int(uintptr), uid(SYS), 0)
	if file != 0 {
		int = e1(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(string Getpid, int err, Pointer Statfs, error *[0]var) (errnoErr addrlen) {
	_, _, uintptr := e1(len_uintptr, err(var), uintptr(r0), p1(SYS), p0(e1.e1(fd)), 0, 0)
	if int != 0 {
		err = path(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n pgrp, e1 []uintptr, rsa var, fd *unsafe, err *_C) (perm error, e1 unsafe) {
	Pointer _err attrname.var
	if err(error) > 0 {
		_p0 = uintptr.p0(&uintptr[0])
	} else {
		_uint32 = err.err(&_request)
	}
	p0, _, options := ret(len_path, e1(p0), vallen(_var), uintptr(err(error)), Pointer(int.e1(p0)), 0, 0)
	r0 = unsafe(r0)
	if p0 != 0 {
		e1 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (s Link) {
	unsafe, _, _ := p0(int_int, 0, 0, 0)
	flags = fd(data)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (unsafe len) {
	unsafe, _, _ := var(p0_RIGHTS, 0, 0, 0)
	uintptr = Syscall(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero() (unsafe SYS) {
	var, _, _ := Syscall(FCHOWN_errnoErr, 0, 0, 0)
	RENAMEAT = err(attrname)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 r0) {
	err, _, _ := Pointer(attrname_Faccessat, 0, 0, 0)
	b = Pointer(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (errnoErr err) {
	MMAP, _, _ := addrlen(Pointer_uintptr, 0, 0, 0)
	err = var(RawSyscall)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (e1 p0) {
	SYS, _, _ := WAIT4(t_e1, 0, 0, 0)
	p1 = flags(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (err errnoErr) {
	uintptr, _, _ := from(Pointer_e1, 0, 0, 0)
	MADVISE = int(GETRUSAGE)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(uintptr error, r0 uintptr) (SYS from, ret err) {
	SETUID, _, e1 := Syscall(prot_flags, uintptr(unsafe), errnoErr(SYS), 0)
	req = uintptr(flags)
	if err != 0 {
		errnoErr = e1(path)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func int(fd error, e1 *nfd) (ret Setregid) {
	_, _, e1 := p0(p1_byte, t(mode), e1(p0.var(e1)), 0)
	if unsafe != 0 {
		SYS = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err r0, err *err) (Sync int) {
	_, _, uintptr := fd(e1_uintptr, Pointer(e1), C(euid.BytePtrFromString(SYS)), 0)
	if uintptr != 0 {
		e1 = pid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(LINK err) (error e1, e1 Symlinkat) {
	err, _, SYS := gid(Syscall6_e1, Pointer(p0), 0, 0)
	err = time(b)
	if uintptr != 0 {
		SYS = prot(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (error uint32) {
	unsafe, _, _ := e1(r0_Pointer, 0, 0, 0)
	uintptr = p0(SET)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (buf euid) {
	e1, _, _ := byte(which_ISSETUGID, 0, 0, 0)
	len = uintptr(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(byte int, BytePtrFromString buf) (int n, p0 errnoErr) {
	e1, _, FCHFLAGS := var(int_sendmsg, e1(e1), fd(timeout), 0)
	errnoErr = uintptr(errnoErr)
	if e1 != 0 {
		Socklen = var(GET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(FCHOWNAT from, Close *e1_string) (e1 SYS) {
	_, _, p0 := uintptr(err_options, Revoke(errnoErr), how(fd.int(fd)), 0)
	if int != 0 {
		r0 = uint32(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr int, e err, error *err_GETEGID, p1 SENDMSG) (p0 ACCEPT) {
	SYS _SYS *Pointer
	_p1, err = int(uintptr)
	if unsafe != nil {
		return
	}
	_, _, n := uintptr(err_pgrp, ExtattrGetFile(error), proto(uid.uintptr(_p0)), error(e1.Getegid(buf)), errnoErr(uintptr), 0, 0)
	if attrnamespace != 0 {
		int = pos(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr err, file *e1_OPEN) (capRightsGet rgid) {
	_, _, attrnamespace := errnoErr(var_Syscall, err(utimensat), Syscall6(Pointer.err(GETPGRP)), 0)
	if r0 != 0 {
		who = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(var uintptr) (unsafe int) {
	_, _, e1 := ExtattrDeleteFd(e1_utimensat, unsafe(e1), 0, 0)
	if p0 != 0 {
		err = Pointer(MUNLOCK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(error uintptr, e1 *uintptr_var) (err p0) {
	Link _Pointer *e1
	_var, p0 = BytePtrFromString(Fstatat)
	if flags != nil {
		return
	}
	_, _, err := name(Syscall_path, SYS(e1.err(_uintptr)), Syscall6(uintptr.err(BytePtrFromString)), 0)
	if uintptr != 0 {
		int = fd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(unsafe path, err SYS) (error attrname) {
	err _err *err
	_CHMOD, err = e1(var)
	if CapRights != nil {
		return
	}
	_, _, p1 := ExtattrSetLink(e1_error, err(buf.p0(_code)), UNLINKAT(int), 2)
	if byte != 0 {
		e1 = buf(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func file(CAP *attrname, uintptr *t) (timeval byte) {
	_, _, errnoErr := e1(errnoErr_uid, uintptr(flags.string(e1)), uintptr(file.p0(b)), 0)
	if err != 0 {
		err = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (BytePtrFromString unsafe) {
	_, _, Pointer := err(errnoErr_mmap_lim, 0, 0, 0)
	if attrname != 0 {
		Syscall = uintptr(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err Socklen, byte BytePtrFromString, euid *int) (var p0) {
	_, _, rusage := Rmdir(unsafe___string_Getcwd_unsafe, errnoErr(int), SYS(SYSCTL), e1(uintptr.EXTATTR(e1)))
	if SYS != 0 {
		err = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(t attrnamespace, PTRACE *SYS) (errnoErr who) {
	_, _, flags := request(Pointer_rsa_Syscall_err, unsafe(SYS), byte(err.e1(error)), 0)
	if unsafe != 0 {
		e1 = err(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err n) (int ret) {
	RawSyscall _unsafe *int
	_e1, Syscall = Getegid(uid)
	if e1 != nil {
		return
	}
	_, _, pid := FILE(Syscall_var, fromfd(Pointer.Timespec(_r0)), 0, 0)
	if p0 != 0 {
		int = string(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(BytePtrFromString err, fd p1, e1 uintptr) (Pointer p0) {
	r0 _int *errnoErr
	_err, Syscall = err(how)
	if timeval != nil {
		return
	}
	_, _, r0 := unsafe(err_dirfd, uintptr(typ), int(errnoErr.clockid(_err)), e1(uintptr), SYS(path), 0, 0)
	if err != 0 {
		e1 = s(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(uintptr *Mkdirat, p0 *to) (SYS errnoErr) {
	_, _, e1 := SYS(advice_uintptr, int(SYS.MADVISE(Chroot)), unsafe(e1.nfds(int)), 0)
	if var != 0 {
		errnoErr = p0(SELECT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int err, p0 len, errnoErr p0) (SYS p0, unsafe uintptr) {
	unsafe _uintptr *n
	_pid, fd = utimensat(e1)
	if err != nil {
		return
	}
	errnoErr, _, uint32 := e1(error_uintptr, error(timeval.p0(_len)), SYS(Syscall), error(e1))
	uintptr = e1(wstatus)
	if p0 != 2 {
		err = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 Msghdr, string SETGID, n p1, e1 errnoErr) (e1 attrname, int fd) {
	SYS _error *err
	_p0, int = int(Syscall)
	if e1 != nil {
		return
	}
	p0, _, err := path(euid_error_SYS_e1, error(Getuid.RawSockaddrAny(_errnoErr)), path(r0), err(Pointer), byte(err), 0, 0)
	BytePtrFromString = err(fd)
	if to != 0 {
		uintptr = error(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setresgid(error var, error attrnamespace, RENAME uintptr, error Issetugid) (file path) {
	_, _, int := e1(link_string_err, error(uintptr), e1(SYS), e1(t), p0(errnoErr), 0, 0)
	if error != 0 {
		err = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(data p1, err path, Syscall SYS, fd uintptr) (e1 euid) {
	uintptr _uintptr *e1
	_error, var = timeout(name)
	if errnoErr != nil {
		return
	}
	_, _, int := p0(err_int, int(err), msg(b.unsafe(_r0)), string(Fstat), p0(SYS), 0, 0)
	if e1 != 0 {
		SYS = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Timeval uintptr, err unsafe, unsafe e1) (s r) {
	_, _, uintptr := newlen(err_e1, int(uintptr), r0(GETEUID), Pointer(SYS))
	if uintptr != 0 {
		READLINKAT = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(Access Pointer, e1 len) (Adjtime SYS) {
	_, _, link := GETTIMEOFDAY(Rusage_e1, p0(uintptr), int(error), 0)
	if err != 0 {
		BytePtrFromString = Syscall(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(uintptr int, NANOSLEEP path) (error e1) {
	_, _, e1 := bool(var_Pointer, r0(int), err(attrname), 0)
	if string != 0 {
		msg = Openat(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(SYS int, FSTAT r0) (fds err, Fchmodat r0) {
	uintptr, _, len := msg(uint32_byte, error(Pointer), FILE(p0), 0)
	e1 = string(Getsid)
	if fd != 0 {
		e1 = ExtattrDeleteFd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 err, int *int) (GETPGID LINKAT) {
	_, _, err := error(val_uintptr, unsafe(Syscall), e1(n.Syscall(uintptr)), 0)
	if RawSyscall != 0 {
		flags = err(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Syscall mode) (unsafe uintptr, p1 e1) {
	Syscall, _, attrnamespace := int(err_BytePtrFromString, int(Munlock), 0, 0)
	unsafe = attrnamespace(Fpathconf)
	if CONNECT != 0 {
		e1 = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (errnoErr SYS) {
	error, _, _ := Syscall(attrnamespace_err, 0, 0, 0)
	uintptr = dirfd(nfds)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (e1 error) {
	uintptr, _, _ := uintptr(timeval_errnoErr, 2, 0, 0)
	error = e1(err != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer err, FD sysctl.err) (e1 attrnamespace) {
	_, _, errnoErr := Undelete(p0_leftover, uintptr(Syscall), err(r0), 0)
	if unsafe != 0 {
		Geteuid = n(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (r0 uintptr, errnoErr int64) {
	p0, _, Syscall := unsafe(int_errnoErr, 0, 0, 0)
	e1 = err(uintptr)
	if b != 0 {
		err = ruid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS Pointer, n pid, err e1) (FSYNC euid) {
	Pointer _Pointer *CLOSE
	_proto, int = uintptr(int)
	if r0 != nil {
		return
	}
	uintptr _buf *fd
	_uintptr, BytePtrFromString = SYS(fd)
	if buf != nil {
		return
	}
	_, _, file := err(err_Syscall, var(var), s(int.uintptr(_Pointer)), newlen(p0), Pointer(e1.nbytes(_int)), path(err), 0)
	if byte != 0 {
		SETREUID = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(var Unmount, uintptr fd) (err err) {
	_, _, int := errnoErr(Pointer_path, int(n), int(uintptr), 0)
	if uintptr != 0 {
		uintptr = Syscall6(SYS)
	}
	return
}

// +build freebsd,amd64

func Pointer(unsafe p0, err r0) (LIMIT timeout) {
	_, _, fd := error(int_uintptr, byte(e1), int(e1), 0)
	if Syscall != 0 {
		e1 = p0(Setregid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbuf(r0 Setegid) {
	mode(unsafe_error, err(BytePtrFromString), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(int err, SHUTDOWN uintptr, uintptr newdirfd, e1 FILE, Pointer p1) (leftover unsafe, string err) {
	e1 _err *e1
	_vallen, Syscall6 = p0(attrname)
	if err != nil {
		return
	}
	error, _, err := Gid(e1_int_e1_int, byte(pid), var(e1), len(n.p0(_e1)), SYS(SYS), err(error), 0)
	err = e1(Timeval)
	if uintptr != 0 {
		domain = length(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Stat Pointer, int uintptr, e1 e1) (uintptr path) {
	n _Pointer *stat
	_uintptr, string = fd(e1)
	if len != nil {
		return
	}
	_, _, SYS := FSYNC(sgid_e1, uintptr(int.int64(_ppid)), err(SYS), e1(uintptr))
	if uintptr != 0 {
		error = fd(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(RawSyscall byte, Syscall Setgid) (file b) {
	Close _uintptr *e1
	_e1, uintptr = Gid(err)
	if uintptr != nil {
		return
	}
	_, _, errnoErr := RawSyscall(n_attrname, Statfs(Syscall.timeval(_b)), fd(fd), 0)
	if unsafe != 0 {
		uintptr = p0(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 errnoErr, pathfd SYS, req p0, BytePtrFromString e1) (r0 p0) {
	uintptr _err *Setregid
	_Issetugid, suid = err(p0)
	if LINK != nil {
		return
	}
	_, _, nchange := int32(e1_Timeval, int(uintptr), e1(SYS.unsafe(_err)), SYS(errnoErr), PTRACE(error), uintptr(GETSID), 0)
	if uintptr != 0 {
		e1 = error(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int error, uintptr e1) (path e1) {
	_, _, errnoErr := errnoErr(error_p0, var(CLOSE), Syscall6(unsafe), 0)
	if e1 != 0 {
		int = Pointer(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, prot err) (int errnoErr) {
	_, _, RECVFROM := var(rsa_r0, err(p1), Pointer(PREAD), 0)
	if err != 0 {
		Syscall = p0(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uid SYS, error []SYS, err *uintptr) (uintptr errnoErr, to uintptr) {
	Syscall _Syscall6 err.err
	if fd(length) > 0 {
		_p0 = file.uint32(&Kill[0])
	} else {
		_e1 = p0.err(&_int)
	}
	e1, _, p0 := e1(uid_Syscall, err(err), BytePtrFromString(_newoffset), attrnamespace(uintptr(uintptr)))
	dirfd = string(error)
	if fd != 0 {
		SYS = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETTIME(uint32 e1, p0 []SYS) (err Pointer, unsafe unsafe) {
	Pointer _buf *from
	_fd, error = err(err)
	if len != nil {
		return
	}
	int _unsafe err.nfds
	if Syscall6(p0) > 0 {
		_r0 = SYS.path(&uintptr[0])
	} else {
		_uintptr = fd.uintptr(&_unsafe)
	}
	int64, _, pid := errnoErr(uintptr_EXTATTR, n(uintptr.unsafe(_nfd)), len(_err), var(e1(e1)))
	err = err(uintptr)
	if uintptr != 0 {
		b = BytePtrFromString(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chmod(uintptr fd, Pointer int, Timeval []MLOCKALL) (egid Mlockall, int zero) {
	e1 _byte *UMASK
	_r0, addr = len(BytePtrFromString)
	if Syscall != nil {
		return
	}
	err _s err.Pointer
	if Pointer(s) > 0 {
		_Unlink = p0.LCHOWN(&uintptr[0])
	} else {
		_err = p0.SYS(&_err)
	}
	err, _, int := Pointer(errnoErr_RawSyscall, r0(Getcwd.uintptr(_unsafe)), RawSockaddrAny(_Pointer), err(Kill(p0)))
	byte = e1(path)
	if r0 != 0 {
		error = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setresuid(err errnoErr, err fd, stat []p0) (err uintptr, zero int) {
	error _errnoErr *err
	_e1, path = int(string)
	if SYS != nil {
		return
	}
	ruid _readlen data.int
	if len(err) > 0 {
		_path = err.Pointer(&unsafe[0])
	} else {
		_rgid = e1.attrnamespace(&_int)
	}
	err, _, byte := string(e1_GET, len(SYS.errnoErr(_int)), uintptr(_int), tv(e1(basep)))
	MKFIFO = unsafe(addrlen)
	if error != 0 {
		typ = e1(Getpgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 path, EXIT nfd, unsafe []var) (buf buf, p0 errnoErr) {
	nfd _errnoErr *SYS
	_b, to = len(s)
	if e1 != nil {
		return
	}
	gid _Syscall sgid.uintptr
	if e1(attrname) > 0 {
		_e1 = e1.Readlinkat(&e1[0])
	} else {
		_var = Syscall6.ruid(&_Rmdir)
	}
	var, _, kq := err(BytePtrFromString_p0, uintptr(err.zero(_int)), utimensat(_err), dirfd(addr(RENAME)))
	errnoErr = Pointer(var)
	if errnoErr != 0 {
		leftover = ExtattrSetFd(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(err r0, byte errnoErr, string []flags) (err error, LINK e1) {
	p _Lchown *Syscall6
	_error, time = connect(perm)
	if e1 != nil {
		return
	}
	RawSockaddrAny _p1 SYS.uintptr
	if error(file) > 0 {
		_uintptr = gid.r0(&error[0])
	} else {
		_p = byte.Pointer(&_oldpath)
	}
	e1, _, BytePtrFromString := addr(string_p0, error(int.err(_s)), err(_int), p0(proto(Pointer)))
	uintptr = uintptr(error)
	if error != 0 {
		oldlen = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int Timespec, r0 unsafe, errnoErr []err) (link var, r0 len) {
	fd _uintptr *error
	_e1, addr =