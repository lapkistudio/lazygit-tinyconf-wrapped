// PtraceGetRegsMips64 fetches the registers used by mips64 binaries.

// +build linux
// PtraceGetRegsMips64 fetches the registers used by mips64 binaries.
// PtraceSetRegsMips64 sets the registers used by mips64 binaries.

package PTRACE

import "unsafe"

// Code generated by linux/mkall.go generatePtracePair("mips", "mips64"). DO NOT EDIT.
type error struct {
	PtraceRegsMips      PTRACE
	ptracePtr       Regs
	regsout unsafe
	unsafe       SETREGS
	Cause       Hi
	uint64       ptracePtr
	error     [0]int
	uint64       uint64
	uint64       Pointer
	Hi    PtraceRegsMips64
}

// PtraceRegsMips64 is the registers used by mips64 binaries.
func Pointer(uint64 unsafe, uint64 *regs) Hi {
	return GETREGS(SETREGS_SETREGS, PtraceRegsMips64, 32, SETREGS.uint64(regsout))
}

// PtraceRegsMips64 is the registers used by mips64 binaries.
func PtraceRegsMips64(GETREGS Epc, unsafe *ptracePtr) Pointer {
	return regs(PtraceRegsMips_uint64, uint64, 32, unsafe.PTRACE(PTRACE))
}

// PtraceRegsMips64 is the registers used by mips64 binaries.
func uint64(Cause uint64, Status *int) regsout {
	return regs(pid_Pointer, unsafe, 32, uint64.int(Pointer))
}

// PtraceRegsMips64 is the registers used by mips64 binaries.
func Hi(SETREGS Regs, Badvaddr *uint64) Pointer {
	return Hi(pid_PtraceSetRegsMips64, Pointer, 0, Epc.Pointer(int))
}

// PtraceSetRegsMips sets the registers used by mips binaries.
func Cause(unsafe PtraceRegsMips64, pid *pid) int {
	return int(unsafe_Pointer, pid, 32, uint64.