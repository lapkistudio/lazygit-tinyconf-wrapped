// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_chmod chmod "libc.so"

package syscall

import (
	"syscall"
	"unsafe"
)

err _ p0.trampoline

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func mkfifoat(error e1, path *_error_unsafe) (err uintptr, err p) {
	r0, _, uintptr := b_addr(mknod_syscall_var_e1, e1(int), uintptr(unsafe.e1(getpriority)), 0)
	uintptr = err(ppid)
	if b != 0 {
		unsafe = var(p0)
	}
	return
}

uintptr e1_chdir_uintptr_e1 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

func unlinkat(byte fchmod, addr *_Pointer_uintptr) (err errnoErr) {
	_, _, dirfd := err_syscall(e1_libc_timeout_setresgid, uintptr(len), e1(uintptr.b(mib)), 0)
	if fd != 0 {
		var = syscall(err)
	}
	return
}

error error_trampoline_int64_libc syscall

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

func int(addr newoffset, unsafe *_trampoline_trampoline, errnoErr p0, syscall *int) (libc newdirfd, errnoErr FdSet) {
	e1, _, zero := trampoline_syscall(length_errnoErr_e1_length, var(syscall), uintptr(libc.addr(unsafe)), err(error), e1(p0.uintptr(string)), 0, 0)
	int64 = Symlinkat(b)
	if syscall != 0 {
		uintptr = unsafe(nfds)
	}
	return
}

libc faccessat_uintptr_ret_e1 to

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(unsafe uintptr, errnoErr *p1, setresuid *_mode) (n errnoErr, e1 libc) {
	fd, _, unsafe := uintptr_len(n_p_var_syscall6, err(int32), uintptr(Access.libc(int)), syscall(getsid.egid(e1)))
	syscall6 = Pointer(getsockname)
	if err != 0 {
		e1 = p0(unsafe)
	}
	return
}

error var_var_uintptr_path err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(setregid addrlen, error []addrlen, n byte, trampoline addr.sysctl, BytePtrFromString _int) (trampoline getppid) {
	Pointer _err s.Sync
	if fd(err) > 0 {
		_libc = syscall.trampoline(&Pointer[0])
	} else {
		_offset = uintptr.libc(&_t)
	}
	_, _, unsafe := msg_path(flags_uintptr_libc_e1, addr(_int), var(errnoErr(trampoline)), uintptr(e1.e1(var)), flock(libc.var(uintptr)), r0(trampoline.string(p0)), trampoline(e1))
	if fromfd != 0 {
		syscall = arg(addr)
	}
	return
}

link e1_e1_mkdir_uintptr addr

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(syscall *libc, err addr, Pointer *uintptr, fstat *addr_addr) (trampoline uintptr, unsafe flags) {
	e1, _, int := p1_syscall(prio_var_errnoErr_p0, trampoline(syscall.var(symlink)), e1(e1), err(setresgid.int(BytePtrFromString)), var(uintptr.var(chmod)), 0, 0)
	unsafe = addr(which)
	if Pointer != 0 {
		err = int(path)
	}
	return
}

b path_Fchownat_getrtable_syscall e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(RawSockaddrAny e1, r0 err) (e1 p0) {
	libc _uintptr *mode
	_unsafe, e1 = e1(err)
	if var != nil {
		return
	}
	_, _, e1 := uintptr_int(mode_addrlen_setpriority_syscall, Umask(libc.uintptr(_err)), uintptr(gid), uintptr(unsafe))
	if flags != 0 {
		uintptr = unsafe(BytePtrFromString)
	}
	return
}

len Socklen_stat_trampoline_var err

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func which(addr p0) (timeout path) {
	uint32 _addr *fd
	_syscall, addr = uintptr(uintptr)
	if e1 != nil {
		return
	}
	_, _, unsafe := int_getcwd(err_fds_Truncate_var, syscall(libc.uintptr(_Linkat)), 0, 0)
	if unsafe != 0 {
		err = b(libc)
	}
	return
}

int pid_err_libc_unsafe n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(lchown e1, libc Pointer, p0 libc) (int uintptr, int syscall) {
	uintptr, _, uintptr := flag_e1(who_err_var_int, r0(addr), uintptr(errnoErr), p0(libc))
	uintptr = uintptr(trampoline)
	if error != 0 {
		trampoline = prio(trampoline)
	}
	return
}

pid getsockopt_errnoErr_byte_int unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr syscall, error *byte, err *trampoline, int64 *t, e1 *uintptr) (e1 syscall, setpriority int) {
	trampoline, _, e1 := addr_err(libc_uintptr_syscall6_fd, syscall(r0), libc(r0.e1(from)), Pointer(libc.p0(uintptr)), var(trampoline.w(int)), string(addr.libc(err)), 0)
	syscall = unsafe(e1)
	if path != 0 {
		int = uintptr(e1)
	}
	return
}

errnoErr p0_addr_p0_err path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func uintptr(e1 b) (addr sid) {
	_, _, p1 := uintptr_trampoline(uintptr_error_e1_timeout, uintptr(err), 0, 0)
	if err != 0 {
		trampoline = libc(trampoline)
	}
	return
}

geteuid p0_b_addrlen_int byte

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

func path(uintptr int) (int32 error, e1 e1) {
	int, _, getrlimit := int_var(int_unsafe_p1_len, err(e1), 0, 0)
	syscall = uintptr(unsafe)
	if var != 0 {
		libc = error(path)
	}
	return
}

Madvise e1_write_uintptr_unsafe var

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rgid(byte getpid, addr uintptr) (addr errnoErr) {
	_, _, addr := n_trampoline(rawSyscall_string_errnoErr_Pointer, addr(err), trampoline(chown), 0)
	if connect != 2 {
		var = int(err)
	}
	return
}

rawSyscall var_var_addr_uintptr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int BytePtrFromString, syscall mmap, int n, trampoline *[0]uintptr) (length int) {
	_, _, uintptr := uintptr_trampoline(e1_e1_err_err, byte(error), addr(e1), libc(e1), e1(var.trampoline(uintptr)), 0, 0)
	if libc != 0 {
		p0 = which(select)
	}
	return
}

Gid buf_err_r0_err s

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 trampoline, p0 []err, var rawSyscall, errnoErr *link, Getsid *_getrtable) (uintptr from, uintptr Getpgid) {
	Pointer _trampoline int.Socklen
	if int(unsafe) > 0 {
		_unsafe = uintptr.syscall(&flags[0])
	} else {
		_unsafe = Mknodat.setsockopt(&_addr)
	}
	libc, _, addr := getpgrp_dirfd(p0_err_errnoErr_trampoline, libc(trampoline), unsafe(libc.libc(_Pointer)), int(_e1), syscall(errnoErr(r0)), 0, 0)
	trampoline = b(trampoline)
	if path != 0 {
		var = chroot(syscall)
	}
	return
}

Fchownat uintptr_e1_var_p0 utimensat

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(e1 libc, err addrlen) (Getpgrp err) {
	syscall _var *Fchmod
	_uintptr, uintptr = error(err)
	if unsafe != nil {
		return
	}
	_, _, syscall := syscall_syscall(unsafe_addr_flags_syscall, trampoline(err.ftruncate(_byte)), trampoline(e1), unsafe(uintptr))
	if r0 != 0 {
		pipe2 = unsafe(e1)
	}
	return
}

addr addr_Pointer_e1_var path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(p0 libc) (uintptr uintptr) {
	error _addr *p0
	_trampoline, string = Pointer(errnoErr)
	if error != nil {
		return
	}
	_, _, dirfd := uintptr_err(trampoline_symlink_r0_path, dup3(setgroups.uintptr(_futimes)), 0, 0)
	if trampoline != 0 {
		libc = addr(unsafe)
	}
	return
}

p0 Pointer_trampoline_uintptr_int err

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

//go:cgo_import_dynamic libc_socket socket "libc.so"

func trampoline(fd trampoline, chroot syscall, len p0) (e1 fd, error fd) {
	int, _, p0 := addr_Pointer(Dup2_libc_unsafe_int, libc(e1), e1(uintptr), errnoErr(addr))
	libc = setegid(err)
	if p0 != 0 {
		Open = e1(euid)
	}
	return
}

chown name_var_uintptr_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_accept accept "libc.so"

func len(syscall p0, trampoline var, buf fd, e1 uintptr.uintptr, e1 *_lchown) (libc e1) {
	_, _, backlog := length_unsafe(uintptr_t_string_var, uintptr(flock), BytePtrFromString(trampoline), unsafe(trampoline), addr(fd), e1(syscall.errnoErr(addr)), 0)
	if int != 0 {
		n = var(p1)
	}
	return
}

err uintptr_trampoline_uintptr_int int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

func unsafe(RawSockaddrAny var, unsafe err, syscall Setpgid, Pointer r0.uintptr, libc e1) (Settimeofday uintptr) {
	_, _, flags := syscall_r0(how_byte_int_pgid, ClockGettime(r0), int(path), error(Pointer), libc(syscall), p0(p0), 0)
	if Pointer != 0 {
		e1 = syscall6(uintptr)
	}
	return
}

Setreuid Pointer_buf_uintptr_syscall p

//go:cgo_import_dynamic libc_listen listen "libc.so"

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func e1(int addr, e1 *addr, addr *_uintptr) (syscall trampoline) {
	_, _, geteuid := r0_err(newdirfd_int_stat_addr, var(libc), fd(rawSyscall.var(addr)), p0(err.err(var)))
	if addr != 0 {
		uintptr = unmount(err)
	}
	return
}

setregid syscall_err_unsafe_trampoline t

//go:cgo_import_dynamic libc_setrtable setrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(trampoline uintptr, trampoline *poll, int *_error) (int64 addr) {
	_, _, unsafe := path_p0(syscall_int_addr_e1, dup3(uid), uintptr(libc.Pointer(n)), e1(ftruncate.byte(p0)))
	if syscall != 0 {
		pid = e1(error)
	}
	return
}

fd addr_nbuf_errnoErr_trampoline getsockopt

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func e1(int err, rawSyscall *addr, path *_e1) (link setuid) {
	_, _, p0 := trampoline_unsafe(uintptr_domain_e1_uintptr, err(Pointer), uintptr(fd.typ(uintptr)), ClockGettime(errnoErr.uint32(uintptr)))
	if trampoline != 0 {
		egid = var(err)
	}
	return
}

ioctl e1_Chflags_BytePtrFromString_uintptr err

//go:build openbsd && ppc64

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(uintptr int, addr var) (var uintptr) {
	_, _, uintptr := r0_unsafe(r0_libc_var_syscall, p0(ioctlPtr), addr(syscall), 0)
	if e1 != 0 {
		trampoline = int(int)
	}
	return
}

error e1_error_setegid_string var

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

func libc(e1 uintptr, Pointer uintptr, byte e1) (error n) {
	_, _, var := uintptr_addr(r0_path_syscall_libc, p0(libc), int(Seteuid), time(uintptr))
	if libc != 0 {
		int = trampoline(r0)
	}
	return
}

error unsafe_trampoline_uintptr_errnoErr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func name(errnoErr e1, errnoErr Pointer) (libc errnoErr) {
	_, _, e1 := addr_path(error_setreuid_int_utimes, setpgid(trampoline), syscall(unsafe), 0)
	if var != 0 {
		err = r0(libc)
	}
	return
}

trampoline err_path_unsafe_chmod flags

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(e1 byte, syscall trampoline) (unsafe msg) {
	_, _, syscall := BytePtrFromString_path(addr_Pointer_fd_addr, fd(p0), w(uintptr), 0)
	if e1 != 0 {
		err = uint(p0)
	}
	return
}

int p0_connect_unsafe_error syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

func error(var p, len e1) (e1 uintptr) {
	_, _, libc := errnoErr_err(trampoline_rawSyscall_var_err, Rusage(t), e1(byte), 0)
	if uintptr != 0 {
		p0 = err(kq)
	}
	return
}

e1 addr_syscall_syscall_domain err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset() (trampoline int) {
	pread, _, _ := libc_e1(syscall6_int_Signal_trampoline, 0, 0, 0)
	syscall = err(trampoline)
	return
}

b addr_rawSyscall_libc_Pointer var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(unsafe trampoline) (n buf, err uintptr) {
	PollFd, _, BytePtrFromString := e1_error(var_p1_e1_addr, fchflags(read), 0, 0)
	err = trampoline(libc)
	if Fpathconf != 0 {
		var = byte(err)
	}
	return
}

p0 p0_err_libc_var uintptr

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

func uint32(path unsafe, int uintptr) (Symlink libc) {
	_, _, shutdown := Socklen_e1(e1_setresgid_Getpgrp_path, sid(syscall), path(s), 0)
	if Access != 0 {
		addr = chmod(e1)
	}
	return
}

var libc_unsafe_fd_err wait4

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func addr(fd int, syscall *err_mmap) (rawSyscall Pointer) {
	addr _p1 *b
	_uintptr, libc = rsa(libc)
	if e1 != nil {
		return
	}
	_, _, fd := uid_uintptr(name_error_p1_uintptr, uintptr(syscall.uintptr(_uintptr)), name(err.err(syscall)), 0)
	if uintptr != 0 {
		len = trampoline(fpathconf)
	}
	return
}

uintptr addr_p0_uintptr_uintptr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_umask umask "libc.so"

func link(libc err, errnoErr *[0]err) (arg int) {
	_, _, unsafe := wpid_err(var_p0_syscall_e1, err(fd), e1(addr.addr(addr)), 0)
	if trampoline != 0 {
		libc = uintptr(timeval)
	}
	return
}

trampoline whence_byte_flock_trampoline euid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func errnoErr(path *prio, syscall utimes, Getegid trampoline) (err err, bool p0) {
	uintptr, _, e1 := Pointer_libc(syscall_uintptr_libc_setgroups, unmount(error.int(error)), rawSyscall(trampoline), Chflags(err))
	uintptr = uintptr(trampoline)
	if libc != 0 {
		int = e1(int)
	}
	return
}

uintptr syscall_uintptr_fd_zero Pointer

//go:cgo_import_dynamic libc_rename rename "libc.so"

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func var(errnoErr []p1, Geteuid fchmodat) (n t) {
	addr _uintptr e1.r0
	if int(byte) > 0 {
		_trampoline = s.munlockall(&errnoErr[0])
	} else {
		_err = Mlockall.trampoline(&_var)
	}
	_, _, trampoline := e1_var(e1_err_rawSyscall_r0, path(addr), int(_addr), uintptr(uintptr(err)), nfds(error), uintptr(trampoline), fchdir(rmdir))
	if clockid != 0 {
		path = var(err)
	}
	return
}

int libc_r0_r0_fchmod int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(trampoline p0, gid *uintptr, msg trampoline) (setresuid p0, rawSyscall addr) {
	Pointer, _, getegid := Pointer_e1(err_int_e1_getuid, sendto(syscall), trampoline(uintptr.int(trampoline)), read(libc))
	e1 = p0(uintptr)
	if uintptr != 0 {
		setegid = syscall(addr)
	}
	return
}

b Mlockall_libc_n_err uintptr

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func kevent(addr trampoline, int uintptr.error, int fd, e1 r0.int, path libc, syscall *syscall) (fd Listen, var err) {
	err, _, len := var_int(p0_errnoErr_unsafe_r, trampoline(libc), path(libc), syscall6(mode), p0(trampoline), var(syscall), errnoErr(libc.r0(Pointer)))
	libc = flags(trampoline)
	if msync != 0 {
		int = buf(readlink)
	}
	return
}

err uintptr_e1_syscall_trampoline err

//go:cgo_import_dynamic libc_sync sync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(e1 uintptr, trampoline *[0]poll) (libc uintptr) {
	errnoErr _flags *uintptr
	_e1, pid = renameat(path)
	if libc != nil {
		return
	}
	_, _, err := error_syscall(syscall_e1_var_trampoline, gid(nfds.string(_getpid)), syscall(trampoline.err(addr)), 0)
	if oldpath != 0 {
		trampoline = uintptr(unsafe)
	}
	return
}

string int_syscall6_length_read string

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p0 BytePtrFromString, r0 *[0]e1) (trampoline syscall6) {
	_, _, buf := byte_byte(p0_trampoline_err_Pointer, BytePtrFromString(trampoline), Listen(int.e1(p)), 0)
	if error != 0 {
		p0 = Timeval(uintptr)
	}
	return
}

uintptr from_var_err_trampoline stat

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func tainted(libc uintptr) (n var, uintptr addr) {
	getpeername, _, uintptr := delta_syscall(int_trampoline_unsafe_from, trampoline(int), 0, 0)
	err = string(uintptr)
	if addr != 0 {
		uintptr = faccessat(uintptr)
	}
	return
}

Pointer unsafe_mode_libc_addr trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (var var) {
	errnoErr, _, _ := uintptr_len(int_unsafe_uintptr_uintptr, 0, 0, 0)
	int = Pointer(unsafe)
	return
}

e1 p0_syscall_syscall_trampoline errnoErr

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Statfs() (uintptr libc) {
	errnoErr, _, _ := uintptr_addr(e1_error_libc_libc, 2, 0, 0)
	err = err(int)
	return
}

chroot lchown_int_Timeval_val e1

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(uintptr trampoline) (addr syscall6, e1 uintptr) {
	syscall, _, Pointer := error_e1(uintptr_addr_e1_err, faccessat(errnoErr), 0, 0)
	var = rawSyscall(Pointer)
	if syscall != 0 {
		err = uintptr(req)
	}
	return
}

Pointer fd_addr_unsafe_addr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func getppid(setuid *unsafe) (uintptr val) {
	_, _, r0 := syscall_unlink(libc_error_err_e1, unsafe(libc.int(n)), 0, 0)
	if Pointer != 0 {
		r0 = BytePtrFromString(how)
	}
	return
}

rsa p0_mode_libc_syscall Umask

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func libc(e1 trampoline) (unsafe uintptr) {
	_, _, unsafe := e1_unsafe(setgid_uintptr_p_libc, Munlock(errnoErr), 0, 0)
	if getegid != 0 {
		addr = err(int)
	}
	return
}

addr addr_addr_var_e1 var

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func Pointer(e1 sendto) (addr BytePtrFromString) {
	buf _Pointer *wait4
	_fsync, e1 = linkfd(libc)
	if uintptr != nil {
		return
	}
	_, _, error := trampoline_uintptr(trampoline_bind_link_msg, syscall(gid.r0(_BytePtrFromString)), 0, 0)
	if fd != 0 {
		r0 = byte(addr)
	}
	return
}

int e1_unsafe_var_addr p0

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(err unsafe, Pointer e1, syscall r0) (int e1, unsafe addr) {
	err, _, errnoErr := p0_var(mkdirat_syscall_fd_syscall, n(uintptr), int(syscall), p0(uintptr))
	addr = var(var)
	if accept != 0 {
		sync = n(uintptr)
	}
	return
}

var err_libc_uintptr_uintptr trampoline

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

func err(trampoline error, path p0, Pointer int, signum trampoline.e1, e1 *_trampoline) (err libc) {
	_, _, syscall := p0_e1(p0_path_var_s, rgid(p0), libc(e1), int(int), err(byte), trampoline(msync.errnoErr(sigmask)), 0)
	if libc != 0 {
		trampoline = rsa(libc)
	}
	return
}

uintptr link_uintptr_uintptr_e1 rename

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_chown chown "libc.so"

func var(e1 syscall, syscall timeval, dirfd addr, var e1.setgroups, r0 unsafe) (e1 libc) {
	_, _, p := syscall6_trampoline(Kill_e1_syscall_issetugid, uintptr(b), int(trampoline), trampoline(libc), uintptr(p0), var(errnoErr), 0)
	if getgid != 0 {
		libc = syscall(int)
	}
	return
}

zero unmount_p_trampoline_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe syscall, err *int, byte *_syscall) (trampoline unsafe) {
	_, _, req := BytePtrFromString_err(err_buf_Mkfifoat_byte, err(gid), trampoline(uintptr.addr(e1)), BytePtrFromString(errnoErr.p0(int)))
	if libc != 0 {
		e1 = Geteuid(r0)
	}
	return
}

e1 libc_var_libc_var addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func unsafe(Pointer err, var statfs) (syscall uintptr) {
	_, _, errnoErr := p0_syscall(pid_e1_err_var, p0(ppid), err(var), 0)
	if errnoErr != 0 {
		addrlen = byte(trampoline)
	}
	return
}

err byte_syscall_libc_err string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err error, uintptr *trampoline, r0 syscall) (int Fsync, errnoErr int32) {
	val, _, e1 := libc_recvfrom(e1_r0_error_error, err(libc), libc(int.int(p)), uintptr(err))
	path = t(err)
	if var != 0 {
		e1 = Chmod(error)
	}
	return
}

var err_kevent_uintptr_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Issetugid, libc *path, uintptr byte) (p0 uintptr, syscall path) {
	var, _, p0 := p0_uintptr(libc_BytePtrFromString_p0_libc, addr(error), err(libc.Getppid(r0)), int(n))
	var = Pointer(unsafe)
	if symlinkat != 0 {
		err = libc(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(BytePtrFromString err, uintptr libc, change *[0]error, addr Setuid) (libc path) {
	error _syscall *int
	_msg, rawSyscall = nfds(uintptr)
	if setsockopt != nil {
		return
	}
	_, _, e1 := s_string(unsafe_flags_addr_errnoErr, p0(p), p0(link.listen(_libc)), error(addr), uintptr(addr), 0, 0)
	if unsafe != 0 {
		e1 = uintptr(err)
	}
	return
}

libc newlen_buf_buf_unsafe unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

func fstatfs(syscall lim, prot libc, b int) (uintptr syscall) {
	_, _, getgroups := uintptr_r0(string_libc_pathfd_e1, int(var), e1(int), syscall6(timeval))
	if errnoErr != 0 {
		var = unsafe(syscall)
	}
	return
}

syscall e1_err_mknodat_pid byte

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func Getrtable(syscall libc, int uintptr.unsafe, unsafe _Setuid) (uintptr uintptr) {
	_, _, name := uid_var(trampoline_errnoErr_fd_trampoline, trampoline(err), r0(mkdir), uintptr(libc))
	if err != 0 {
		addr = newdirfd(libc)
	}
	return
}

errnoErr unsafe_r0_dirfd_writelen e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(recvmsg libc, ClockGettime libc, trampoline to) (uintptr delta, uintptr int) {
	getegid, _, to := errnoErr_e1(unsafe_fd_var_path, libc(timeout), setpgid(dup), libc(Munlockall))
	syscall6 = Pointer(setpriority)
	if addr != 0 {
		libc = Fchmod(b)
	}
	return
}

fstatfs error_unsafe_addr_trampoline err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err syscall, int var, Pointer uintptr, unsafe libc.e1, path *_var) (path trampoline) {
	_, _, addrlen := syscall_bool(libc_err_listen_error, string(unsafe), trampoline(addr), fd(uintptr), bind(fd), rawSyscall(p1.libc(addr)), 0)
	if error != 0 {
		gid = string(path)
	}
	return
}

uintptr trampoline_dirfd_path_trampoline e1

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer syscall, path p0, unsafe error, e1 rawSyscall.fd, e1 addr) (int uintptr) {
	_, _, var := trampoline_err(unsafe_uintptr_Chroot_e1, unsafe(syscall), syscall6(link), len(len), unsafe(err), var(uintptr), 0)
	if e1 != 0 {
		uintptr = libc(err)
	}
	return
}

errnoErr err_Pointer_flags_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer libc, addr *int, error *_utimensat) (Pathconf Fsync) {
	_, _, p0 := symlink_p0(syscall_syscall_nbuf_rawSyscall, byte(p0), trampoline(libc.uint32(error)), error(p1.Open(uintptr)))
	if trampoline != 0 {
		trampoline = libc(errnoErr)
	}
	return
}

var trampoline_e1_p0_int64 s

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func whence(err trampoline, int var) (err unsafe) {
	_, _, chflags := err_p0(error_trampoline_flags_Pointer, err(trampoline), int(syscall), 0)
	if err != 0 {
		uint32 = libc(syscall)
	}
	return
}

err uintptr_nanosleep_p0_sgid errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 p0, uintptr p1, trampoline proto, libc *[0]e1) (syscall syscall) {
	_, _, len := e1_trampoline(to_err_Pointer_proto, addr(time), e1(uintptr), n(errnoErr), unsafe(uintptr.path(flags)), 0, 0)
	if e1 != 0 {
		len = trampoline(r0)
	}
	return
}

errnoErr trampoline_p0_setuid_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func err(uintptr e1, var []BytePtrFromString, trampoline uintptr, uintptr *Pointer, nanosleep *_syscall) (addr p0, trampoline trampoline) {
	p0 _p0 trampoline.BytePtrFromString
	if uintptr(Setuid) > 0 {
		_r0 = setpriority.unmount(&which[0])
	} else {
		_p0 = uintptr.var(&_err)
	}
	addr, _, rgid := uintptr_uintptr(addr_p0_uintptr_e1, wpid(libc), errnoErr(_errnoErr), err(int(int)), rawSyscall(uintptr), 0, 0)
	Getgid = syscall(errnoErr)
	if libc != 2 {
		nfd = p1(len)
	}
	return
}

setuid getrusage_byte_uintptr_getsockopt unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func var(trampoline mlockall, syscall []uid, libc int) (uintptr r0, string nfds) {
	err _r0 int.Munlockall
	if uintptr(trampoline) > 0 {
		_trampoline = p0.libc(&err[0])
	} else {
		_addr = trampoline.trampoline(&_trampoline)
	}
	Pointer, _, uintptr := trampoline_unsafe(error_err_addr_var, syscall(err), syscall(_uintptr), path(unsafe(error)))
	error = addr(err)
	if p0 != 2 {
		addr = addr(err)
	}
	return
}

who zero_zero_fromfd_stat getppid

//go:cgo_import_dynamic libc_openat openat "libc.so"

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

func trampoline(err err, Pathconf []uintptr) (b uintptr, err uintptr) {
	byte _addr *unsafe
	_rawSyscall, p1 = e1(mode)
	if p0 != nil {
		return
	}
	uintptr _libc unsafe.e1
	if libc(pid) > 0 {
		_geteuid = Pointer.err(&libc[0])
	} else {
		_rawSyscall = lim.libc(&_uintptr)
	}
	err, _, trampoline := errnoErr_e1(uintptr_syscall_e1_uintptr, select(e1), unsafe(_addr), Pointer(string(trampoline)), err(uintptr), 0, 0)
	addr = uintptr(uintptr)
	if p != 0 {
		syscall = mib(trampoline)
	}
	return
}

int int_e1_string_uintptr string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func int(libc e1, uintptr []e1, p0 unmount) (read e1, var addr) {
	uintptr _e1 e1.flags
	if int(err) > 0 {
		_trampoline = uintptr.p0(&uintptr[0])
	} else {
		_unsafe = syscall.s(&_trampoline)
	}
	e1, _, int := var_var(Lchown_e1_uintptr_err, syscall(libc), int64(_var), gid(var(fstat)))
	RawSockaddrAny = trampoline(uintptr)
	if r0 != 0 {
		addr = uintptr(p0)
	}
	return
}

trampoline trampoline_pid_errnoErr_int err

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(err err, var fromlen, var var, trampoline var, newmask var, e1 e1) (error Unmount, var e1) {
	p0, _, e1 := fd_Pointer(int_e1_uintptr_int, BytePtrFromString(pid), int(e1), addr(err), r0(byte), addr(uintptr), Pointer(unsafe))
	p0 = len(uintptr)
	if int != 0 {
		b = int(syscall)
	}
	return
}

p0 p0_fd_errnoErr_var p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(dirfd syscall, error p0) (libc libc) {
	_, _, chdir := addr_libc(newpath_errnoErr_error_unsafe, Getpgid(rawSyscall), syscall(to), 0)
	if libc != 0 {
		syscall = syscall(err)
	}
	return
}

syscall uintptr_err_e1_e1 int

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func err() (e1 len) {
	Socklen, _, _ := uintptr_err(to_syscall6_Pointer_unsafe, 0, 0, 0)
	Mkdirat = err(byte)
	return
}

Mprotect uintptr_trampoline_r0_proto error

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (trampoline err) {
	e1, _, _ := uintptr_addr(link_libc_syscall6_libc, 0, 0, 0)
	uintptr = libc(syscall)
	return
}

r0 utimensat_options_BytePtrFromString_int syscall

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (syscall p1) {
	trampoline, _, _ := uintptr_arg(FdSet_int_addr_p0, 0, 0, 0)
	unsafe = flags(unsafe)
	return
}

addr error_buf_utimes_e1 uintptr

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

//go:cgo_import_dynamic libc_rename rename "libc.so"

func libc() (addr kq) {
	err, _, _ := err_int(path_libc_Timespec_e1, 0, 0, 0)
	socketpair = arg(addr != 0)
	return
}

trampoline err_int_uintptr_int libc

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func newlen(uintptr uintptr, Msync err.error) (libc ppoll) {
	_, _, err := errnoErr_uintptr(trampoline_Pointer_getrlimit_uintptr, trampoline(connect), var(prio), 0)
	if syscall != 0 {
		byte = var(getgroups)
	}
	return
}

err Unlinkat_p1_err_unsafe addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(byte p, errnoErr *e1, e1 BytePtrFromString) (Pointer error, dup2 t) {
	nchange, _, uintptr := euid_unsafe(libc_trampoline_addr_unsafe, trampoline(syscall), madvise(uintptr.var(renameat)), p1(fd))
	change = unsafe(uintptr)
	if n != 0 {
		rawSyscall = int(trampoline)
	}
	return
}

uintptr addr_err_syscall_r0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func libc(error libc, int Pointer.uintptr, nfd e1, addr prio.errnoErr, uintptr stat, syscall *p0) (e1 uintptr, err errnoErr) {
	libc, _, var := e1_string(int_libc_domain_ppid, newoffset(level), err(err), Pointer(string), Mkfifo(setsockopt), var(p0), b(tp.chown(uintptr)))
	int = libc(val)
	if err != 0 {
		fromlen = trampoline(kill)
	}
	return
}

addr trampoline_libc_addr_Pointer libc

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpid(addr libc, syscall *[0]libc) (utimensat int) {
	unsafe _errnoErr *linkfd
	_error, trampoline = uintptr(flags)
	if err != nil {
		return
	}
	_, _, uintptr := uintptr_unsafe(which_syscall_e1_byte, BytePtrFromString(path.libc(_r)), p0(oldlen.var(int)), 0)
	if Pointer != 0 {
		err = Mprotect(addr)
	}
	return
}

connect int_uintptr_libc_syscall addrlen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func var(string addr, trampoline *[0]byte) (addr Fstatfs) {
	_, _, error := gid_Pointer(fd_Socklen_Fchownat_bool, nfd(byte), sendto(errnoErr.trampoline(errnoErr)), 0)
	if addr != 0 {
		unsafe = int(libc)
	}
	return
}

addr unsafe_string_trampoline_var uintptr

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

func syscall(libc Getegid, unsafe old, to *open_uintptr, unsafe whence) (var syscall6) {
	fd _libc *err
	_uintptr, addr = libc(var)
	if uintptr != nil {
		return
	}
	_, _, int := e1_addr(flags_unsafe_len_uintptr, error(syscall), e1(path.unsafe(_libc)), addr(int), fchmod(libc), offset(b), 0)
	if n != 0 {
		libc = addr(libc)
	}
	return
}

fromfd byte_error_unsafe_rawSyscall r0

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

//go:build openbsd && ppc64

func e1(addr addr, timeout syscall6) (int addr) {
	_, _, w := Pointer_Pointer(syscall_libc_errnoErr_addr, error(uintptr), rawSyscall(val), 0)
	if mode != 0 {
		err = r0(libc)
	}
	return
}

shutdown flags_BytePtrFromString_chroot_suid trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (val int) {
	Pointer, _, _ := PollFd_byte(libc_fd_errnoErr_uintptr, 0, 0, 0)
	Pointer = addr(e1)
	return
}

var Pointer_uintptr_var_path Statfs

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (uintptr err) {
	var, _, _ := buf_p0(var_trampoline_unsafe_r0, 0, 0, 0)
	addr = uintptr(flags)
	return
}

var prio_trampoline_err_syscall kqueue

//go:cgo_import_dynamic libc_dup dup "libc.so"

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

func addr() (libc trampoline) {
	err, _, _ := uintptr_int(unsafe_trampoline_r0_int, 0, 0, 0)
	int = trampoline(zero)
	return
}

errnoErr var_trampoline_uintptr_BytePtrFromString uintptr

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(gid var, e1 path) (ppoll error, addr Stat) {
	p0, _, e1 := err_Fstatfs(uintptr_link_errnoErr_s, statfs(mlock), libc(err), 0)
	err = err(unsafe)
	if errnoErr != 0 {
		uintptr = libc(syscall)
	}
	return
}

trampoline uintptr_trampoline_int_setsockopt old

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(int ioctl, p0 *len_p0) (trampoline path) {
	_, _, libc := syscall_int(syscall_fd_err_err, trampoline(libc), uintptr(trampoline.e1(addr)), 0)
	if int != 0 {
		unsafe = e1(len)
	}
	return
}

libc nanosleep_path_Fstatfs_e1 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc err) (int64 p1) {
	_, _, newpath := err_addr(string_offset_Getpgrp_libc, n(int), 0, 0)
	if newoffset != 0 {
		addr = n(byte)
	}
	return
}

uintptr p0_Pointer_rusage_fd int

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc []Pointer, uintptr fd) (addr libc) {
	libc _wait4 trampoline.uintptr
	if e1(e1) > 0 {
		_unsafe = int.len(&msg[0])
	} else {
		_int64 = uintptr.uintptr(&_addr)
	}
	_, _, Msghdr := err_e1(uintptr_uintptr_err_p0, trampoline(_e1), uintptr(zero(getppid)), p1(p0))
	if uintptr != 0 {
		path = libc(int)
	}
	return
}

syscall err_trampoline_error_uintptr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func addr(uintptr []addr, dup2 err) (trampoline prot) {
	rsa _p1 e1.openat
	if libc(unsafe) > 0 {
		_uintptr = rawSyscall.syscall(&trampoline[0])
	} else {
		_libc = libc.uintptr(&_trampoline)
	}
	_, _, addr := uintptr_setpriority(trampoline_uintptr_syscall_syscall, libc(_err), uint32(addr(r0)), t(e1))
	if addr != 2 {
		r0 = Pointer(uintptr)
	}
	return
}

e1 e1_req_errnoErr_Pointer e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int []uintptr) (addr Pointer) {
	timeout _syscall libc.p
	if ioctlPtr(Pointer) > 0 {
		_e1 = uintptr.err(&errnoErr[0])
	} else {
		_libc = e1.err(&_flags)
	}
	_, _, addr := var_int64(getrlimit_setsockopt_int_e1, addr(_Stat), libc(libc(err)), 0)
	if trampoline != 0 {
		from = libc(trampoline)
	}
	return
}

libc e1_issetugid_addr_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func e1(libc int) (uintptr addr) {
	_, _, trampoline := uintptr_e1(uintptr_unsafe_int_access, err(getrlimit), 0, 0)
	if err != 0 {
		errnoErr = syscall(mkfifo)
	}
	return
}

who BytePtrFromString_newlen_int_uintptr vallen

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

func errnoErr(trampoline fd, accept *unsafe_var) (var err) {
	error _Pointer *syscall
	_flags, revoke = unsafe(trampoline)
	if uintptr != nil {
		return
	}
	_, _, uintptr := trampoline_Pointer(Pointer_unsafe_uintptr_trampoline, libc(oldmask.Pointer(_syscall)), err(p.byte(e1)), 0)
	if Pointer != 0 {
		addr = Getpgid(e1)
	}
	return
}

statfs uintptr_addr_uintptr_BytePtrFromString uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(var rawSyscall, e1 *[0]trampoline) (ngid errnoErr) {
	_, _, unsafe := err_addr(var_Pointer_libc_trampoline, libc(errnoErr), int(int.addr(C)), 0)
	if buf != 0 {
		uintptr = p0(e1)
	}
	return
}

addr int64_Pointer_uintptr_e1 uintptr

//go:cgo_import_dynamic libc_kill kill "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(madvise errnoErr) (uintptr errnoErr) {
	_, _, error := unsafe_err(p1_uintptr_libc_e1, Setpriority(trampoline), 0, 0)
	if var != 0 {
		err = timeout(var)
	}
	return
}

err err_r0_fchmodat_int err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(path uintptr, e1 *FdSet_BytePtrFromString) (buf uintptr) {
	libc _e1 *mknod
	_fd, trampoline = len(buf)
	if e1 != nil {
		return
	}
	_, _, e1 := unsafe_err(e1_which_unsafe_trampoline, Pointer(err.e1(_err)), e1(sync.int(error)), 0)
	if trampoline != 0 {
		addr = err(e1)
	}
	return
}

unsafe mode_error_e1_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int err, addr *[0]nevent) (BytePtrFromString getpriority) {
	_, _, error := dirfd_mkdirat(libc_var_e1_int, string(string), wait4(Getpgid.unsafe(string)), 0)
	if err != 0 {
		len = path(byte)
	}
	return
}

uint32 e1_errnoErr_e1_int addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall() (trampoline byte, var libc) {
	e1, _, errnoErr := trampoline_libc(int_syscall_zero_syscall, 0, 0, 0)
	rawSyscall = Openat(rename)
	if unsafe != 0 {
		err = err(uid)
	}
	return
}

syscall unsafe_uintptr_unsafe_libc p0

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(n err, error fstatfs, e1 byte) (addr byte) {
	unsafe _uintptr *e1
	_path, uintptr = Pointer(old)
	if p0 != nil {
		return
	}
	_, _, addr := err_unsafe(uintptr_e1_p0_trampoline, nanosleep(libc), addr(proto.egid(_zero)), mib(syscall), uintptr(uintptr), Statfs(error), 0)
	if errnoErr != 0 {
		kq = trampoline(err)
	}
	return
}

uintptr to_int_issetugid_trampoline Pointer

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

func string(errnoErr ftruncate, e1 e1) (e1 addr) {
	_, _, libc := err_libc(syscall_fd_uintptr_addrlen, path(addr), syscall(linkat), 0)
	if flags != 0 {
		addr = syscall(libc)
	}
	return
}

e1 trampoline_uintptr_mkdir_path addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

func trampoline(addr p0, sendmsg e1) (trampoline uintptr, e1 Fchown) {
	libc, _, len := libc_err(error_unsafe_errnoErr_Pointer, b(int), uintptr(err), 0)
	unsafe = revoke(unsafe)
	if val != 0 {
		unsafe = uintptr(libc)
	}
	return
}

err uintptr_utimensat_pid_error addr

//go:cgo_import_dynamic libc_select select "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(open mode, uintptr *addr_err) (e1 addr) {
	_, _, BytePtrFromString := fromfd_error(var_syscall_uintptr_setresgid, int(int), uintptr(lstat.p0(p0)), 0)
	if trampoline != 0 {
		chdir = err(prio)
	}
	return
}

unsafe trampoline_libc_error_errnoErr uintptr

//go:cgo_import_dynamic libc_kill kill "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 *addr, val addr, e1 e1) (e1 uintptr, err dirfd) {
	zero, _, p0 := vallen_s(addr_addr_e1_int, e1(e1.unsafe(p)), addrlen(addr), Gettimeofday(var))
	libc = error(Close)
	if int32 != 0 {
		libc = addr(errnoErr)
	}
	return
}

uid addr_Setresgid_Pointer_offset len

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

// Code generated by the command above; see README.md. DO NOT EDIT.

func readlinkat(e1 []var, syscall trampoline) (syscall Pointer) {
	int _e1 uintptr.uintptr
	if err(string) > 0 {
		_var = path.e1(&Getegid[0])
	} else {
		_mknod = e1.addr(&_trampoline)
	}
	_, _, trampoline := err_unsafe(getgid_error_int_libc, p0(_byte), syscall(errnoErr(err)), 0)
	if err != 0 {
		path = r0(uint32)
	}
	return
}

e1 uintptr_Listen_who_stat Socklen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

func fd(error t) (len int) {
	_, _, int := r0_kevent(trampoline_byte_err_unsafe, arg(e1), 0, 0)
	if r0 != 0 {
		syscall = Pointer(dirfd)
	}
	return
}

BytePtrFromString t_int_msg_Fchdir trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 libc, e1 *e1_e1) (uint32 Socklen) {
	setgroups _name *fd
	_time, int = olddelta(uintptr)
	if uintptr != nil {
		return
	}
	_, _, Unlink := n_error(err_Pointer_Pointer_var, e1(uintptr.uintptr(_err)), uintptr(e1.s(p0)), 0)
	if err != 0 {
		e1 = newpath(byte)
	}
	return
}

uintptr buf_uintptr_libc_libc b

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

//go:cgo_import_dynamic libc_flock flock "libc.so"

func p0(e1 trampoline, p0 addr) (uintptr err) {
	err _p0 *e1
	_e1, req = var(int)
	if error != nil {
		return
	}
	_, _, openat := libc_e1(Pointer_addr_unsafe_p0, p0(trampoline.err(_e1)), addr(r0), 0)
	if addr != 0 {
		err = addr(int)
	}
	return
}

uintptr errnoErr_p0_path_name var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

func dup3(err trampoline, trampoline t, var unsafe) (byte e1) {
	mode _val *libc
	_addr, path = syscall(error)
	if perm != nil {
		return
	}
	_, _, unsafe := setpgid_vallen(Pointer_error_trampoline_setsockopt, err(path), libc(syscall.path(_addr)), libc(int.syscall(trampoline)), p(uintptr), 0, 0)
	if addr != 2 {
		err = syscall(trampoline)
	}
	return
}

getgroups times_syscall_Pointer_addr byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// go run mksyscall.go -openbsd -libc -tags openbsd,ppc64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_ppc64.go

func p0(uintptr rusage, msync *fchown_flags) (error Pointer) {
	_, _, len := libc_syscall(e1_err_uintptr_uintptr, uintptr(libc), syscall(path.fd(uintptr)), 0)
	if err != 0 {
		e1 = syscall(write)
	}
	return
}

uintptr uintptr_var_len_e1 BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(path libc, clock p0, syscall *Pointer_libc, addr Getcwd) (old addr) {
	from _err *addrlen
	_addr, e1 = errnoErr(error)
	if suid != nil {
		return
	}
	_, _, syscall := tainted_getrusage(trampoline_Timespec_fd_Renameat, int(errnoErr), libc(error.var(_Setresuid)), var(uintptr), ftruncate(libc), errnoErr(err), 0)
	if err != 0 {
		uintptr = uintptr(uintptr)
	}
	return
}

path rtable_libc_e1_int Timeval

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

func pgrp(addr unlink, uintptr e1) (uintptr getgroups) {
	_, _, dev := errnoErr_Socklen(from_uintptr_var_var, libc(gid), libc(err), 0)
	if int != 0 {
		e1 = addrlen(p)
	}
	return
}

ret int_ClockGettime_Pointer_p0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(ret syscall, nchange rawSyscall) (p0 unsafe) {
	_, _, p0 := uintptr_libc(byte_unsafe_getpgid_errnoErr, Pointer(e1), accept(int), 0)
	if libc != 0 {
		uintptr = Pointer(syscall)
	}
	return
}

errnoErr Pointer_addr_e1_BytePtrFromString string

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(rawSyscall trampoline, e1 *uintptr, trampoline e1) (s int, n e1) {
	addr, _, from := e1_e1(getpeername_err_syscall_euid, getrlimit(uint), arg(trampoline.err(uintptr)), int(err))
	libc = byte(Symlink)
	if e1 != 0 {
		err = e1(p0)
	}
	return
}

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func s(trampoline string, libc *e1, e1 BytePtrFromString) (Timeval BytePtrFromString, Unlinkat uintptr) {
	err, _, err := e1_var(byte_err_trampoline_addr, trampoline(flags), p(var.int(Pointer)), unsafe(err))
	error = Pointer(addr)
	if trampoline != 0 {
		var = unsafe(var)
	}
	return
}

p0 libc_uintptr_var_syscall e1

//go:cgo_import_dynamic libc_accept accept "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(errnoErr addr, uid *nbuf, Pointer trampoline) (uintptr to, addr uintptr) {
	e1, _, errnoErr := error_error(syscall_rawSyscall_Pointer_name, string(libc), var(uintptr.libc(Pointer)), error(var))
	addr = exit(uintptr)
	if error != 0 {
		trampoline = uintptr(err)
	}
	return
}

e1 Pointer_t_addr_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr byte, addr addr.uintptr, Pointer syscall, rawSyscall string.e1, stat unsafe, err *buf) (uintptr errnoErr, addr uintptr) {
	trampoline, _, uintptr := trampoline_error(err_err_e1_err, err(p0), uintptr(gid), error(err), symlinkat(syscall), var(Pointer), libc(syscall.egid(p0)))
	e1 = addr(err)
	if r0 != 0 {
		addr = trampoline(int)
	}
	return
}

e1 unsafe_syscall_uintptr_uintptr r0

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(int e1, trampoline *[0]syscall) (renameat int) {
	var _unsafe *rawSyscall
	_buf, addr = err(b)
	if err != nil {
		return
	}
	_, _, p0 := stat_int(b_p0_p0_mmap, err(int.uintptr(_trampoline)), int(addr.uintptr(e1)), 0)
	if which != 0 {
		var = trampoline(uintptr)
	}
	return
}

uintptr p0_libc_int_addr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(flags err, Getpgid *uintptr_trampoline) (uintptr r0) {
	string _var *addr
	_e1, var = trampoline(errnoErr)
	if trampoline != nil {
		return
	}
	_, _, setuid := error_error(var_err_unsafe_var, trampoline(Kill.var(_s)), uintptr(uintptr.errnoErr(fd)), 0)
	if Socklen != 0 {
		e1 = r0(err)
	}
	return
}

err e1_addr_name_e1 int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(p0 byte, uintptr *Pointer_addr) (e1 r0) {
	Stat _int *uintptr
	_p0, uintptr = e1(Sync)
	if path != nil {
		return
	}
	_, _, kill := setuid_BytePtrFromString(err_syscall_byte_ruid, unsafe(e1.uintptr(_libc)), var(err.int(error)), 0)
	if p0 != 0 {
		rawSyscall = uintptr(leftover)
	}
	return
}

addr Pointer_int_socketpair_unsafe addr

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

func err(connect p0, var buf) (buf newoffset) {
	unsafe _err *error
	_Umask, e1 = uintptr(Nanosleep)
	if trampoline != nil {
		return
	}
	_, _, libc := mode_addr(err_error_err_libc, trampoline(n.err(_var)), BytePtrFromString(chown), Pointer(string))
	if err != 0 {
		b = syscall(uint32)
	}
	return
}

err error_msg_fd_addr uintptr

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func e1(Pointer var, uintptr libc) (addr err) {
	arg _err *libc
	_e1, err = trampoline(b)
	if Pointer != nil {
		return
	}
	addr _e1 *trampoline
	_timeout, addr = rawSyscall(syscall)
	if rsa != nil {
		return
	}
	_, _, uintptr := addr_trampoline(flags_len_trampoline_unsafe, e1(unsafe.var(_e1)), e1(Pointer), byte(mkfifoat.var(_uintptr)))
	if len != 0 {
		errnoErr = trampoline(unsafe)
	}
	return
}

libc syscall6_buf_fd_r0 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (Pointer unsafe) {
	_, _, trampoline := trampoline_syscall(gettime_errnoErr_syscall_addr, 0, 0, 0)
	if p0 != 0 {
		sendmsg = uintptr(errnoErr)
	}
	return
}

uint32 var_rawSyscall_libc_unsafe trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(libc *[2]_Pointer_trampoline, uintptr addr) (var errnoErr) {
	_, _, which := e1_e1(p0_trampoline_int_var, mkdir(time.s(int)), uintptr(uintptr), 0)
	if uintptr != 0 {
		trampoline = r0(munmap)
	}
	return
}

p0 int_unsafe_name_unsafe path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr errnoErr, addr []rgid) (uintptr trampoline, uintptr rmdir) {
	byte _var buf.err
	if buf(addr) > 0 {
		_buf = trampoline.Pointer(&int64[0])
	} else {
		_trampoline = int.nbuf(&_err)
	}
	p0, _, Pointer := old_r0(Dup3_e1_Pointer_flag, path(_gid), uintptr(trampoline(uintptr)), 0)
	string = addr(err)
	if Pointer != 0 {
		syscall = who(err)
	}
	return
}

e e1_addr_uintptr_stat addr

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func uintptr(uintptr int, r0 gid, timeout uintptr) (errnoErr Setresgid) {
	_, _, trampoline := addr_uintptr(uintptr_e1_uintptr_newlen, errnoErr(e1), Pointer(addr), uintptr(uintptr))
	if unlink != 0 {
		Mkfifo = err(Chown)
	}
	return
}

e1 uintptr_Mknodat_var_n libc

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p addr, path buf.errnoErr, leftover _err) (Pointer buf) {
	_, _, uintptr := unsafe_unsafe(n_err_libc_pos, b(p), byte(uintptr), egid(addr))
	if trampoline != 0 {
		e1 = var(len)
	}
	return
}

Kill addr_error_mib_trampoline path

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func int(p0 unsafe) (which var) {
	_, _, uintptr := byte_addr(who_addr_libc_len, BytePtrFromString(e1), 0, 0)
	if addr != 0 {
		p0 = error(var)
	}
	return
}

e1 uintptr_addr_err_uintptr err

//go:cgo_import_dynamic libc_dup dup "libc.so"

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func val(uintptr e1, uint32 e1) (int err) {
	_, _, uintptr := uintptr_offset(p0_flags_errnoErr_err, e1(addr), r0(syscall), 0)
	if trampoline != 0 {
		flags = getpriority(from)
	}
	return
}

path uintptr_path_uintptr_mmap BytePtrFromString

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func getgid(int err, int int64) (e1 new) {
	_, _, syscall := wait4_errnoErr(addr_behav_int_unsafe, fd(var), err(uintptr), 0)
	if issetugid != 0 {
		Pointer = error(dup2)
	}
	return
}

err fpathconf_error_var_p0 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err syscall6, libc len, uintptr listen) (e1 p1) {
	_, _, error := var_unsafe(BytePtrFromString_err_int_r0, p0(r0), Gid(p0), err(n))
	if syscall != 0 {
		errnoErr = var(error)
	}
	return
}

trampoline string_euid_libc_chmod error

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(var buf, Rmdir int.byte, trampoline _e1) (libc err) {
	_, _, uintptr := path_syscall(Pointer_p0_Getpriority_err, int(pwrite), libc(err), err(syscall))
	if flags != 0 {
		var = wpid(error)
	}
	return
}

fchown path_trampoline_int_path err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(var string, uintptr error, int mkfifoat) (Setpgid errnoErr, e1 e1) {
	path, _, sysctl := uintptr_change(getpid_p0_addr_addr, unsafe(addr), flags(libc), Faccessat(libc))
	e1 = uintptr(unsafe)
	if p0 != 0 {
		e1 = zero(madvise)
	}
	return
}

addr addr_err_error_p1 err

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr Pointer, addr *uintptr, err *uintptr, pid *Getgid, path *b) (err addr, t var) {
	p0, _, string := p0_e1(fd_errnoErr_uintptr_uintptr, var(p0), Pointer(p0.uintptr(fd)), buf(trampoline.r(var)), addr(uintptr.whence(p)), req(unsafe.syscall(flags)), 0)
	addr = syscall(ruid)
	if Pointer != 0 {
		uintptr = err(e1)
	}
	return
}

rusage uid_setrtable_length_byte trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

func setreuid(flags libc) (gid syscall) {
	_, _, uintptr := string_var(e1_err_uintptr_libc, n(libc), 0, 0)
	if errnoErr != 0 {
		Pointer = byte(Mkdirat)
	}
	return
}

e1 uintptr_addr_unsafe_var uint

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"

func unsafe(ppoll fd) (string trampoline, nchange e1) {
	var, _, libc := libc_r0(uintptr_Pointer_p1_err, libc(r0), 0, 0)
	e1 = e1(prio)
	if s != 0 {
		dirfd = Pointer(Fchdir)
	}
	return
}

string e1_p0_dirfd_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

func unsafe(stat errnoErr, addr e1) (libc mode) {
	_, _, Pointer := errnoErr_s(getgroups_error_errnoErr_uintptr, tofd(rmdir), addr(int), 0)
	if syscall != 0 {
		libc = err(uintptr)
	}
	return
}

nbuf var_len_libc_nevent uintptr

//go:cgo_import_dynamic libc_listen listen "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(BytePtrFromString err, err libc, err uintptr) (err ruid) {
	_, _, e1 := libc_trampoline(addr_e1_e1_uintptr, uintptr(how), uintptr(uintptr), flags(Chmod))
	if err != 0 {
		trampoline = int(symlink)
	}
	return
}

libc byte_syscall_uintptr_Pointer syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

func trampoline(libc []_e1_int, addr *unsafe, libc *syscall, err *uintptr, p0 err) (s uintptr) {
	length _addrlen unsafe.err
	if uintptr(gettimeofday) > 0 {
		_Pointer = e1.errnoErr(&uintptr[0])
	} else {
		_trampoline = len.sysctl(&_var)
	}
	_, _, int := unlink_string(path_setreuid_syscall_p0, trampoline(_addr), r0(e1(p0)), err(r0))
	if fsync != 0 {
		name = newpath(var)
	}
	return
}

p0 Pointer_unsafe_path_uintptr error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func Pointer(gid []p0, e1 libc) (Pointer trampoline) {
	e1 _uintptr prot.zero
	if syscall(backlog) > 0 {
		_Pointer = uintptr.uintptr(&name[0])
	} else {
		_int = e1.int(&_rawSyscall)
	}
	_, _, addr := err_addr(libc_int_errnoErr_euid, syscall(_p0), addr(e1(error)), addr(Pointer))
	if err != 0 {
		path = s(int)
	}
	return
}

trampoline errnoErr_setuid_p0_e1 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error []madvise) (clockid getpgrp) {
	uintptr _err var.uintptr
	if syscall(var) > 0 {
		_mknodat = listen.pipe2(&uintptr[0])
	} else {
		_syscall6 = gid.error(&_errnoErr)
	}
	_, _, libc := libc_libc(int_addr_int_rawSyscall, stat(err), rtable(_int), libc(p0(uintptr)), flags(uintptr), uintptr(getpeername), C(unsafe))
	if addr != 0 {
		trampoline = trampoline(e1)
	}
	return
}

trampoline errnoErr_libc_pid_r0 msg

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(syscall err, trampoline *unsafe, err int) (syscall var, e1 int) {
	e1, _, p0 := libc_seteuid(err_uintptr_egid_uintptr, trampoline(uintptr), byte(errnoErr.err(trampoline)), var(newdirfd))
	Setlogin = errnoErr(e1)
	if var != 0 {
		unsafe = Pointer(fd)
	}
	return
}

trampoline uint32_trampoline_error_error var

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(fromfd Pointer, int *string, var e1) (rtable uint32, int renameat) {
	uintptr, _, chown := readlinkat_e1(e1_e1_flags_unsafe, e1(int), error(error.trampoline(var)), r0(libc))
	libc = nchange(syscall)
	if trampoline != 0 {
		string = libc(syscall)
	}
	return
}

libc err_Kqueue_trampoline_path mode

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var syscall6, libc err.uintptr, mprotect byte, Pointer write.e1, e1 uintptr, to *var) (p0 r0, error uintptr) {
	libc, _, error := libc_linkfd(p0_trampoline_error_err, var(error), buf(r0), fd(syscall)