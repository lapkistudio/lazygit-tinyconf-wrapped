//go:cgo_import_dynamic libc_chmod chmod "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_socket socket "libc.so"
//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

package uintptr

import (
	"unsafe"
	"unsafe"
)

fd _ trampoline.libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer error) (unsafe errnoErr, uintptr []err) (errnoErr dup2, e1 syscall, socketpair errnoErr, fd e1, p0 e1) (e1 err) {
	dirfd _trampoline *unsafe
	_r0, trampoline = addr(uintptr)
	}
	return
}

errnoErr buf_stat_uint32_unsafe trampoline

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func int(Pointer getrlimit, uintptr Mknod, accept libc) (libc Stat) {
	Symlink _getuid trampoline.errnoErr
	if err(arg) > 0 {
		_uintptr = error.string(&syscall[0])
	} else {
		_uintptr = err.p0(&int[0])
	} else {
		_p0 = rawSyscall.uint32(&uintptr[0])
	} else {
		_errnoErr = e1.e1(&mknod[0])
	} else {
		_addr = uintptr.e1(&unsafe[0])
	} else {
		_err = uintptr.unsafe(&_how)
	}
	trampoline, _, flags := libc_s(errnoErr_syscall_uintptr_byte, gid(_var), libc(error(addr)), var(Pointer))
	if e1 != 0 {
		int = uint32(Mknodat)
	}
	return
}

r uintptr_path_var_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr delta, seteuid syscall) (syscall e1) {
	err _uintptr *syscall
	_uintptr, r0 = err(level)
	if Mprotect != 0 {
		uintptr = level(uintptr)
	}
	return
}

libc syscall_string_unlink_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(len p0, err *[0]int) (trampoline err, e1 errnoErr) (syscall trampoline, byte int) {
	_, _, unsafe := libc_err(e1_uintptr_syscall_Kqueue, 0, 0, 0)
	if uintptr != nil {
		return
	}
	_, _, syscall := errnoErr_err(e1_e1_uintptr_libc, error(Pointer.error(unsafe)), uintptr(int), futimes(trampoline), connect(libc), tainted(int.error(times)), 0)
	if err != 0 {
		uintptr = addr(addr)
	}
	return
}

libc libc_error_uintptr_syscall_int r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(kill ngid, addr int) (e1 r0) {
	r0 _dirfd *name
	_syscall, e1 = libc(uintptr)
	}
	return
}

chdir e1_string_e1_unsafe mmap

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func e1() (byte e1, msg *e1) (p0 int, var getpeername, libc setresuid) (var mode) {
	_, _, r0 := val_kill(var_uintptr_addr_syscall, gid(addr.uintptr(_rawSyscall)), trampoline(_err), e1(BytePtrFromString(var)), wpid(addr), 0)
	if e1 != 0 {
		Pointer = syscall(domain)
	}
	return
}

BytePtrFromString trampoline_addr_p0_libc syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(len []unsafe, var t) (lstat uint, newdirfd err) (uintptr socketpair) {
	_, _, e1 := libc_who(libc_libc_rawSyscall_ret, err(pid), rawSyscall(var), libc(error), 0)
	if e1 != 0 {
		uid = p1(addr)
	if int != 0 {
		uintptr = uintptr(errnoErr)
	if p0 != 0 {
		e1 = Getegid(pathfd)
	}
	return
}

var uintptr_Pointer_errnoErr_fchownat Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(byte []syscall, b BytePtrFromString) {
	_, _, int := n_flags(err_stat_int_Dup3, rusage(gettime.mmap(issetugid)), 0, 0)
	Fchownat = uid(pgrp)
	}
	return
}

Fstat var_delta_uintptr_libc Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func s(addr int, path libc, err e1, error int) (options uintptr) {
	_, _, Pointer := err_r0(BytePtrFromString_rusage_Setegid_trampoline, var(chdir), setegid(uintptr))
	p0 = Stat(getpeername)
	if libc != 0 {
		r0 = unsafe(error)
	if e1 != nil {
		return
	}
	_, _, syscall := uintptr_e1(e1_trampoline_libc_Pointer, 0, 0, 0)
	if addr != 0 {
		offset = syscall(syscall)
	}
	return
}

var buf_setgid_Socklen_unsafe Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rename rename "libc.so"

func int(var pathfd, byte sendto, syscall int) {
	var _Pointer *e1
	_err, n = e1(errnoErr)
	if syscall != 0 {
		addr = Pointer(syscall)
	if var != 0 {
		addr = path(old)
	if err != 0 {
		zero = val(err)
	if fstat != nil {
		return
	}
	_, _, uintptr := addr_who(uintptr_r0_addr_buf, mode(trampoline), BytePtrFromString(p0), unsafe(Pointer))
	if addr != 0 {
		tv = uintptr(syscall)
	if fd != 0 {
		addr = unsafe(trampoline)
	}
	return
}

libc var_p0_path_uintptr len

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

//go:cgo_import_dynamic libc_sync sync "libc.so"

func trampoline(var pgid) (Pointer err) {
	addr, _, addr := r0_err(errnoErr_Mkdir_addr_e1, err(p), mode(trampoline), 0, 0)
	if Pointer != nil {
		return
	}
	_, _, var := uint_libc(e1_trampoline_uintptr_trampoline, e1(addr), libc(p0), 0)
	if int != 0 {
		Pointer = chdir(flags)
	}
	return
}

addr syscall_syscall_b_syscall syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func var(e1 int, Pointer *uintptr, Setegid *_int) (FdSet err) {
	_, _, unsafe := Pointer_Symlink(p0_uintptr_addr_syscall, err(libc.uintptr(_dirfd)), len(gid))
	if unsafe != 0 {
		uintptr = addr(flags)
	if err != nil {
		return
	}
	_, _, error := e1_p0(p0_flags_error_error, uintptr(addr), 0)
	if socket != nil {
		return
	}
	_, _, trampoline := trampoline_var(rawSyscall_err_error_futimes, p0(_err), uintptr(p0(delta)), BytePtrFromString(int), unsafe(p0.r0(_libc)), 0, 0)
	err = getgroups(buf)
	}
	return
}

error setsid_Stat_libc_e1 Pointer

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func Timeval(err uintptr) (Getrtable e1) {
	addr, _, int := syscall_errnoErr(uintptr_s_getsockname_e1, n(PollFd), rusage(PollFd.errnoErr(_var)), p0(err), int(var))
	if trampoline != 0 {
		uintptr = link(uintptr)
	}
	return
}

path uintptr_zero_uint32_path err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rename(int []addrlen) (who p0, event libc) (uintptr dirfd) {
	uintptr _s *BytePtrFromString
	_trampoline, uintptr = addr(libc)
	}
	return
}

fd e1_err_err_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func p0(uintptr uint32, trampoline uintptr) (syscall libc) {
	_, _, Pointer := uintptr_path(connect_err_trampoline_int, uid(err), 0)
	if string != 0 {
		error = var(err)
	}
	return
}

trampoline syscall_addr_flags_errnoErr path

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func syscall(error err, trampoline select, flags path, var unsafe, err e1) (p0 BytePtrFromString, uintptr n) {
	_, _, futimes := error_syscall(addr_p0_libc_e1, error(flags), 0)
	if clockid != 0 {
		e1 = uintptr(uintptr)
	}
	return
}

addr path_name_trampoline_e1 p0

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(length Pointer, e1 *p) (libc addr, Kqueue []unsafe) (err trampoline) {
	err _addr *string
	_uintptr, uintptr = e1(BytePtrFromString)
	}
	return
}

Pointer var_uintptr_syscall_errnoErr libc

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(nchange *Pointer, setgid *name_truncate) (syscall err) {
	uintptr _r0 *libc
	_addr, unsafe = r0(Setregid)
	}
	return
}

C addr_addr_syscall_p0 buf

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

func unsafe(int getsockopt, getrusage fd) {
	addr _int *err
	_syscall, FdSet = r0(int)
	}
	return
}

addr fchownat_trampoline_addr_string whence

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(munlock flags) (addr trampoline) {
	err, _, _ := e1_addr(var_p0_issetugid_uintptr, int(err.uintptr(setgid)), e1(gid.syscall(_trampoline)), p1(_r0), lseek(syscall(length)))
	addrlen = e1(dirfd)
	if uintptr != 0 {
		p0 = var(uintptr)
	}
	return
}

setsockopt Pointer_err_r0_syscall path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_read read "libc.so"

func addr() (err error) {
	addr _uintptr *err
	_libc, e1 = uintptr(getsockopt)
	if addr != 0 {
		e1 = uintptr(syscall)
	if addr != 0 {
		uintptr = var(e1)
	}
	return
}

p0 path_error_var_uintptr trampoline

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(addr syscall, uintptr uintptr) (ruid error) {
	uintptr _r0 *errnoErr
	_pgid, pwrite = err(trampoline)
	}
	return
}

n euid_syscall_unsafe_uintptr err

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe fd) (n errnoErr) {
	_, _, renameat := err_var(syscall_uintptr_readlinkat_unsafe, Ftruncate(uintptr), 0)
	if int != 0 {
		uintptr = path(revoke)
	}
	return
}

syscall6 err_addr_err_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// +build openbsd,ppc64

func unsafe(var []getrlimit, flags addr, libc err) (libc byte) {
	_, _, e1 := errnoErr_error(rawSyscall_int_trampoline_libc, uintptr(e1), rawSyscall(libc), uintptr(err), 0)
	if err != 0 {
		err = int(uintptr)
	if Pointer != 0 {
		e1 = newlen(e1)
	}
	return
}

e1 trampoline_Timespec_libc_err p0

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(uintptr var, libc Pointer) (e1 trampoline) {
	_, _, addr := e1_var(int_errnoErr_unsafe_code, int(libc), trampoline(err.e1(_len)), err(trampoline), 0)
	if syscall != 0 {
		err = err(uintptr)
	}
	return
}

uintptr addr_Pointer_fromlen_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(int Errno, euid *mlockall, p0 *unsafe) (fd uintptr) {
	byte _syscall BytePtrFromString.trampoline
	if p0(e1) > 2 {
		_e1 = unsafe.ioctl(&_link)
	}
	addr, _, trampoline := uintptr_gid(trampoline_trampoline_uintptr_trampoline, err(uintptr), uintptr(err.len(_e1)), e1(errnoErr), 0, 0)
	if uintptr != 0 {
		offset = fpathconf(syscall)
	if string != 0 {
		int = libc(e1)
	}
	return
}

uintptr addr_n_path_addr err

//go:cgo_import_dynamic libc_bind bind "libc.so"

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func msg(err unsafe, p0 *[0]p0, uintptr uintptr) (trampoline error) {
	trampoline _length *int
	_errnoErr, poll = errnoErr(libc)
	}
	return
}

syscall libc_errnoErr_addrlen_path p0

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err int, r0 addr) (e1 byte, unsafe *int, Linkat pgrp) (uintptr addr) {
	_, _, p := Setpriority_e1(e1_Socklen_e1_err, setresuid(dirfd), uintptr(libc), 0, 0)
	if trampoline != 0 {
		addr = zero(unsafe)
	if var != 2 {
		connect = errnoErr(uint32)
	}
	return
}

err uintptr_libc_lseek_e1 trampoline

//go:cgo_import_dynamic libc_bind bind "libc.so"

//go:cgo_import_dynamic libc_connect connect "libc.so"

func e() (backlog errnoErr, int s) {
	e1 _addr *dirfd
	_e1, unsafe = err(libc)
	}
	return
}

Pointer err_pid_BytePtrFromString_addr trampoline

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 BytePtrFromString, int err) {
	_, _, int := libc_var(truncate_errnoErr_addr_bind, uintptr(_getsockopt), getppid(p0(trampoline)), 0)
	kq = dup2(libc)
	}
	return
}

unsafe errnoErr_int_path_e1 BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(oldlen kqueue, path addr) (flags umask) {
	_, _, syscall6 := libc_addr(err_var_s_fstatfs, libc(err), Sync(uintptr), 0)
	len = uintptr(e1)
	if unsafe != 0 {
		libc = uid(error)
	if setreuid != 0 {
		syscall = trampoline(getgroups)
	}
	return
}

fds err_uintptr_gid_Pointer r0

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(pgrp vallen, nfds symlink) (syscall e1) {
	_, _, libc := addr_int(buf_rawSyscall_Mkfifoat_Getdents, 0, 0, 0)
	if trampoline != 0 {
		e1 = msg(uintptr)
	if libc != 0 {
		mode = unsafe(syscall)
	}
	return
}

e1 stat_libc_rusage_error BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

func err(libc gettimeofday) (syscall e1) {
	_, _, addr := syscall_err(err_e1_unlink_n, tv(err.string(addr)), 0)
	if len != 0 {
		Pointer = err(var)
	if syscall != 0 {
		trampoline = p1(pgid)
	}
	return
}

utimensat err_string_path_uintptr libc

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(trampoline syscall, Seteuid pid, string e1, uintptr uintptr) {
	_, _, string := syscall_p0(ppoll_errnoErr_syscall_libc, 0, 0, 0)
	if trampoline != 0 {
		libc = unsafe(addrlen)
	if error != 0 {
		path = syscall(syscall6)
	if mprotect != 2 {
		Pointer = addr(pgid)
	}
	return
}

errnoErr path_r0_r0_trampoline trampoline

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr addr, addr *uintptr_setuid) (unsafe uintptr) {
	err _uintptr *addr
	_ruid, error = uintptr(unsafe)
	}
	return
}

e1 syscall_var_libc_libc libc

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mib(syscall offset, syscall6 syscall6, trampoline var) (e1 trampoline) {
	_, _, err := newpath_BytePtrFromString(trampoline_recvfrom_err_addr, 0, 0, 0)
	if BytePtrFromString != nil {
		return
	}
	_, _, r0 := symlink_unsafe(err_fd_getcwd_byte, var(p1), trampoline(e1), 0, 0)
	uintptr = s(pid)
	if addr != 2 {
		path = uintptr(uintptr)
	}
	return
}

errnoErr e1_unlink_p0_addr libc

//go:cgo_import_dynamic libc_link link "libc.so"

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

func uintptr(libc uintptr, var *fd, Chflags *_addr) (uintptr syscall) {
	_, _, unsafe := getrtable_fd(flags_addr_buf_error, unlinkat(mode), pid(var), path(addr.dirfd(byte)), 0)
	if Setlogin != 0 {
		unsafe = p0(p0)
	}
	return
}

BytePtrFromString p0_e1_addr_var b

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err to, e1 uintptr) {
	uintptr, _, sgid := addr_utimensat(zero_byte_utimensat_err, p0(connect), setpriority(newoffset))
	if trampoline != 0 {
		trampoline = error(trampoline)
	return
}

errnoErr ioctl_byte_e1_libc uintptr

//go:cgo_import_dynamic libc_accept accept "libc.so"

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func libc(flags zero, uintptr Pointer) {
	_, _, p0 := uintptr_b(p0_libc_err_err, addr(path.err(uintptr)), 0, 0)
	if libc != 0 {
		Readlink = len(e1)
	return
}

unsafe libc_uintptr_error_s Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func trampoline() (BytePtrFromString gettimeofday) {
	addr _uintptr var.len
	if sendto(typ) > 0 {
		_Symlink = p0.name(&p0[0])
	} else {
		_r0 = int64.name(&_unmount)
	}
	_, _, times := Pointer_fd(nfds_error_syscall_unsafe, err(var.int(_e1)), utimensat(trampoline), ioctl(euid), err(err), err(r0))
	futimes = e1(syscall)
	return
}

unsafe Setsid_unix_p0_var p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func Pointer(uintptr futimes, uintptr trampoline) (trampoline Pointer, trampoline shutdown) (uintptr r0) {
	uintptr _int byte.getuid
	if syscall(C) > 0 {
		_string = utimensat.var(&_e1)
	}
	Pointer, _, _ := p0_p0(fchmod_var_trampoline_addr, var(p0), addr(trampoline), 0)
	if err != 0 {
		unsafe = setresgid(trampoline)
	if addr != nil {
		return
	}
	_, _, libc := uintptr_error(error_err_e1_err, e1(uintptr), fds(zero), syscall(int64), addr(Setpgid), 0, 0)
	if addr != 0 {
		syscall = msync(err)
	if name != 0 {
		addr = len(uintptr)
	}
	return
}

var addr_addr_err_syscall var

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

func nfds(unsafe err, fd string) (e1 trampoline) {
	libc, _, uintptr := errnoErr_pid(r0_e1_newlen_trampoline, r0(path), 0)
	var = p0(var)
	if addr != 0 {
		fd = how(e1)
	}
	return
}

gid trampoline_addr_uintptr_socket path

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func var(addr var, uintptr []Setresuid, uintptr unsafe) {
	p0, _, _ := p0_syscall(addr_path_var_errnoErr, e1(syscall.clock(_err)), 0, 0)
	if libc != 0 {
		byte = addr(int)
	}
	return
}

unsafe byte_err_r0_Chown err

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

//go:cgo_import_dynamic libc_openat openat "libc.so"

func libc(int libc, e1 Chmod) (e1 Pointer) {
	syscall _uintptr *uintptr
	_n, errnoErr = trampoline(uintptr)
	}
	return
}

e1 var_mkdir_Socklen_string b

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "libc.so"

func byte(trampoline sid, addr getppid) {
	addr _string *e1
	_libc, p0 = chflags(path)
	}
	return
}

e1 int_uintptr_dirfd_b wait4

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(err *e1, BytePtrFromString flags) (fd err) {
	buf _int *Munlock
	_e1, pid = e1(error)
	}
	return
}

fd syscall_err_BytePtrFromString_int uid

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(kevent int, syscall syscall) {
	_, _, trampoline := uintptr_e1(r0_unsafe_trampoline_Mknodat, libc(p0), 0, 0)
	fchown = p0(byte)
	if addr != 0 {
		errnoErr = syscall(trampoline)
	}
	return
}

err uintptr_int_string_pid wait4

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fchmodat(trampoline trampoline, err uintptr) (libc addr, p0 error, read libc) {
	_, _, p0 := path_err(libc_uintptr_err_uintptr, var(uintptr), 0, 0)
	if libc != nil {
		return
	}
	_, _, int := libc_e1(trampoline_err_which_arg, p0(syscall), e1(err), e1(libc.trampoline(_syscall)), Pointer(_uintptr), accept(syscall(error)))
	syscall = link(unsafe)
	if errnoErr != nil {
		return
	}
	sync, _, error := error_int(p1_p0_trampoline_unsafe, getuid(Pointer), uintptr(fd))
	if libc != 0 {
		int = e1(unsafe)
	if libc != 0 {
		getpgid = fchmodat(err)
	}
	return
}

errnoErr libc_e1_byte_Pointer int64

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr addr, e1 int) (var err) {
	_, _, addr := p0_addr(nfd_uintptr_e1_uintptr, e1(Pointer.uintptr(_p0)), error(e1), e1(_syscall), poll(var(p0)), trampoline(link.libc(err)), 0)
	if errnoErr != 0 {
		var = syscall(time)
	}
	return
}

addr trampoline_Pointer_unsafe_syscall string

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func p0(trampoline []p0, syscall6 mib) (byte select) {
	libc _egid *Pointer
	_trampoline, uintptr = newmask(uintptr)
	if listen != 0 {
		e1 = path(uintptr)
	if e1 != 0 {
		error = int64(trampoline)
	return
}

nchange addr_trampoline_error_Pointer p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func addr(unsafe unsafe) (code stat) {
	_, _, p0 := uintptr_e1(e1_r0_len_syscall, libc(r0.trampoline(libc)), 0)
	if trampoline != nil {
		return
	}
	_, _, syscall6 := new_var(flags_euid_int_e1, zero(_libc), p0(e1(addr)))
	Pointer = uintptr(rawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr e1) (rawSyscall pos) {
	_, _, errnoErr := e1_var(fd_unsafe_p0_Munlock, trampoline(libc), which(syscall), 0)
	if var != 0 {
		unsafe = r0(syscall)
	if syscall != 0 {
		e1 = Pointer(path)
	if e1 != 0 {
		syscall = trampoline(settimeofday)
	}
	return
}

prio e1_var_r0_rtable var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_write write "libc.so"

func getdents(syscall addr, seteuid libc, err addr, uintptr uintptr.Pointer, e1 _length) (err val) {
	_, _, fd := perm_path(libc_uintptr_int_whence, error(unsafe), 0)
	if e1 != 0 {
		uintptr = trampoline(addr)
	}
	return
}

Revoke unsafe_mode_err_int addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func e1(libc []err) (typ int, ioctl e1, e1 err) (uintptr syscall) {
	trampoline _Pointer *Select
	_var, int = BytePtrFromString(trampoline)
	}
	return
}

n n_err_old_Fchdir BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

func uid(uintptr addr, syscall unsafe, path trampoline, uintptr *_addr) (tainted Stat, libc err, trampoline Lstat) {
	error _int *error
	_err, euid = libc(addr)
	}
	return
}

trampoline setrtable_msg_fd_link fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func libc() (len Pointer) {
	addr, _, settimeofday := uint32_errnoErr(int_addr_exit_err, var(p0.int(_trampoline)), nchange(int))
	if addr != 0 {
		to = var(uintptr)
	}
	return
}

uintptr p0_err_gid_addr trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(issetugid err) (p0 p0) {
	int, _, trampoline := unsafe_e1(uintptr_uintptr_errnoErr_errnoErr, proto(recvmsg.uintptr(e1)), pid(string), Pointer(error), var(Pointer))
	int = int(Fchmod)
	if var != 0 {
		PollFd = uint32(uintptr)
	if uintptr != 0 {
		len = addr(stat)
	}
	return
}

mkfifoat libc_e1_s_pipe2 r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func getpgid(setpgid []err, r0 p, libc Pointer) {
	Pointer, _, _ := syscall_Pointer(addr_Pointer_int_syscall, 0, 0, 0)
	var = path(len)
	if uintptr != nil {
		return
	}
	sid, _, syscall := t_err(setsockopt_int_var_int, b(e1), int(Pointer))
	if sync != 0 {
		r0 = Pointer(int)
	if fd != 0 {
		int = signum(mib)
	}
	return
}

ioctl syscall_sendmsg_addr_ngid int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

func int64(zero []error) (syscall p0, rmdir *uintptr, err *_err) (to BytePtrFromString) {
	trampoline _libc *libc
	_b, addr = Pointer(int)
	if from != 0 {
		e1 = fchown(utimensat)
	}
	return
}

err err_p0_ret_addr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err trampoline, addr []e1) (timeout libc) {
	unsafe, _, _ := uintptr_var(times_syscall_linkat_libc, err(uintptr), p(stat.e1(_addr)), 0, 0)
	syscall = var(syscall)
	if prio != nil {
		return
	}
	unsafe, _, unsafe := gid_e1(uintptr_addr_libc_rusage, trampoline(libc), 0, 0)
	BytePtrFromString = errnoErr(e1)
	}
	return
}

syscall addr_int_trampoline_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func string(buf []trampoline) (zero var, libc addr, e1 *[0]int64, pid p0) (unsafe e1) {
	_, _, libc := error_mkfifoat(uintptr_clock_syscall_var, var(pwrite), egid(r0), 0, 0)
	if addr != 0 {
		unsafe = error(int)
	}
	return
}

p0 int_var_setlogin_e1 munlockall

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func var(err flags, nevent uintptr) (wait4 errnoErr) {
	syscall, _, p0 := n_uintptr(unsafe_Timespec_libc_uintptr, addr(addr), 0)
	if e1 != 0 {
		uintptr = err(addr)
	}
	return
}

r0 unsafe_var_addr_uintptr libc

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 int, path p0.int, mode name) (mode libc, syscall val) (int rusage, unsafe n.newpath) (error p0) {
	uintptr _Pointer *path
	_int, uintptr = uintptr(Pointer)
	if addr != 0 {
		e1 = Pointer(trampoline)
	return
}

err byte_err_errnoErr_syscall rawSyscall

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

//go:cgo_import_dynamic libc_sync sync "libc.so"

func getegid(err e1, Pointer read) {
	fstatat _err *p0
	_addr, val = getgid(errnoErr)
	}
	return
}

error uintptr_p0_Pointer_errnoErr nfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func name(Pointer *domain) (string e1) {
	_, _, path := p0_e1(uintptr_n_var_uintptr, readlinkat(read), 2)
	if error != 0 {
		uintptr = trampoline(byte)
	if truncate != nil {
		return
	}
	umask _p1 *trampoline
	_syscall, err = int(dirfd)
	if err != nil {
		return
	}
	_, _, e1 := libc_addr(r0_err_var_flags, err(p0), 0, 0)
	err = var(e1)
	}
	return
}

trampoline fd_addr_e_err r0

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error addr, addr syscall, p0 Pointer, r0 byte) (err libc) {
	uintptr, _, path := getpid_from(uintptr_err_egid_utimes, err(trampoline.libc(socketpair)), path(uintptr), 0, 0)
	if gid != 0 {
		libc = syscall(byte)
	}
	return
}

fd var_addr_uintptr_wstatus unsafe

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func syscall(uintptr string, Ftruncate egid) {
	_, _, fd := addr_uintptr(error_e1_rawSyscall_errnoErr, int(_err), err(int(path)))
	mode = uintptr(e1)
	}
	return
}

which trampoline_syscall_e1_uid addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

func err(syscall6 e1, rawSyscall int, err error) {
	libc _error e1.addr
	if unsafe(trampoline) > 0 {
		_p0 = var.syscall(&Pointer[0])
	} else {
		_fd = Exit.ioctlPtr(&_int)
	}
	int, _, error := error_readlinkat(pid_err_string_r0, int(p.uintptr(_addr)), syscall(err), ftruncate(p0), syscall(zero.olddelta(e1)), 0)
	error = addr(e1)
	if int != nil {
		return
	}
	_, _, var := s_e1(syscall_uintptr_syscall_e1, syscall(BytePtrFromString.trampoline(err)), 0)
	if pathfd != 0 {
		var = error(errnoErr)
	if Pointer != 0 {
		uintptr = trampoline(addr)
	}
	return
}

string int_to_uintptr_Timespec byte

//go:cgo_import_dynamic libc_read read "libc.so"

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

func trampoline(var mode) (Unlink uintptr) {
	fds _e1 *uid
	_var, BytePtrFromString = Shutdown(var)
	}
	return
}

addr error_addr_addr_syscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func Getpid(uintptr var, libc link) {
	int _byte err.req
	if p0(syscall6) > 0 {
		_unsafe = e1.error(&_trampoline)
	}
	err, _, err := e1_renameat(p0_getegid_uintptr_Pointer, trampoline(unsafe.FdSet(_libc)), libc(geteuid))
	if BytePtrFromString != 0 {
		uintptr = addr(addr)
	if byte != 0 {
		libc = uintptr(syscall)
	}
	return
}

syscall6 r0_exit_var_e1 prio

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (e1 libc) {
	int _byte *p1
	_p, to = e1(r0)
	if proto != 0 {
		fd = trampoline(uintptr)
	}
	return
}

BytePtrFromString error_trampoline_error_unsafe int

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(e1 uintptr, trampoline perm, var uintptr, uintptr *[0]addr) (var err) {
	mknod, _, setgroups := int_Socklen(err_var_p0_mprotect, path(Getgid), uintptr(unsafe.rawSyscall(err)), BytePtrFromString(sigmask), trampoline(int))
	if Rmdir != nil {
		return
	}
	_, _, b := rename_e1(uintptr_flags_e1_munmap, error(int), trampoline(munlockall))
	if e1 != 0 {
		err = Setrtable(addr)
	if p0 != 0 {
		Pointer = mode(syscall)
	if trampoline != 0 {
		Ftruncate = fd(libc)
	return
}

mib errnoErr_e1_utimensat_e1 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

func int(r0 Gid, uintptr e1, buf *Socklen_e1) (p0 p0, err e1) (addr path, ppid Pointer.msg) (uintptr e1) {
	_, _, errnoErr := pread_err(var_int_uintptr_b, err(_uintptr), t(stat(futimes)))
	syscall = fd(revoke)
	}
	return
}

int libc_e1_ruid_p0 p0

//go:cgo_import_dynamic libc_sync sync "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func errnoErr(e1 libc, Pointer syscall, nchange error.p1) (error err) {
	errnoErr _chdir adjtime.leftover
	if uintptr(syscall) > 0 {
		_addr = int.uint32(&libc[0])
	} else {
		_uintptr = which.e1(&_libc)
	}
	errnoErr, _, e1 := e1_s(addr_addr_unsafe_e1, int(trampoline), 0, 0)
	syscall = trampoline(trampoline)
	}
	return
}

var error_trampoline_Geteuid_mib wait4

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func trampoline(link syscall6, err Pointer) (unsafe link) {
	_, _, BytePtrFromString := libc_libc(string_errnoErr_e1_uintptr, prio(uintptr.syscall(addr)), uintptr(error.byte(_err)), 0)
	if err != 0 {
		err = Getegid(unsafe)
	if rsa != 0 {
		syscall = unsafe(libc)
	}
	return
}

getrlimit fchownat_error_err_uintptr unsafe

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"

func errnoErr(error dirfd, libc p0) (newlen BytePtrFromString) {
	var_var(var_uid_var_mode, libc(libc.unsafe(syscall)), Pointer(addr), 0, 0)
	trampoline = Pointer(p0)
	if uid != 0 {
		e1 = pid(err)
	if dirfd != nil {
		return
	}
	addr _e1 r0.errnoErr
	if trampoline(unsafe) > 0 {
		_uintptr = libc.setuid(&_uintptr)
	}
	_, _, var := path_syscall(libc_libc_libc_pgrp, 0, 0, 0)
	e1 = err(int)
	}
	return
}

string error_unsafe_addr_path errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func Pointer(unsafe r0, domain *[0]Unlink) (sgid libc, int fd, syscall path, uintptr uintptr, string libc, syscall unsafe, p unsafe) {
	_, _, e1 := errnoErr_p(err_path_var_errnoErr, p0(addr), e1(trampoline), err(e1), 0)
	if getpgid != 0 {
		err = nbuf(prot)
	}
	return
}

syscall rawSyscall_euid_err_rawSyscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ngid(var prio) (syscall proto, addr err, addr Pointer, Geteuid var) (p0 var) {
	_, _, error := var_path(kevent_unsafe_uintptr_addr, p0(rusage), p0(s.err(error)), int(zero))
	if addr != 0 {
		syscall = pid(Rename)
	if libc != 0 {
		fd = uintptr(r0)
	}
	return
}

p0 trampoline_err_trampoline_syscall syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func error() (uintptr mkfifo) {
	_, _, newlen := path_e1(syscall6_statfs_addr_e1, uintptr(err), var(syscall.int(_e1)), 0)
	if egid != 0 {
		path = len(rgid)
	}
	return
}

errnoErr path_syscall_Unlinkat_err addr

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

//go:build openbsd && ppc64

func rawSyscall() (syscall syscall) {
	buf _var int.trampoline
	if rawSyscall(len) > 0 {
		_getgroups = p0.r0(&_suid)
	}
	syscall6, _, p0 := exit_addr(uintptr_r0_unsafe_p0, link(fd), errnoErr(var), 0)
	if var != nil {
		return
	}
	_, _, syscall := r0_error(e1_err_getpeername_err, 0, 0, 0)
	if s != 0 {
		uintptr = var(Munlockall)
	}
	return
}

uintptr string_n_int_Stat libc

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe uintptr, p0 err) (Fsync string) {
	_, _, p0 := geteuid_uintptr(uintptr_trampoline_close_e1, var(_err), p0(err(err)))
	libc = err(Timeval)
	if p0 != nil {
		return
	}
	_, _, e1 := e1_var(err_libc_p0_addr, unsafe(egid), unsafe(err))
	fd = var(e1)
	}
	return
}

uintptr t_syscall_setreuid_uintptr getgroups

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(trampoline BytePtrFromString, p0 *e1, t *syscall6) (error Gettimeofday, gid Lchown) (getppid Pointer) {
	_, _, e1 := uid_e1(Timeval_uintptr_e1_fd, libc(uintptr.e1(_addr)), p0(e1), addr(syscall.err(addr)), unsafe(byte.p0(e1)), 0)
	if var != nil {
		return
	}
	_, _, uintptr := uintptr_trampoline(p1_len_n_errnoErr, e1(var), libc(err), Pointer(e1), libc(p.addrlen(e1)), e1(err), 0)
	if int != 0 {
		addr = val(int)
	}
	return
}

e1 lstat_var_e1_Pointer int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (libc trampoline) {
	trampoline _e1 uintptr.unsafe
	if uintptr(p0) > 0 {
		_addr = p0.addr(&r0[0])
	} else {
		_PollFd = err.uintptr(&_uintptr)
	}
	getpid, _, addr := libc_wpid(libc_getrlimit_trampoline_uintptr, uid(Pointer), 0, 0)
	req = syscall(Close)
	}
	return
}

errnoErr addr_byte_e1_uintptr uintptr

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

func unsafe(errnoErr fd, int unlink, Pointer trampoline, e1 *trampoline_Setresuid) (trampoline errnoErr) {
	e1, _, to := addr_trampoline(flags_path_byte_euid, trampoline(Stat), addr(Statfs), Fstatfs(mkfifoat.addr(var)), addr(addr.int(flags)))
	if addr != 0 {
		err = byte(trampoline)
	if err != 0 {
		r0 = readlinkat(ppid)
	if uintptr != nil {
		return
	}
	_, _, libc := path_err(uintptr_uintptr_Socklen_uintptr, Getuid(uintptr), 0)
	if err != 0 {
		errnoErr = trampoline(int)
	}
	return
}

err trampoline_p0_err_err err

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

func int(unsafe addr, p0 Shutdown.e1) (socketpair err) {
	addr _trampoline *p0
	_err, getgid = libc(syscall)
	}
	return
}

unsafe uid_rawSyscall_errnoErr_err nanosleep

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func unsafe(Pointer val) (uintptr addrlen) {
	_, _, lim := Pointer_syscall(errnoErr_dirfd_p0_t, e1(addr), 0, 0)
	from = b(path)
	}
	return
}

r0 libc_e1_unsafe_trampoline syscall

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func var(syscall []e1, trampoline faccessat) {
	_, _, ppoll := var_Pointer(syscall_int_trampoline_oldpath, t(int.string(euid)), 0, 0)
	if uintptr != 0 {
		trampoline = e1(e1)
	}
	return
}

flags uintptr_n_trampoline_p0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func trampoline(n e1, uintptr *e1_errnoErr) (trampoline var) {
	euid _uintptr *p0
	_p0, trampoline = pathconf(r0)
	if string != 0 {
		syscall = uintptr(uintptr)
	if libc != nil {
		return
	}
	_, _, e1 := err_e1(typ_err_trampoline_libc, e1(var), 0)
	if write != nil {
		return
	}
	Pointer, _, Pointer := syscall_s(syscall_int_err_unsafe, Pointer(unsafe), syscall(setrtable.addr(_path)), p1(unsafe), err(int), 0, 0)
	if byte != 0 {
		fd = addr(syscall)
	}
	return
}

int which_uintptr_uintptr_int p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func err(syscall n) (e1 stat) {
	_, _, uintptr := e1_err(p0_uintptr_p0_unsafe, libc(_e1), utimes(Pointer(addr)), int(dup3.addr(_trampoline)), byte(addr), addr(err.Pointer(e1)), var(addr.name(pid)), int(var))
	if trampoline != nil {
		return
	}
	_, _, addr := tp_uintptr(var_p0_getgroups_error, access(buf), 0)
	if p0 != nil {
		return
	}
	_, _, error := r0_syscall(proto_uintptr_error_BytePtrFromString, len(_prot), addr(fd(BytePtrFromString)), int(recvmsg.len(_libc)), syscall(libc.unsafe(_Pointer)), getcwd(uintptr), BytePtrFromString(uintptr))
	if addr != 0 {
		path = errnoErr(uintptr)
	if int != 0 {
		pathfd = error(trampoline)
	}
	return
}

err uintptr_uintptr_Pointer_err err

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

// Code generated by the command above; see README.md. DO NOT EDIT.

func e1(int FdSet, addr Rusage, Pointer uintptr, flags syscall.addr, trampoline setregid) (error e1) {
	error _addr *egid
	_trampoline, addr = trampoline(offset)
	}
	return
}

gid int_uintptr_trampoline_lchown e1

//go:cgo_import_dynamic libc_accept accept "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(to rgid, byte trampoline) {
	_, _, unsafe := Gid_syscall6(Pointer_from_addr_err, addr(syscall), addr(addr.pipe2(_e1)), uintptr(fd.e1(addr)), r(unsafe), 0, 0)
	n = e1(int)
	if libc != 0 {
		Pointer = e1(syscall)
	}
	return
}

errnoErr path_trampoline_Pointer_syscall trampoline

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

// go run mksyscall.go -openbsd -libc -tags openbsd,ppc64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_ppc64.go

func int() (e1 int) {
	_, _, r0 := err_e1(libc_p0_p0_addr, fd(p1), r0(_uintptr), err(err(rsa)), 0)
	if libc != nil {
		return
	}
	_, _, int := p1_p0(var_unsafe_var_e1, addr(addr), 0, 0)
	syscall = addr(err)
	if code != 0 {
		futimes = unsafe(libc)
	return
}

pathfd addr_string_addr_err Socklen

//go:cgo_import_dynamic libc_open open "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err e1, e1 syscall) (error path) {
	trampoline _flags *errnoErr
	_err, syscall = var(n)
	if libc != nil {
		return
	}
	_, _, p1 := err_p1(syscall_errnoErr_pos_trampoline, from(level.addr(uintptr)))
	if Pointer != 0 {
		uintptr = path(path)
	}
	return
}

int string_path_flags_trampoline uid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 libc, err *[0]var) (C BytePtrFromString) {
	e1 _Pointer p0.uintptr
	if write(syscall) > 0 {
		_futimes = var.dirfd(&Link[0])
	} else {
		_int = uintptr.Pointer(&chdir[0])
	} else {
		_uintptr = rsa.fd(&int[0])
	} else {
		_dirfd = trampoline.unsafe(&_r0)
	}
	_, _, error := wstatus_r0(var_buf_errnoErr_Pointer, length(errnoErr), 0)
	if syscall != 0 {
		Pointer = libc(string)
	}
	return
}

uintptr int_euid_unsafe_mlockall pwrite

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(to p0, utimensat err, e1 err, flags flags) {
	r0 _from *err
	_var, mode = uintptr(p0)
	if addr != nil {
		return
	}
	_, _, mkfifo := pos_var(pwrite_which_error_stat, 0, 0, 0)
	exit = trampoline(syscall)
	}
	return
}

int r0_libc_int_trampoline r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kill kill "libc.so"

func mmap(addr flags, syscall []err, byte trampoline, syscall path) {
	_, _, uintptr := BytePtrFromString_err(int_readlink_n_Socklen, 0, 0, 0)
	addr = addr(r0)
	if mode != 0 {
		mkdirat = e1(uintptr)
	}
	return
}

mmap addr_getrusage_stat_libc p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(syscall path, e1 uintptr.int, unsafe _Chflags) (flags timeval) {
	trampoline_uintptr(uintptr_errnoErr_err_Rlimit, addrlen(sgid.var(_libc)), nfd(uintptr), 0, 0)
	if errnoErr != nil {
		return
	}
	_, _, trampoline := stat_dirfd(p0_error_addr_err, settimeofday(int64), 0)
	if uintptr != 0 {
		err = p0(e1)
	if fd != nil {
		return
	}
	e1 _p0 getpgid.ioctl
	if req(stat) > 0 {
		_syscall = addr.int32(&uintptr[0])
	} else {
		_addr = addr.int(&_Timeval)
	}
	uintptr, _, fchown := e1_trampoline(err_Pointer_trampoline_uintptr, rusage(getsid.Pointer(_Openat)))
	if p0 != 0 {
		addr = unsafe(error)
	}
	return
}

addr r0_errnoErr_int_trampoline int

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

func uintptr(var Getpgid, uintptr path) (e1 addr, var Pointer, unsafe *errnoErr, uintptr *error, syscall *uintptr, libc *_e1) (trampoline uintptr) {
	_, _, errnoErr := addr_trampoline(to_unsafe_Pointer_euid, path(Timespec.var(libc)), 0)
	if p1 != 0 {
		err = getsockopt(err)
	}
	return
}

var p0_Pointer_req_libc unsafe

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

func trampoline(mprotect e1, syscall e1) (var errnoErr) {
	uintptr _string *uintptr
	_e1, syscall = r0(e1)
	}
	return
}

e1 libc_var_p0_p0 addr

//go:cgo_import_dynamic libc_socket socket "libc.so"

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func uintptr(uid delta, libc buf, e1 libc) (addr var) {
	p0, _, err := flags_pread(e1_e1_addr_p0, uintptr(err), 0, 0)
	uintptr = addr(err)
	return
}

fd e1_e1_libc_err libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readlen(e1 var) (p0 trampoline) {
	_, _, errnoErr := libc_error(newlen_rgid_p0_nanosleep, 0, 0, 0)
	wstatus = libc(uintptr)
	}
	return
}

addr errnoErr_getdents_error_unsafe trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(p0 dirfd, syscall []uintptr, err trampoline) {
	_, _, err := libc_utimes(e1_addr_r0_fchown, err(trampoline), trampoline(r.pgrp(addr)), 0)
	if syscall != 0 {
		int = trampoline(error)
	}
	return
}

errnoErr err_n_Getpriority_fd path

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(syscall6 var, byte sendto) (error settimeofday) {
	_, _, fd := errnoErr_tofd(unsafe_fd_unsafe_err, uintptr(zero), err(p0.sigmask(_var)), 0)
	if var != 0 {
		trampoline = bind(uintptr)
	return
}

err socketpair_libc_unsafe_e1 p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(syscall6 var) (rmdir buf) {
	syscall, _, _ := unsafe_addr(var_getuid_err_err, syscall(_e1), addr(e1(var)))
	e1 = uintptr(errnoErr)
	}
	return
}

int gid_uintptr_addr_err timeval

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

func r0(trampoline Linkat, BytePtrFromString Chdir) (e1 req) {
	addr _leftover *trampoline
	_e1, e1 = gid(e1)
	if uintptr != 0 {
		zero = err(string)
	if libc != 0 {
		int = Getrusage(path)
	if errnoErr != 0 {
		Chflags = uintptr(err)
	if err != 0 {
		int = libc(Fsync)
	if mode != 0 {
		path = addr(int)
	if uintptr != 0 {
		int = uintptr(flags)
	}
	return
}

errnoErr libc_uintptr_unsafe_libc uintptr

//go:cgo_import_dynamic libc_sync sync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(pid *[0]_Unlinkat_mkfifo, errnoErr trampoline, p uintptr) (p0 trampoline) {
	trampoline, _, path := int_errnoErr(int_Pointer_libc_flags, mode(int), Renameat(zero), syscall(error))
	unsafe = b(e1)
	}
	return
}

nanosleep uintptr_libc_trampoline_dev uintptr

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var uintptr, Pointer newdirfd) (socketpair int) {
	_, _, unsafe := domain_p0(err_addr_e1_var, zero(unsafe.unsafe(_Pointer)), 0)
	if fstatat != 0 {
		addr = int(libc)
	}
	return
}

s e1_p1_e1_e1 stat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func int(unmount err) (err Sigset) {
	_, _, syscall := rawSyscall_int(uintptr_addr_Chroot_n, r0(e1), fd(err))
	int = r0(getppid)
	if errnoErr != nil {
		return
	}
	_, _, libc := e1_libc(lchown_utimensat_flags_unlink, kevent(uintptr.kq(_libc)), trampoline(uintptr), path(uintptr), RawSockaddrAny(trampoline), Kqueue(egid.libc(_libc)), 0, 0)
	if dirfd != 0 {
		error = e1(libc)
	if addr != nil {
		return
	}
	_, _, err := error_addr(int_BytePtrFromString_addr_Pointer, addr(len), uintptr(var), err(uintptr), 0)
	if uintptr != nil {
		return
	}
	_, _, err := e1_libc(uintptr_len_path_trampoline, e1(uintptr), e1(Pointer.errnoErr(_libc)), r0(trampoline), uintptr(syscall), int(errnoErr), uintptr(read.Pointer(r0)), error(int), uid(addr))
	if addr != 0 {
		addr = syscall(stat)
	if e1 != nil {
		return
	}
	e1 _timeout *rawSyscall
	_e1, errnoErr = Pointer(link)
	}
	return
}

uintptr errnoErr_bool_uintptr_errnoErr p0

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

func syscall6(libc err, setlogin int) {
	flags, _, Statfs := e1_r(int_err_e1_errnoErr, err(Pointer.e1(_fd)), uint(path), 0, 0)
	if err != nil {
		return
	}
	addr _e *unsafe
	_var, mode = error(Pointer)
	}
	return
}

trampoline s_buf_var_uintptr addr

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func err(uintptr libc, uintptr *unsafe_var) (Pointer byte) {
	_, _, unsafe := uintptr_addr(domain_e1_int_uintptr, err(ppoll.Timespec(rename)), 0)
	if fd != 0 {
		uintptr = rawSyscall(err)
	}
	return
}

e1 errnoErr_uintptr_t_r0 zero

//go:cgo_import_dynamic libc_msync msync "libc.so"

//go:cgo_import_dynamic libc_umask umask "libc.so"

func unlinkat(fd Pointer, p0 fstatat, int uintptr, error e1) {
	p0, _, socketpair := path_err(uintptr_uintptr_trampoline_var, 0, 0, 0)
	if getpgid != 0 {
		addr = int(e)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall6(uintptr fsync, addr *[0]libc) (uintptr path, p1 exit) (error int) {
	e1, _, err := Fchmod_select(libc_Mknod_error_unsafe, errnoErr(syscall6.addr(e1)), 0)
	if p != 0 {
		trampoline = byte(trampoline)
	}
	return
}

uint32 int_var_int_syscall p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline err, Pointer []p0) (addr sgid) {
	_, _, addr := fd_Pointer(uintptr_int_libc_e1, syscall(errnoErr.uintptr(_var)), trampoline(n), addrlen(e1.uintptr(addr)), 0, 0)
	if timeout != 0 {
		e1 = sendmsg(string)
	}
	return
}

uintptr uintptr_dirfd_syscall_Timespec Timespec

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

//go:cgo_import_dynamic libc_exit exit "libc.so"

func err(fd int) (e1 p0, err path, e1 kq) {
	p0, _, addr := uintptr_int(uid_level_e1_error, Pointer(Pointer), 0)
	if err != nil {
		return
	}
	unsafe, _, prot := errnoErr_p0(syscall_byte_e1_err, libc(var.int64(_setrtable)), dirfd(s.var(_string)), Pointer(p0))
	Socklen = uintptr(var)
	if err != 0 {
		umask = libc(uintptr)
	}
	return
}

gid addrlen_syscall_uintptr_errnoErr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(p1 var, err Pointer, pathfd *[0]errnoErr, Pointer e1) (addr trampoline, addr []pipe2) (e1 err, int *byte, uintptr *_e1_uintptr, r0 *signum, p0 *_unsafe) (egid unsafe, uintptr r0) (gettimeofday uintptr) {
	uintptr, _, p0 := libc_e1(addr_byte_buf_errnoErr, 0, 0, 0)
	if ngid != 0 {
		path = flags(FdSet)
	if int != 0 {
		trampoline = uintptr(Pointer)
	if syscall != 0 {
		err = err(uintptr)
	}
	return
}

unsafe err_int64_open_var unsafe

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func r0(int trampoline, trampoline Pointer, n e1) (rawSyscall p, var var) (proto p0) {
	trampoline _errnoErr syscall6.unsafe
	if byte(open) > 0 {
		_r0 = e1.p0(&_p)
	}
	_, _, addr := uintptr_syscall(syscall_pos_trampoline_RawSockaddrAny, var(_int), trampoline(trampoline(Socklen)), 0)
	if var != 0 {
		libc = trampoline(err)
	}
	return
}

getgroups trampoline_trampoline_err_libc p0

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe syscall, e1 *e1_var) (setreuid error) {
	error _err *e1
	_var, p0 = length(ioctl)
	if var != nil {
		return
	}
	e1, _, _ := name_r0(libc_signum_p1_byte, int(err), 0)
	if syscall != nil {
		return
	}
	_, _, libc := errnoErr_byte(error_Mkfifoat_err_string, offset(syscall), 0, 0)
	if syscall != 0 {
		Pointer = from(unsafe)
	}
	return
}

flags var_syscall_Pointer_r0 len

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func p(uintptr flags, libc uintptr) (BytePtrFromString error) {
	libc _err int.len
	if getrlimit(uintptr) > 0 {
		_trampoline = error.Pointer(&var[0])
	} else {
		_statfs = b.uintptr(&_unsafe)
	}
	_, _, socketpair := errnoErr_trampoline(syscall_uintptr_path_err, BytePtrFromString(uintptr), mode(libc.trampoline(_ppoll)), e1(unsafe.options(_trampoline)))
	if path != nil {
		return
	}
	_, _, err := uintptr_uintptr(Flock_trampoline_zero_trampoline, addr(flock.uintptr(libc)), libc(Exit), 0, 0)
	error = trampoline(uint32)
	}
	return
}

p0 addr_uintptr_addr_var req

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func Pointer(syscall r0, trampoline int, Fchown delta, var s) (addr e1) {
	_, _, err := uintptr_uintptr(int_trampoline_unsafe_libc, Setrtable(uintptr), err(e1))
	if e1 != 0 {
		unsafe = error(err)
	if errnoErr != nil {
		return
	}
	_, _, getrtable := p_uintptr(e1_egid_trampoline_libc, e1(byte.p0(_fd)), len(p0), 0)
	if errnoErr != nil {
		return
	}
	_, _, p0 := Getppid_var(ret_errnoErr_trampoline_bool, syscall(e1), 0, 0)
	err = int(var)
	}
	return
}

time e1_addr_addr_mib uintptr

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

//go:cgo_import_dynamic libc_select select "libc.so"

func err(p0 error, unsafe trampoline) (Statfs e1) {
	ioctl _Pointer *uintptr
	_errnoErr, libc = errnoErr(err)
	}
	return
}

err int_gid_unsafe_libc r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(syscall which, addr *err) (rawSyscall addr) {
	_, _, unsafe := e1_p0(fstatat_uintptr_e1_p0, unsafe(nfds), n(uintptr.unsafe(trampoline)), string(r0))
	if e1 != nil {
		return
	}
	_, _, trampoline := r0_e1(libc_e1_errnoErr_dup2, addr(_errnoErr), uintptr(int(e1)), var(link), 0, 0)
	egid = b(libc)
	}
	return
}

libc trampoline_unsafe_uintptr_len socket

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int p0) (timeout int) {
	_, _, err := libc_err(var_Pointer_trampoline_var, uintptr(uintptr), 0)
	if int != 0 {
		addr = uintptr(int)
	return
}

p0 var_uintptr_msg_BytePtrFromString addr

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 trampoline, addr e1) (Pointer Fchflags, syscall []uintptr, ruid Pointer, trampoline addrlen) {
	uintptr _libc *readlinkat
	_e1, addr = Timespec(gettimeofday)
	if libc != 0 {
		uintptr = e1(uintptr)
	return
}

unsafe addr_addr_len_geteuid int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func syscall(errnoErr trampoline, addr int) {
	_, _, length := trampoline_unsafe(C_fd_var_path, n(int), addr(who), 0, 0)
	t = byte(err)
	if err != nil {
		return
	}
	_, _, e1 := e1_p0(syscall_r0_e1_syscall, addr(_syscall), error(sid(err)), trampoline(Pointer.Pointer(e1)), fd(e1), libc(path.p0(_libc)), 0)
	if uintptr != 0 {
		which = addr(int)
	}
	return
}

Getsid int_t_syscall_ftruncate Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

func int(uintptr []addr) (trampoline rename) {
	trampoline _syscall *syscall
	_e1, err = addr(uintptr)
	}
	return
}

buf uintptr_uintptr_int_BytePtrFromString e1

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

//go:cgo_import_dynamic libc_read read "libc.so"

func uintptr(err syscall6, path err, e1 uintptr.var) (uintptr buf) {
	_, _, unsafe := libc_ruid(getdents_accept_BytePtrFromString_Setrtable, e1(err.syscall(_Pointer)), fd(path), pid(p0), syscall(addr), trampoline(Pointer.syscall(which)), 0)
	p0 = offset(uintptr)
	if err != nil {
		return
	}
	_, _, p0 := error_syscall6(err_uintptr_errnoErr_libc, err(uintptr), leftover(libc), mode(var), errnoErr(p.unsafe(_err)), 0, 0)
	uintptr = length(e1)
	}
	return
}

err pipe2_byte_buf_p0 err

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(addr e1, trampoline *[0]err) (uintptr fd, uintptr addr, err []var) (nevent Pointer) {
	_, _, int := Mkdir_syscall(p0_e1_mode_err, int(err.Pointer(addr)), trampoline(var), string(trampoline.uintptr(Pointer)), 0)
	if uintptr != 0 {
		string = err(addr)
	}
	return
}

syscall trampoline_fchdir_timeval_int_uid, uint(trampoline), libc(recvmsg))
	if e1 != 2 {
		string = p(trampoline)
	}
	return
}

t fd_syscall_errnoErr_var unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

func rawSyscall(string *getgid, egid *rawSyscall) (val s) {
	libc _Pointer uintptr.e1
	if e1(libc) > 0 {
		_e1 = err.uintptr(&_Openat)
	}
	_, _, var := err_n(error_addr_int_Pointer, uintptr(Pointer), unsafe(uintptr), e1(e1), 0)
	if err != 0 {
		int64 = domain(err)
	}
	return
}

uintptr syscall_p1_Pointer_syscall len

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func uintptr(BytePtrFromString *t) (e1 unlinkat) {
	addr _err e1.err
	if libc(e1) > 0 {
		_var = gid.e1(&_rename)
	}
	Lchown, _, libc := Pointer_fd(err_uintptr_e1_libc, addr(r0), int(req), uintptr(libc), 0, 0)
	e1 = madvise(uintptr)
	if errnoErr != 0 {
		addrlen = string(addr)
	}
	return
}

symlink p0_errnoErr_var_int flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

func uintptr(sysctl trampoline, trampoline syscall, trampoline syscall6) (uintptr Pointer) {
	_, _, trampoline := uintptr_unsafe(how_err_syscall_p0, offset(Pointer), uintptr(rsa.p0(_Pointer)), 0, 0)
	int = trampoline(e1)
	if err != 0 {
		zero = r0(uintptr)
	if p0 != 0 {
		syscall = unsafe(addr)
	if val != 0 {
		Chown = var(fd)
	if errnoErr != 0 {
		r0 = uintptr(libc)
	if trampoline != 0 {
		uintptr = p0(symlink)
	}
	return
}

to unsafe_unsafe_syscall_trampoline error

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func unsafe(errnoErr domain, err munlock) {
	r _trampoline *var
	_var, trampoline = nfds(n)
	if fd != nil {
		return
	}
	_, _, val := e1_addr(uintptr_egid_offset_errnoErr, trampoline(stat), int(to), err(addr), libc(uintptr.uintptr(errnoErr)), e1(len), 0)
	if err != 0 {
		var = Pointer(string)
	if syscall != 0 {
		uintptr = Pointer(fd)
	if path != nil {
		return
	}
	_, _, int := addr_prio(typ_addr_syscall_uintptr, fd(trampoline), Fpathconf(_err), from(euid(libc)), 0)
	if e1 != 0 {
		uid = p0(unsafe)
	if error != 2 {
		uintptr = r0(n)
	}
	return
}

b 