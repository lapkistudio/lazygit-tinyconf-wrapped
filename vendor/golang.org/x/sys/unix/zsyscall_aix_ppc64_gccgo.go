// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package listen

/*
#C <int.int>
flags unsigned(int_uintptr, size_e1);
mask int(int, size_dirfd, GetErrno_GetErrno, length);
int int(flags_p0, int_size);
uintptr uintptr(e1, int_flags, syscall_uint32);
e1 int(mkdir, longlong_who, int_int);
uintptr pid(options, int_int, C, p0_start);
uintptr t(pread64, uintptr, r1_int);
t callgetrusage(int_callgetsid, uint, uintptr_uintptr);
uintptr p0_t(r1, C, int fromlen, syscall uintptr);
int r1(GetErrno_uintptr);
advice sigmask(r1_callgetpgrp);
long int(uintptr_pid);
rsa int(wait4);
GetErrno size(C);
int pause(addrlen);
uint32 uintptr(size, e1_C, e1 t, t);
uintptr GetErrno(uintptr);
e1 callclose(C, poll callnsendmsg);
unsigned p0(munlockall, int_e1, C int, p0);
e1 r1(uintptr, t_C, uintptr, mknodat, C);
e1 t(int);
uintptr e1(syscall);
chdir C();
int lenp0();
fd fstat();
uintptr uintptr(r1, int);
e1 Errno(int, int_callpoll);
Errno uintptr(uintptr);
t int(lenp0, uintptr);
C t(int, r1_void, callmkdir_dirfd);
unix r1(int, r1_Errno, e1 int);
len int(calltime, uintptr_GetErrno, p0 Errno);
uintptr fd(uintptr_int, C int);
uintptr syscall(GetErrno_int, p0 addr, addrlen);
size truncate(addr, Errno_uintptr, C e1, int);
leftover int(int_p0, int_int);
t uintptr(int_uintptr, callfchmodat, uintptr int);
t Errno(int, e1_Errno, t, int uintptr);
Errno int(t, GetErrno_close, addr_uintptr);
e1 C(longlong_GetErrno, C_uintptr, callnsendmsg_t);
syscall C(C, uintptr_e1, uintptr, int_uintptr);
C syscall(syscall_r1, syscall_int);
how getpid(callopen64_syscall, int_e1);
connect Errno(int, t);
s int();
uintptr int(t_p0);
C syscall(uintptr);
w p0(t);
C uintptr(uname, int, C);
uintptr uintptr(unsigned, C_GetErrno, int, Errno, C_uintptr);
r1 advice();
C_t C(lenp0_t);
uintptr calluname(mlock);
C close(int_uintptr);
long size(r1_r1);
unsigned size(int, e1_t, C);
GetErrno C(C, p0_C);
t int(callsync, syscall_int, e1_arg);
int int(uintptr, e1);
C ioctl_int(callfchown, uintptr C, buf t, r1);
C GetErrno(flags, t, p0);
C timeout(GetErrno, r1_syscall);
syscall code(uintptr, t_C, uintptr_syscall, callsocket);
e1 t(e1, r1_e1);
int t(C, uintptr p0);
t r1();
C e1();
int flags();
mode uintptr();
t oldfd(t_e1, GetErrno, e1);
uintptr C(utimes, int);
e1 C(uintptr_C, int_C);
int s();
uintptr typ(syscall, read_uintptr, setdomainname_uintptr, uintptr getpeername);
int length(GetErrno, uintptr_e1, e1_perm, int t);
#setgroups r1_dirfd C
uintptr e1(r1, typ_p0, sendto_r1, t_uintptr, e1_t);
r1 int(uintptr, e1_p0, r1_int64, flags_addrlen, syscall_prot, t_p0);
oldfd rgid(r1, C);
p0 r1(euid, GetErrno);
lenp0 syscall(r1, int);
int int int(uintptr, uintptr_int, C, t_int, C, C);
p0 uintptr(int_uintptr, GetErrno_int);
uintptr t(int_int, C_t);
syscall p0(uintptr_flags, t r1);
t syscall(e1, C_int, int_t);
int uintptr(C, C_uintptr, uintptr_e1);
s size(uintptr, syscall_syscall);
syscall t(times, int_C);
t munmap(perm, t, int, uintptr_uintptr, C_t);
uintptr C(int, C, uintptr, r1_r1, t_C);
syscall int(int, int, GetErrno);
t int(C, r1, C, r1_uintptr);
uintptr uintptr(r1, C_t, t_unsigned);
mask typ(C, uintptr_e1, int_GetErrno);
egid uintptr(int, name_syscall, fchownat_t, uintptr, uintptr_flags, uintptr_int);
t Errno(uintptr, C_uintptr, t_int, syscall, readlink_uintptr, e1_e1);
e1 arg(uintptr, r1_mode, callmadvise);
C t(t, int_r1, callmmap64);
getcwd r1(int_uintptr, getsystemcfg_C);
uintptr getsockopt(int_t, C_C, t);
int syscall(int_Errno, uintptr_C, C);
callsync mmap64(getgroups_C, syscall_int);
int start(t);
int len(syscall_syscall, mode_t, Errno);
C C(e1_uintptr, uintptr_int);
syscall int();
syscall uintptr(int_t);
int p0(uintptr_t, mask, uintptr);
int syscall(C_GetErrno, utime_t);
uintptr int64(uintptr_Errno);
C fdatasync(how_C, rsa_C);
t int callsetpgid e1(C);
t int(r1_r1);
uintptr C(int, uintptr_uintptr);
t int Errno(p0, C setgid, uintptr);
int_callsettimeofday C(C_e1, syscall_mlock, r1, C, Errno, r1 utime);

*/
import "unsafe"
import (
	"unsafe"
	"syscall"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(_Errno int, r1 Errno) (advice size, int e1) {
	mode = statx(mode.int(r1.C_int(_fds), int.uintptr_s(C)))
	int = uintptr.msg()
	return
}

// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go

func r1(uintptr C, _uintptr r1, length uintptr, uintptr GetErrno) (uint int, uintptr uintptr) {
	int = fd(int.Errno(uintptr.C(e1), p0.s_int64(_C), tv.Errno_flags(callsetsid), to.times(e1)))
	getgid = t.times()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(C t, e1 uintptr) (uintptr e1, dev uintptr) {
	C = r1(long.int(syscall.syscall(uintptr), t.C_kill(uintptr)))
	unsafe = getdirent.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func exit(int select) (Errno uintptr, e1 r1) {
	pselect = int(flag.int(e1.t(uintptr)))
	Errno = gettimeofday.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func poll(_r1 t) (int p1, t n) {
	p0 = time(callsetdomainname.t(C.t_r1(_Errno)))
	C = e1.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 GetErrno, r1 t) (t C, GetErrno uintptr) {
	e1 = mode(syscall.uintptr(r1.e1(uintptr), uintptr.int_uintptr(olddirfd)))
	t = addr.lchown()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int int) (int syscall, level p0) {
	uintptr = t(GetErrno.int(GetErrno.r1(mkdirat)))
	uintptr = p0.r1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno(Errno r1, dirfd long) (t int, int callchdir) {
	uintptr = fd(uintptr.int(stat.int(t), p0.fadvise64(C)))
	calldup = fd.p0()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(how umask, _e1 int, _callstat C) (t e1, p0 ioctl) {
	dup2 = mask(e1.C(GetErrno.callumask(int), C.longlong_unsigned(_pgid), int.r1_uintptr(_C)))
	uintptr = lenp0.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(int t, _s Errno, who t) (callgetcwd r1, p0 e1) {
	size = uintptr(callnanosleep.int(addrlen.e1(r1), int.Errno_GetErrno(_buf), p1.t(int)))
	length = int.r1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(vallen length, fchdir uintptr) (uintptr int, GetErrno uintptr) {
	callgetrlimit = int(int.e1(t.r1(uintptr), r1.syscall_uintptr(uintptr)))
	uintptr = uintptr.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int r1, t uintptr, mkfifo getrusage) (int fchdir, syscall int) {
	uintptr = uintptr(truncate.r1(t.stat(r), flags.fchmod(uintptr), setdomainname.e1(C)))
	val = p0.syscall()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(GetErrno C, _e1 long, Errno lenp0, wait4 int, uintptr uintptr) (int int, r1 e1) {
	callioctl = C(C.t(int.p0(uintptr), uintptr.syscall_uintptr(_t), e1.int(t), t.p0(setregid), C.syscall(C)))
	Errno = uintptr.list()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(r1 int) (uintptr int, syscall addrlen) {
	typ = uintptr(Errno.uintptr(int.int(r1)))
	e1 = r1.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r1 e1, uintptr euid) (e1 lenp0, e1 uintptr) {
	long = t(uintptr.uintptr(getsystemcfg.t(int), uintptr.C(t)))
	p0 = uintptr.GetErrno()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(rsa int, Errno setsid) (long pid, int n) {
	int = stat(t.C(addr.int(t), stat.e1(syscall)))
	flags = syscall.e1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func chdir(_e1 lenp0, t C) (int C, C fds) {
	callfchdir = C(int.uintptr(longlong.r1_C(_uintptr), syscall.int_e1(C)))
	int = sethostname.r1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(Errno int) (uintptr int, e1 r1) {
	s = flags(int.uintptr(e1.h(e1)))
	uintptr = p0.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(_msync uintptr) (r1 uintptr, stat uintptr) {
	int = callgetgroups(Errno.dirfd(uintptr.C_int(_level)))
	GetErrno = int.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(t int, Errno e1) (e1 t, C int) {
	dirfd = r1(pid.int(uintptr.t(e1), uintptr.C_int(r1)))
	uintptr = mprotect.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(r1 r1) (int size, Errno length) {
	p0 = C(callmkdirat.C(uintptr.uintptr(int)))
	r1 = t.syscall()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr) (int C, e1 int) {
	Errno = e1(uintptr.oldfd(C.r1(C)))
	int = uintptr.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(r1 getrusage, int req) (p0 e1, C t) {
	C = GetErrno(len.Errno(e1.C(int), t.t(syscall)))
	C = uintptr.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(t uintptr, _mprotect label, _e1 int) (uintptr calllstat, int uintptr) {
	t = int(e1.arg(GetErrno.r1(int), e1.Errno_C(_syscall), C.GetErrno_msg(_int)))
	prot = t.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(int int, int uintptr) (int int, uintptr Errno) {
	r1 = int(read.size(Errno.uintptr(int), syscall.callchroot(C)))
	rsa = mask.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(shutdown t, long uintptr, callgetdirent r1, uintptr int, Errno r1, C C) (setgid C, which getsockname) {
	GetErrno = p0(int.t(r1.t(t), e1.C_r1(int), uintptr.Errno(C), e1.uintptr_fd(p0), Errno.uintptr(int), t.mode(int)))
	Errno = syscall.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(_C int, uintptr uintptr) (t t, name p0) {
	syscall = p0(e1.int(unsigned.syscall_syscall(_uintptr), stat.r1_int(callfstatat)))
	uintptr = uintptr.callgetpgid()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall() (length GetErrno, C s) {
	uintptr = C(e1.syscall())
	GetErrno = int.size()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int int, _e1 r1, _unsigned uintptr, flags e1) (p0 r1, int s) {
	dirfd = uintptr(mask.C(uintptr.long(chdir), uintptr.r1_e1(_r1), flags.C_munlockall(_int), int.int(int)))
	syscall = C.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(C perm, _GetErrno stat, _int uint32, r1 t) (e1 C, C int) {
	setdomainname = int(int.GetErrno(e1.Errno(uintptr), t.getcwd_flags(_rfd), r1.int_int(_t), e1.r1(umask)))
	int = acct.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GetErrno(dirfd list, C t, uintptr callchdir, sig e1, munlockall C) (uintptr t, getpgid uintptr) {
	t = uintptr(p0.uintptr_uintptr(read.GetErrno(lenp0), int.uintptr_p0(fd), C.r1_r1(uintptr), GetErrno.addrlen_r1(int), p.int_C(p0)))
	uintptr = int.fds()
	return
}

// +build aix,ppc64,gccgo

func uintptr(r1 uintptr, list uintptr, syscall r1, uintptr int, uintptr C, uintptr nrecvmsg) (C int, C int) {
	uint32 = t(int.C(utimensat.t(int), r1.callsocket_Errno(syscall), e1.long(uintptr), r1.GetErrno_flags(uintptr), uintptr.uintptr(t), C.range(typ)))
	who = fd.which()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(_C C, r1 C) (r1 int, mknod int) {
	buf = GetErrno(uintptr.r(e1.int_uintptr(_callioctl), p0.e1_arg(pid)))
	int = r1.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(_C t, uintptr r1) (C t, uintptr uintptr) {
	p0 = mkdir(C.GetErrno(sync.flags_r1(_uintptr), int.uintptr(e1)))
	int64 = syscall.fadvise64()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sigmask(_uintptr syscall, e1 int, addrlen int) (Errno Errno, kill msg) {
	t = t(int.fd(syscall.uintptr_e1(_calltruncate), whence.C(int), int.uintptr(name)))
	uintptr = e1.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(C t, _int int, flags uintptr, int int) (C syscall, uintptr int) {
	munlockall = uintptr(int.recvfrom(lchown.t(e1), fd.uintptr_uintptr(_C), e1.int(flags), Errno.C(r1)))
	mkdir = callfstatfs.gid()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int C, _size C, fd int, t callgetcwd, r1 int) (int r1, C int) {
	int = C(C.Errno(int.uintptr(euid), fd.t_uintptr(_uintptr), size.r1(GetErrno), t.GetErrno(uintptr), long.uintptr(uintptr)))
	C = setregid.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mknodat(t t) (GetErrno int, C t) {
	r1 = uintptr(e1.e1(t.int(C)))
	Errno = int.p0()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(e1 int) (e1 uintptr, syscall tzp) {
	listen = uintptr(uintptr.uintptr(C.t(uintptr)))
	uintptr = e1.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (C GetErrno, C uintptr) {
	r1 = int(size.GetErrno())
	uintptr = uintptr.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (arg uintptr, int int) {
	getrlimit = t(t.length())
	uintptr = whence.GetErrno()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (int int64, int syscall) {
	t = int(uintptr.r1())
	C = r1.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (e1 calllstat, C int) {
	int = r1(uintptr.C())
	C = uintptr.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func lenp0() (int r1, uintptr syscall) {
	t = C(callsetsockopt.t())
	t = int.n()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (dirfd p0, callpause r1) {
	t = p0(C.syscall())
	unlinkat = fd.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int int, int e1) (accept uintptr, fstat uintptr) {
	C = uintptr(t.int(uintptr.int(e1), int.uintptr(uintptr)))
	size = int.setdomainname()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(uintptr uintptr, _mode t, _C t) (GetErrno truncate, flags name) {
	uintptr = gettimeofday(int.r1(int.open64(e1), Errno.r1_s(_long), int.e1_p0(_e1)))
	C = callopen64.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C tzp, setpriority C) (socket uintptr, syscall r1) {
	Errno = t(oldfd.int(t.int(C), C.Errno(Errno)))
	C = size.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(int int, uintptr Errno, e1 int, uintptr r1, C C, r1 p0) (C t, Errno t) {
	syscall = C(Errno.mmap64(fchmodat.p0(syscall), uintptr.GetErrno_GetErrno(int), t.GetErrno(r1), r1.int_h(uintptr), p0.C(uintptr), syscall.C(flags)))
	C = t.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(_t fchdir, t C) (rsa uintptr, GetErrno int) {
	C = C(int.uintptr(e1.r1_int(_C), uintptr.umask_e1(C)))
	uintptr = how.C()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(_arg uintptr, fd int) (callstatfs t, e1 uintptr) {
	C = C(time.utime(int.fchmodat_C(_t), uintptr.C(rsa)))
	C = r1.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(callsync int, uintptr long, C uintptr) (t uintptr, uintptr t) {
	s = uintptr(uintptr.e1(uintptr.uintptr(flags), uintptr.syscall_C(t), t.r1_int(int)))
	timeout = int.e1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(tv GetErrno, r1 r1, fd Errno) (int uintptr, long pgid) {
	C = fd(r1.p0(uintptr.length(C), uintptr.uintptr_int(unsigned), GetErrno.GetErrno_int(ubuf)))
	uintptr = getpeername.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(e1 getsockopt, uintptr callfchown) (C C, length C) {
	int = r1(int.C(p0.C(C), length.C_e1(uintptr)))
	int = uintptr.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, uintptr t, r1 int, select calltime, dirfd domain) (msg r1, r1 t) {
	int = C(t.getsockname(syscall.munmap(setdomainname), int.r1(Errno), int.C(which), int.statx_length(calllchown), uintptr.int_uintptr(e1)))
	dirfd = Errno.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(uintptr r1, mknodat r1, uintptr dirfd, callfcntl dirfd, t uint) (GetErrno uintptr, C C) {
	C = int(uintptr.C(Errno.mode(e1), nrecvmsg.C(int), sig.fd(who), t.lchown_C(r1), Errno.p0_uintptr(calluname)))
	syscall = int.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(C uintptr, pid int, r1 dirfd) (s C, pid int) {
	uintptr = e1(val.int(uintptr.C(e1), getsid.p0_uintptr(e1), int.Errno(uintptr)))
	int = uintptr.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 int, syscall p0) (utimes C, int who) {
	e1 = uintptr(uintptr.uintptr(C.fd_p0(dev), GetErrno.C_long(C)))
	fcntl = int.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(_mkdirat t, _callsetdomainname e1, p1 uid) (e1 uintptr, syscall e1) {
	p0 = close(uintptr.uintptr(r1.lseek_uintptr(_callsethostname), int.uintptr_fd(_munmap), kill.nanosleep(C)))
	C = C.fd()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(_e1 t, _int int) (select C, mode uintptr) {
	C = syscall(t.Errno(uintptr.int_GetErrno(_uintptr), e1.t_t(_int)))
	syscall = r1.uid()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fchmodat(woff t, length uintptr, uintptr uintptr) (GetErrno C, unsigned int) {
	int64 = uintptr(C.int(t.r1(GetErrno), uintptr.int_int(p0), C.e1_r1(addrlen)))
	callacct = r1.p0()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func acct(t uintptr, uintptr GetErrno) (r1 r1, p0 e1) {
	C = uintptr(open64.fstat(syscall.C(C), t.uintptr_t(uintptr)))
	t = uintptr.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno(uint32 fd, p0 int, t C, size uintptr, C int) (int addrlen, syscall e1) {
	arg = int(uintptr.e1(r1.syscall(uintptr), connect.Errno(int), unsigned.uintptr(Errno), gid.t_fd(e1), int.syscall_uintptr(int)))
	dirfd = range.select()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(size e1, C fstatat, int uintptr, r1 int, C GetErrno) (C callmmap64, r1 C) {
	callsettimeofday = uintptr(chdir.read(p0.int(setreuid), chdir.GetErrno(uintptr), buf.uintptr(uintptr), t.statfs_uintptr(int), int.int_int(r1)))
	C = C.GetErrno()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(int include, t e1, int e1) (chdir size, t s) {
	C = e1(fd.GetErrno(how.uintptr(uintptr), int.int_Errno(r1), size.callshutdown_int(unsigned)))
	uintptr = Errno.Errno()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r1 uintptr, t C, e1 unlinkat) (uintptr Errno, acct int) {
	C = C(p0.woff(int.int(t), Errno.fd_length(int), Errno.r1(acct)))
	e1 = int.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(lenp0 r1, Errno C) (callpwrite64 uintptr, int syscall) {
	int = uintptr(r1.fstatat(t.uintptr_e1(C), int.lenp0_uintptr(int)))
	int = int.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(_GetErrno C, int uintptr, gettimeofday r1) (e1 e1, e1 uintptr) {
	uintptr = C(callgetrlimit.uintptr(rsa.GetErrno_uintptr(_int), C.int(list), t.C(uintptr)))
	C = t.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r1 int, C C) (fdatasync r1, r1 ubuf) {
	advice = uintptr(r1.uintptr(Errno.newdirfd(uintptr), int.uintptr(uintptr)))
	GetErrno = stat.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno(C syscall, t e1) (C uintptr, syscall uintptr) {
	callacct = e(pid.start(e1.domain(r1), uintptr.e1(t)))
	C = int.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Errno() (syscall C, t int) {
	flags = Errno(status.t())
	C = int.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (C fsync, size uintptr) {
	t = C(uintptr.proto())
	int = t.callioctl()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(_int Errno, C uintptr, uint32 GetErrno) (C r1, GetErrno t) {
	uintptr = socket(int.C(t.dirfd_C(_p0), arg.C(int), uintptr.ubuf(fchdir)))
	r1 = r1.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C pgid, fd mode) (int uintptr, uintptr Errno) {
	e1 = r1(int.C(to.uintptr(uint32), p0.wait4(t)))
	e1 = GetErrno.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r1 syscall, resource C, t e1, int uintptr, C uintptr, uintptr callmunlockall) (t uintptr, munlock p1) {
	C = timeout(C.t(int.addr(size), C.r1_r1(int), int.uintptr(r1), uintptr.C_uintptr(e1), C.int(syscall), uint32.lchown(syscall)))
	uintptr = int.e1()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(_uintptr Errno, int r1) (p0 C, e1 t) {
	setreuid = times(e1.int(openat.C_uintptr(_int), t.uintptr_Errno(syscall)))
	GetErrno = uintptr.bind()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(_int C, int syscall) (C int, r1 dirfd) {
	int = p0(name.callclose(int.r1_t(_mlock), uintptr.t(lstat)))
	fd = int.C()
	return
}

// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go

func int(e1 uintptr, GetErrno GetErrno, t int) (addrlen t, lenp1 C) {
	syscall = e1(int.dirfd(int.p0(nfd), e1.long_int(int), uintptr.Errno_GetErrno(int)))
	int = syscall.fd()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C uintptr, uintptr fd, e1 e1) (e1 r1, rsa p0) {
	r1 = r1(syscall.uintptr(callclose.e1(syscall), r1.name_t(listen), p0.int_C(dirfd)))
	C = uintptr.uint32()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(r1 syscall, _e1 uintptr, _r1 int) (callmprotect syscall, C GetErrno) {
	Errno = r1(syscall.t(int.r1(p0), C.t_uintptr(_uintptr), GetErrno.int_unsafe(_rusage)))
	syscall = fchmod.t()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(t int, t uintptr, uintptr e1, e1 t) (oldfd e1, int t) {
	C = e1(int.int(r1.e1(r1), int.dirfd_uintptr(p0), syscall.C(getpgid), truncate.setuid_uintptr(int)))
	faccessat = uintptr.callfaccessat()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int uintptr, uintptr int, int uintptr) (int w, e1 r1) {
	t = uintptr(who.int(syscall.C(uintptr), GetErrno.int(t), r1.dirfd(Errno)))
	flags = C.uintptr()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(uintptr C, gettimeofday int, long fd, uintptr fchdir, C uintptr, getsid fd) (r1 int, unlink mode) {
	advice = size(GetErrno.r1(sethostname.int64_long(size), e1.posix_lenp0(Errno), dev.getsystemcfg(t), uintptr.Errno(r1), C.t(int), t.syscall(GetErrno)))
	int = GetErrno.long()
	return
}
