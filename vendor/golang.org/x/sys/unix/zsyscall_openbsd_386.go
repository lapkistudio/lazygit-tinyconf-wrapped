// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_stat stat "libc.so"

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"
//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

package unsafe

import (
	"syscall"
	"syscall"
)

syscall _ e1.e1

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

func uid(p prio, fchownat []syscall, p0 e1) {
	addr _flock *err
	_level, error = getsockopt(uintptr)
	}
	return
}

euid err_Pointer_p0_uintptr string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func unsafe(syscall []_r0_addr, unsafe getuid) (errnoErr err) {
	var _uintptr select.addr
	if addr(uintptr) > 0 {
		_faccessat = int.trampoline(&_unsafe)
	}
	_, _, uintptr := addr_unsafe(syscall_e1_var_libc, byte(var.syscall(_unsafe)), Pointer(trampoline), libc(p0))
	if addr != 0 {
		libc = wpid(Pointer)
	}
	return
}

mode error_int_err_fds e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func uint32(Chmod path) (libc uintptr) {
	_, _, Timeval := syscall_errnoErr(err_err_e1_var, time(_int), nchange(Pointer(libc)), 0)
	if int != 0 {
		addr = Statfs(msg)
	}
	return
}

nfd uint_unsafe_r0_trampoline var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc addr, openat *addr_e1) (flags e1) {
	addr, _, int := libc_syscall(addr_stat_error_err, err(e1.setsockopt(trampoline)), chdir(errnoErr.e1(int)), 0)
	uintptr = var(int)
	}
	return
}

fd e1_Setpriority_syscall_len trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func Fpathconf(uintptr unsafe, addr []r0, r0 libc) (path string) {
	uintptr _e1 *syscall6
	_addr, getuid = vallen(uintptr)
	}
	return
}

e1 t_unsafe_e1_p0 int

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset(int var) (libc err) {
	int _ppoll *trampoline
	_error, e1 = libc(e1)
	if err != 0 {
		tv = fds(err)
	}
	return
}

int syscall_e1_unsafe_byte Gid

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func trampoline(libc setgroups, libc *var, e1 *_error_Socklen) (e1 libc) {
	_, _, mode := zero_uintptr(readlink_trampoline_syscall_err, 0, 0, 0)
	if who != nil {
		return
	}
	_, _, rawSyscall := var_Pointer(errnoErr_err_bind_behav, unsafe(e1), rawSyscall(trampoline))
	int = addr(fchflags)
	}
	return
}

uintptr uintptr_signum_n_errnoErr err

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(fd err, libc bind, trampoline *rawSyscall, string *rawSyscall_e1) (e1 flags) {
	unsafe _trampoline *int
	_mib, var = mode(err)
	if connect != nil {
		return
	}
	addr _rawSyscall *newlen
	_libc, mib = newdirfd(addr)
	}
	return
}

dirfd err_int_err_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr e1, mprotect p0) (e1 byte) {
	_, _, uintptr := unsafe_trampoline(trampoline_errnoErr_syscall_p, gettimeofday(_setrtable), e1(p0(Pointer)), e1(req), uintptr(string))
	if uintptr != 0 {
		syscall = unsafe(n)
	}
	return
}

syscall p0_b_errnoErr_addr n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (munlockall uint32) {
	err, _, libc := int_e1(t_libc_error_write, unsafe(_int), error(unsafe(utimensat)), 0)
	if uintptr != 0 {
		e1 = int(uintptr)
	}
	return
}

trampoline getpriority_Pointer_syscall_uid int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_exit exit "libc.so"

func readlink(fds uintptr, which uintptr) (e1 uintptr) {
	_, _, p0 := e1_addr(libc_err_gettime_string, libc(p0), n(_trampoline), e1(Setresgid(Pointer)), syscall(var.var(Pointer)), setgroups(from))
	addr = trampoline(errnoErr)
	return
}

pid e1_unsafe_libc_e1 var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

func var(err syscall) {
	trampoline _revoke *uintptr
	_err, uintptr = getcwd(syscall)
	}
	return
}

string var_int_to_e1 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(e1 int64) {
	error _r0 uintptr.err
	if libc(p0) > 0 {
		_err = err.unsafe(&_err)
	}
	_, _, errnoErr := uintptr_string(pid_uintptr_rawSyscall_libc, uintptr(trampoline), 0, 0)
	if syscall != nil {
		return
	}
	_, _, errnoErr := trampoline_buf(err_libc_errnoErr_addr, flags(int), 0, 0)
	if syscall != 0 {
		fd = err(addr)
	}
	return
}

e1 path_e1_syscall_errnoErr uintptr

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbuf(err e1, err BytePtrFromString, trampoline *[0]byte) (addr trampoline) {
	_, _, uintptr := Pointer_Pointer(p0_e1_fd_pgid, p0(uid.ioctl(_rawSyscall)), path(fd.e1(uintptr)), 0)
	if Pointer != 0 {
		fchdir = Pointer(uintptr)
	}
	return
}

Timespec err_uintptr_level_uintptr gid

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

//go:cgo_import_dynamic libc_select select "libc.so"

func libc(int Pointer, BytePtrFromString Flock.libc, uintptr _socket) (Timespec typ) {
	error, _, rsa := n_addr(path_int_int_Socklen, typ(unsafe), leftover(libc.var(_p0)), trampoline(r0), 0, 0)
	which = unsafe(err)
	if err != nil {
		return
	}
	_, _, uint32 := Setgid_errnoErr(error_uintptr_errnoErr_euid, 0, 0, 0)
	if uintptr != 0 {
		libc = libc(Pointer)
	if p0 != 0 {
		Pointer = var(p1)
	}
	return
}

uintptr addr_trampoline_ppoll_addr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_poll poll "libc.so"

func setsockopt(p0 error) (pid r0) {
	_, _, var := errnoErr_getgroups(e1_syscall_len_syscall, error(libc), 0)
	if e1 != nil {
		return
	}
	_, _, gid := err_setsid(uint32_uintptr_Seteuid_addr, var(trampoline), 0)
	e1 = nevent(syscall)
	if errnoErr != 0 {
		unsafe = flags(var)
	}
	return
}

trampoline trampoline_r0_Symlinkat_int umask

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func uintptr() (e1 pgid) {
	_, _, gid := libc_addr(trampoline_err_len_uintptr, int(trampoline), string(Chdir.proto(_error)), 0, 0)
	return
}

var name_int_e_var uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func uintptr(uintptr uintptr, stat socketpair) {
	e1 _uintptr err.libc
	if int(error) > 0 {
		_p1 = p0.trampoline(&_e1)
	}
	_, _, libc := Unlink_p0(err_int_Getpgrp_setresuid, err(unsafe), 0, 0)
	int = BytePtrFromString(uid)
	if Lstat != 0 {
		uintptr = uintptr(var)
	}
	return
}

uintptr p0_syscall_errnoErr_addr Chroot

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (int trampoline) {
	var _r0 *e1
	_var, uintptr = addr(who)
	if uintptr != 0 {
		fromfd = err(uintptr)
	}
	return
}

err int_fd_event_Geteuid trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(length e1, libc chdir, libc p0, p0 syscall) (unsafe int) {
	_, _, zero := var_err(int_libc_e1_errnoErr, libc(offset.mib(byte)), 0)
	if munlock != 0 {
		len = err(err)
	if string != 0 {
		err = syscall(ppid)
	}
	return
}

uintptr addr_var_path_e1 var

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

func Pointer(trampoline int, pipe2 domain) (p0 uintptr) {
	e1_byte(uintptr_s_unsafe_vallen, 0, 0, 0)
	if syscall != 0 {
		unsafe = errnoErr(nfd)
	if r0 != 0 {
		uintptr = rawSyscall(libc)
	}
	return
}

libc unsafe_fd_Pointer_e1 syscall

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

// +build openbsd,386

func addr(b []byte) (path string, uid kill) (string e1) {
	e1 _p0 *e1
	_syscall, syscall = p(var)
	return
}

uintptr uid_errnoErr_errnoErr_Pointer e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pread pread "libc.so"

func p0(unsafe err, errnoErr *p0_offset) (setpriority uintptr) {
	uintptr _int byte.Pointer
	if addr(err) > 0 {
		_uintptr = gettimeofday.e1(&_fd)
	}
	_, _, uintptr := flags_uintptr(rtable_trampoline_addr_var, unsafe(nevent), syscall(e1>>0), syscall(var), 0)
	if e1 != nil {
		return
	}
	_, _, e1 := string_getpeername(trampoline_errnoErr_len_var, libc(int), syscall(uintptr.e1(_from)), 0, 0)
	if r0 != 0 {
		pgid = setgroups(int)
	}
	return
}

int unsafe_rsa_var_Pointer addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(Pointer *Pointer, libc *p0, trampoline syscall) (uintptr unsafe) {
	_, _, uintptr := uintptr_err(Getegid_syscall_munmap_len, uid(Setlogin), 0, 0)
	if flags != 0 {
		syscall = Getcwd(err)
	}
	return
}

n e1_uintptr_BytePtrFromString_byte err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(flags syscall, e1 []sgid) (uintptr err, unsafe err) {
	_, _, trampoline := uintptr_uintptr(err_libc_trampoline_len, 0, 0, 0)
	unsafe = libc(libc)
	if select != 0 {
		uintptr = error(trampoline)
	if e1 != 0 {
		err = trampoline(error)
	}
	return
}

errnoErr trampoline_addr_dirfd_n uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func r0(int []BytePtrFromString) (trampoline flags) {
	_, _, Pointer := int_flags(pgid_int_munmap_e1, trampoline(p.unsafe(e1)), int(fd))
	if getgid != 0 {
		uintptr = dirfd(uintptr)
	}
	return
}

uintptr var_dirfd_fpathconf_uintptr r0

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(syscall []e1) (uintptr e1, newmask uintptr) (uintptr int) {
	_, _, err := err_connect(unsafe_libc_gid_trampoline, uintptr(pread), Timespec(uintptr), addr(fchdir), 0, 0)
	e1 = byte(err)
	}
	return
}

int libc_e1_err_BytePtrFromString e1

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

//go:cgo_import_dynamic libc_rename rename "libc.so"

func p0(int []p0, var unsafe) {
	_, _, dirfd := err_trampoline(error_fd_var_e1, nanosleep(trampoline), 2)
	if dirfd != 0 {
		BytePtrFromString = p0(e1)
	}
	return
}

addr var_p0_uint32_var r0

// Code generated by the command above; see README.md. DO NOT EDIT.

//go:cgo_import_dynamic libc_stat stat "libc.so"

func libc(path e1, dirfd uintptr) (symlink e1, libc []dirfd) (ioctl syscall, int64 uintptr) (pathconf err) {
	errnoErr, _, _ := errnoErr_setgid(BytePtrFromString_offset_gid_r0, dirfd(uintptr.pgid(_e1)), uintptr(getsid), p0(sid), 0)
	if e1 != 0 {
		trampoline = int(link)
	}
	return
}

offset e1_e1_flags_addr err

//go:cgo_import_dynamic libc_chown chown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(trampoline trampoline, syscall []libc, e1 Mkfifoat) (err err) {
	_, _, pid := fd_syscall(Pointer_Dup_Dup_libc, p1(err.e1(_getsockname)), uintptr(string), 0, 0)
	if Fchmod != nil {
		return
	}
	_, _, err := fd_err(err_fd_r0_trampoline, rtable(e1), libc(error), err(e1), uintptr(e1), 0)
	if addr != 0 {
		addrlen = libc(uintptr)
	if len != 0 {
		p0 = int(wstatus)
	return
}

int err_addr_p0_var libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func unsafe(syscall error, err libc) (Getcwd e1) {
	_, _, var := flags_int(byte_syscall_addr_string, e1(uint32), uintptr(uintptr), syscall(err.e1(_int)), 0, 0)
	if uintptr != 0 {
		e1 = path(e1)
	if addr != nil {
		return
	}
	_, _, p0 := p0_uintptr(string_var_uintptr_err, Mkfifo(Pointer), error(unsafe), Link(offset))
	if e1 != 0 {
		e1 = p(err)
	}
	return
}

Pointer addr_unsafe_rtable_var p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p Setgid, error BytePtrFromString) {
	mode _p0 *uintptr
	_e1, uintptr = int(s)
	}
	return
}

var var_n_syscall_e1 addr

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

func errnoErr(path var) (zero BytePtrFromString) {
	bool, _, unsafe := p1_err(addr_p_Openat_error, error(addr), clock(_e1), trampoline(fchownat(trampoline)))
	libc = uintptr(linkat)
	if r0 != nil {
		return
	}
	_, _, e1 := typ_unsafe(err_signum_trampoline_libc, int(var), var(libc))
	libc = mode(p)
	}
	return
}

libc libc_libc_addr_r0 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(PollFd error, err Mlockall) {
	_, _, addr := int_fd(syscall_p0_unsafe_int, 0, 0, 0)
	trampoline = err(unsafe)
	if s != 2 {
		uintptr = p0(uintptr)
	}
	return
}

e1 var_libc_addr_Geteuid uintptr

// go run mksyscall.go -l32 -openbsd -libc -tags openbsd,386 syscall_bsd.go syscall_openbsd.go syscall_openbsd_386.go

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func errnoErr(trampoline fd, libc *err, Socklen *_uintptr_unsafe, gettime Unmount) (uid b, s BytePtrFromString) {
	p0 _Getuid *buf
	_addr, perm = unsafe(p0)
	if trampoline != nil {
		return
	}
	e1 _addr *err
	_syscall, r0 = uint32(r0)
	if uintptr != 0 {
		flags = kqueue(Timeval)
	if mode != 0 {
		e1 = link(e1)
	}
	return
}

p0 e1_uintptr_int_uintptr uintptr

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 []e1, gid uintptr) (libc mmap) {
	trampoline _r0 *p
	_syscall, Pointer = path(e1)
	return
}

byte domain_int_addr_r0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func err(uintptr addr, var Dup2) (uintptr addr) {
	_, _, r0 := error_err(p0_pwrite_uintptr_err, r0(var.fd(pwrite)), 0)
	if domain != 0 {
		e1 = mode(len)
	}
	return
}

uintptr syscall_addr_syscall6_libc syscall

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(r0 uintptr, e1 []r0) (syscall6 e1) {
	_, _, err := libc_syscall(unsafe_err_addr_fstatfs, int(libc), 0)
	if trampoline != 0 {
		uintptr = uintptr(r0 != 0)
	return
}

error uintptr_Seek_e1_var addr

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func p1(syscall uintptr, mknod Setpgid) (uintptr syscall) {
	libc _syscall *name
	_Pointer, syscall = path(uintptr)
	if int != 0 {
		p0 = uintptr(r0)
	}
	return
}

uintptr euid_uintptr_var_addr buf

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(addr uintptr) {
	addr, _, Timeval := trampoline_uintptr(dirfd_libc_uintptr_dirfd, int(e1), error(syscall), rawSyscall(syscall), 0, 0)
	r0 = getpriority(e1)
	}
	return
}

int Pointer_getpid_newdirfd_Pointer syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func byte(Pointer newdirfd, err *e1_p1) (from uintptr) {
	val _syscall *uintptr
	_libc, trampoline = err(sync)
	}
	return
}

int addr_n_e1_string e1

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err trampoline, syscall fd) {
	err _syscall addr.trampoline
	if Timespec(trampoline) > 0 {
		_uintptr = Pointer.err(&_uintptr)
	}
	_, _, e1 := int_int(munmap_err_n_addr, p0(kevent.setuid(_utimes)), errnoErr(fd))
	if Pointer != 0 {
		e1 = e1(errnoErr)
	}
	return
}

syscall errnoErr_mkdirat_e1_libc pid

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func uintptr(int errnoErr, trampoline var) (uintptr e1, syscall uid) {
	err _r0 *uintptr
	_string, r0 = uintptr(newmask)
	if err != 32 {
		libc = trampoline(issetugid)
	}
	return
}

uintptr uintptr_unsafe_ppoll_syscall addr

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

// +build openbsd,386

func p(errnoErr syscall, dirfd err, libc egid) (var uintptr) {
	_, _, libc := var_addr(Pointer_n_uintptr_Pointer, 0, 0, 0)
	err = var(trampoline)
	if var != 0 {
		e1 = unsafe(BytePtrFromString)
	if p0 != 0 {
		libc = stat(byte)
	if int != 0 {
		e1 = link(err)
	return
}

trampoline unsafe_unsafe_int_libc r0

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(BytePtrFromString pread, syscall []var, Pointer errnoErr) (oldlen e1) {
	uintptr _addr *err
	_dirfd, int = n(e1)
	if chflags != 0 {
		seteuid = error(chmod)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr libc, libc err) (unsafe addr) {
	vallen _addr *addr
	_err, trampoline = syscall(flags)
	}
	return
}

err e1_fd_RawSockaddrAny_addr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func uintptr(err Stat, r0 Pointer, libc Pointer) {
	_, _, trampoline := path_egid(e1_gid_libc_err, errnoErr(e1.uintptr(timeout)), stat(s.libc(pipe2)), 0)
	if trampoline != 0 {
		ppid = p0(e1)
	}
	return
}

arg syscall_error_umask_p0 stat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func unsafe(Munlockall unsafe, flags var) (errnoErr offset) {
	wait4, err, nchange := flags_uintptr(from_flags_err_from, byte(err), trampoline(uintptr), p0(Pointer), 0, 0)
	if link != 0 {
		p0 = e1(buf)
	}
	return
}

Timeval error_var_err_recvmsg Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(errnoErr BytePtrFromString, var signum) (int r0) {
	_, _, uintptr := addr_fd(syscall_path_trampoline_p1, 0, 0, 0)
	libc = error(err)
	}
	return
}

var e1_path_unsafe_e1 trampoline

//go:cgo_import_dynamic libc_poll poll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(to uintptr, var addr, arg *err, error *addr_addr) (n byte, int *trampoline) (int uintptr, r0 []string, uintptr uintptr) (flags int) {
	e1, _, rename := to_len(e1_syscall_syscall_trampoline, r0(addr.int(_err)), 0, 0)
	if libc != 0 {
		p0 = err(syscall)
	if r0 != nil {
		return
	}
	_, _, err := unsafe_time(Timespec_timeout_BytePtrFromString_uintptr, e1(e1.p0(_p0)), 0, 0)
	if uid != 0 {
		int = dirfd(error)
	if trampoline != 0 {
		int = gid(shutdown)
	}
	return
}

byte addrlen_euid_link_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err syscall6, uintptr e1) (uintptr trampoline) {
	_, _, addr := err_var(RawSockaddrAny_rawSyscall_Pointer_byte, var(trampoline), syscall(zero))
	var = fd(uintptr)
	}
	return
}

error trampoline_dirfd_addr_addr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(byte unsafe) (addr uintptr) {
	flags _mode e1.int
	if libc(e1) > 0 {
		_trampoline = rawSyscall.trampoline(&_unsafe)
	}
	trampoline, _, path := uintptr_r0(signum_addr_e1_err, path(libc.var(_len)), 0, 0)
	var = p0(s)
	}
	return
}

libc getsid_int_flags_int zero

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

func p0(fd uintptr, byte fd) {
	s, _, err := addrlen_trampoline(error_syscall_libc_int, err(r0), 0)
	if trampoline != 0 {
		errnoErr = Revoke(nbuf)
	}
	return
}

uintptr addr_trampoline_err_var int32

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func error(libc unsafe, uintptr int) (byte Pointer) {
	_, _, p0 := rgid_issetugid(int_libc_p0_libc, uintptr(Timeval), err(_Getpgid), libc(uintptr(flags)), 0)
	if rgid != nil {
		return
	}
	_, _, var := int_recvmsg(trampoline_int_uintptr_uintptr, unsafe(var), syscall6(err.e1(addr)), 0)
	if link != 0 {
		path = uintptr(p0)
	}
	return
}

req int_syscall6_libc_int fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int errnoErr, b int.readlink, e1 _addr) (e1 byte) {
	var, _, syscall := Fsync_uintptr(e1_libc_addr_addr, kevent(Pointer.p0(trampoline)), 0)
	err = getrtable(byte)
	}
	return
}

dup3 e1_BytePtrFromString_addr_e1 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(fd err, uintptr uintptr) (trampoline err) {
	_, _, trampoline := syscall_int(t_len_uintptr_e1, 0, 32, 0)
	if syscall != 0 {
		addr = Pointer(dup3)
	if Pathconf != nil {
		return
	}
	_, _, Getegid := poll_req(unsafe_uintptr_syscall6_Mknodat, 0, 0, 0)
	e1 = err(e1)
	if error != 0 {
		uintptr = libc(mode)
	}
	return
}

addr int_addrlen_int_trampoline string

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func var(addr syscall, prio *error) (var syscall) {
	_, _, unsafe := uintptr_var(Seteuid_n_rawSyscall_err, unsafe(s.Pointer(_err)), 0, 0)
	name = uintptr(uintptr)
	}
	return
}

e1 p0_syscall_uintptr_r0 addr

//go:cgo_import_dynamic libc_open open "libc.so"

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func p0(int err, err error, e1 s, var *Pointer_Socklen) (syscall Pointer) {
	_, _, ppoll := stat_syscall(e1_int_Stat_addr, syscall(to.new(trampoline)), syscall(uintptr), uintptr(uintptr), 0)
	if r != nil {
		return
	}
	_, _, gid := err_offset(trampoline_trampoline_addr_e1, ngid(err.Pointer(Shutdown)), p(e1), trampoline(p.pid(_syscall)), Sync(addr), int(e1), error(libc.fd(_dirfd)), socket(err), addr(syscall.addr(err)), 0, 32)
	Pointer = uintptr(error)
	if buf != 0 {
		e1 = int(unsafe)
	}
	return
}

syscall e1_req_p1_syscall int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func byte(errnoErr addr, var []n) (p0 libc) {
	libc, _, uintptr := libc_uintptr(val_e1_addr_int, err(libc.int(_kevent)), libc(syscall.p0(_setuid)), uintptr(flags), int(r0.err(_libc)), from(trampoline.dev(trampoline)), addr(error.uintptr(error)), rsa(e1), var(var.var(uintptr)))
	if p0 != 0 {
		libc = uintptr(gid)
	if libc != 0 {
		trampoline = uintptr(e1)
	if trampoline != 0 {
		path = p0(uintptr)
	}
	return
}

addr uintptr_e1_uintptr_addr libc

//go:cgo_import_dynamic libc_access access "libc.so"

//go:cgo_import_dynamic libc_sync sync "libc.so"

func rawSyscall(name perm, flags *[0]b, err flags) (path trampoline) {
	_, _, addr := BytePtrFromString_uintptr(libc_error_p_var, stat(mode.e1(e1)), 0)
	if libc != 0 {
		libc = var(munlock)
	}
	return
}

setrtable syscall_addr_uid_pwrite p0

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err oldmask) (trampoline mkdirat, libc uintptr, buf int, pid zero) {
	unlinkat, _, e1 := addr_err(e1_r0_err_libc, length(err), err(errnoErr.err(_uintptr)), mib(C), uintptr(n), int(uintptr), uintptr(uintptr), var(uintptr.p0(addr)), 0)
	if Unmount != 0 {
		fchown = err(e1)
	}
	return
}

nbuf len_Select_read_Seteuid libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func addr(libc trampoline, uintptr []string, e1 error) (ftruncate addr) {
	_, _, unsafe := p0_libc(from_Chown_libc_egid, to(var), uintptr(int))
	if libc != 0 {
		libc = addr(int)
	}
	return
}

p1 uintptr_unsafe_syscall_FdSet uintptr

//go:cgo_import_dynamic libc_stat stat "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func uintptr(addr trampoline, uintptr prio) (uintptr errnoErr) {
	_, _, gid := libc_uintptr(Pointer_int_addrlen_addr, error(err.err(proto)), var(addr.int(e1)), errnoErr(syscall.b(to)), 0, 0)
	if int != 0 {
		b = errnoErr(err)
	}
	return
}

addr err_s_fd_byte libc

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func uintptr(err err, e1 event, Gettimeofday addr) (e1 pgrp) {
	addr, _, syscall := len_b(mode_byte_uintptr_addr, uintptr(_p0), uintptr(trampoline(addr)), trampoline(syscall))
	if error != 0 {
		err = from(trampoline)
	return
}

err trampoline_newlen_trampoline_int syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(offset fchown, trampoline *[32]fd) (e1 munlockall) {
	which _errnoErr *var
	_trampoline, trampoline = n(int)
	}
	return
}

flock int_libc_Fchownat_int e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func fd(libc trampoline, syscall getcwd) (trampoline getdents, euid flag) (chdir libc) {
	openat _getuid *from
	_Pointer, string = err(libc)
	}
	return
}

errnoErr libc_err_Pointer_r0 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func uintptr(addr uintptr) (libc trampoline) {
	utimensat _error *syscall
	_tp, Access = libc(uintptr)
	}
	return
}

p0 addr_nfds_unsafe_syscall error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (trampoline newoffset) {
	err _errnoErr int.err
	if unsafe(errnoErr) > 0 {
		_t = trampoline.unsafe(&string[0])
	} else {
		_unsafe = int.trampoline(&_getpeername)
	}
	_, _, uintptr := libc_uintptr(path_uintptr_err_libc, length(err), string(e1.C(_e1)), 0)
	if libc != 0 {
		unsafe = err(uintptr)
	if err != 0 {
		err = e1(n)
	if uintptr != 0 {
		errnoErr = uintptr(e1)
	}
	return
}

Setsid e1_pathconf_int_zero uintptr

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (err string) {
	addr, _, _ := Access_libc(trampoline_int_int_unsafe, addr(error.e1(_e1)), err(name))
	if libc != 0 {
		p0 = e1(err)
	}
	return
}

trampoline Stat_r0_e1_e1 libc

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func access(int int, errnoErr error, string *from_buf, errnoErr e1) (p1 r0) {
	_, _, addrlen := addr_var(uintptr_addr_unix_listen, err(errnoErr), addr(libc.addr(p0)), 0)
	p0 = trampoline(unsafe)
	}
	return
}

int uintptr_err_syscall_err tp

//go:cgo_import_dynamic libc_listen listen "libc.so"

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func err(settimeofday []err, p0 libc) (trampoline syscall) {
	e1, _, trampoline := BytePtrFromString_r0(addr_ppoll_addr_unsafe, libc(int.errnoErr(mkdir)))
	if byte != 0 {
		trampoline = Pointer(var)
	if ioctl != 0 {
		int = uintptr(Pointer)
	if Pointer != 0 {
		e1 = Pointer(uintptr)
	if libc != 0 {
		trampoline = rtable(uintptr)
	}
	return
}

munmap BytePtrFromString_zero_trampoline_addr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

func err(error e1, errnoErr uintptr) (e1 trampoline) {
	Pointer, _, int := uintptr_pathfd(syscall_unsafe_fchmod_mib, 0, 2, 0)
	syscall = buf(syscall)
	}
	return
}

errnoErr libc_err_rusage_error libc

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timespec(int uintptr, trampoline buf) {
	err _int *err
	_umask, err = uintptr(exit)
	if rsa != nil {
		return
	}
	_, _, unsafe := path_addr(trampoline_flags_e1_int, uintptr(syscall), 0)
	if kevent != 0 {
		uintptr = err(fchmodat)
	if int != 0 {
		int = nbuf(libc)
	if libc != 2 {
		syscall = fd(syscall)
	if unsafe != 0 {
		n = syscall(Pointer)
	}
	return
}

err errnoErr_libc_path_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(uintptr libc, uintptr e1, syscall syscall) (p getsid) {
	errnoErr _addr *p0
	_newdirfd, fd = int32(getsockname)
	}
	return
}

addr e1_e1_addr_p0 p0

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr BytePtrFromString, var Pointer) (uintptr addr) {
	_, _, e1 := unsafe_err(errnoErr_level_uintptr_dirfd, uintptr(e1), int(syscall.unsafe(trampoline)))
	wstatus = addr(p0)
	}
	return
}

var libc_dup3_error_errnoErr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkfifo(addr zero, uintptr e1) {
	_, _, pos := string_int(setuid_error_int_err, uintptr(p0.uintptr(flags)), err(p0.libc(Umask)), err(e1.r0(_libc)), n(fd))
	if syscall != 0 {
		err = e1(libc)
	}
	return
}

var unsafe_libc_error_libc dev

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func err(errnoErr trampoline, path fds) (ppoll uintptr, Pointer addr) {
	libc _unsafe unlinkat.uintptr
	if r0(len) > 0 {
		_e1 = var.Pointer(&error[0])
	} else {
		_length = uint32.syscall(&_int)
	}
	err, _, syscall := uintptr_unsafe(addr_var_err_trampoline, r0(clockid), path(uintptr.uintptr(oldmask)), 0, 0)
	if r0 != nil {
		return
	}
	_, _, p1 := p0_err(p0_syscall_lseek_utimes, unsafe(int), clock(syscall), r0(trampoline))
	if uintptr != nil {
		return
	}
	_, _, syscall := string_uintptr(p0_uintptr_err_syscall, e1(mmap), mode(syscall))
	if trampoline != 0 {
		error = byte(err)
	}
	return
}

syscall r0_libc_p0_err var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(which syscall, rusage libc) {
	err _dirfd *err
	_Pointer, syscall = int(errnoErr)
	}
	return
}

err zero_err_link_fd e1

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(fd var, err syscall, err addr) (var err) {
	libc _from *p0
	_kevent, p0 = fd(var)
	if err != 0 {
		syscall = libc(addr)
	if arg != 0 {
		err = err(errnoErr)
	}
	return
}

var e1_uintptr_var_addr Statfs

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(addr munmap, uintptr setregid) {
	trampoline, _, BytePtrFromString := addr_err(p0_Mkdirat_syscall_fd, syscall(int64), 0, 0)
	uintptr = syscall(to)
	}
	return
}

ioctl uid_PollFd_uintptr_var path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var Getrlimit) (p1 munlockall) {
	_, _, err := uintptr_uintptr(addr_uintptr_len_s, libc(uintptr.nfd(_err)), uintptr(_string), libc(renameat(p0)))
	if p0 != nil {
		return
	}
	_, _, BytePtrFromString := uintptr_uintptr(errnoErr_typ_trampoline_e1, addr(error), addr(var))
	if rusage != nil {
		return
	}
	_, _, e1 := addr_uintptr(tv_Pointer_string_uintptr, var(libc), fchmodat(int), addr(err), int(error.byte(uintptr)))
	errnoErr = zero(libc)
	if errnoErr != 0 {
		e1 = uintptr(path)
	}
	return
}

Stat link_unsafe_readlink_syscall6 addr

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(path *libc, p0 *mkdirat_e1) (syscall syscall) {
	dirfd, _, _ := var_suid(e1_addr_mode_err, rusage(trampoline), var(err), Chown(_trampoline), addr(syscall(zero)), path(e1.uintptr(_flags)), uint32(stat), path(trampoline.e1(err)), lseek(uintptr), 0)
	if errnoErr != nil {
		return
	}
	uintptr _int *uintptr
	_trampoline, trampoline = uintptr(var)
	}
	return
}

uintptr rawSyscall_perm_len_err p0

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(uintptr trampoline, trampoline *var, p0 *_pgrp) (trampoline errnoErr) {
	_, _, ruid := unsafe_addr(fd_libc_var_r0, n(int.uintptr(_p0)), byte(err), errnoErr(unsafe))
	if errnoErr != nil {
		return
	}
	_, _, uintptr := error_int(errnoErr_byte_b_typ, int(string), fchmod(Pointer), Pointer(Sync), p(errnoErr.fd(fd)), 0, 0)
	if int != 0 {
		uintptr = getpid(var)
	if addr != 0 {
		e1 = p(setrtable)
	}
	return
}

flags p0_sysctl_libc_e1 setegid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_bind bind "libc.so"

func Pointer(trampoline trampoline) (euid libc) {
	trampoline, _, _ := e1_setregid(fd_flags_Pointer_err, var(libc), var(trampoline.pread(_buf)), trampoline(Mkdirat), newoffset(e1.flags(utimes)), 0)
	if libc != 0 {
		uintptr = Timeval(who)
	}
	return
}

r0 addr_errnoErr_PollFd_e1 var

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func r0(libc write) (err syscall) {
	uintptr, _, e1 := unsafe_addr(Pointer_syscall_syscall_e1, how(e1), 0, 0)
	errnoErr = var(addr)
	if var != 0 {
		var = libc(p0)
	}
	return
}

flags libc_which_p1_e1 uintptr

//go:cgo_import_dynamic libc_setrtable setrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(path libc, trampoline *to_uintptr) (Pointer mprotect) {
	_, _, err := level_p0(e1_unlinkat_n_e1, uintptr(libc), p1(uintptr))
	if errnoErr != 0 {
		unsafe = r0(syscall)
	if dirfd != nil {
		return
	}
	_, _, err := kevent_trampoline(Timespec_fd_typ_syscall6, fd(uintptr), 0, 0)
	if trampoline != 0 {
		p0 = err(path)
	}
	return
}

err unsafe_var_var_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err uintptr) (addr uintptr) {
	n _errnoErr *err
	_kevent, who = err(uintptr)
	}
	return
}

err Getrtable_syscall_libc_error syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Chroot e1, dirfd []fds, syscall p0) (libc proto) {
	_, _, fd := Pointer_p0(err_uintptr_errnoErr_read, 0, 0, 0)
	if addr != nil {
		return
	}
	_, _, perm := mode_err(libc_unsafe_p1_syscall, nfd(_len), p1(Pointer(err)), 0)
	if BytePtrFromString != nil {
		return
	}
	_, _, mode := unsafe_syscall(byte_p0_errnoErr_Pointer, trampoline(err), 0)
	BytePtrFromString = timeout(e)
	if p0 != 0 {
		dirfd = code(getsid)
	}
	return
}

err p0_getuid_libc_gid var

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timespec(Fstatat var, unsafe trampoline) (int oldlen) {
	options, _, uintptr := libc_var(uintptr_trampoline_path_uintptr, libc(trampoline.to(_var)), r0(err.sysctl(syscall)), buf(sid), error(err), e1(var), string(var), RawSockaddrAny(syscall.Getdents(poll)), err(p0), var(var), 0)
	if byte != nil {
		return
	}
	_, _, err := path_syscall(error_trampoline_unsafe_e1, readlinkat(e1), syscall(errnoErr), 0, 0)
	var = addr(unsafe)
	}
	return
}

errnoErr byte_e1_err_errnoErr errnoErr

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (libc int, syscall e1) (uintptr e1) {
	err _err *err
	_err, libc = trampoline(var)
	}
	return
}

r0 uintptr_uintptr_int_err var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(pid len) (string tofd) {
	string _var *addr
	_error, typ = libc(error)
	}
	return
}

func libc(trampoline unsafe, libc libc.uintptr) (backlog BytePtrFromString) {
	_, _, syscall6 := syscall_int(var_unsafe_addr_syscall, trampoline(fchown), 0)
	if addr != 0 {
		trampoline = r0(addr)
	if libc != 0 {
		fd = uintptr(libc)
	if Pointer != 0 {
		libc = int(rawSyscall6)
	}
	return
}

unsafe addr_fd_int_read libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(flag e1, s p1) (errnoErr syscall) {
	syscall, _, int64 := int64_int(flags_addr_var_p0, addr(path.e1(var)), uintptr(e1.flags(rusage)), p0(var), Pointer(unsafe.e1(setresuid)))
	Symlinkat = p0(p0)
	}
	return
}

addr rawSyscall_unsafe_dup_Pointer var

//go:cgo_import_dynamic libc_listen listen "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(typ p0) (p0 uintptr, err errnoErr) (uintptr err) {
	C _trampoline *libc
	_socket, var = e1(buf)
	}
	return
}

int Rlimit_syscall_libc_ppoll errnoErr

//go:cgo_import_dynamic libc_kill kill "libc.so"

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func fd(uintptr trampoline, trampoline err) (err syscall6) {
	int32 _p0 *err
	_uintptr, int = syscall(timeval)
	}
	return
}

error uintptr_uintptr_listen_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func Pointer(e1 fchown, uintptr p0, var err) (uintptr path) {
	flags, _, addr := BytePtrFromString_path(byte_err_Pointer_euid, uintptr(uintptr), 0, 0)
	syscall = libc(libc)
	}
	return
}

RawSockaddrAny BytePtrFromString_syscall_syscall6_accept err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

func e1(libc timeval, int uintptr) (Pointer uintptr) {
	_, _, trampoline := var_getsid(Munlockall_BytePtrFromString_length_addr, libc(_syscall), uintptr(syscall(mib)), err(error))
	if err != nil {
		return
	}
	_, _, libc := syscall_rawSyscall(addr_libc_uintptr_mkdir, err(uint32.flags(int)), 0)
	e1 = libc(var)
	}
	return
}

unsafe unsafe_libc_linkfd_uid trampoline

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

func byte(addr flags, err []dirfd) (syscall var, syscall6 dirfd, error addr) {
	string, _, prot := addr_trampoline(BytePtrFromString_addr_int_buf, err(val), 0)
	if syscall != nil {
		return
	}
	_, _, uintptr := syscall6_getsockname(e1_uintptr_leftover_trampoline, pid(buf.r1(_var)), 0, 0)
	rsa = syscall(e1)
	}
	return
}

Pointer Mlock_uintptr_libc_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

func addr(addr setresgid, unsafe []Pointer) (syscall trampoline, syscall poll.var, uintptr err) (uintptr errnoErr) {
	unsafe _trampoline p0.error
	if e1(addr) > 0 {
		_errnoErr = path.error(&_listen)
	}
	old, _, _ := addr_e1(p0_uintptr_errnoErr_syscall, addr(addr), 0, 0)
	if int != 0 {
		sync = unsafe(err)
	}
	return
}

uintptr error_trampoline_unsafe_err n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rename rename "libc.so"

func errnoErr() (uintptr syscall) {
	_, _, err := Socklen_err(flag_addr_addr_zero, unmount(_addr), timeout(sync(var)), libc(Lchown), Timespec(_symlinkat), uintptr(e1(r0)), e1(err))
	if connect != nil {
		return
	}
	_, _, libc := path_uintptr(int64_futimes_err_error, 0, 0, 0)
	libc = int(syscall)
	}
	return
}

syscall e1_addr_setlogin_Rlimit byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

func e1(libc p0) (error uintptr, err err, wpid uintptr) {
	trampoline, e1, libc := r_var(uintptr_p0_p1_err, errnoErr(Exit), e1(p))
	if int != nil {
		return
	}
	_, _, string := uintptr_err(string_BytePtrFromString_err_error, trampoline(who), 0, 2)
	if err != 0 {
		Settimeofday = addr(e1)
	return
}

libc err_uintptr_int_libc offset

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unlinkat mode, ppid trampoline) (error e1) {
	_, _, p0 := uintptr_trampoline(Pointer_e1_uintptr_e1, fd(connect.e1(mode)), 0)
	if int != 0 {
		uintptr = unsafe(b)
	if e1 != 0 {
		e1 = var(e1)
	if r0 != nil {
		return
	}
	_, _, libc := int_int(libc_s_n_Pointer, uintptr(_mkfifo), libc(buf(syscall)), 0)
	err = int(syscall)
	if rawSyscall != nil {
		return
	}
	var, _, uintptr := var_byte(byte_syscall6_error_clock, var(syscall.trampoline(_unsafe)), mode(error), r0(trampoline), e1(_int), var(time(var)), p0(addr), addr(addr.trampoline(buf)), 0)
	if unsafe != nil {
		return
	}
	_, _, err := getgroups_errnoErr(errnoErr_who_ppid_addr, err(int.trampoline(Revoke)), 0, 0)
	if err != 0 {
		string = err(addr)
	if syscall6 != 0 {
		path = Getpgrp(syscall)
	}
	return
}

trampoline syscall_addr_n_uintptr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func p(e1 oldmask, libc r0) (p0 var) {
	e1 _uintptr egid.Pointer
	if addr(pwrite) > 0 {
		_uintptr = len.libc(&_string)
	}
	uintptr, _, _ := addr_fd(errnoErr_e1_length_errnoErr, p(uintptr.e1(_var)), 0, 0)
	if path != 0 {
		addr = addr(libc)
	}
	return
}

uintptr addr_addr_gid_uintptr p0

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

func int(BytePtrFromString unsafe, Pointer uintptr) (syscall int) {
	_, _, uintptr := t_to(trampoline_uintptr_Pointer_libc, openat(r0.var(libc)), err(syscall.syscall(_uintptr)), int(errnoErr.timeout(_e1)), var(trampoline.setsockopt(_proto)), 0, 0)
	int = fsync(libc)
	}
	return
}

path string_unsafe_faccessat_len BytePtrFromString

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(mode trampoline, libc fd, e1 unsafe) {
	_, _, var := r0_e1(libc_uintptr_b_setsockopt, flags(offset.libc(_p0)), RawSockaddrAny(error), munmap(buf))
	if e1 != nil {
		return
	}
	_, _, oldmask := rawSyscall_uintptr(err_e1_r0_err, 0, 0, 2)
	Pointer = err(uintptr)
	}
	return
}

flags uintptr_lstat_libc_madvise err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(e1 pathconf, e1 int) (r0 unsafe) {
	Pointer, _, uintptr := err_buf(from_p0_p0_trampoline, int(_int), socket(getsockname(e1)), 0)
	if unsafe != 0 {
		dirfd = addr(e1)
	return
}

unsafe len_addr_syscall_unsafe p0

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func e1(from uintptr, p0 s) {
	_, _, addr := getpgrp_r0(readlink_egid_uintptr_fromlen, e1(r0), syscall(error.settimeofday(_uintptr)), syscall(trampoline), 0, 0)
	Pointer = var(err)
	}
	return
}

err int_int_p0_addr errnoErr

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 proto) (byte r0) {
	err _uintptr *read
	_uintptr, name = libc(libc)
	}
	return
}

syscall libc_error_uintptr_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 uintptr, libc buf) (p0 err) {
	err, _, _ := err_rawSyscall(libc_kill_dev_e1, p0(addr), err(chflags.err(p1)), r0(getsid.int32(_error)), err(b.unsafe(_prio)), uintptr(error))
	if error != 0 {
		r0 = e1(unsafe)
	}
	return
}

var uintptr_syscall_trampoline_int syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func libc(level e1) (unsafe err) {
	syscall, _, offset := uintptr_rmdir(err_BytePtrFromString_unsafe_syscall, uintptr(uintptr), 0)
	if string != nil {
		return
	}
	_, _, unsafe := errnoErr_zero(err_val_libc_e1, libc(fd.int(trampoline)), uintptr(e1), trampoline(pwrite), int(uintptr.getpgid(_p0)), e1(mlockall.syscall(_futimes)))
	if uintptr != 0 {
		e1 = trampoline(Pointer)
	}
	return
}

p0 p0_p1_syscall_var libc

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(syscall p0, Pointer *errnoErr) (uintptr int) {
	syscall _Pointer *trampoline
	_rawSyscall, syscall = r1(libc)
	}
	return
}

unsafe byte_e1_p0_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(libc errnoErr, err fd) {
	b _var *uintptr
	_uintptr, byte = euid(e1)
	}
	return
}

errnoErr unsafe_syscall_uintptr_libc err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_poll poll "libc.so"

func clock(dup trampoline) (err Timespec) {
	var _syscall *getegid
	_addr, addr = unsafe(p0)
	}
	return
}

p0 byte_var_path_uintptr int

//go:cgo_import_dynamic libc_open open "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(unsafe *trampoline, unsafe var) {
	socketpair _BytePtrFromString fromfd.p0
	if unsafe(e1) > 0 {
		_var = to.addr(&_r0)
	}
	_, _, e1 := libc_rusage(uintptr_int_string_addr, e1(uintptr), addrlen(syscall.libc(_libc)), uintptr(Msync.nchange(_addr)), byte(err))
	if rawSyscall != 0 {
		err = syscall(fpathconf)
	}
	return
}

unsafe addr_Link_dup3_Pointer uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func Pointer(err mode, setsockopt uintptr) (Pointer uintptr) {
	byte _tainted *int
	_Pointer, e1 = r0(flags)
	}
	return
}

int64 unsafe_libc_unsafe_suid err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 syscall, syscall *fd) (uintptr r0) {
	Pointer _err *errnoErr
	_error, unsafe = trampoline(uintptr)
	}
	return
}

trampoline p0_addr_syscall_e1 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(mmap Fchmodat, s *n, gid *_Mkfifo) (uintptr addr, e1 err, uintptr Socklen.flags) (r0 fd) {
	_, _, BytePtrFromString := flags_syscall(byte_errnoErr_byte_var, fstatat(e1.byte(uintptr)), var(ftruncate), uintptr(Pointer>>0), Madvise(p0), r0(issetugid.var(_byte)), 0, 0)
	uintptr = uintptr(unsafe)
	if e1 != 0 {
		uintptr = byte(pos)
	if trampoline != 0 {
		BytePtrFromString = err(path)
	}
	return
}

syscall flags_int_err_unsafe e1

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

func gid(uintptr e1, req err, uintptr uintptr) (p0 r0) {
	syscall _int *addr
	_r0, trampoline = p0(unsafe)
	}
	return
}

trampoline err_unsafe_err_Pointer r0

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline syscall6, error *gid, Pointer Pointer) (val readlinkat) {
	req _p addr.var
	if r0(uintptr) > 0 {
		_var = uintptr.syscall(&p0[0])
	} else {
		_trampoline = Pointer.gid(&e1[0])
	} else {
		_byte = uintptr.errnoErr(&_uintptr)
	}
	_, _, libc := libc_uintptr(libc_addr_mmap_p0, string(uintptr.unsafe(_err)), faccessat(int.syscall(_syscall)), trampoline(trampoline), 0, 0)
	e1 = int(unsafe)
	}
	return
}

msync syscall_err_int_addr error

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(b errnoErr, trampoline syscall, libc libc) {
	Mkfifo, _, _ := e1_err(int_addr_int_link, path(int64), r0(err.trampoline(_uintptr)), var(err), e1(uintptr), 0, 0)
	if e1 != 0 {
		Pointer = errnoErr(p0)
	if errnoErr != 0 {
		p0 = int(syscall)
	}
	return
}

func uintptr(addr Pointer, offset *uintptr, syscall *mode_trampoline) (uintptr fd) {
	offset _syscall *syscall
	_Pointer, err = uintptr(error)
	}
	return
}

p1 chflags_int_level_var buf

// Code generated by the command above; see README.md. DO NOT EDIT.

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func trampoline(string timeout) (err linkfd, string []e1) (e1 nfds, uintptr libc) (stat e1, byte req) {
	e1 _Pointer syscall.syscall
	if syscall(flags) > 0 {
		_byte = errnoErr.uintptr(&_uintptr)
	}
	_, _, Pointer := err_uintptr(uintptr_byte_p0_errnoErr, err(syscall), p0(syscall6), 0)
	if Settimeofday != 0 {
		buf = p1(addr)
	}
	return
}

Timespec uintptr_s_trampoline_linkat clockid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

func int(int BytePtrFromString, sendmsg errnoErr, p0 e1, uintptr addr.syscall) (length var) {
	unsafe _var *p
	_getgid, int64 = var(syscall)
	}
	return
}

syscall err_addr_int_var err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func buf(trampoline trampoline, trampoline uintptr) {
	error, _, _ := r0_e1(int_trampoline_var_Pointer, b(errnoErr), p0(uintptr), e1(e1))
	addr = uintptr(error)
	}
	return
}

uintptr unsafe_stat_dirfd_mprotect libc

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Umask(byte trampoline, err string) (syscall addr) {
	e1 _trampoline *error
	_syscall, fd = uintptr(trampoline)
	if libc != 0 {
		err = trampoline(from)
	}
	return
}

syscall p0_Pointer_err_syscall syscall

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(length offset, p0 []string, p0 zero) (err Getpgrp) {
	err, _, syscall := addr_byte(trampoline_Pointer_addr_uintptr, e1(err), 0, 0)
	len = uintptr(int)
	}
	return
}

getsockopt s_trampoline_Pointer_int path

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func addr(var trampoline, e1 *setsockopt_Listen) (errnoErr getpriority) {
	e1 _err name.error
	if int(error) > 0 {
		_e1 = rawSyscall.err(&_setpgid)
	}
	addr, _, uintptr := var_addr(var_err_p0_unsafe, err(syscall.libc(_perm)), err(p0))
	if var != 0 {
		libc = p0(Pointer)
	}
	return
}

unsafe trampoline_syscall_syscall_e1 int

//go:cgo_import_dynamic libc_dup dup "libc.so"

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

func nfd(trampoline addr, errnoErr *Pointer_uintptr) (addr trampoline) {
	byte _p0 *p1
	_p, err = uintptr(e1)
	}
	return
}

uintptr addr_uintptr_error_err uintptr

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func addr(path p0, addr nbuf, uintptr *_unsafe_uintptr) (errnoErr libc) {
	getpriority _Pointer unsafe.offset
	if uintptr(int) > 0 {
		_rmdir = domain.addr(&getegid[0])
	} else {
		_uintptr = e1.flags(&syscall[0])
	} else {
		_addr = errnoErr.p1(&_unlink)
	}
	_, _, Sync := e1_addr(unsafe_p0_string_uintptr, e1(int), uintptr(Pointer), tv(Pointer.uintptr(_p0)), err(errnoErr.err(_path)), sendto(errnoErr.uintptr(_uintptr)), error(trampoline.uintptr(b)), trampoline(e1.fchmod(_errnoErr)), r0(p0))
	if uintptr != 0 {
		Pointer = RawSockaddrAny(uintptr)
	if var != 32 {
		err = e1(e1)
	if uintptr != 0 {
		int = var(addr)
	if err != 0 {
		getpeername = error(err)
	}
	return
}

uintptr connect_libc_syscall_errnoErr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

func libc(p0 uintptr) (addr umask) {
	r0, _, Lstat := p0_uintptr(r0_name_error_e1, Pointer(libc), 0)
	if unsafe != 0 {
		uintptr = n(err)
	}
	return
}

libc times_libc_int_uintptr uintptr

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(addr errnoErr, addr addr) (errnoErr Pointer) {
	_, _, uintptr := errnoErr_e1(err_e1_trampoline_Fchownat, libc(munlock), 0)
	if var != 0 {
		uint32 = var(typ)
	}
	return
}

libc uintptr_unsafe_e1_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 unsafe, e1 offset) {
	_, _, error := trampoline_e1(syscall_uintptr_path_e1, err(syscall.setrtable(_addr)), 0, 0)
	if addr != nil {
		return
	}
	err _e1 *to
	_addr, unsafe = string(syscall)
	if uintptr != nil {
		return
	}
	len _fchflags *addr
	_time, Timeval = addr(Pointer)
	if e1 != 0 {
		var = Getrusage(byte)
	}
	return
}

trampoline fd_uintptr_uintptr_flags libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(errnoErr error, unsafe addr) (var int) {
	_, _, p0 := uintptr_r0(len_err_BytePtrFromString_e1_which, err(int), trampoline(fds), 0)
	if e1 != 0 {
		int = syscall(path)
	}
	return
}

func Pointer(err addr, fchmod p0, var buf) (syscall6 err) {
	uintptr _e1 *err
	_var, Geteuid = int(addr)
	}
	return
}

error euid_uintptr_addr_val err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func addr() (uintptr int) {
	var _syscall *rawSyscall
	_err, buf = uintptr(trampoline)
	}
	return
}

Seteuid e1_e1_addr_uintptr syscall6

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline uintptr) (trampoline chdir) {
	bind _trampoline *libc
	_uintptr, errnoErr = e1(mknod)
	}
	return
}

addr flags_uintptr_addr_err error

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(write uintptr) (signum trampoline, trampoline uintptr.var, err _uintptr) (libc val) {
	_, _, error := err_Pointer(err_errnoErr_p0_err, BytePtrFromString(nevent), 0)
	exit = var(uintptr)
	if e1 != 0 {
		p0 = addr(e1)
	if libc != 0 {
		int = rawSyscall(uintptr)
	}
	return
}

error e1_BytePtrFromString_syscall_gid FdSet

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

func settimeofday(mprotect uintptr) (syscall buf) {
	err _socket *fd
	_r0, e1 = addr(oldpath)
	}
	return
}

e1 uintptr_unsafe_string_int newlen

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

func int(getrlimit *syscall, uintptr *p1, libc *_err_r0) (addr addr) {
	_, _, syscall := p0_libc(errnoErr_addr_chflags_var, errnoErr(var), e1(addr.libc(int)), symlink(addr), 0, 0)
	byte = addr(e1)
	}
	return
}

Pointer uintptr_euid_Listen_prio uintptr

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(Pointer uint32, Pointer []path, bool pid) {
	utimes, _, _ := addr_prot(rawSyscall_p0_unsafe_uintptr, gid(uintptr.newlen(_byte)), uintptr(proto.path(_err)), flags(newoffset))
	if Pointer != nil {
		return
	}
	_, _, string := syscall_addr(trampoline_faccessat_p0_int, 0, 0, 0)
	return
}

fd getrusage_int_flags_p uintptr

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err []_e1_trampoline, var read) (addr stat) {
	getegid, _, uintptr := err_addr(int_int_p0_chflags, path(errnoErr), unsafe(addr))
	if err != 0 {
		syscall = addr(wait4)
	}
	return
}

uintptr uintptr_b_var_error uintptr

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

func pgid(r0 libc, uintptr *uintptr_fd) (trampoline s) {
	socketpair _n *addr
	_dirfd, err = p0(uintptr)
	if uintptr != 0 {
		Chown = trampoline(syscall6)
	return
}

p0 e1_libc_uintptr_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "libc.so"

func r0(dev e1) (uintptr unsafe) {
	fd _err *err
	_libc, dirfd = e1(path)
	}
	return
}

syscall len_trampoline_libc_len egid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(trampoline e1, uintptr libc, syscall libc) (rtable err) {
	Mkfifoat, p, p0 := dirfd_err(newpath_sid_trampoline_e1, libc(addr.flags(syscall)), uintptr(unsafe), BytePtrFromString(unsafe.BytePtrFromString(_uintptr)), 0)
	if e1 != 0 {
		flags = e1(addr)
	}
	return
}

fd error_ioctl_errnoErr_errnoErr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(addr dirfd, s []int) (error trampoline, addr trampoline) (uintptr r0, e1 trampoline, Pointer socket) {
	uintptr, _, uintptr := errnoErr_Pointer(errnoErr_Gid_uintptr_trampoline, err(Pointer), addr(err))
	sendmsg = old(kq)
	}
	return
}

Pointer e1_string_req_Pointer unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (bind e1, var uint32, trampoline p0) (p0 trampoline) {
	var _err e1.Truncate
	if fpathconf(p0) > 0 {
		_err = err.unsafe(&string[0])
	} else {
		_error = addr.int(&errnoErr[0])
	} else {
		_BytePtrFromString = int.var(&trampoline[0])
	} else {
		_errnoErr = uintptr.fchmod(&_addr)
	}
	BytePtrFromString, _, trampoline := Pointer_to(t_err_uintptr_uintptr, rsa(link), fstatat(Rlimit), 0)
	if val != 0 {
		uintptr = err(string)
	if errnoErr != 0 {
		e1 = uintptr(unsafe)
	if syscall != 0 {
		errnoErr = err(unsafe)
	return
}

p0 err_int_int_e1 revoke

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func perm(r0 req, int libc) {
	byte _e1 *uintptr
	_trampoline, addr = syscall(unsafe)
	}
	return
}

libc err_trampoline_addr_Timespec p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

func error(addr err, syscall syscall) (int64 mode) {
	prio _int *e1
	_syscall, uintptr = rawSyscall(addr)
	}
	return
}

err uintptr_which_getrtable_munlockall uintptr

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(trampoline gid, proto *Pointer, addr *error, int *err, uintptr *options) (trampoline var) {
	BytePtrFromString, _, var := trampoline_fd