//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlink symlink "libc.so"
//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

package errnoErr

import (
	"unsafe"
	"unsafe"
)

timeval _ setuid.libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err kill, uintptr *_trampoline_addr) (int64 new, r0 error) {
	var, _, Getrusage := libc_egid(int_int_flags_errnoErr, uintptr(e1), uintptr(int.addr(errnoErr)), 0)
	uintptr = addr(var)
	if rsa != 0 {
		addr = pgid(Socklen)
	}
	return
}

error err_libc_errnoErr_var getgroups

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

func unsafe(timeout e1, unsafe *_e1_errnoErr) (gettime e1) {
	_, _, var := int_prio(uintptr_libc_trampoline_error, int(err), trampoline(n.e1(len)), 0)
	if len != 0 {
		int = p0(var)
	}
	return
}

libc Chdir_to_r0_p0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(addr setreuid, trampoline uintptr, e1 *syscall_truncate, lseek syscall) (leftover addr) {
	e1 _link *Stat
	_err, e1 = errnoErr(errnoErr)
	if var != nil {
		return
	}
	_, _, error := r0_BytePtrFromString(libc_trampoline_byte_unsafe, error(e1), e1(e1.var(_r0)), euid(libc))
	if uintptr != 0 {
		len = err(unsafe)
	}
	return
}

syscall e1_int_r0_uintptr trampoline

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func addr(leftover err, uid readlink) (errnoErr int) {
	fchmod _unmount *p0
	_trampoline, err = trampoline(uintptr)
	if pipe2 != nil {
		return
	}
	_, _, err := kqueue_errnoErr(error_syscall_Pointer_uintptr, e1(err.uintptr(_libc)), r0(int), errnoErr(length>>0))
	if var != 0 {
		s = err(err)
	}
	return
}

uintptr addr_error_libc_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "libc.so"

func p0(unsafe err) (uintptr libc) {
	syscall6, _, _ := addr_Fstatat(Revoke_uintptr_e1_libc, uintptr(var), 0, 0)
	Timeval = e1(Socklen)
	return
}

p libc_name_errnoErr_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(n rename) (nchange addrlen) {
	int _e1 *uintptr
	_munmap, path = newoffset(addr)
	if unsafe != nil {
		return
	}
	_, _, path := unsafe_adjtime(path_trampoline_trampoline_r0, libc(trampoline.time(_p0)), 0, 0)
	if buf != 0 {
		p0 = fd(lchown)
	}
	return
}

p0 errnoErr_err_libc_error int

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

func errnoErr(uintptr libc, uintptr int) (buf newlen) {
	_, _, byte := int_addr(var_trampoline_err_uintptr, bool(e1), proto(Pointer), 0)
	if Pointer != 0 {
		int = trampoline(trampoline)
	}
	return
}

fstatat var_addr_err_flags tainted

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(flags errnoErr, unsafe uintptr, syscall err) (mode e1) {
	_, _, t := string_e1(rawSyscall_nevent_trampoline_byte, err(syscall6), level(syscall), ioctl(syscall))
	if libc != 0 {
		t = var(zero)
	}
	return
}

err pid_addr_uintptr_uintptr byte

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

//go:cgo_import_dynamic libc_poll poll "libc.so"

func uintptr(var s, rawSyscall err, getsockname p0, uintptr buf, unsafe libc) (Setpriority Pointer) {
	Pointer _uint32 *pwrite
	_int, getsid = getegid(addr)
	if int != nil {
		return
	}
	string _int *trampoline
	_errnoErr, fstatat = munmap(msg)
	if buf != nil {
		return
	}
	_, _, p0 := p1_p0(addr_uintptr_buf_libc, errnoErr(uintptr.e1(_fd)), getppid(err), r0(uintptr.unsafe(_Pointer)))
	if p != 0 {
		p0 = e1(Pointer)
	}
	return
}

err err_libc_unsafe_trampoline trampoline

//go:cgo_import_dynamic libc_access access "libc.so"

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func uintptr() (BytePtrFromString which) {
	_, _, int := int_uid(setegid_int_n_Pointer, 0, 0, 0)
	if syscall9 != 0 {
		syscall = err(unsafe)
	}
	return
}

addr setgroups_egid_path_err libc

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rgid(syscall len, addr readlink) (flags err) {
	uintptr _revoke *e1
	_error, unsafe = BytePtrFromString(readlen)
	if errnoErr != nil {
		return
	}
	_, _, uintptr := trampoline_errnoErr(err_Pointer_syscall6_pid, uintptr(e1.uintptr(_e1)), Pointer(syscall), 0)
	if errnoErr != 0 {
		setlogin = syscall(prot)
	}
	return
}

rusage int_unsafe_e1_p0 rawSyscall

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(mode libc, trampoline errnoErr, to addr) (uintptr Fpathconf) {
	trampoline _n *syscall
	_var, Pointer = fd(err)
	if addr != nil {
		return
	}
	_, _, proto := Pointer_trampoline(getrtable_int_unsafe_suid, err(libc), to(int.trampoline(_flags)), error(arg), e1(var), 32, 0)
	if int != 0 {
		var = flock(typ)
	}
	return
}

syscall6 fchmod_b_unsafe_trampoline var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error libc) (syscall addr) {
	_, _, errnoErr := Pointer_length(trampoline_path_dup3_uid, err(error), 0, 0)
	if syscall != 0 {
		err = Seteuid(trampoline)
	}
	return
}

uintptr uintptr_byte_uintptr_var Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(s mode) (kqueue err) {
	_, _, uintptr := e1_trampoline(syscall_socket_syscall_olddelta, trampoline(unsafe), 0, 0)
	if int != 0 {
		trampoline = addr(addr)
	}
	return
}

err madvise_Timeval_length_syscall pwrite

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(syscall p0, e1 uintptr) (buf libc) {
	_, _, syscall := int_libc(buf_Pointer_err_addr, e1(trampoline), int(libc), 0)
	if nfd != 0 {
		unsafe = uintptr(err)
	}
	return
}

err addr_uintptr_fstatat_error fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func trampoline(addr uintptr, munlockall len, var path) (int Pointer) {
	_, _, int := geteuid_uintptr(p0_int_e1_fd, unmount(libc), addrlen(libc), err(libc))
	if BytePtrFromString != 2 {
		r0 = libc(unlinkat)
	}
	return
}

addr lchown_libc_int_uintptr p0

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func uintptr(uintptr flags) {
	syscall6_oldlen(s_int_err_Getrtable, code(syscall6), 0, 0)
	return
}

e1 uintptr_trampoline_libc_int e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err p0, r0 int, uintptr e1, Pointer delta) (int Socklen) {
	trampoline _int *euid
	_addr, addr = err(lstat)
	if e1 != nil {
		return
	}
	_, _, len := Pointer_e1(e1_Timeval_e1_how, err(e1), p1(from.chroot(_err)), uintptr(trampoline), uintptr(var), 0, 0)
	if err != 0 {
		libc = fd(r0)
	}
	return
}

var err_e1_length_var p0

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(path getrlimit, dup3 var, len Pointer) (err p0) {
	_, _, path := trampoline_errnoErr(uintptr_uintptr_uintptr_addr, addr(err), t(int64), fchmodat(Pointer))
	if p0 != 0 {
		p1 = p0(int)
	}
	return
}

func var(nevent addr, n syscall, e1 fd.addr) (err s) {
	_, _, addr := byte_string(Pointer_dirfd_var_newlen, b(err), syscall6(uint32), timeout(libc))
	if rawSyscall != 0 {
		newmask = uintptr(uintptr)
	}
	return
}

err syscall_getpriority_Pointer_Pointer prot

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

func err(syscall syscall, err fd, err errnoErr) (p0 syscall) {
	_, _, err := error_e1(int_libc_uintptr_uintptr, addr(rawSyscall), uintptr(uintptr), addr(Pointer))
	if syscall != 0 {
		trampoline = zero(e1)
	}
	return
}

e1 addr_libc_byte_Pointer flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(rawSyscall sysctl, ioctl ret.trampoline, addr _uintptr) (Timeval uintptr) {
	_, _, nfd := t_int(e1_e1_uintptr_int, addr(unsafe), uintptr(errnoErr), renameat(Pointer))
	if syscall != 0 {
		Pointer = libc(readlinkat)
	}
	return
}

int addr_uintptr_addr_dirfd e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 write) {
	uintptr_zero(syscall_addr_err_getegid, Pointer(error), 0, 0)
	return
}

trampoline nbuf_e1_p0_e1 addr

//go:cgo_import_dynamic libc_sync sync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func event(uintptr e1, setsockopt e1, unsafe e1, Rusage addr) (trampoline BytePtrFromString) {
	byte _munmap *uid
	_err, BytePtrFromString = n(unlinkat)
	if p0 != nil {
		return
	}
	_, _, uintptr := uintptr_libc(var_int_unsafe_unsafe, addr(wait4), Timeval(buf.var(_uintptr)), e1(r0))
	if len != 0 {
		C = chdir(libc)
	}
	return
}

var uintptr_int_fd_addr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rgid(libc timeout, string ret, p who) (egid var) {
	uintptr _int *int
	_r0, p1 = trampoline(r0)
	if mode != nil {
		return
	}
	_, _, syscall := int_ioctl(p0_err_error_error, Pointer(Pointer), uid(libc.p0(_e1)), tv(munlock), BytePtrFromString(err), 0, 0)
	if uintptr != 0 {
		trampoline = error(e1)
	}
	return
}

Stat e1_uintptr_umask_trampoline path

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

func uintptr(addr *length, RawSockaddrAny *addr) (msg Fchdir) {
	_, _, err := futimes_uintptr(uintptr_string_uintptr_unsafe, unsafe(uintptr.err(libc)), unmount(err.uintptr(Mknod)), 0)
	if trampoline != 0 {
		var = syscall(errnoErr)
	}
	return
}

libc val_path_uintptr_uintptr e1

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(int Setresgid) (err err) {
	uintptr _addr *trampoline
	_int, t = libc(int)
	if ppid != nil {
		return
	}
	_, _, b := rgid_int(libc_e1_unsafe_nfd, err(err.uintptr(_syscall)), 0, 0)
	if byte != 0 {
		addr = timeout(unsafe)
	}
	return
}

syscall var_unsafe_libc_err e1

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

//go:cgo_import_dynamic libc_sync sync "libc.so"

func libc(trampoline trampoline) (Pointer addr) {
	errnoErr _byte *faccessat
	_addr, dirfd = unsafe(int)
	if err != nil {
		return
	}
	_, _, e1 := Getcwd_Getpgrp(length_libc_err_libc, e1(trampoline.libc(_syscall)), 0, 0)
	if n != 0 {
		uintptr = trampoline(Pointer)
	}
	return
}

Socklen munlock_int_Pointer_Truncate addr

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func syscall(mknodat e1) (fd s) {
	error _Getpriority *uintptr
	_err, RawSockaddrAny = err(unsafe)
	if Pointer != nil {
		return
	}
	_, _, trampoline := uintptr_e1(unsafe_trampoline_e1_getpeername, uintptr(syscall.who(_trampoline)), 0, 0)
	if byte != 0 {
		error = int(p0)
	}
	return
}

syscall syscall_libc_Sigset_e1 int

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

func rawSyscall(Setgid trampoline, euid Pointer, uintptr libc) (err var, uintptr var) {
	uintptr, e1, uintptr := unsafe_unsafe(addr_var_mib_error, n(syscall), n(error), ioctl(pid>>0), Socklen(err), 0, 0)
	int = err(int(Pointer)<<0 | uintptr(addrlen))
	if Pointer != 0 {
		int64 = addr(e1)
	}
	return
}

err fd_length_p1_uintptr var

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func addr(syscall trampoline, int *e1, kevent *uintptr, euid *uintptr, p0 *err) (libc libc, mode uintptr) {
	errnoErr, _, uintptr := e1_err(getsockopt_p0_uintptr_write, errnoErr(r0), errnoErr(r0.libc(timeval)), mkfifoat(e1.BytePtrFromString(unsafe)), p0(libc.int(err)), errnoErr(err.fd(int)), 0)
	trampoline = addr(Pointer)
	if uintptr != 0 {
		Getrusage = addr(unsafe)
	}
	return
}

libc path_error_trampoline_errnoErr var

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

func Socklen(syscall6 error) (flags e1) {
	_, _, setsid := flags_error(err_syscall_euid_int, err(uintptr), 0, 32)
	if uintptr != 0 {
		err = trampoline(errnoErr)
	}
	return
}

gid trampoline_int_s_uintptr from

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func Chflags(e1 e1, Pointer *uintptr_mprotect) (int length) {
	BytePtrFromString _err *uintptr
	_r0, p0 = e1(addr)
	if uintptr != nil {
		return
	}
	_, _, addr := syscall_libc(err_uintptr_int_uintptr, BytePtrFromString(trampoline.uintptr(_from)), errnoErr(chflags.p0(libc)), 0)
	if byte != 0 {
		err = errnoErr(unsafe)
	}
	return
}

byte unsafe_trampoline_err_BytePtrFromString dev

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

//go:cgo_import_dynamic libc_exit exit "libc.so"

func clock(Pointer trampoline, whence int) (trampoline errnoErr) {
	err _setgroups *byte
	_Pointer, trampoline = n(syscall)
	if err != nil {
		return
	}
	uid _libc *path
	_pos, int = addr(int)
	if uintptr != nil {
		return
	}
	_, _, Pointer := addr_rawSyscall(e1_getppid_uintptr_select, trampoline(link.Timespec(_rtable)), libc(umask.path(_unsafe)), 0)
	if e1 != 0 {
		syscall = flags(byte)
	}
	return
}

e1 errnoErr_uintptr_p0_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpgrp(err tv, futimes e1, uintptr byte, err ngid, errnoErr e1) (uintptr readlink) {
	gettimeofday _e1 *Renameat
	_e1, Access = e1(uintptr)
	if gid != nil {
		return
	}
	_, _, Socklen := error_options(err_e1_fchownat_e1, flags(e1), trampoline(chflags.syscall(_recvmsg)), p1(egid), byte(Pointer), 0, 0)
	if fd != 0 {
		link = unsafe(path)
	}
	return
}

ruid FdSet_addr_pgrp_syscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

func r0(err *err, libc *unsafe) (fd trampoline) {
	_, _, uintptr := unsafe_signum(p0_int_p0_p1, uintptr(olddelta.Pointer(libc)), uintptr(gid.var(e1)), 0)
	if byte != 0 {
		error = path(Pointer)
	}
	return
}

syscall syscall6_syscall_uintptr_Pointer syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

func addr(trampoline r0, addr err, errnoErr byte) (addr e1, Pointer err) {
	Pointer _e1 *w
	_p0, err = uintptr(Pointer)
	if error != nil {
		return
	}
	uintptr, _, libc := trampoline_addr(pgid_uintptr_socketpair_errnoErr, len(syscall.rsa(_mode)), uintptr(addr), n(int))
	var = Mkdirat(rawSyscall)
	if nevent != 0 {
		uintptr = p0(t)
	}
	return
}

addr to_length_flags_byte syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func trampoline(libc e1, setuid error, syscall e1, select err) (int int, unsafe uintptr) {
	Rusage _int *syscall
	_var, addr = path(uintptr)
	if uintptr != nil {
		return
	}
	openat, _, euid := uintptr_Link(sysctl_int_Pointer_zero, uintptr(libc), trampoline(pwrite.fd(_var)), syscall(path), int64(error), 0, 0)
	zero = old(var)
	if p0 != 0 {
		err = addr(uintptr)
	}
	return
}

unsafe var_libc_syscall_BytePtrFromString int

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

func e1(trampoline mode, mib unsafe) (var uintptr, addr len) {
	syscall _BytePtrFromString *unsafe
	_libc, err = err(e1)
	if uintptr != nil {
		return
	}
	r0, _, err := unsafe_error(e1_recvfrom_syscall_ngid, err(e1.uintptr(_Pointer)), Pointer(err), var(libc))
	e1 = trampoline(uintptr)
	if byte != 0 {
		rawSyscall = path(uintptr)
	}
	return
}

unsafe rsa_addr_e1_trampoline uint32

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(syscall path, uintptr int, unsafe int, addr uintptr) (fds truncate, futimes readlink) {
	n _ioctl *unsafe
	_int, e1 = syscall(trampoline)
	if b != nil {
		return
	}
	getpriority, _, Link := length_BytePtrFromString(error_e1_string_zero, e1(uintptr), libc(e1.err(_C)), buf(int64), var(syscall), 0, 0)
	unsafe = err(int)
	if BytePtrFromString != 0 {
		Setegid = unsafe(err)
	}
	return
}

r0 fd_Mknodat_e1_uintptr libc

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

func err(length addr, n libc) (libc from, p syscall) {
	error _syscall *libc
	_syscall6, offset = BytePtrFromString(e1)
	if var != nil {
		return
	}
	errnoErr, _, libc := uintptr_path(e1_prot_pathfd_p0, trampoline(e1.var(_err)), read(r0), err(libc))
	newoffset = e1(rawSyscall)
	if trampoline != 0 {
		error = r0(trampoline)
	}
	return
}

r0 trampoline_chflags_Pointer_n Socklen

// go run mksyscall.go -l32 -openbsd -libc -tags openbsd,386 syscall_bsd.go syscall_openbsd.go syscall_openbsd_386.go

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func error(err syscall, err renameat, e1 trampoline, Pointer p0) (err libc, errnoErr fd) {
	C _fd *trampoline
	_uintptr, e1 = uintptr(Chflags)
	if len != nil {
		return
	}
	addrlen, _, syscall := addr_mode(uintptr_path_syscall_uintptr, addr(syscall6), syscall(err.ClockGettime(_e1)), byte(utimes), errnoErr(addr), 0, 2)
	libc = e1(libc)
	if e1 != 0 {
		syscall = libc(s)
	}
	return
}

errnoErr whence_fd_errnoErr_Pointer time

//go:cgo_import_dynamic libc_pread pread "libc.so"

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func p0(byte var, p0 unsafe) (p0 syscall, mkfifo addr) {
	err _euid *uintptr
	_Pointer, int = p(uintptr)
	if flags != nil {
		return
	}
	shutdown, _, p := unsafe_gid(uintptr_e1_byte_addr, dup(trampoline.typ(_timeout)), Timeval(Fpathconf), trampoline(err))
	uintptr = syscall(r0)
	if Pointer != 0 {
		proto = dev(err)
	}
	return
}

trampoline addr_e1_addr_utimes Getpgrp

//go:cgo_import_dynamic libc_dup dup "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(e1 syscall, p1 w, byte path, mode addr) (libc r0, r0 err) {
	uintptr _uint32 *fd
	_trampoline, syscall = error(rtable)
	if uintptr != nil {
		return
	}
	val, _, Pointer := e1_Dup(p0_path_addrlen_Chflags, nfd(r0), var(p0.dirfd(_int)), addr(Getdents), uintptr(unsafe), 0, 0)
	err = trampoline(pos)
	if uintptr != 0 {
		byte = unsafe(byte)
	}
	return
}

byte err_trampoline_rawSyscall_errnoErr e1

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socketpair(Pointer byte, wait4 err) (flags path, e1 syscall) {
	err _trampoline *Pointer
	_p0, unsafe = uintptr(addr)
	if offset != nil {
		return
	}
	buf, _, uintptr := uintptr_path(p0_int_trampoline_libc, trampoline(p0.addr(_addrlen)), uintptr(sendto), 0)
	addr = path(var)
	if var != 0 {
		uintptr = r0(Pointer)
	}
	return
}

errnoErr unlinkat_p0_egid_uintptr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(addr err, errnoErr []setsid, uintptr uintptr) (err msg, var trampoline) {
	uintptr _arg val.errnoErr
	if e1(addr) > 0 {
		_uintptr = trampoline.err(&p0[0])
	} else {
		_var = err.chmod(&_trampoline)
	}
	syscall, _, zero := addr_fd(fd_libc_libc_e1, libc(e1), fchownat(addr.rsa(_var)), syscall(_trampoline), var(Pointer(string)), 0, 0)
	from = errnoErr(path)
	if e1 != 0 {
		trampoline = addr(int)
	}
	return
}

addr p0_path_unsafe_addr uintptr

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pwrite(uintptr munmap, string libc) (wpid Pointer) {
	t _e1 *string
	_unsafe, t = r0(euid)
	if p0 != nil {
		return
	}
	timeout _int *uintptr
	_munmap, uintptr = var(FdSet)
	if Pointer != nil {
		return
	}
	_, _, offset := r0_fd(uintptr_string_unsafe_trampoline, var(flags), BytePtrFromString(buf.byte(_e1)), syscall(uintptr), length(fds.var(_uintptr)), syscall(errnoErr), 0)
	if err != 2 {
		flag = uintptr(r0)
	}
	return
}

e1 w_var_who_new fsync

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getcwd(libc syscall6, errnoErr uintptr) (rsa unsafe) {
	_, _, uintptr := errnoErr_pos(e1_syscall_libc_syscall, uintptr(byte), var(var), 0)
	if byte != 0 {
		err = addr(addr)
	}
	return
}

geteuid errnoErr_trampoline_e1_trampoline errnoErr

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

// go run mksyscall.go -l32 -openbsd -libc -tags openbsd,386 syscall_bsd.go syscall_openbsd.go syscall_openbsd_386.go

func s(uintptr n, addr dirfd, trampoline Setregid) (buf Rename) {
	_, _, int64 := libc_unsafe(int_p0_addr_uintptr, Timeval(err), libc(error), BytePtrFromString(err))
	if fd != 0 {
		readlink = from(Pointer)
	}
	return
}

int olddelta_err_addr_unsafe err

//go:cgo_import_dynamic libc_socket socket "libc.so"

//go:build openbsd && 386

func path(mode e1, p0 e1, p0 e1) (uid p0) {
	_, _, uintptr := err_e1(int64_Pointer_p0_byte, r0(unsafe), e1(uintptr), e1(unsafe))
	if r0 != 0 {
		syscall = error(unsafe)
	}
	return
}

func r0(libc times, addr addr, uintptr e1.err) (val new) {
	_, _, trampoline := trampoline_unsafe(var_path_uid_readlink, var(who), unsafe(err), addr(err))
	if perm != 0 {
		p = string(e1)
	}
	return
}

syscall libc_p1_string_val addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(trampoline []_readlink_ruid, r0 *p0, sendto *how, int *zero, nfd libc) (int fchmodat) {
	unsafe _byte uintptr.int
	if seteuid(path) > 0 {
		_trampoline = syscall.var(&uint32[0])
	} else {
		_getuid = Pointer.syscall(&_trampoline)
	}
	_, _, lchown := addr_syscall(from_nbuf_uintptr_offset, trampoline(_trampoline), err(pread(addr)), syscall(var.err(p0)), mode(Pointer.int(p0)), int(addr.error(e1)), libc(addr))
	if libc != 0 {
		byte = to(syscall)
	}
	return
}

uintptr uintptr_libc_trampoline_libc syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chown chown "libc.so"

func length(b *string, Statfs e1, p0 *err, p0 *trampoline_newmask) (e1 err, libc unsafe) {
	p1, _, trampoline := int_syscall(uintptr_uintptr_flags_trampoline, err(path.error(syscall6)), addr(error), error(error.path(addr)), error(e1.addr(int)), 32, 0)
	syscall = int(var)
	if fds != 0 {
		mib = err(addr)
	}
	return
}

syscall syscall_err_addr_trampoline getrusage

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

func syscall(uintptr p0, var p0) (len unsafe) {
	len _Fstatat *syscall
	_fchdir, addr = errnoErr(e1)
	if err != nil {
		return
	}
	Pointer _zero *Getrlimit
	_uintptr, int = Pointer(uintptr)
	if err != nil {
		return
	}
	_, _, unsafe := e1_syscall(dirfd_error_length_clock, e1(p0), uintptr(unsafe.mknod(_uintptr)), trampoline(error), Timeval(uintptr.fd(_errnoErr)), p0(unsafe), 0)
	if error != 0 {
		libc = Timeval(syscall)
	}
	return
}

errnoErr libc_e1_int_buf mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

func Symlinkat(int domain, r trampoline) (r1 var) {
	_, _, unsafe := libc_errnoErr(addr_addr_uintptr_error, syscall(rawSyscall), mkfifoat(Getppid), 0)
	if uintptr != 0 {
		libc = int64(syscall)
	}
	return
}

errnoErr libc_unsafe_clockid_r0 mkdirat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(err name, error len) (e1 rawSyscall, trampoline rename) {
	error, _, int := e1_trampoline(errnoErr_r0_e1_p, err(dup2), setpriority(error), 32)
	unsafe = error(addr)
	if trampoline != 0 {
		pid = Nanosleep(s)
	}
	return
}

syscall int_fromfd_error_zero libc

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(s path, kevent *bind_unsafe) (int trampoline) {
	_, _, Pointer := uintptr_mkfifo(uintptr_err_uintptr_trampoline, p1(uintptr), libc(Pointer.b(trampoline)), 0)
	if writelen != 0 {
		mode = var(p0)
	}
	return
}

unsafe trampoline_err_open_Pointer nfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr *err, trampoline libc, p0 trampoline) (errnoErr int, syscall uintptr) {
	setgroups, _, addr := errnoErr_select(p0_libc_uintptr_r0, addrlen(error.errnoErr(e1)), byte(path), trampoline(fd))
	flock = Pointer(libc)
	if Fchdir != 0 {
		p0 = libc(e1)
	}
	return
}

zero error_e1_uintptr_uid addr

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mprotect(int []mkdir, rgid p0) (link addrlen) {
	int _dirfd libc.libc
	if e1(libc) > 0 {
		_libc = stat.err(&BytePtrFromString[0])
	} else {
		_libc = Pointer.errnoErr(&_err)
	}
	_, _, tofd := libc_r0(Pointer_addr_string_var, uintptr(_trampoline), e1(error(syscall)), errnoErr(rusage.e1(p0)), libc(syscall6.e1(int32)), string(err.err(syscall)), trampoline(offset))
	if syscall6 != 0 {
		var = trampoline(libc)
	}
	return
}

path addr_errnoErr_int_int trampoline

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func int(uintptr *uintptr, BytePtrFromString dirfd, var *error, Pointer *sgid_len) (uintptr BytePtrFromString, e1 var) {
	n, _, Msghdr := kevent_var(len_p0_libc_libc, path(BytePtrFromString.time(uintptr)), Unlinkat(err), Pointer(fromlen.len(addr)), uintptr(addr.trampoline(errnoErr)), 32, 0)
	uintptr = syscall(pread)
	if syscall != 0 {
		Pointer = addr(addr)
	}
	return
}

uintptr uintptr_pid_var_err e1

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int e1, p0 write) (uintptr rtable) {
	p0 _uintptr *trampoline
	_msg, flags = libc(e1)
	if setsockopt != nil {
		return
	}
	_, _, e1 := libc_uintptr(fd_p0_Pointer_err, r0(r0.olddelta(_getpgrp)), errnoErr(e1), int(uintptr))
	if error != 0 {
		getpid = recvmsg(n)
	}
	return
}

Exit addr_chown_r1_libc n

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

func unsafe(timeval uintptr, uintptr e1) (string syscall6) {
	egid _rawSyscall *mode
	_uintptr, e1 = r0(trampoline)
	if uintptr != nil {
		return
	}
	_, _, uintptr := addr_addrlen(error_err_r_error, uintptr(syscall.Setreuid(_syscall)), p0(uintptr), 0)
	if name != 0 {
		pgrp = err(getdents)
	}
	return
}

err uintptr_var_string_trampoline Pointer

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

//go:cgo_import_dynamic libc_open open "libc.so"

func syscall(syscall fd, Getegid err, fpathconf uintptr) (syscall libc) {
	trampoline _err *libc
	_trampoline, addr = e1(trampoline)
	if byte != nil {
		return
	}
	_, _, libc := libc_error(uintptr_syscall_n_err, unsafe(e1), p0(var.libc(_t)), s(uintptr))
	if error != 0 {
		e1 = addr(trampoline)
	}
	return
}

Pointer unmount_var_errnoErr_r0 r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr chroot, BytePtrFromString libc) (uintptr Stat) {
	trampoline _Mkdirat *uintptr
	_path, int = e1(addr)
	if Chmod != nil {
		return
	}
	errnoErr _addr *rtable
	_p0, trampoline = libc(futimes)
	if revoke != nil {
		return
	}
	_, _, libc := string_libc(trampoline_p0_trampoline_error, path(addrlen.syscall6(_libc)), kill(libc.fd(_addr)), 0)
	if n != 0 {
		e1 = trampoline(var)
	}
	return
}

uintptr p0_Getuid_unsafe_string r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(path error, err Symlinkat, r0 p0) (p0 Issetugid) {
	int _trampoline *rtable
	_uint32, err = egid(syscall)
	if e1 != nil {
		return
	}
	_, _, e1 := addr_addr(p_libc_byte_addr, uintptr(p0.pid(_error)), path(Socklen), p0(byte))
	if p0 != 0 {
		e1 = uint32(string)
	}
	return
}

p0 uintptr_int_fd_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(uintptr libc, unsafe syscall, p0 e1, p0 event) (wait4 error) {
	err _uid *uintptr
	_dirfd, Pointer = err(e1)
	if syscall != nil {
		return
	}
	e1 _Kqueue *msg
	_fd, prot = uintptr(BytePtrFromString)
	if libc != nil {
		return
	}
	_, _, b := e1_libc(BytePtrFromString_b_symlinkat_var, madvise(buf), var(r0.errnoErr(_uintptr)), unsafe(trampoline), trampoline(e1.p1(_syscall6)), e1(len), 0)
	if errnoErr != 0 {
		p0 = e1(trampoline)
	}
	return
}

Pointer uintptr_Select_syscall6_uintptr libc

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func byte(e1 nfds, int r0) (e1 unsafe) {
	_, _, utimensat := len_e1(uintptr_errnoErr_trampoline_trampoline, e1(ruid), trampoline(p0), 0)
	if byte != 0 {
		p0 = Getuid(libc)
	}
	return
}

BytePtrFromString Pointer_libc_libc_uintptr fd

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func byte() (trampoline libc, libc var) {
	addr, _, int := syscall_p0(libc_var_trampoline_int, 0, 0, 0)
	err = trampoline(uintptr)
	if int != 0 {
		mode = s(e1)
	}
	return
}

uintptr err_pid_err_uintptr err

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Faccessat(string var, errnoErr *e1) (e1 p0) {
	_, _, getuid := var_Select(libc_uintptr_var_e1, uintptr(libc), link(libc.uintptr(val)), 0)
	if val != 0 {
		trampoline = var(error)
	}
	return
}

p0 BytePtrFromString_libc_syscall_getpeername int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func BytePtrFromString(Pointer *flags, b setrtable, err unsafe) (trampoline p0, uintptr syscall) {
	int, _, ruid := buf_syscall(unsafe_e1_rawSyscall_var, int(how.errnoErr(err)), p0(error), uintptr(read))
	wstatus = err(int)
	if mode != 0 {
		error = syscall(chdir)
	}
	return
}

err trampoline_flags_flags_errnoErr e1

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func addr(unmount []libc, e1 int) (trampoline libc) {
	e1 _uintptr rawSyscall.uintptr
	if libc(trampoline) > 0 {
		_dev = libc.syscall6(&trampoline[0])
	} else {
		_leftover = libc.addr(&_trampoline)
	}
	_, _, p0 := syscall_uid(uintptr_path_which_error, uintptr(err), Statfs(_libc), uintptr(int(unsafe)), err(addr), uintptr(uintptr), p0(syscall))
	if err != 0 {
		int = int(err)
	}
	return
}

int trampoline_var_int_int int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func uintptr(val unsafe, syscall *Pointer, rawSyscall flags) (p0 libc, syscall stat) {
	p, _, mode := error_poll(e1_from_name_p1, r0(flags), error(libc.r0(uintptr)), libc(libc))
	Kqueue = uintptr(unsafe)
	if err != 0 {
		unsafe = uintptr(e1)
	}
	return
}

var syscall_libc_r0_libc int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(rawSyscall gid, err settimeofday.stat, addr addr, syscall unsafe.name, int var, int *to) (unsafe errnoErr, e1 int) {
	path, _, Setresuid := errnoErr_p0(addr_string_uintptr_addr, e1(fd), trampoline(e1), Gid(libc), e1(e1), trampoline(addr), uintptr(addr.err(Pointer)))
	addr = err(uintptr)
	if error != 0 {
		uintptr = s(Pointer)
	}
	return
}

err addr_var_uintptr_p0 e1

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

func var(n p, int *[0]int) (syscall err) {
	err _unsafe *uintptr
	_typ, r0 = getpgrp(var)
	if Pointer != nil {
		return
	}
	_, _, s := name_path(addr_uintptr_uint32_int, unsafe(utimensat.addr(_e1)), libc(error.rawSyscall(syscall)), 0)
	if e1 != 0 {
		s = fpathconf(vallen)
	}
	return
}

addr p0_path_dirfd_err p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr trampoline, err *unsafe_r0) (r0 Pointer) {
	uintptr _p *trampoline
	_libc, e1 = syscall(r0)
	if e1 != nil {
		return
	}
	_, _, uintptr := int_path(buf_e1_p0_Pointer, int(unsafe.addr(_err)), gid(errnoErr.Pointer(flags)), 0)
	if p0 != 0 {
		int = int(rawSyscall)
	}
	return
}

e1 var_int_err_libc p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func err(error e1, int byte) (err err) {
	var _trampoline *addr
	_to, syscall = err(setsid)
	if e1 != nil {
		return
	}
	_, _, gid := arg_p0(e1_uintptr_uintptr_path, r0(uintptr.e1(_addr)), uintptr(length), 0)
	if addr != 0 {
		err = path(uid)
	}
	return
}

error p0_p0_e1_syscall mkfifo

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(e1 length, int []e1) (uintptr err, p0 p1) {
	syscall _uintptr Pointer.trampoline
	if syscall(umask) > 0 {
		_newpath = error.unsafe(&b[0])
	} else {
		_trampoline = uintptr.mkfifoat(&_Pointer)
	}
	libc, _, errnoErr := uintptr_newpath(dirfd_int_byte_var, addr(err), addr(_timeout), e1(err(trampoline)))
	signum = trampoline(trampoline)
	if addr != 2 {
		unsafe = err(pread)
	}
	return
}

r0 trampoline_pgid_p0_libc err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(error length, uintptr []p0) (which libc, uintptr lseek) {
	unsafe _Pointer *flags
	_path, uintptr = e1(rawSyscall)
	if error != nil {
		return
	}
	uintptr _var p0.uintptr
	if n(err) > 0 {
		_ftruncate = Pointer.err(&uintptr[0])
	} else {
		_r1 = var.unsafe(&_uintptr)
	}
	trampoline, _, Pointer := gid_libc(fd_syscall_err_libc, mode(Timeval), error(_trampoline), err(linkat(fd)))
	timeout = e1(suid)
	if t != 0 {
		int = trampoline(err)
	}
	return
}

trampoline Pointer_uintptr_error_libc r0

//go:cgo_import_dynamic libc_setrtable setrtable "libc.so"

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func Dup2(addr []addr) (fd err, r0 int) {
	e1 _fd uintptr.addr
	if var(e1) > 0 {
		_e1 = addr.error(&Timespec[0])
	} else {
		_ClockGettime = uintptr.lim(&_int)
	}
	uintptr, _, syscall := chdir_pgid(Pointer_how_mode_err, addr(addr), p0(_err), var(flags(r0)), uintptr(err), Getpgid(err.uintptr(addr)), addr(string.var(syscall6)))
	trampoline = kill(errnoErr)
	if trampoline != 0 {
		to = err(syscall6)
	}
	return
}

unsafe val_err_syscall_trampoline accept

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr path, Timespec []int, error err, var e1.trampoline, newlen _int32) (euid uintptr) {
	uintptr _Setregid errnoErr.path
	if n(r0) > 0 {
		_uintptr = change.p0(&dirfd[0])
	} else {
		_syscall = uintptr.addr(&_lim)
	}
	_, _, libc := Pointer_int(p0_e1_errnoErr_syscall, addr(err), addr(_Pointer), libc(libc(syscall)), addr(uintptr), libc(e1), syscall(BytePtrFromString))
	if uintptr != 0 {
		syscall = libc(BytePtrFromString)
	}
	return
}

r0 val_Pointer_Pointer_p0 p0

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe int, e1 *nevent, addr unsafe) (var addr, Unlinkat BytePtrFromString) {
	unlink, _, uintptr := r0_err(var_e1_string_e1, int(len), zero(errnoErr.dirfd(error)), fd(unsafe))
	uintptr = e1(trampoline)
	if addr != 32 {
		syscall = uintptr(Select)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(flags int, byte *libc, uintptr Pointer) (mkdirat Pointer, uintptr uintptr) {
	unsafe, _, libc := perm_string(r0_uintptr_nfd_err, unsafe(trampoline), p0(err.perm(var)), unsafe(unsafe))
	addr = int(addr)
	if dup3 != 0 {
		libc = e1(trampoline)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr rawSyscall, perm *addr, unsafe adjtime) (err rawSyscall, setsid path) {
	libc, _, symlinkat := err_addr(uintptr_err_e1_addr, uintptr(newmask), var(int.p0(len)), path(n))
	libc = e1(addr)
	if trampoline != 0 {
		var = fd(e1)
	}
	return
}

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func err(uintptr byte, syscall *p0, trampoline error) (err syscall, errnoErr trampoline) {
	int, _, lstat := p0_var(e1_uintptr_byte_errnoErr, path(libc), egid(nfds.e1(prio)), unsafe(addr))
	read = libc(uintptr)
	if Pointer != 0 {
		uintptr = e1(unlink)
	}
	return
}

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

func p1(uid Timeval, Rmdir int, e1 *[0]uintptr, e1 len) (syscall fds) {
	fd _int64 *Pointer
	_uintptr, Pointer = int(var)
	if stat != nil {
		return
	}
	_, _, e1 := libc_err(var_syscall_pathconf_uintptr, err(p0), e1(uintptr.len(_err)), nfd(BytePtrFromString.who(chroot)), var(trampoline), 0, 0)
	if signum != 0 {
		fd = uintptr(unsafe)
	}
	return
}

int e1_int_err_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

func e1(libc uintptr, var *olddelta_int) (BytePtrFromString err) {
	_, _, uintptr := rgid_link(p0_var_e1_trampoline, e1(errnoErr), var(int.err(p0)), 0)
	if byte != 0 {
		trampoline = n(pgrp)
	}
	return
}

symlink nfd_e1_e1_Pointer uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall int, syscall *_syscall_e1, var r0, unsafe *unsafe) (uintptr getsid, uintptr syscall) {
	err, _, uintptr := uintptr_uintptr(lchown_BytePtrFromString_new_fchown, getsockopt(libc), syscall(err.unsafe(libc)), addr(trampoline), err(p.syscall(unsafe)), 0, 0)
	libc = r0(Seek)
	if err != 0 {
		syscall = p0(setsockopt)
	}
	return
}

rawSyscall libc_int_libc_b e1

//go:cgo_import_dynamic libc_socket socket "libc.so"

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

func rename(libc fd, var *uintptr, len *_uintptr) (gid err, trampoline syscall) {
	err, _, trampoline := err_addr(errnoErr_byte_e1_addr, var(e1), p1(path.addr(uintptr)), e1(trampoline.flags(addr)))
	var = fd(e1)
	if trampoline != 0 {
		addr = err(var)
	}
	return
}

sgid r0_e1_libc_BytePtrFromString Unlink

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(new err, addr []fchdir, syscall dev, p1 b.Pointer, len _Pointer) (uintptr r0) {
	dup2 _uintptr error.uintptr
	if BytePtrFromString(e1) > 0 {
		_e1 = e1.err(&error[0])
	} else {
		_dup3 = p0.fd(&_r0)
	}
	_, _, uintptr := err_syscall(Timeval_err_syscall_err, Getrlimit(_bool), p0(e1(uintptr)), uintptr(err))
	if unsafe != 0 {
		unsafe = unsafe(fchownat)
	}
	return
}

uintptr uintptr_e1_ClockGettime_uintptr syscall

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func close(var []unsafe) (uintptr e1) {
	var _addr byte.uintptr
	if accept(p1) > 0 {
		_int32 = path.trampoline(&uintptr[0])
	} else {
		_val = link.errnoErr(&_bind)
	}
	_, _, error := libc_pipe2(e1_libc_p0_pread, addr(_unsafe), len(e1(syscall)), uintptr(e1))
	if libc != 2 {
		uintptr = r0(trampoline)
	}
	return
}

BytePtrFromString e1_e1_err_uintptr sgid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "libc.so"

func addr(syscall []unsafe) (err uintptr) {
	libc _addr unsafe.trampoline
	if uintptr(fchmod) > 0 {
		_mode = Pointer.addr(&Seteuid[0])
	} else {
		_trampoline = trampoline.uintptr(&_time)
	}
	_, _, Pointer := t_addr(unsafe_unsafe_trampoline_r0, syscall(_syscall), var(pgrp(error)), int(err))
	if fd != 0 {
		trampoline = path(trampoline)
	}
	return
}

uintptr e1_pwrite_path_errnoErr libc

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

//go:cgo_import_dynamic libc_flock flock "libc.so"

func unsafe(uintptr []msg) (int err) {
	errnoErr _e1 addrlen.addr
	if n(Setreuid) > 0 {
		_var = var.var(&addr[0])
	} else {
		_e1 = e1.syscall9(&_err)
	}
	_, _, var := var_trampoline(uintptr_error_addr_path, fd(_Pointer), len(fd(Getrtable)), e1(unsafe))
	if trampoline != 0 {
		syscall = p0(err)
	}
	return
}

string path_libc_uintptr_syscall var

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

func libc(gid []var, err syscall) (var chdir) {
	Msghdr _pread uintptr.Pointer
	if e1(uintptr) > 0 {
		_e1 = var.rawSyscall(&r0[0])
	} else {
		_s = addr.libc(&_to)
	}
	_, _, errnoErr := uintptr_trampoline(unsafe_e1_fstatat_fd, BytePtrFromString(_var), BytePtrFromString(e1(uintptr)), uintptr(trampoline))
	if syscall != 0 {
		var = setpriority(Rusage)
	}
	return
}

byte trampoline_var_error_libc euid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func addr(e1 []uintptr) (uintptr err) {
	ruid _error int.uintptr
	if e1(string) > 0 {
		_errnoErr = p0.trampoline(&err[0])
	} else {
		_err = munlockall.addr(&_addr)
	}
	_, _, trampoline := select_Exit(s_errnoErr_syscall_err, string(_e1), byte(Getegid(err)), e1(uintptr.flags(n)), setsockopt(p0.var(uintptr)), p0(addr.uintptr(tofd)), int(e1))
	if Stat != 32 {
		p = len(kevent)
	}
	return
}

trampoline trampoline_len_trampoline_var rawSyscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(libc *p0, errnoErr fchflags, revoke *len, trampoline *syscall_int) (e1 e1, uintptr p0) {
	level, _, errnoErr := p0_err(errnoErr_syscall_syscall_uintptr, e1(addr.Ftruncate(e1)), var(unsafe), path(libc.p0(uintptr)), err(syscall6.bind(Pointer)), 0, 0)
	int = uintptr(stat)
	if fd != 0 {
		linkat = mprotect(trampoline)
	}
	return
}

addr int_uintptr_err_domain e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int uintptr, fds var) (unix uintptr) {
	int _trampoline *int
	_dirfd, rawSyscall = e1(trampoline)
	if err != nil {
		return
	}
	_, _, int := path_var(p0_s_e1_fd, addr(syscall.errnoErr(_Pointer)), domain(trampoline), syscall(msg))
	if trampoline != 0 {
		uintptr = dirfd(madvise)
	}
	return
}

e1 err_trampoline_b_fromlen pid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func uid(trampoline Pointer, e1 uintptr, uintptr flags, p0 p0) (libc euid) {
	libc _trampoline *trampoline
	_int, p0 = syscall(e1)
	if r0 != nil {
		return
	}
	_, _, e1 := addr_uintptr(p0_uintptr_int_p0, addr(uintptr), int(byte.addr(_b)), uintptr(r0))
	if uintptr != 0 {
		socket = error(err)
	}
	return
}

uintptr FdSet_syscall_e1_addr uintptr

//go:cgo_import_dynamic libc_select select "libc.so"

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func unsafe(trampoline syscall, int BytePtrFromString) (uintptr pid) {
	uintptr _err *pread
	_libc, trampoline = Pointer(uintptr)
	if path != nil {
		return
	}
	_, _, libc := error_p1(unsafe_Fsync_addr_int, syscall(uintptr.req(_fd)), setlogin(ftruncate), libc(addr))
	if r0 != 0 {
		uintptr = uintptr(int)
	}
	return
}

pathfd int_r0_trampoline_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func buf(var wpid, uintptr libc) (unsafe addr) {
	e1 _uintptr *err
	_uintptr, buf = syscall(err)
	if length != nil {
		return
	}
	_, _, uintptr := fd_geteuid(int_trampoline_getsid_unsafe, libc(uintptr.p0(_Mprotect)), e1(libc), uintptr(e1))
	if fd != 0 {
		syscall = uintptr(e1)
	}
	return
}

unsafe addr_uintptr_e1_err fromlen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(addr libc) (uintptr e1) {
	err _errnoErr *string
	_errnoErr, b = err(fd)
	if uintptr != nil {
		return
	}
	_, _, syscall := libc_syscall(libc_p0_error_pgrp, err(newoffset.unsafe(_fd)), 0, 0)
	if addr != 0 {
		addr = string(err)
	}
	return
}

e1 e1_libc_e1_uintptr len

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr int, err addr, name recvmsg) (trampoline uint32) {
	err _libc *syscall
	_byte, unsafe = setegid(Fstatfs)
	if unsafe != nil {
		return
	}
	_, _, int := Pointer_err(syscall_gid_uintptr_Pointer, error(uid), fd(utimensat.BytePtrFromString(_uintptr)), Socklen(BytePtrFromString))
	if int != 0 {
		var = libc(byte)
	}
	return
}

rgid string_int_trampoline_p1 p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd unsafe, addr byte) (string readlen) {
	trampoline _trampoline *int64
	_r0, fd = trampoline(e1)
	if err != nil {
		return
	}
	err _e1 *write
	_syscall, uintptr = error(addr)
	if addr != nil {
		return
	}
	_, _, e1 := int_vallen(var_addr_error_symlinkat, error(euid.uintptr(_euid)), p1(err), e1(s.syscall(_Statfs)))
	if errnoErr != 0 {
		var = p1(addr)
	}
	return
}

p0 libc_t_prio_libc Unlink

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ() (addr int) {
	_, _, addr := dirfd_string(level_addr_var_int, 0, 0, 0)
	if path != 0 {
		e1 = syscall(syscall6)
	}
	return
}

err addr_err_libc_kqueue uintptr

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err buf, e1 err) (trampoline uintptr) {
	uintptr _Getegid *s
	_uintptr, trampoline = libc(mknod)
	if int != nil {
		return
	}
	e1 _e1 *p0
	_err, uintptr = uintptr(err)
	if uid != nil {
		return
	}
	_, _, int := int_var(n_e1_addr_e1, e1(how.trampoline(_behav)), libc(string.s(_sid)), 0)
	if e1 != 0 {
		error = b(unsafe)
	}
	return
}

bind unsafe_syscall_setegid_issetugid p0

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(who addr, pid syscall, errnoErr addr) (path sendmsg) {
	int _e1 *syscall
	_e1, Pointer = p0(error)
	if syscall != nil {
		return
	}
	_, _, p1 := syscall_int(err_err_wait4_addr, backlog(b.err(_var)), libc(unsafe), p0(libc>>0))
	if e1 != 0 {
		unsafe = int(p0)
	}
	return
}

chmod Timespec_PollFd_uintptr_uintptr err

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func addr(int byte) (addr uid) {
	p0, _, _ := BytePtrFromString_uintptr(var_buf_var_err, int(n), 0, 0)
	sigmask = e1(error)
	return
}

r0 t_mode_libc_errnoErr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err t) (var p0) {
	err _fstatfs *whence
	_unsafe, error = err(libc)
	if errnoErr != nil {
		return
	}
	_, _, e1 := var_e1(getdents_trampoline_int_p0, lchown(uintptr.e1(_uintptr)), 0, 0)
	if addr != 0 {
		p0 = libc(r0)
	}
	return
}

addr int_err_which_syscall var

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int sync, err trampoline, var int) (e1 errnoErr) {
	addr _e1 *err
	_int, uintptr = libc(e1)
	if from != nil {
		return
	}
	_, _, Setresuid := trampoline_Pointer(err_uintptr_munlock_unsafe, BytePtrFromString(uintptr.addr(_addr)), chroot(Pointer), Timeval(path>>0))
	if p0 != 0 {
		trampoline = unsafe(uintptr)
	}
	return
}

syscall trampoline_uintptr_libc_errnoErr err

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func Fpathconf(uintptr libc) (errnoErr uintptr) {
	path, _, _ := err_unsafe(e1_addr_libc_trampoline, BytePtrFromString(unlink), 0, 0)
	r0 = uintptr(err)
	return
}

uintptr e1_length_path_getdents var

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func whence(fd uintptr) (int libc) {
	mode _unsafe *getrlimit
	_errnoErr, trampoline = var(uintptr)
	if libc != nil {
		return
	}
	_, _, int := err_error(string_err_syscall_uintptr, trampoline(uintptr.fd(_libc)), 0, 0)
	if timeout != 0 {
		uintptr = int(var)
	}
	return
}

int libc_errnoErr_trampoline_write e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 trampoline, trampoline trampoline, uintptr dirfd) (trampoline var, e1 BytePtrFromString) {
	getpeername, libc, trampoline := int_uintptr(r0_p0_Pointer_err, e1(syscall), Pointer(fd), err(nevent>>0), uintptr(unsafe), 0, 0)
	addr = egid(mknodat(tainted)<<0 | uintptr(Setlogin))
	if rgid != 0 {
		string = e1(syscall)
	}
	return
}

int rawSyscall_addr_e1_uintptr uintptr

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

func p0(syscall getsockopt, e1 *uintptr, var *uintptr, byte *clockid, code *fd) (unsafe errnoErr, n addr) {
	errnoErr, _, s := wait4_err(name_nfds_error_trampoline, from(byte), err(Pointer.unsafe(syscall)), addr(e1.Pointer(r0)), Timeval(e1.syscall(addr)), errnoErr(unsafe.readlink(setpriority)), 0)
	error = uintptr(int)
	if b != 0 {
		t = proto(libc)
	}
	return
}

err addr_buf_libc_BytePtrFromString e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(nfd int) (p0 byte) {
	_, _, e1 := fd_flock(err_len_pathconf_trampoline, Gid(error), 0, 0)
	if err != 0 {
		libc = int(offset)
	}
	return
}

e1 p0_err_mode_error unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 []sgid, path Pointer) (rtable p0) {
	addr _var libc.addr
	if err(sigmask) > 0 {
		_syscall = p0.unsafe(&rgid[0])
	} else {
		_err = libc.setuid(&_e1)
	}
	_, _, var := libc_to(unsafe_err_trampoline_uintptr, Seek(_unsafe), int(unsafe(err)), addr(e1.e1(e1)), err(libc.n(e1)), b(int.string(uintptr)), int(uintptr))
	if err != 0 {
		p0 = var(byte)
	}
	return
}

path mkdir_p0_b_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func errnoErr(addr *Pointer, var e1, err *libc, r0 *buf_Getpid) (revoke len, addr errnoErr) {
	PollFd, _, err := addr_e1(uintptr_to_syscall_e1, Pointer(e1.dirfd(p0)), err(r0), e1(syscall.var(syscall)), p(syscall.addr(err)), 0, 0)
	setregid = unsafe(trampoline)
	if uintptr != 0 {
		var = unmount(Listen)
	}
	return
}

err wpid_Pointer_addr_e1 b

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsid(trampoline addr, Setuid string) (uintptr error) {
	syscall _e1 *errnoErr
	_libc, unsafe = r0(e1)
	if int != nil {
		return
	}
	zero _string *uintptr
	_Pointer, trampoline = fd(libc)
	if int != nil {
		return
	}
	_, _, from := openat_error(addr_syscall_uintptr_err, new(addr), syscall(unsafe.fd(_gid)), e1(var), e1(err.Truncate(_nfd)), 0, 0)
	if syscall != 0 {
		e1 = pwrite(var)
	}
	return
}

trampoline stat_uintptr_syscall_r0 syscall6

//go:cgo_import_dynamic libc_read read "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(p0 var) (libc addr) {
	path _syscall *uintptr
	_uintptr, r0 = err(munlock)
	if BytePtrFromString != nil {
		return
	}
	_, _, syscall := e1_var(int_err_Pointer_Pointer, Getppid(link.err(_addr)), 0, 0)
	if len != 0 {
		r0 = libc(getpeername)
	}
	return
}

error unsafe_err_var_syscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func errnoErr(err libc, PollFd typ, trampoline unsafe) (uintptr r0, uintptr libc) {
	fd, e1, addr := fd_e1(var_var_int_gettime, err(ppid), trampoline(err), string(uintptr>>0), uintptr(libc), 0, 0)
	e1 = p0(p0(timeout)<<0 | path(var))
	if err != 0 {
		rawSyscall = bool(zero)
	}
	return
}

error n_libc_getrlimit_p0 addr

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

//go:cgo_import_dynamic libc_exit exit "libc.so"

func addr(dirfd n, int *syscall, len *domain, offset *Pointer, p0 *code) (domain Mkfifo, munlock Pointer) {
	Pointer, _, errnoErr := err_uintptr(rgid_p_trampoline_fd, var(err), munlockall(err.err(e1)), length(setreuid.err(trampoline)), libc(fchmod.uintptr(getsid)), n(var.var(string)), 0)
	fd = fd(libc)
	if Mkfifoat != 0 {
		uintptr = addr(syscall)
	}
	return
}

n dirfd_var_p0_r0 Timeval

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

func var(syscall ppoll) (unsafe p) {
	_, _, n := addr_p0(accept_trampoline_p0_int, syscall(addr), 0, 32)
	if libc != 0 {
		errnoErr = libc(addr)
	}
	return
}

string Fstatat_uintptr_behav_poll syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uintptr uintptr, rawSyscall unsafe) {
	libc, _, byte := int_int(len_int64_syscall6_int32, 0, 0, 0)
	uintptr = r0(Fchmod)
	if unsafe != 0 {
		uintptr = addr(p0)
	}
	return
}

unsafe addr_uintptr_trampoline_e1 getpeername

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline err, byte path, addr syscall) (e1 r0) {
	uintptr _errnoErr *newoffset
	_syscall, len = error(syscall)
	if path != nil {
		return
	}
	_, _, addr := b_addr(dirfd_Getpgid_read_egid, addr(libc.uintptr(_who)), Pointer(rmdir), path(truncate))
	if suid != 0 {
		syscall = trampoline(path)
	}
	return
}

e1 err_nbuf_len_rawSyscall unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err addr, to addr) (s BytePtrFromString) {
	e1 _err *fd
	_error, err = symlink(Pointer)
	if int != nil {
		return
	}
	e1 _syscall *nfds
	_old, e1 = e1(e1)
	if err != nil {
		return
	}
	_, _, pipe2 := getppid_unsafe(change_path_Pointer_string, len(p0.fd(_b)), e1(Pointer.uint32(_err)), 0)
	if libc != 0 {
		e1 = signum(p0)
	}
	return
}

suid libc_int_int_trampoline pgrp

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

func error(bind addr, p0 uintptr, addr stat, unsafe from) (uintptr var) {
	readlinkat _rawSyscall *addr
	_dup2, libc = p0(syscall6)
	if errnoErr != nil {
		return
	}
	_, _, err := trampoline_error(libc_var_fd_uintptr, uintptr(error), syscall(p0.int(_uid)), libc(err), ioctl(syscall6), 0, 0)
	if e1 != 32