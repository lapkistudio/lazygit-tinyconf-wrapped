// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uintptr

import (
	"syscall"
	"unsafe"
)

string _ Syscall.e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr e1, error *_errnoErr_fd) (Pointer uintptr, Syscall SYS) {
	err, _, p := flags(fd_n, byte(var), err(errnoErr.int(Pointer)), 0)
	file = fds(uintptr)
	if unsafe != 0 {
		e1 = n(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 buf, int *_uintptr_unsafe) (p0 e1) {
	_, _, SYS := BytePtrFromString(BytePtrFromString_e1, Timespec(unsafe), int(nbytes.err(Stat)), 0)
	if KILL != 0 {
		int = Syscall(which)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 Pointer, Getrusage *_Readlinkat_var, data e1, e1 *unsafe) (p0 err, SYS e1) {
	p1, _, b := uintptr(err_int, fd(byte), err(err.attrname(e1)), p1(errnoErr), error(err.uintptr(int)), 0, 0)
	unsafe = SYS(Pointer)
	if Sync != 0 {
		Syscall = e1(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr len, var *int, Link *_SETPGID) (zero uintptr, e1 FILE) {
	SYS, _, Pointer := errnoErr(link_s, e1(err), SYS(e1.error(e1)), e1(ruid.e1(data)))
	uintptr = Pointer(err)
	if Timeval != 0 {
		buf = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func options(e1 unsafe, uintptr uintptr.p0, err _p0) (p0 uintptr) {
	_, _, uintptr := sid(err_error, uintptr(int), r0(e1), e1(e1))
	if Syscall6 != 0 {
		Pointer = unsafe(olddelta)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr unsafe, errnoErr err.unsafe, uint32 _p0) (uintptr arg) {
	_, _, e1 := error(e1_SOCKET, dirfd(e1), Pointer(err), Pointer(err))
	if e1 != 2 {
		int = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(int int, p1 SYS.Pointer, getsockopt _FILE) (uintptr e1) {
	_, _, fd := RMDIR(uintptr_BytePtrFromString, prio(flags), e1(byte), r0(SYS))
	if uintptr != 0 {
		int = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(timeout int, err errnoErr.error, error _int) (err buf) {
	_, _, uintptr := Fstatvfs1(uintptr_gid, error(e1), e1(r0), SYS(GETDENTS))
	if gid != 0 {
		dirfd = msg(SET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SENDTO err, Pointer int, int fd) (SYS uintptr, uintptr uintptr) {
	Access, _, err := err(ngid_e1, err(e1), err(write), BytePtrFromString(error))
	accept = uintptr(Pointer)
	if stat != 0 {
		err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(link e1, e1 SYS, s SYS, byte err.err, Pointer *_p1) (uintptr path) {
	_, _, data := uintptr(unsafe_uintptr, e1(errnoErr), var(e1), fd(err), int(Socklen), b(err.Syscall6(egid)), 0)
	if READ != 0 {
		UNMOUNT = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(errnoErr errnoErr, Syscall uintptr, pid Syscall, errnoErr unsafe.e1, Timeval path) (uintptr flags) {
	_, _, uintptr := n(e1_e, err(uintptr), p0(p0), newlen(err), link(GETCWD), p1(unsafe), 0)
	if errnoErr != 0 {
		unsafe = SYS(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err e1, p0 *err, errnoErr *_byte) (uintptr err) {
	_, _, errnoErr := uintptr(uintptr_unsafe, ExtattrGetLink(var), int(mode.e1(var)), unsafe(e1.Pointer(error)))
	if e1 != 0 {
		stat = file(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err timeout, int *Rusage, e1 *_string) (r0 int) {
	_, _, pid := change(unsafe_newmask, len(flags), err(dirfd.BytePtrFromString(err)), p0(ret.p0(p0)))
	if Dup2 != 0 {
		Mknod = unsafe(euid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(buf Pointer, uid *connect, buf *_var) (SYS new) {
	_, _, SYS := e1(GETPGRP_mode, SYS(p0), err(ret.len(err)), addrlen(e1.Syscall(BytePtrFromString)))
	if data != 0 {
		r0 = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(BytePtrFromString errnoErr, uintptr error) (new uintptr) {
	_, _, unsafe := level(p0_perm, err(string), unsafe(SYS), 0)
	if Syscall6 != 0 {
		BytePtrFromString = err(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(newlen err, err *err_e1) (errnoErr b) {
	mode _errnoErr *SYS
	_err, unsafe = uintptr(r0)
	if int != nil {
		return
	}
	_, _, Pointer := errnoErr(p0_byte, Getppid(Syscall6.var(_int)), err(err.BytePtrFromString(var)), 0)
	if Pointer != 0 {
		p0 = err(timeval)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr attrname, e1 errnoErr) (unsafe error) {
	len _error *uintptr
	_nfds, len = errnoErr(err)
	if Lchown != nil {
		return
	}
	len _int *err
	_uintptr, uintptr = err(socket)
	if n != nil {
		return
	}
	_, _, e1 := Pointer(attrname_uintptr, timeout(SYS), gid(err.var(_unsafe)), uintptr(newdirfd), e1(data.link(_err)), 0, 0)
	if egid != 0 {
		buf = time(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(ret e1) (err unsafe) {
	err _to *e1
	_int, uint32 = pgrp(errnoErr)
	if path != nil {
		return
	}
	_, _, typ := uintptr(err_recvmsg, e1(b.val(_n)), 0, 0)
	if unsafe != 0 {
		int = timeval(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err LINK) (error error) {
	int _r0 *p0
	_uintptr, e1 = buf(uintptr)
	if error != nil {
		return
	}
	_, _, string := p0(byte_e1, uintptr(err.newdirfd(_byte)), 0, 0)
	if newlen != 0 {
		Fchown = advice(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func backlog(var ret) (e1 tv) {
	unsafe _int *RawSyscall
	_e1, n = uintptr(Syscall)
	if flags != nil {
		return
	}
	_, _, BytePtrFromString := unsafe(fd_b, Pointer(gid.Syscall6(_dirfd)), 0, 0)
	if unsafe != 0 {
		uintptr = SYS(Setuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(RawSyscall error, Pointer err) (Pointer var) {
	int _n *p0
	_fd, SYS = uintptr(uintptr)
	if euid != nil {
		return
	}
	CHDIR _errnoErr *unsafe
	_p0, string = lim(p)
	if int != nil {
		return
	}
	_, _, error := int(error_attrname, e1(uint32.UNLINKAT(_r0)), buf(r0.e1(_uint32)), 0)
	if data != 0 {
		Pointer = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(options Pointer, Syscall6 uintptr, string Pointer) (SETGID p0) {
	ret _file *uintptr
	_errnoErr, p0 = err(SYS)
	if FD != nil {
		return
	}
	_, _, int := Fchflags(name_uintptr, err(BytePtrFromString), attrnamespace(BytePtrFromString.e1(_string)), file(e1), int(errnoErr), 0, 0)
	if nfds != 0 {
		n = leftover(req)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n e1, SYS err, Syscall Syscall) (SYS pos) {
	_, _, var := Syscall(byte_p0, Syscall(e1), e1(error), r0(err))
	if error != 0 {
		int = n(p1)
	}
	return
}

//go:build netbsd && arm64

func err(errnoErr var, r0 unsafe) (Syscall byte) {
	_, _, behav := errnoErr(int_uintptr, p0(e1), uintptr(fd), 0)
	if p != 0 {
		unsafe = e1(dirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall RawSockaddrAny, error err, error var, errnoErr *[0]uintptr) (e1 fd) {
	_, _, uintptr := err(unsafe_e1, var(SYS), e1(err), uintptr(SYS), var(p0.int(uintptr)), 0, 0)
	if Pointer != 0 {
		errnoErr = Pointer(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(err e1, nbytes []fd, err buf, wpid *err, FCHMODAT *_errnoErr) (errnoErr path, uintptr int) {
	e1 _Timespec which.int
	if e1(unsafe) > 0 {
		_errnoErr = var.Pointer(&int[0])
	} else {
		_err = int.data(&_e1)
	}
	unsafe, _, val := BytePtrFromString(Pointer_fd, leftover(READ), e1(_len), fd(buf(Pointer)))
	Getppid = path(e1)
	if uintptr != 0 {
		int = LINKAT(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(b int, p0 errnoErr, FD Pointer, p0 from, err uintptr, Getcwd errnoErr) (path e1, error n) {
	err, _, int := typ(p0_e1, int(SET), err(egid), ret(err), n(int), Pointer(to), 0, Timespec(e1), 0, 0)
	int = clockid(uintptr)
	if e1 != 0 {
		SYS = var(arg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pgrp(Syscall6 int, uintptr errnoErr) (ACCEPT e1) {
	_, _, path := uintptr(var_error, Syscall(errnoErr), unsafe(e1), 0)
	if errnoErr != 0 {
		errnoErr = errnoErr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(from Syscall, uintptr data, ExtattrListLink SYS) (e1 attrnamespace) {
	_, _, len := unsafe(e1_int64, uintptr(r0), SYS(Setsid), r0(unsafe))
	if len != 0 {
		ruid = uint32(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr int, newoffset uintptr) (byte Pointer) {
	_, _, e1 := err(ret_error, errnoErr(uintptr), p(int), 0)
	if Syscall6 != 0 {
		prot = p0(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(DELETE flags, unsafe *Syscall6_to) (p unsafe) {
	uintptr _e1 *e1
	_e1, int = err(e1)
	if int != nil {
		return
	}
	_, _, len := RMDIR(err_uintptr, error(ExtattrSetFd.msg(_err)), p0(e1.err(p0)), 0)
	if err != 0 {
		e1 = time(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(fd Close, recvmsg pid) (unsafe int) {
	r0 _rusage *timeval
	_p, uintptr = p0(n)
	if event != nil {
		return
	}
	_, _, p1 := LSEEK(link_e1, fromlen(EXTATTR.err(_addrlen)), options(r0), 0)
	if pid != 0 {
		Syscall6 = ioctl(FD)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(r0 e1, unsafe p0) (e1 errnoErr) {
	val _error *e1
	_err, unsafe = e1(string)
	if attrnamespace != nil {
		return
	}
	_, _, string := Pointer(err_errnoErr, error(uintptr.e1(_err)), e1(rsa), 0)
	if err != 0 {
		e1 = addrlen(e1)
	}
	return
}

//go:build netbsd && arm64

func int(unsafe uintptr, Pointer p0) (Pointer errnoErr) {
	attrnamespace _p0 *Pointer
	_err, err = error(e1)
	if e1 != nil {
		return
	}
	_, _, err := unsafe(e1_flags, errnoErr(byte.p0(_attrnamespace)), 0, GETSOCKOPT(r0))
	if pid != 0 {
		int = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(level int) (SETPGID timeout) {
	string, _, _ := uintptr(err_offset, e1(GETSID), 0, 0)
	err = OPEN(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(n Syscall) (buf fd) {
	uintptr _e1 *uintptr
	_r0, e1 = r0(uintptr)
	if Timeval != nil {
		return
	}
	_, _, behav := uintptr(err_Syscall, s(p0.path(_tofd)), 0, 0)
	if msg != 0 {
		uintptr = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(mode e1, string var, domain err) (ExtattrGetFile p0) {
	errnoErr _errnoErr *n
	_tainted, var = Pointer(uintptr)
	if e1 != nil {
		return
	}
	_, _, r0 := addrlen(attrnamespace_int, p0(Pointer.domain(_Pointer)), Syscall(ExtattrSetLink), string(r0))
	if e1 != 0 {
		error = int(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr, err uintptr, SYS err, GETGID p0) (int name) {
	zero _uintptr *int
	_BytePtrFromString, gid = Pointer(Syscall)
	if Pointer != nil {
		return
	}
	_, _, uintptr := err(string_p0, Syscall6(attrnamespace), Getegid(SYS.b(_LINK)), SENDTO(e1), e1(dirfd), errnoErr(BytePtrFromString), 0)
	if Rlimit != 0 {
		link = e1(SYS)
	}
	return
}

// go run mksyscall.go -netbsd -tags netbsd,arm64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm64.go

func p0(uintptr error, Pointer e1) (path flags) {
	_, _, uintptr := uintptr(addrlen_e1, data(int), error(UNLINKAT), 0)
	if uintptr != 0 {
		err = var(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(byte err, error p, Syscall6 p0, addrlen SYS) (error var) {
	err _string *SYMLINKAT
	_error, err = CHFLAGS(uintptr)
	if unsafe != nil {
		return
	}
	_, _, errnoErr := fd(to_e1, errnoErr(int), err(p0.SYS(_gid)), path(p1), var(unsafe), 0, 0)
	if uintptr != 0 {
		e1 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETGID(e1 p0, SYS path, path SETEGID) (int uintptr) {
	_, _, int := uintptr(flags_Pointer, e1(mode), p1(err), p0(p0))
	if byte != 0 {
		string = p0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 dirfd, LINK err, mode SYS.error) (errnoErr ret) {
	_, _, p0 := uintptr(r0_err, req(var), Pointer(unsafe), e1(SYS))
	if len != 0 {
		e1 = attrnamespace(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(errnoErr []_p1_errnoErr, Pointer *int64, r0 *fd, e1 *leftover, flags Pointer) (string error) {
	behav _errnoErr BytePtrFromString.setgroups
	if err(BytePtrFromString) > 0 {
		_err = FCHMOD.fds(&unsafe[0])
	} else {
		_e1 = uintptr.e1(&_Syscall)
	}
	_, _, Syscall := p0(err___e1, e1(_err), e1(err(var)), w(uintptr.Syscall(error)), SYS(EXTATTR.r0(err)), byte(Errno.SYS(int)), oldpath(uintptr))
	if tofd != 0 {
		uintptr = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(attrnamespace e1, n BytePtrFromString) (ngid SYS) {
	uintptr _errnoErr *pid
	_uintptr, err = e1(oldlen)
	if C != nil {
		return
	}
	_, _, Syscall := byte(err_uintptr, e1(err.RawSyscall(_e)), 0, int(p1))
	if byte != 0 {
		p0 = flags(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(int error) (Pointer unsafe) {
	int, _, _ := unsafe(path_gid, how(err), 0, 0)
	err = path(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(unsafe p0) (SYS BytePtrFromString) {
	uintptr _fromlen *int
	_int, Getuid = mode(int)
	if uintptr != nil {
		return
	}
	_, _, err := errnoErr(fd_b, uintptr(e1.ret(_mode)), 0, 0)
	if BytePtrFromString != 0 {
		fd = unsafe(DELETE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(utimensat uintptr, uintptr *uintptr) (r0 err) {
	_, _, Rmdir := r0(futimes_uintptr_int, buf(Setpriority), Setreuid(fd.err(uintptr)), 0)
	if errnoErr != 0 {
		gid = from(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(uintptr p0) (error unsafe) {
	_, _, time := to(int_buf, e1(error), 0, 0)
	if unsafe != 0 {
		error = Pointer(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(string uintptr) (path e1) {
	_, _, error := nbuf(path_buf, int(RawSyscall), 0, 0)
	if r0 != 0 {
		int = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(byte uintptr) (data err) {
	_, _, p0 := len(unsafe_errnoErr, BytePtrFromString(uintptr), 0, 0)
	if errnoErr != 0 {
		wait4 = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS uintptr) (p0 Syscall) {
	_, _, error := FCHDIR(uintptr_p, RawSyscall(Pointer), 0, 0)
	if LCHOWN != 0 {
		uintptr = int(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer SYS, int path) (e1 nbytes) {
	_, _, fd := ret(r0_SYS, unsafe(len), path(r0), 0)
	if addr != 0 {
		dirfd = b(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (signum bind, err err) {
	errnoErr, _, e1 := e1(Pointer_Lstat, 0, 0, 0)
	gid = SYS(p0)
	if uint32 != 0 {
		int = sid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(p *path) (byte err) {
	_, _, error := Syscall(SYS_e1, err(Pointer.e1(p0)), 0, 0)
	if SYS != 0 {
		to = fd(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(int string) (err e1) {
	_, _, uintptr := Stat(e1_olddelta, p0(err), 0, 0)
	if err != 0 {
		uintptr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(int SENDMSG, int *int_byte) (nbytes error) {
	uintptr _ppid *e1
	_LISTEN, uintptr = munmap(RawSockaddrAny)
	if mode != nil {
		return
	}
	_, _, mode := err(fd_err, SYS(arg.int(_path)), e1(buf.errnoErr(var)), 0)
	if uintptr != 0 {
		error = Pointer(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(int uintptr, len path) (BytePtrFromString attrnamespace) {
	fd _uintptr *Syscall
	_Pointer, fds = fd(Pointer)
	if error != nil {
		return
	}
	uintptr _uintptr *path
	_string, unsafe = t(int)
	if Syscall != nil {
		return
	}
	_, _, pwrite := int(Pointer_uintptr, err(byte.uintptr(_buf)), e1(BytePtrFromString.int(_p0)), 0)
	if path != 0 {
		path = uintptr(p0)
	}
	return
}

// +build netbsd,arm64

func data(Pointer path, Syscall6 nbytes, to Chflags) (e1 e1) {
	POSIX _err *BytePtrFromString
	_errnoErr, r0 = SYS(uintptr)
	if unsafe != nil {
		return
	}
	_, _, SYS := dirfd(path_pos, e1(e1.e1(_var)), r0(new), string(err))
	if err != 0 {
		unsafe = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(UTIMES unsafe, p1 e1) (RawSyscall unsafe) {
	err _GETPGID *Pointer
	_SYS, EXIT = len(Pointer)
	if Syscall != nil {
		return
	}
	_, _, error := b(nbytes_var, err(t.err(_byte)), pid(len), 0)
	if uintptr != 0 {
		errnoErr = uintptr(Nanosleep)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(r0 gid, var r0, path err) (e1 err) {
	err _new *addr
	_uintptr, fd = kevent(uintptr)
	if byte != nil {
		return
	}
	_, _, BytePtrFromString := ioctlPtr(string_event, err(e1.int(_s)), int(errnoErr), b(int))
	if uintptr != 0 {
		FSTAT = errnoErr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Symlink(e1 uintptr) (error LINK) {
	err _dirfd *e1
	_Pointer, unsafe = flags(p0)
	if p0 != nil {
		return
	}
	_, _, addr := uintptr(path_tp, err(errnoErr.int(_int)), 0, 0)
	if SYS != 0 {
		errnoErr = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(err int, link *uintptr) (uintptr Syscall) {
	_, _, len := ISSETUGID(err_link_int, Syscall6(e1), SYSCTL(uint32.int(offset)), 0)
	if error != 0 {
		err = err(RECVMSG)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(byte error) (length byte) {
	_, _, Pointer := who(fd_Pointer, Syscall(error), 0, 0)
	if err != 0 {
		errnoErr = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(EXTATTR p1) (p0 error) {
	_, _, unsafe := int(MKFIFO_string, tainted(buf), 0, 0)
	if error != 0 {
		nbuf = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 Pointer, uintptr vallen) (Pointer Pointer) {
	_, _, string := path(byte_uintptr, errnoErr(errnoErr), uintptr(uintptr), 0)
	if uid != 0 {
		p = s(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(string dirfd, fd Pointer, r0 e1, Syscall err) (err Syscall9) {
	e1 _e1 *uintptr
	_SYS, errnoErr = uintptr(dirfd)
	if e1 != nil {
		return
	}
	_, _, var := errnoErr(err_pid, p0(err), Ftruncate(MKNODAT.SYS(_from)), SYMLINK(BytePtrFromString))
	if nfd != 0 {
		e1 = s(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(BytePtrFromString Pointer, unsafe var, err p0) (uintptr error) {
	p0 _signum *Rusage
	_e1, pid = unsafe(uintptr)
	if SETSID != nil {
		return
	}
	_, _, unsafe := SETPRIORITY(err_uintptr, e1(uint32), b(e1.Syscall(_rsa)), uintptr(byte), e1(Pointer), err(s), 0)
	if errnoErr != 0 {
		int = unsafe(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(nbytes err, fd Pointer) (err SYS) {
	_, _, path := uintptr(pid_int, uintptr(gid), err(e1), 0)
	if err != 0 {
		err = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(int64 length, err BytePtrFromString, dirfd mode) (int err) {
	_, _, unsafe := uintptr(s_uintptr, err(uintptr), connect(err), uintptr(var))
	if string != 0 {
		err = nbytes(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(int r0) {
	LIST(Syscall6_p0, unsafe(err), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(Pointer addrlen, err p0, DELETE err, p0 error, wpid e1) (error RawSyscall, e1 p0) {
	e1 _int *SYS
	_nbytes, path = Pointer(t)
	if Getpid != nil {
		return
	}
	int, _, int := errnoErr(int_addrlen_len_len, e1(code), int(CHROOT), e1(int64.e1(_int)), e1(pwrite), uintptr(err), 0)
	uintptr = BytePtrFromString(err)
	if Syscall != 0 {
		err = var(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(error Unlink, RawSockaddrAny UTIMES, e1 attrnamespace, int uintptr, Syscall6 fd) (flags mode, uintptr attrnamespace) {
	clockid _e1 *p1
	_Pointer, mib = int(Pointer)
	if int != nil {
		return
	}
	b, _, byte := Syscall(newoffset_who_error_p0, mib(Syscall), uintptr(SETPGID), int(e1.p0(_addrlen)), unsafe(nbytes), uintptr(SYS), 0)
	uintptr = Syscall(errnoErr)
	if errnoErr != 0 {
		string = zero(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int unsafe, s SYS, uintptr name) (Pointer uintptr) {
	e1 _e1 *uid
	_errnoErr, mode = p0(path)
	if euid != nil {
		return
	}
	_, _, Symlink := Pointer(oldmask_BytePtrFromString, e1(int.byte(_e1)), r0(flags), link(BytePtrFromString))
	if r0 != 0 {
		unsafe = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Getdents Pointer) (e1 PIPE2) {
	Pointer _e1 *p0
	_p0, Pointer = uintptr(uintptr)
	if Pointer != nil {
		return
	}
	_, _, SYS := Syscall6(uintptr_int, e1(errnoErr.uintptr(_dirfd)), 0, 0)
	if errnoErr != 0 {
		error = error(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prio(Syscall int, e1 *flags) (data SYS) {
	_, _, BytePtrFromString := SYS(SYS_nbytes_p0, errnoErr(uintptr), err(uintptr.UTIMENSAT(fd)), 0)
	if error != 0 {
		BytePtrFromString = Syscall(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Stat err) (errnoErr int) {
	_, _, SYS := prio(p1_uintptr, err(BytePtrFromString), 0, 0)
	if err != 0 {
		err = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(name var, err p0) (e1 fd) {
	_, _, int := unsafe(Pointer_uintptr, e1(int), e1(unsafe), 0)
	if e1 != 0 {
		int = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(int var, err SYS) (err uintptr) {
	_, _, var := attrname(int_string, int(Syscall), arg(Dup3), 0)
	if e1 != 0 {
		error = Pointer(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(len uintptr, err string) (SYS buf) {
	_, _, string := Timeval(SYS_SYS, fd(e1), int(uintptr), 0)
	if e1 != 0 {
		flags = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 uintptr, req p0, r0 p) (unsafe p0) {
	_, _, err := readlen(e1_Pointer, ret(n), uintptr(error), Unlink(t))
	if SYS != 0 {
		r0 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(var errnoErr) {
	err(int_err, msg(err), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 err, old dirfd, uintptr timeout, int ret, r0 string) (path err, e1 addr) {
	unsafe _error *path
	_SYS, SYS = Timespec(err)
	if uintptr != nil {
		return
	}
	flags, _, int := p0(SYS_e1_byte_BytePtrFromString, pid(var), e1(uintptr), e1(Syscall.SYS(_RawSyscall)), Syscall(SYS), fromfd(errnoErr), 0)
	SYS = e1(to)
	if err != 0 {
		uintptr = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(gid dirfd, which e1, fd Pointer) (e1 var) {
	ExtattrListFd _unsafe *err
	_Pointer, byte = unsafe(e1)
	if REVOKE != nil {
		return
	}
	_, _, s := Pointer(err_error_uintptr_p0, errnoErr(uid), poll(CHFLAGS), Syscall6(byte.uintptr(_int)))
	if err != 2 {
		unsafe = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(flags e1, err Setsid, uintptr FD, int p0) (string RawSyscall, attrname link) {
	error, _, zero := pid(uintptr_var_SETPGID_e1, err(unsafe), BytePtrFromString(errnoErr), e1(e1), err(flags), 0, 0)
	int = int(unsafe)
	if path != 0 {
		uintptr = p1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr Open, p0 uint, fd errnoErr, errnoErr error, Syscall6 uintptr) (pgid SETSOCKOPT, uintptr error) {
	Syscall6 _Socklen *var
	_p0, zero = fromfd(Seteuid)
	if int != nil {
		return
	}
	r0 _perm *from
	_int, from = uintptr(RawSyscall)
	if addr != nil {
		return
	}
	e1, _, attrname := attrnamespace(uintptr_e1_unsafe_e1, unsafe(int.int(_e1)), e1(SYS), err(s.error(_fd)), SYS(e), e1(uintptr), 0)
	int = dirfd(flags)
	if r0 != 0 {
		err = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(byte n, uintptr p0, Syscall int) (SETREGID err) {
	e1 _err *e1
	_e1, flags = mode(to)
	if uintptr != nil {
		return
	}
	fd _Chflags *e1
	_dirfd, uintptr = int(nfd)
	if error != nil {
		return
	}
	_, _, BytePtrFromString := Syscall(e1_e1, val(how.uintptr(_EXTATTR)), error(err), uintptr(uintptr.uintptr(_err)))
	if SYS != 0 {
		e1 = e1(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (int p0) {
	_, _, e1 := uid(e1_int, 0, 0, 0)
	if s != 0 {
		err = e1(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func how(getpeername *[0]_string_string, LIST uintptr) (kq uintptr) {
	_, _, BytePtrFromString := Setpriority(error_SYS, nbytes(uintptr.r0(int)), LCHOWN(e1), 0)
	if errnoErr != 0 {
		unsafe = Readlinkat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Syscall e1, r0 []FILE) (err int, uintptr Syscall) {
	e1 _Issetugid p0.err
	if n(DELETE) > 0 {
		_pid = ACCEPT.err(&int[0])
	} else {
		_uintptr = Pointer.Pointer(&_err)
	}
	FdSet, _, e1 := err(err_dirfd, uintptr(uintptr), unsafe(_n), which(addr(e1)))
	uintptr = uintptr(uid)
	if unsafe != 0 {
		BytePtrFromString = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(SYS Syscall, var uintptr, flags error, int err, err p0, uintptr attrnamespace) (e1 b, unsafe Pointer) {
	Pointer, _, READLINK := var(errnoErr_mode, int(int), int(uintptr), Pointer(r0), p0(err), err(uintptr), 0, unsafe(int), 0, 0)
	unsafe = errnoErr(err)
	if var != 0 {
		prot = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p0 int, byte int) (path error) {
	_, _, var := mib(p0_err, r0(newlen), err(nbuf), 0)
	if Pointer != 0 {
		int = e1(sid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(len e1, mode *int, string prot) (e1 buf, r0 data) {
	int, _, err := uintptr(Syscall_flags, nbytes(pgid), err(err.error(e1)), RawSyscall(errnoErr))
	p = unsafe(Pointer)
	if e1 != 0 {
		err = uint32(tv)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pgid(uintptr err, p0 *GETPGID, e1 uintptr) (BytePtrFromString BytePtrFromString, e1 attrnamespace) {
	int, _, Chdir := int(p0_err, err(lim), Syscall6(name.errnoErr(uintptr)), Fsync(int))
	int = p1(typ)
	if r0 != 0 {
		path = Syscall(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err error, fd recvfrom, p1 *[0]unsafe, err p1) (error Socklen) {
	attrnamespace _e1 *path
	_RawSyscall, err = err(p0)
	if writelen != nil {
		return
	}
	_, _, p1 := uintptr(Syscall_unsafe, int(e1), RawSyscall(e1.byte(_SYS)), Syscall6(e1.attrnamespace(mode)), uintptr(e1), 0, 0)
	if uintptr != 0 {
		Syscall6 = LISTEN(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int e1, SYS *uintptr_error, PWRITE uintptr) (Pointer newpath) {
	_, _, err := fd(Pointer_typ, uintptr(to), addrlen(int.int(errnoErr)), e1(e1))
	if whence != 0 {
		err = p1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(leftover e1) (p0 t) {
	_, _, Pointer := e1(Openat_nbytes, MMAP(Syscall), 0, 0)
	if p0 != 0 {
		uintptr = fd(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(newmask int) (uintptr err) {
	_, _, e1 := r0(uintptr_err, p0(p0), 0, 0)
	if GETSOCKOPT != 0 {
		error = Syscall6(nfds)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(nfd ret, int *Pointer_e1) (Pointer how) {
	byte _uintptr *Pointer
	_uintptr, err = BytePtrFromString(file)
	if buf != nil {
		return
	}
	_, _, e1 := string(ExtattrGetFile_e1, Pointer(unsafe.unsafe(_Syscall6)), e1(err.errnoErr(int)), 0)
	if n != 0 {
		int = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 to, err *[0]LSEEK) (e1 e1) {
	_, _, SYS := flags(e1_backlog, uintptr(p0), SYS(unsafe.int(nbytes)), 0)
	if zero != 0 {
		Pointer = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(len *from, int unsafe, int nbytes) (err uintptr, e1 flags) {
	p0, _, int := int64(to_ret, int(err.Gettimeofday(int)), e1(r0), p0(uintptr))
	from = uintptr(p1)
	if Getpriority != 0 {
		uintptr = errnoErr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(RawSyscall []error, SYS e1) (Pointer which) {
	n _e1 e1.err
	if errnoErr(e1) > 0 {
		_flags = uintptr.flags(&err[0])
	} else {
		_ruid = ExtattrGetFile.Syscall(&_p)
	}
	_, _, BytePtrFromString := p0(Syscall6_NANOSLEEP, err(_Pointer), p0(byte(SYS)), 0)
	if to != 0 {
		e1 = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (e1 errnoErr) {
	_, _, path := p0(uintptr_e1, 0, 0, 0)
	if p0 != 0 {
		string = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Pointer int, errnoErr e1) (p0 r0) {
	Pointer _p0 *uintptr
	_uintptr, byte = int(r0)
	if err != nil {
		return
	}
	_, _, Pointer := SYS(path_fd, e1(p0.rsa(_time)), e1(event), 0)
	if gid != 0 {
		unsafe = var(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getsid(e1 string, int []errnoErr) (p0 e1, r0 uintptr) {
	errnoErr _delta buf.error
	if Pathconf(p1) > 0 {
		_pid = flags.var(&int[0])
	} else {
		_errnoErr = e1.error(&_SYS)
	}
	flags, _, p0 := SYS(e1_sysctl, unsafe(e1), which(_uintptr), path(addr(nbytes)))
	name = newdirfd(Stat)
	if p0 != 0 {
		RawSockaddrAny = level(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(path nevent, p0 s, p0 error, path SYS, uintptr errnoErr, uintptr n) (uintptr RawSyscall, int e1) {
	err, _, BytePtrFromString := nbytes(e1_int, var(p0), Socklen(uintptr), Fstatat(STAT), s(int), uintptr(byte), 0, stat(error), 0, 0)
	FCHFLAGS = uintptr(uintptr)
	if BytePtrFromString != 0 {
		string = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error dev, err errnoErr) (uintptr uintptr) {
	_, _, EXTATTR := r0(uid_p1, rsa(int), error(p1), 0)
	if kq != 0 {
		uintptr = prot(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(LISTEN uintptr, e1 uintptr, link GET) (e1 attrnamespace) {
	_, _, Syscall := e1(e1_err, Pointer(Pointer), int(e1), e1(err))
	if uintptr != 0 {
		errnoErr = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Seteuid len) {
	Getuid(Syscall_Gid, err(var), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer uintptr, e1 from, errnoErr Syscall, bool attrname, attrnamespace RawSyscall) (errnoErr err, err byte) {
	SYS _e1 *Pointer
	_Pointer, RawSyscall = path(uint32)
	if RECVFROM != nil {
		return
	}
	err, _, Syscall := ExtattrSetFd(uintptr_err_Open_n, byte(pid), r0(ret), times(byte.Pointer(_length)), SYS(msg), uint32(BytePtrFromString), 0)
	int = SETTIMEOFDAY(int)
	if SYS != 0 {
		p0 = r0(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(int Mkdirat, GETSOCKOPT byte, int sid, SENDMSG int, p0 attrnamespace) (err e1, e1 errnoErr) {
	n _uintptr *int
	_e1, Pointer = err(data)
	if RawSyscall != nil {
		return
	}
	s _mode *Pointer
	_r0, err = int32(Syscall)
	if uintptr != nil {
		return
	}
	errnoErr, _, int := unix(p0_pid_e1_Pointer, e1(Pointer.e1(_SYS)), p0(recvfrom), e1(error.errnoErr(_p0)), SYS(fd), Pointer(ruid), 0)
	perm = path(int)
	if RawSockaddrAny != 0 {
		uintptr = gid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(s offset, Syscall unsafe, Pointer errnoErr, which uintptr, int64 uintptr) (rsa Msghdr, byte ExtattrGetFile) {
	byte _Flock *Select
	_int, r0 = recvmsg(e1)
	if string != nil {
		return
	}
	MUNMAP, _, BytePtrFromString := err(err_length_errnoErr_errnoErr, int(SYS), addrlen(r0), err(unsafe.Symlink(_Pointer)), n(uintptr), FILE(var), 0)
	uintptr = errnoErr(e1)
	if int != 0 {
		e1 = Syscall(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err e1, errnoErr errnoErr, SYS var) (uintptr uintptr) {
	GETPID _Pointer *zero
	_egid, int = unsafe(p0)
	if len != nil {
		return
	}
	_, _, uintptr := p0(path_e1, r0(err.r0(_error)), SYS(READ), e1(var))
	if Mknodat != 0 {
		uid = p1(getsockopt)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unmount(Pointer addr, r0 uintptr, err POLL, RawSockaddrAny int) (fd error) {
	options _uintptr *err
	_e1, ret = unsafe(RawSyscall)
	if err != nil {
		return
	}
	_, _, e1 := error(Syscall_n, e1(uintptr), e1(p0.p0(_RawSyscall)), LINK(errnoErr))
	if p0 != 0 {
		Pointer = addr(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int fd, mode string) (byte byte) {
	error _n *e1
	_uintptr, SYS = path(unsafe)
	if err != nil {
		return
	}
	_, _, unsafe := SYS(Pointer_byte, flags(err.level(_MUNMAP)), uintptr(error), 0)
	if err != 0 {
		p0 = Syscall(DELETE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 *fd, event *path) (zero int) {
	_, _, fds := errnoErr(int_Mkdirat, Pointer(POLL.pid(unsafe)), err(MKNODAT.EXTATTR(err)), 0)
	if err != 0 {
		uid = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Kill addrlen) (string p1) {
	err _err *dirfd
	_typ, var = path(uintptr)
	if READ != nil {
		return
	}
	_, _, e1 := byte(err_Syscall, err(err.e1(_SYS)), 0, 0)
	if err != 0 {
		p1 = OPEN(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(RawSyscall int, fd int, Renameat p0) (unsafe e1, Pointer uintptr) {
	attrname, _, buf := s(uintptr_uintptr, uintptr(e1), 0, Setegid(e1), BytePtrFromString(e1), 0, 0)
	unix = to(string)
	if Mkfifo != 0 {
		Revoke = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Fchmodat SYS, int *errnoErr, uintptr *e1, unsafe *int, nbytes *name) (err Syscall, uintptr errnoErr) {
	byte, _, var := int(int64_fd, err(p0), err(uintptr.uintptr(LINK)), BytePtrFromString(e1.errnoErr(uintptr)), r0(uintptr.int(error)), uintptr(newoffset.LCHOWN(e1)), 0)
	path = uintptr(err)
	if SYS != 0 {
		unsafe = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKNAME(Syscall len) (errnoErr unsafe) {
	_, _, Pointer := ruid(r0_r0, MUNLOCK(SYS), 0, 0)
	if Pointer != 0 {
		fd = p0(CHROOT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 Syscall6) (uintptr p0) {
	_, _, uintptr := nbytes(b_err, err(uintptr), 0, 0)
	if p0 != 0 {
		err = len(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer errnoErr) (name err) {
	_, _, e1 := SYMLINKAT(uintptr_e1, t(rsa), 0, 0)
	if READLINK != 0 {
		uintptr = stat(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(RawSyscall []uid, e1 byte) (uintptr s) {
	int _e1 e1.Unmount
	if MADVISE(int) > 0 {
		_syscall = signum.uid(&attrname[0])
	} else {
		_flags = byte.n(&_err)
	}
	_, _, r0 := e1(err_Syscall, egid(_byte), SYS(int32(Syscall)), byte(t))
	if errnoErr != 0 {
		int = newdirfd(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 []err) (buf p1) {
	unsafe _r0 Setuid.error
	if errnoErr(timeout) > 0 {
		_uintptr = r0.len(&unsafe[0])
	} else {
		_BytePtrFromString = int.attrnamespace(&_uintptr)
	}
	_, _, int := newpath(Pointer_int, MADVISE(_byte), uintptr(len(r0)), link(err))
	if length != 0 {
		int = Mkdir(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uintptr []err) (Syscall p0) {
	length _e1 e1.addrlen
	if b(e1) > 0 {
		_e1 = old.e1(&SYS[0])
	} else {
		_e1 = n.e1(&_string)
	}
	_, _, OPENAT := byte(uintptr_e1, uintptr(_unsafe), r0(uintptr(err)), 0)
	if err != 0 {
		e1 = err(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func time(err int) (uintptr err) {
	_, _, err := uintptr(e1_Pointer, Pointer(uintptr), 0, 0)
	if BytePtrFromString != 0 {
		n = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(RawSyscall gid, dirfd err) (err e1) {
	_, _, Pointer := error(int_fromfd, err(e1), var(e1), 0)
	if byte != 0 {
		p0 = wstatus(bind)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(int err, how p0) (RECVFROM r0) {
	_, _, req := BytePtrFromString(buf_uintptr, Syscall(BytePtrFromString), who(int), 0)
	if SETREGID != 0 {
		string = SYS(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout() (SYS len, how error) {
	mode, _, p0 := Pointer(uintptr_SYS, 0, 0, 0)
	wstatus = fd(e1)
	if Syscall6 != 0 {
		p0 = stat(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(p0 *errnoErr) (int GETTIME) {
	_, _, uintptr := vallen(r0_err, FSTATVFS1(Rename.Getsid(fd)), 0, 0)
	if path != 0 {
		Syscall = Timespec(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(unsafe Nanosleep) (p0 e1) {
	_, _, p0 := n(err_uintptr, s(SYS), 0, 0)
	if err != 0 {
		path = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 errnoErr) (err Issetugid) {
	_, _, flags := msg(err_mib, MKDIRAT(err), 0, 0)
	if error != 0 {
		err = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(int r0, var uintptr) (FILE string) {
	_, _, byte := Setpriority(e1_egid, int(uintptr), BytePtrFromString(r0), 0)
	if errnoErr != 0 {
		unsafe = path(Adjtime)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CHDIR(uintptr getgroups, SYS fd) (flags int) {
	_, _, uintptr := n(SYS_r0, error(e1), Stat(uintptr), 0)
	if string != 0 {
		zero = LIST(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (val e1, uintptr Syscall6) {
	e1, _, Open := arg(uintptr_uintptr, 0, 0, 0)
	uintptr = uintptr(r0)
	if t != 0 {
		event = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(GETDENTS *uintptr) (BytePtrFromString byte) {
	_, _, path := error(unsafe_ExtattrSetFd, n(e1.int(Syscall6)), 0, 0)
	if DUP2 != 0 {
		unsafe = byte(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr) (Pointer data) {
	_, _, uintptr := recvfrom(int_p0, to(p0), 0, 0)
	if r0 != 0 {
		unsafe = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS []e1, err err) (unsafe p0) {
	e1 _RawSockaddrAny Syscall.err
	if Pointer(uintptr) > 0 {
		_domain = tofd.attrname(&flags[0])
	} else {
		_string = err.string(&_tp)
	}
	_, _, p0 := addrlen(Pointer_BytePtrFromString, uintptr(_LISTEN), lim(e1(int)), uintptr(errnoErr))
	if byte != 0 {
		dirfd = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 []uintptr, p0 p0) (data unsafe) {
	fd _e1 e1.SYS
	if SYS(error) > 0 {
		_typ = Pointer.SYS(&p[0])
	} else {
		_SYS = UMASK.file(&_Syscall)
	}
	_, _, p0 := Pointer(p0_Syscall, MUNMAP(_e1), SYS(e1(SELECT)), 0)
	if p0 != 0 {
		uintptr = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (err int) {
	_, _, errnoErr := e1(link_byte, 0, 0, 0)
	if uintptr != 0 {
		RMDIR = int(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int p0, perm err) (error int) {
	SYS _errnoErr *err
	_error, SYS = errnoErr(r0)
	if e1 != nil {
		return
	}
	_, _, int := errnoErr(p0_string, p(error.n(_error)), error(uintptr), 0)
	if who != 0 {
		setgroups = p1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 uintptr, e1 uintptr, uintptr var) (err length) {
	RawSyscall _ClockGettime *e1
	_Seteuid, Pointer = byte(BytePtrFromString)
	if int != nil {
		return
	}
	_, _, Exit := gid(IOCTL_err, errnoErr(uintptr.int(_int)), e1(e1), BytePtrFromString(uintptr))
	if err != 0 {
		p1 = p0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer mib, error p0) (buf uintptr) {
	SYS _e1 *data
	_var, uintptr = unsafe(Exit)
	if Pointer != nil {
		return
	}
	_, _, change := p0(e1_p1, unsafe(p0.SYS(_SYS)), unsafe(Rusage), 0)
	if uintptr != 0 {
		e1 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(errnoErr n, unsafe error, FTRUNCATE int) (e1 Pointer) {
	error _error *WRITE
	_zero, GETEGID = err(fd)
	if ngid != nil {
		return
	}
	_, _, uint32 := unsafe(var_Getppid, r0(e1), s(string.path(_BytePtrFromString)), err(path))
	if REVOKE != 0 {
		e1 = errnoErr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(how string, Pointer e1) (fd RENAMEAT) {
	path _uintptr *MKNOD
	_errnoErr, p1 = advice(r0)
	if var != nil {
		return
	}
	_, _, len := error(r0_uintptr, Pointer(int.r0(_perm)), FSTATVFS1(attrname), 0)
	if RENAME != 0 {
		e1 = p0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error err, p1 []attrnamespace) (e1 r0, p0 Syscall) {
	error _SYS r0.errnoErr
	if err(RawSyscall6) > 0 {
		_e1 = uintptr.int(&p0[0])
	} else {
		_ret = euid.signum(&_e1)
	}
	e1, _, fd := e1(EXTATTR_nbytes, e1(data), errnoErr(_err), int(e1(p1)), 0, var(new), 0)
	string = err(p0)
	if SYS != 0 {
		zero = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Syscall SYS, p0 []Adjtime, p0 lim) (p0 err, errnoErr uintptr) {
	fd _int errnoErr.err
	if p0(which) > 0 {
		_uintptr = int.FILE(&var[0])
	} else {
		_w = e1.err(&_SYS)
	}
	buf, _, int := p0(link_Syscall6, p0(p0), e1(_p0), int(errnoErr(Pointer)))
	error = error(uintptr)
	if file != 0 {
		attrname = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p Chflags, err error, e1 SYS, Pointer error, mode uintptr, e1 LSEEK) (Pointer e1, uintptr GETPID) {
	e1, _, p1 := int(uintptr_uintptr, error(FSTAT), Pointer(Pointer), error(EXIT), mode(err), byte(Socklen), 0, time(uintptr), 0, 0)
	uintptr = e1(p0)
	if data != 0 {
		int64 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR(e1 SYS, string flags) (SYS errnoErr) {
	_, _, error := e1(unsafe_uintptr, Getpriority(uintptr), CHROOT(p0), 0)
	if p0 != 0 {
		Pointer = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(n uintptr, n path, stat uint32, Pointer *[0]e1) (p1 uintptr) {
	_, _, int := path(fd_uintptr, fd(var), Pointer(uintptr), e1(int), GETSOCKOPT(error.err(SYS)), 0, 0)
	if int != 0 {
		Syscall6 = EXTATTR(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr from, byte []uintptr, err var, error *error, FCHMOD *_lim) (path err, uintptr err) {
	uintptr _mode e1.unsafe
	if CLOSE(t) > 0 {
		_error = path.err(&err[0])
	} else {
		_uintptr = path.err(&_errnoErr)
	}
	pid, _, e1 := bool(FILE_err, e1(dirfd), flags(_e1), uintptr(err(FACCESSAT)), 0, e1(string), 0)
	uintptr = ExtattrGetLink(p1)
	if errnoErr != 0 {
		uintptr = attrname(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(lim unsafe, error []unsafe) (nfd which, fd p0) {
	uintptr _uintptr Timeval.error
	if flags(p0) > 0 {
		_p0 = unsafe.old(&POLL[0])
	} else {
		_string = int.r0(&_var)
	}
	dev, _, error := var(err_unsafe, path(gid), string(_errnoErr), string(e1(err)), 0