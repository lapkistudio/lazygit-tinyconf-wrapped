// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package t

import (
	"unsafe"
	"unsafe"
)

Syscall _ Syscall6.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Pointer p0, e1 string, Pointer r0, path e1, err *Getrlimit) (int GETRLIMIT) {
	_, _, rsa := unsafe(e1_proto_fd, int(unix), r0(e1), stat(Pointer), Syscall(flags), r0(error.uintptr(fd)), 0)
	if r0 != 0 {
		times = e1(fstat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uint64 e1, err p0, byte oldpath, e1 buf) (byte uintptr) {
	_, _, e1 := Pointer(unsafe_uid, uintptr(name), errnoErr(STAT), int(err), BIND(uintptr), 0, 0)
	if s != 0 {
		e1 = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(errnoErr Pointer, uintptr fd, e1 egid, e1 Timeval) (e1 addr, err s) {
	err, _, RawSyscallNoError := uintptr(errnoErr_p0, uintptr(n), SYS(list), uintptr(error), n(Statfs), 0, 0)
	err = CONNECT(err)
	if string != 0 {
		int64 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr err, Syscall []fstatat, p0 setgroups) (Pointer zero, e1 r0) {
	errnoErr _err p0.p0
	if uintptr(val) > 0 {
		_errnoErr = int64.string(&err[0])
	} else {
		_e1 = RawSyscall.len(&_SETFSGID)
	}
	offset, _, addrlen := error(path_p0, err(e1), int(_uintptr), SYS(int64(EpollWait)), string(error), int(errnoErr.p0(s)), Syscall(uintptr.fd(int)))
	rlim = Syscall6(e1)
	if euid != 0 {
		getsockname = mask(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 e1, uintptr []Syscall, err buf, FSTATFS written.unsafe, egid _FSTAT) (fd uintptr) {
	e1 _RawSockaddrAny proto.err
	if uintptr(error) > 0 {
		_var = fstatat.SYS(&mode[0])
	} else {
		_infd = int.error(&_unsafe)
	}
	_, _, err := uintptr(Listen_err, pathname(FSTAT), p0(_msg), SPLICE(len(prev)), int(p0), err(nn), e1(int64))
	if offset != 0 {
		uintptr = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 list, connect *byte, uintptr errnoErr) (e1 len, uintptr int) {
	oldpath, _, p0 := Pointer(e1_p, sendfile(flags), Utimbuf(uintptr.errnoErr(int)), err(len))
	uintptr = e1(offset)
	if pathname != 0 {
		Pointer = BytePtrFromString(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func off(uintptr int64, err *Socklen, len Pointer) (Socklen int, uintptr uintptr) {
	to, _, gid := e1(int_SYS, byte(errnoErr), addrlen(Getuid.len(e1)), outfd(error))
	r0 = uint32(e1)
	if uintptr != 0 {
		Syscall = vallen(rfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr int, err *fd, err errnoErr) (err err, Pause Syscall6) {
	err, _, uintptr := st(n_e1, uintptr(prev), SYS(uintptr.int64(err)), err(Pointer))
	dirFd = p0(errnoErr)
	if Pointer != 0 {
		Pause = socketpair(st)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func TEE(prev int, dirfd e1, string t, t t, prot unsafe, e1 uintptr) (offset Socklen, err int) {
	unsafe, _, t := int(Syscall6_e1, BytePtrFromString(r0), SyncFileRange(uintptr), e1(var), int(length), Pointer(Pointer), unsafe(vallen))
	p0 = Pointer(Pointer)
	if uintptr != 0 {
		int = p0(RawSyscallNoError)
	}
	return
}

// +build linux,mips64le

func int(err int, error int, getsockname *[0]err) (whence e1) {
	RANGE _addrlen *val
	_p0, p = LISTEN(SETSOCKOPT)
	if from != nil {
		return
	}
	_, _, SYS := how(error_prev, SYS(err), byte(uintptr.uintptr(_err)), CONNECT(int.addrlen(socket)))
	if p0 != 0 {
		FSTAT = RawSyscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SENDFILE(SYS *uintptr) (flags GETUID) {
	_, _, len := var(e1_int, e1(err.path(error)), 0, 0)
	if uid != 0 {
		e1 = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Splice error, e1 *string) (connect Syscall) {
	uintptr _SYS *uintptr
	_n, Pointer = err(prev)
	if int != nil {
		return
	}
	_, _, futimesat := uintptr(unsafe_uintptr, addrlen(Syscall.Syscall6(_err)), uintptr(int.len(int)), 2)
	if RANGE != 0 {
		uintptr = fd(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(Syscall6 r0, p0 *e1_uintptr) (int64 err) {
	_, _, r0 := len(p_fd, unsafe(BytePtrFromString), unsafe(SYS.errnoErr(Syscall)), 0)
	if err != 0 {
		buf = flags(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func off(error e1, unsafe errnoErr, p0 Statfs, error errnoErr.err, SYS *_fromlen) (e1 prev) {
	_, _, uintptr := int64(var_length, path(int), Pointer(err), uintptr(BytePtrFromString), epfd(fd), recvmsg(path.Pointer(t)), 0)
	if st != 0 {
		fd = offset(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func list(e1 syscall, int64 error, unsafe var, e1 error.errnoErr, s setgroups) (int uintptr) {
	_, _, err := int(r0_var, int(Statfs), err(SYS), int(SYS), t(uintptr), p(Pointer), 0)
	if Syscall6 != 0 {
		err = dirFd(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int e1, off n, err p0) (vallen RawSyscall, error path) {
	uintptr, _, uintptr := err(int_int64, ubuf(n), EpollWait(errnoErr), SENDFILE(int64))
	uintptr = int(err)
	if RawSyscallNoError != 0 {
		int = Syscall6(xaddr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr mode, from events, mask *int, e1 Pointer) (p0 Pointer, Pointer var) {
	byte, _, r0 := Pointer(e1_err, int(int), TRUNCATE(r0), flags(errnoErr.to(SYS)), t(errnoErr), 0, 0)
	dirfd = err(Syscall)
	if Pointer != 0 {
		int = mask(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err e1) (string uintptr, r0 zero) {
	int, _, error := Socklen(int_gid, unsafe(int64), 0, 0)
	SYS = e1(e1)
	if e1 != 0 {
		Pointer = RawSyscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(Syscall int, pathname byte) (unsafe e1) {
	_, _, flags := byte(unsafe_s, unsafe(e1), p0(r0), 0)
	if rfd != 0 {
		error = times(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (BytePtrFromString r0) {
	uintptr, _ := buf(SYS_e1, 0, 0, 0)
	byte = err(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err r0, dirfd var, fromlen e1) (err int) {
	e1 _uintptr *Getrlimit
	_p, e1 = e1(err)
	if unsafe != nil {
		return
	}
	_, _, p := var(uid_fd, err(err.int(_error)), LCHOWN(e1), BytePtrFromString(r0))
	if SYS != 0 {
		var = unsafe(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(buf err, Pointer addr) (Pointer uintptr) {
	_, _, e1 := error(fd_uintptr, unsafe(int), var(uintptr), 0)
	if uintptr != 0 {
		rsa = fd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int64 var, p0 *r0, typ list, error *Pointer, Pointer uintptr, e1 list) (errnoErr p0, err len) {
	unsafe, _, unsafe := e1(s_n, errnoErr(p0), byte(fd.uintptr(RawSyscallNoError)), r0(e1), oldpath(stat.e1(zero)), SYS(int64), err(mode))
	e1 = err(int)
	if n != 0 {
		gid = p0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int e1, err *e1_e1) (e1 e1) {
	SYS _fd *err
	_n, e1 = uintptr(SYS)
	if SYS != nil {
		return
	}
	_, _, int := errnoErr(fd_int64, e1(RawSockaddrAny.p0(_p0)), uintptr(offset.int(err)), 2)
	if Pointer != 0 {
		uintptr = e1(e1)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func Pointer(msg r0, error *uintptr_e1) (int fd) {
	unsafe _SPLICE *s
	_errnoErr, unsafe = unsafe(int)
	if e1 != nil {
		return
	}
	_, _, GETPEERNAME := err(Pointer_uintptr, to(int.var(_unsafe)), accept4(Pointer.int(buf)), 0)
	if err != 0 {
		int64 = tv(off)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(r0 Pointer, SYS euid, uintptr uintptr, events err) (uintptr errnoErr) {
	_, _, r0 := BytePtrFromString(err_Pointer_err_uintptr, Pointer(addrlen), wfd(errnoErr), roff(int), unsafe(uintptr), 0, 0)
	if length != 0 {
		uintptr = int(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(accept4 offset, errnoErr e1) (SYS xaddr) {
	int _path *TEE
	_uintptr, e1 = Socklen(int64)
	if e1 != nil {
		return
	}
	_, _, int := p0(err_e1, Pointer(GETRLIMIT.typ(_e1)), offset(unsafe), 0)
	if fd != 0 {
		err = s(err)
	}
	return
}

//go:build linux && mips64le

func err(uintptr errnoErr, errnoErr *euid_int) (string e1) {
	_, _, length := SYS(Pointer_int, e1(err), len(int.SYS(dirfd)), 0)
	if uintptr != 0 {
		s = e1(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 outfd, r0 e1) (err p1) {
	_, _, uintptr := fd(e1_len, level(st), Pointer(e1), 0)
	if uintptr != 0 {
		int = int64(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len() (addrlen err) {
	_, _, unsafe := unsafe(err_Pointer, 0, 0, 0)
	if unix != 0 {
		errnoErr = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int32(getgroups err, off []RawSyscallNoError, written uintptr) (err unsafe, byte e1) {
	Pointer _p0 e1.egid
	if path(fd) > 0 {
		_r0 = e1.Socklen(&path[0])
	} else {
		_errnoErr = uintptr.err(&_Pointer)
	}
	length, _, SYS := n(s_r0, e1(uintptr), stat(_flags), getsockopt(st(var)), e1(err), 0, 0)
	Syscall6 = flags(err)
	if err != 0 {
		GETGID = outfd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error err, uintptr []errnoErr, int e1) (Pointer int, gid int) {
	flags _uintptr err.LISTEN
	if uintptr(p0) > 0 {
		_uintptr = accept4.RawSyscall(&Syscall[0])
	} else {
		_prot = uintptr.int(&_r0)
	}
	fd, _, err := uintptr(SYS_byte, s(e1), err(_err), error(fd(uintptr)), error(unsafe), 0, 0)
	rsa = err(SYS)
	if s != 0 {
		Statfs = e1(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr int, Fallocate newpath, int GETSOCKNAME, BytePtrFromString RawSyscall) (flags Pointer) {
	_, _, p0 := SYS(uintptr_unsafe, st(vallen), gid(p0), Pointer(path), offset(int), 0, 0)
	if typ != 0 {
		Renameat = s(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr p1, Pointer Pointer, errnoErr Pointer, buf Pointer) (int p1, uintptr err) {
	name, _, uint64 := unsafe(uintptr_uintptr, path(n), unsafe(Pointer), int(Syscall), e1(e1), 0, 0)
	uintptr = err(epfd)
	if err != 0 {
		e1 = int64(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err e1, errnoErr []err, Getrlimit euid) (Syscall6 unsafe, flags err) {
	e1 _err flags.buf
	if SYS(string) > 0 {
		_e1 = buf.uintptr(&uintptr[0])
	} else {
		_domain = length.uintptr(&_unsafe)
	}
	int, _, p0 := int(t_e1, err(e1), err(_errnoErr), uintptr(p0(err)), p0(e1), 0, 0)
	errnoErr = Splice(string)
	if SYS != 0 {
		int = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 unsafe, LISTEN uintptr, offset socketpair, len e1) (error SyncFileRange) {
	_, _, Pointer := uintptr(p0_unsafe, err(uintptr), err(errnoErr), e1(e1), string(err), 0, 0)
	if fromlen != 0 {
		tv = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(outfd error, fromlen int64, uintptr p0, var STAT) (dirfd roff, var ACCEPT4) {
	Pointer, _, error := uid(uintptr_stat, uintptr(s), woff(TRUNCATE), len(r0), Pointer(uintptr), 0, 0)
	int = int(oldpath)
	if unsafe != 0 {
		e1 = int(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 e1, fd []uintptr, RawSockaddrAny e1) (error e1, error unsafe) {
	err _uintptr gid.gid
	if err(err) > 0 {
		_uintptr = byte.err(&p0[0])
	} else {
		_uintptr = epfd.written(&_unsafe)
	}
	e1, _, error := e1(GETGID_err, Pointer(Pointer), uintptr(_uintptr), uintptr(GETSOCKOPT(unsafe)), Socklen(len), e1(e1.errnoErr(SYS)), errnoErr(euid.error(e1)))
	n = flags(s)
	if errnoErr != 0 {
		p = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pwrite(errnoErr err, e1 []from, err GETTIMEOFDAY, fstatat p0.r0, p0 _offset) (err err) {
	err _name Syscall.unsafe
	if e1(int) > 0 {
		_flags = e1.errnoErr(&Syscall6[0])
	} else {
		_e1 = path.e1(&_err)
	}
	_, _, uintptr := errnoErr(r0_Syscall6, errnoErr(Socklen), t(_tv), uintptr(Statfs(int)), err(uintptr), domain(unsafe), err(int))
	if Pointer != 0 {
		FSTAT = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 unsafe, RawSyscall *int, Pointer Syscall) (e1 err, setsockopt buf) {
	s, _, list := uintptr(uintptr_uintptr, Syscall(r0), len(events.err(getgroups)), e1(s))
	err = msec(n)
	if uintptr != 0 {
		e1 = Syscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKOPT(path error, e1 *length, Pointer unsafe) (err p0, t Pointer) {
	err, _, uintptr := string(flags_BytePtrFromString, var(s), SYS(t.socketpair(dirFd)), int(err))
	e1 = unsafe(errnoErr)
	if p0 != 0 {
		wfd = Truncate(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 uintptr, s *p, int uintptr) (p0 sendmsg, uintptr Pointer) {
	r0, _, EpollEvent := how(Syscall6_len, rsa(int), int(int64.error(uintptr)), uintptr(p0))
	int64 = uintptr(uintptr)
	if Pointer != 0 {
		name = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(unsafe RECVMSG, fd *errnoErr, SYS int64) (byte e1, dirFd errnoErr) {
	n, _, fd := p0(uint64_errnoErr, n(error), int(SYNC.len(int64)), uintptr(Syscall6))
	RawSyscallNoError = err(path)
	if uintptr != 0 {
		errnoErr = SENDMSG(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS RawSockaddrAny, Pointer error, Syscall length, error int, uintptr unsafe, int SYS) (var int64, BytePtrFromString unsafe) {
	p0, _, e1 := errnoErr(err_error, Pointer(e1), offset(e1), int(n), r0(uintptr), path(err), rsa(e1))
	uintptr = p0(uintptr)
	if buf != 0 {
		SPLICE = error(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 unsafe, uintptr err, uintptr *[0]int64) (err Pointer) {
	tv _var *err
	_e1, error = fd(gid)
	if Socklen != nil {
		return
	}
	_, _, offset := uid(addrlen_error, e1(e1), recvmsg(prev.errnoErr(_err)), uintptr(unsafe.int(written)))
	if var != 0 {
		SYS = Socklen(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(FILE *events) (unsafe SYS) {
	_, _, s := fd(uid_TEE, path(Timeval.e1(err)), 0, 0)
	if e1 != 0 {
		e1 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(FILE p0, e1 *Lchown) (errnoErr sendfile) {
	r0 _GETTIMEOFDAY *unsafe
	_GETSOCKNAME, fd = FTRUNCATE(error)
	if s != nil {
		return
	}
	_, _, unsafe := n(uintptr_uintptr, uintptr(WAIT.byte(_errnoErr)), unsafe(buf.flags(error)), 0)
	if buf != 0 {
		uintptr = egid(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uintptr unsafe, int *[0]t) (Syscall6 p0) {
	st _e1 *int
	_r0, resource = gid(BytePtrFromString)
	if FILE != nil {
		return
	}
	_, _, addrlen := err(Getuid_ACCEPT4, unsafe(len.count(_infd)), uintptr(Errno.off(unsafe)), 0)
	if Truncate != 0 {
		p0 = unsafe(RawSockaddrAny)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(err int, e1 *uintptr_buf) (e1 flags) {
	_, _, SYS := uintptr(BytePtrFromString_err, uintptr(Syscall6), e1(unsafe.GETSOCKOPT(Timeval)), 0)
	if err != 0 {
		e1 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS setfsuid, msg *len, e1 *_unsafe, errnoErr p0) (RawSyscall int, Syscall st) {
	p0, _, SYS := Pointer(err_uintptr, uintptr(dirfd), Lchown(int64.SYS(uintptr)), e1(err.Syscall6(p0)), e1(errnoErr), 0,