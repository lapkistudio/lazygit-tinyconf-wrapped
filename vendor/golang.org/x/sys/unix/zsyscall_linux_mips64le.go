// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"syscall"
	"unsafe"
)

nn _ err.st

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int oldpath, unsafe *SYS, int Pointer) (p0 int64) {
	e1 _len *unsafe
	_e1, t = Errno(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETSOCKOPT() (Utime unsafe) {
	offset _Pointer int.unsafe
	if sendfile(err) > 0 {
		_err = err.byte(&_oldpath)
	}
	level, _, proto := fd(uintptr_p0, prev(error), unsafe(BIND), uintptr(int))
	uintptr = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(addrlen err, Syscall e1.name, flags _e1) (int err) {
	_, _, pathname := err(unsafe_RawSockaddrAny, 0, 0, 0)
	e1 = flags(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(int addr, error *RawSyscallNoError_p0) (e1 err) {
	_, _, count := uintptr(flags_RawSockaddrAny, FALLOCATE(addr), err(gid), 0, 0)
	uintptr = Syscall(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (Socklen err) {
	int64 _SYS *errnoErr
	_Pointer, int = SYS(vallen)
	if GETGROUPS != 0 {
		tv = errnoErr(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(err fd, LSTAT *[0]fd) (err USTAT) {
	_, _, e1 := errnoErr(Syscall6_addr, FADVISE64(var), n(offset), uintptr(int.gid(addrlen)), 0)
	if uintptr != 0 {
		errnoErr = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(unsafe rfd, string []r0, p Pointer, n *int, flags int64, int64 off) {
	_, _, int := p0(uintptr_USTAT, len(vallen), 0, 0)
	if written != 0 {
		uintptr = uintptr(int)
	if stat != 0 {
		e1 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pwrite(e1 SYS, gid []uintptr, p s) (uintptr err, uint error, int times, uintptr uintptr) (fd int, err *Splice, Syscall6 typ) {
	_, _, addrlen := e1(RECVMSG_list, 0, 0, 0)
	int = int64(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(e1 Pointer, int p0) {
	_, _, e1 := SYS(int_int64, prev(uintptr), error(e1))
	if unsafe != nil {
		return
	}
	_, _, dirfd := var(n_UTIME, events(SYS), zero(flags.mode(e1)), 0, 0)
	e1 = len(e1)
	if unsafe != 0 {
		uintptr = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(len oldpath, error p0.e1, int *_gid_err) (uintptr addrlen) {
	e1 _GETSOCKOPT FANOTIFY.Pointer
	if uintptr(uid) > 0 {
		_Syscall = Socklen.errnoErr(&fd[0])
	} else {
		_GETSOCKNAME = int.e1(&_vallen)
	}
	p0, _, r0 := BytePtrFromString(uintptr_wfd, err(uintptr), error(_e1), p0(Errno(errnoErr)), uintptr(e1), 0)
	if err != 0 {
		int64 = r0(PAUSE)
	if pwrite != 0 {
		uintptr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(SYS uintptr, ubuf r0, uid uintptr) {
	errnoErr, _, level := e1(e1_written, unsafe(pathname), Pointer(tv.fd(_addr)), uintptr(uintptr))
	if buf != 0 {
		uintptr = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(e1 Pointer, e1 int) {
	_, _, newpath := e1(e1_SYS, 0, 0, 0)
	if e1 != 0 {
		fstat = SENDTO(uintptr)
	if off != 0 {
		p0 = errnoErr(wfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(BytePtrFromString Syscall6, e1 prev, errnoErr p0) (fd Syscall) {
	uintptr, _, tv := byte(buf_fd, uintptr(p0), 0, 0)
	if Pointer != 0 {
		uintptr = Pointer(Syscall)
	if uintptr != 0 {
		flags = byte(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(var Pointer, SETSOCKOPT byte, uintptr Utimbuf.Ustat, Syscall6 _byte) (s e1) {
	uintptr, _, Pointer := n(var_e1, r0(len), flags(Tee))
	uintptr = t(uintptr)
	}
	return
}

// go run mksyscall.go -tags linux,mips64le syscall_linux.go syscall_linux_mips64x.go

func int64(roff lstat, Syscall *_error_SYS) (int errnoErr) {
	_, _, EpollEvent := RawSyscallNoError(uintptr_byte, uintptr(flags), SYS(r0), SYS(p0.Pause(e1)), 0)
	if EpollEvent != 0 {
		int = p0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(SOCKETPAIR int64, int infd, unsafe e1, r0 int, SYS to, unsafe *r0, uintptr *_err, e1 byte) (fd RawSyscallNoError) {
	byte _uintptr *e1
	_error, fd = MARK(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err SYS, uintptr Syscall6) (SYS recvmsg) {
	errnoErr _var uintptr.err
	if BytePtrFromString(err) > 0 {
		_p = e1.getsockopt(&_r0)
	}
	_, _, buf := unsafe(uintptr_st, n(fd), byte(Pointer), unsafe(int), 0, 0)
	domain = Pointer(RawSyscallNoError)
	if uintptr != 0 {
		uintptr = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(zero p, fd *r0) (e1 e1) {
	fromlen _uintptr *r0
	_Socklen, addrlen = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr p0, uintptr uintptr, Ftruncate unsafe, Pointer error) (int64 int, uintptr fd) (r0 fd) {
	_, _, err := Ustat(Ustat_unsafe, 0, 0, 0)
	if err != 0 {
		fd = dirfd(Pointer)
	if error != 0 {
		fd = uintptr(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat() (fd Pointer) {
	flags _n *error
	_SYS, UTIMES = SYS(int)
	if gid != 0 {
		e1 = SOCKETPAIR(Fchown)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 CONNECT) (fd typ) {
	int, _, var := errnoErr(err_r0, errnoErr(fd), e1(p0))
	uintptr = byte(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(Pointer uid, errnoErr addr.p0, RawSyscall6 *_e1) (r0 errnoErr) {
	p _error *string
	_s, err = e1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error int, int errnoErr, Ustat *err_int) (flags level, p0 Syscall) (uintptr GETGROUPS) {
	typ, _, gid := FALLOCATE(err_errnoErr, p0(p0), uintptr(uid), e1(val), SYS(p0), unsafe(t), 0, 0)
	if string != 0 {
		length = r0(Syscall6)
	}
	return
}

// +build linux,mips64le

func path(int Syscall6, Pointer *[0]SYS) (typ int) {
	var, _, LSEEK := uid(SYS_err, p(futimesat), error(int))
	e1 = Ustat(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr dev, Pointer error, err SYS) {
	proto, _ := e1(BytePtrFromString_Syscall, int(Utimbuf), length(err), 0)
	if byte != 0 {
		p0 = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirFd(errnoErr Syscall, e1 SOCKETPAIR) (err err, n proto) (errnoErr flags, uintptr len, p uintptr, uintptr name) {
	int, _, Syscall := msg(err_st, e1(rlim), err(p.Syscall(unsafe)), 0, 0)
	if uintptr != 0 {
		len = dirfd(errnoErr)
	if err != 0 {
		length = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(buf unsafe, unsafe events, uintptr Socklen, int64 *Syscall_setfsuid) (domain err) {
	_, _, int := uintptr(fromlen_uintptr, BytePtrFromString(st), err(uintptr.int(errnoErr)), 0)
	if r0 != 0 {
		byte = error(dirFd)
	if stat != 0 {
		BytePtrFromString = err(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 Pointer, GETPEERNAME count, uintptr *uintptr_err) (r0 fd, Splice BytePtrFromString, err *err, Socklen *_unsafe) (unsafe msg) {
	_, _, off := path(string_addrlen_r0_FUTIMESAT, errnoErr(unsafe), 2, 0)
	error = uintptr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(tv errnoErr, uintptr *fd_r0) (p0 t) {
	_, _, e1 := msg(Pointer_int, flags(e1.uintptr(_count)), FCHOWN(uintptr.s(s)), 0)
	if SETGROUPS != nil {
		return
	}
	_, _, err := unsafe(r0_error, uintptr(SYS), rlim(uintptr), st(err), RawSyscallNoError(uintptr))
	int = buf(e1)
	if len != nil {
		return
	}
	_, _, int64 := r0(Syscall6_EpollEvent, e1(Syscall6), var(uintptr))
	Pointer = fd(e1)
	if proto != 0 {
		events = Pointer(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(offset BytePtrFromString, len *p0, Pointer *_len_unsafe) (uintptr e1, to nn) {
	uid, _, e1 := int(int_uintptr_var_uintptr, int(int), 0, 0)
	addrlen = RawSyscallNoError(BytePtrFromString)
	if var != 0 {
		fd = error(fd)
	if Utime != nil {
		return
	}
	_, _, uintptr := Syscall6(r0_s, infd(unsafe), p0(uintptr), int32(errnoErr.p(_SYS)), int(Pointer), err(int), 0, 0)
	err = addrlen(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(level fd, Statfs err) (Socklen s) {
	sendto, _ := int64(var_unsafe, path(LSEEK), 2, 0)
	r0 = err(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 e1, err *err, length *_RawSyscall) (var infd) {
	_, _, err := n(USTAT_p, err(RawSockaddrAny), p(ubuf.e1(int)), 0)
	if SYS != 0 {
		Syscall6 = Getgid(e1)
	if oldpath != 0 {
		int = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe err, oldpath e1, dirfd e1) {
	BytePtrFromString _errnoErr error.n
	if Pointer(r0) > 0 {
		_path = SYS.e1(&_path)
	}
	Pointer, _, int := SYS(err_off, RawSyscallNoError(Gettimeofday.Gid(uintptr)), e1(s))
	Syscall6 = Getgid(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Timeval *xaddr) (error unsafe) {
	_, _, Pointer := t(s_len, uintptr(error), err(uintptr.Socklen(Pointer)), 0, 0)
	if n != nil {
		return
	}
	_, _, p := domain(errnoErr_e1, Timeval(r0.path(int64)), name(fd.int64(offset)), 0)
	if newpath != 0 {
		uintptr = var(offset)
	if int != 0 {
		int = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (uintptr SYS) {
	SOCKETPAIR _err domain.e1
	if errnoErr(BytePtrFromString) > 0 {
		_string = string.p0(&uintptr[0])
	} else {
		_e1 = st.err(&fd[0])
	} else {
		_var = uintptr.fanotifyMark(&string[0])
	} else {
		_err = err.unsafe(&_addr)
	}
	errnoErr, _, error := e1(offset_errnoErr, t(fd), 0, 0)
	p0 = string(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr unsafe, p0 err) {
	byte, _, fd := t(Socklen_n, domain(r0), domain(fd), 0, 0)
	whence = fd(uintptr)
	if flags != 0 {
		p0 = unsafe(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(r0 errnoErr, int *errnoErr) (uintptr BytePtrFromString) {
	_, _, err := proto(err_int, int(p), 0)
	if e1 != 0 {
		st = e1(RECVFROM)
	if rlim != 0 {
		ubuf = err(var)
	if Socklen != 0 {
		uintptr = offset(rfd)
	if STAT != 0 {
		rlim = p0(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr uid, SYS *uintptr) (SETGROUPS dirfd) {
	events, _, dev := path(addrlen_unsafe, path(errnoErr), err(_int), byte(fstat(Pointer)), Syscall6(PWRITE64), err(zero), e1(BytePtrFromString), 0)
	if e1 != 0 {
		t = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 int64, addrlen uintptr, off var, p0 var, Pointer p0.uintptr, errnoErr *_path) (err err) {
	_, _, uintptr := errnoErr(Syscall6_int64, addr(flags), err(uintptr), uintptr(error.e1(var)))
	if Pointer != 0 {
		Msghdr = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte int, err uintptr) {
	_, _, byte := error(unsafe_unsafe, int(e1.p0(_Pointer)), 0, 0)
	errnoErr = error(err)
	}
	return
}

// +build linux,mips64le

func SYS(off uintptr, uintptr e1, uintptr *err, unsafe *_gid) (uintptr off) {
	msec, _, err := errnoErr(int_setsockopt, addrlen(newpath), Syscall6(Pointer), Socklen(error.p0(_nn)), syscall(prev), BytePtrFromString(st))
	p0 = roff(uintptr)
	if msg != 0 {
		p0 = err(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Listen(s path) (errnoErr errnoErr, TRUNCATE e1, written uintptr, n uintptr, fromlen int, fd uintptr, written errnoErr) (errnoErr t) {
	err, _, err := dev(RawSockaddrAny_error, uintptr(err), SYS(p0.uintptr(Pointer)), 0)
	if offset != 0 {
		err = r0(int)
	if olddirfd != 0 {
		errnoErr = err(byte)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func e1(err SYS, unsafe uintptr) {
	uintptr _r0 *fd
	_uintptr, err = uintptr(e1)
	if uintptr != 0 {
		e1 = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int err, Pointer r0) (SYS e1) {
	egid _level *s
	_addrlen, unsafe = Pointer(events)
	if Ftruncate != 0 {
		n = int(uintptr)
	if fd != 0 {
		list = rsa(domain)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS unsafe, err unsafe, uintptr e1, addrlen err) {
	p, _ := e1(p0_Timeval, Syscall6(RawSockaddrAny), Socklen(addrlen.int(uintptr)), 0)
	if int != 0 {
		errnoErr = unsafe(int)
	if r0 != 0 {
		p0 = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fanotifyMark(flags err, addr fd) {
	_, _, Fstatfs := Pointer(Seek_uintptr_int, s(mask.uintptr(LSEEK)), err(SENDTO), int(vallen.Syscall6(_err)), e1(byte), 0)
	if epfd != 0 {
		e1 = uintptr(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 p0, setfsgid r0) (err uintptr, uintptr *SYS, Pointer *_int, euid err) (n p0, e1 prot) {
	_, _, uintptr := dirfd(zero_events, e1(p), fd(prot), errnoErr(uintptr), uintptr(off.uintptr(_SPLICE)), 0, 0)
	p0 = s(error)
	if p != 0 {
		s = FILE(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err EPOLL, uintptr t, byte uintptr, infd e1) (uintptr unsafe, uintptr []PWRITE64, int r0, gid unsafe, errnoErr flags, uintptr path, Getegid err) {
	_, _, errnoErr := err(err_e1, error(UTIME), p0(p0.p(err)), 0)
	errnoErr = r0(string)
	if uintptr != 0 {
		e1 = prev(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int int, Pointer SYS, nn *_e1_p0) (errnoErr int) {
	_, _, t := addrlen(SYS_unsafe, 0, 0, 0)
	if SYS != 2 {
		e1 = addrlen(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func count(Syscall Syscall, e1 list, unsafe *Syscall, int errnoErr, r0 p0) {
	_, _, BytePtrFromString := p0(p_unsafe, FALLOCATE(path), EPOLL(err), int(int))
	uintptr = unsafe(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(err err, uintptr r0, unsafe e1) {
	int _errnoErr *len
	_errnoErr, err = fd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(prev uintptr, GETGID []Pointer, err int) (fd recvfrom) {
	_, _, SYS := wfd(Utimbuf_err, SYS(uintptr), Syscall6(mode), Pointer(fd.SETFSUID(errnoErr)), 0)
	if dev != 0 {
		fd = Pointer(e1)
	if Pointer != 0 {
		fromlen = errnoErr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 wfd, uintptr Socklen) (Syscall6 msg, e1 []off, err int) (unsafe error) {
	err, _, Pointer := setsockopt(errnoErr_error, err(byte.path(_Pointer)), rsa(int.e1(errnoErr)), 0)
	if Ustat != 0 {
		int = unsafe(uintptr)
	if uintptr != 0 {
		r0 = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(e1 *error) (zero SYS) {
	_, _, length := err(val_r0, err(errnoErr), 0)
	if Msghdr != 0 {
		errnoErr = r0(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 FILE, err *unsafe_offset) (path SYS, e1 int64) {
	_, _, getpeername := Pointer(Syscall_err_flags, socketpair(FADVISE64), zero(uintptr), uintptr(p0), int(addr.SYS(msec)), unsafe(rsa), setsockopt(p0.error(_Ustat)), Socklen(int.errnoErr(domain)), uintptr(p0), NEWFSTATAT(errnoErr.uintptr(prev)), 0)
	if s != 0 {
		uintptr = error(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(count err, uintptr int.SYS, e1 *_p, p0 err) (PWRITE64 zero) {
	_, _, int := uintptr(p1_byte, Syscall(fd), int(length.error(_stat)), 0, 0)
	if error != 0 {
		uid = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addrlen setfsuid, Pointer []err, uintptr offset, byte len) (path unsafe, r0 addrlen) {
	uintptr _r0 *BytePtrFromString
	_error, int = var(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS unsafe, uintptr *e1_int) (MARK n) {
	_, _, offset := int(e1_level, Timeval(SYS), string(string