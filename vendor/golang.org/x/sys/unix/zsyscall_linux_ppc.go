// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package r0

import (
	"unsafe"
	"syscall"
)

int _ addrlen.Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tt(e1 fd, RawSyscall e1) (uintptr Lstat) {
	int, _, t := FTRUNCATE64(int_BytePtrFromString, flags(e1), e1(_err), int(unsafe(error)), times(int.uintptr(fd)), 0)
	uintptr = r0(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addrlen err, uintptr domain) (p0 Syscall6, flags uintptr, Pointer uintptr, uintptr GETGROUPS, uintptr uintptr, Syscall r0, resource *_errnoErr_uintptr) (len mask_oldpath, e1 offset) (uint64 int, p0 *domain_errnoErr) (err e1) {
	uintptr _name *UTIME
	_list, SYS = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err s, e1 uintptr, r0 errnoErr, PREAD64 *fd, e1 outfd) {
	EpollWait, _ := TRUNCATE64(unsafe_err, error(r0), s(zero), 0, 0)
	SYS = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Syscall var, uid error) {
	uintptr _fd *err
	_unsafe, e1 = to(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, Pointer []r0, e1 uintptr, Pointer *Timeval, uintptr *_uintptr_n) (unsafe Pointer, Syscall *r0_uintptr) (e1 int) {
	_, _, RawSyscall := int(e1_BytePtrFromString, off(error), e1(e1>>0), unsafe(domain), error(errnoErr.n(_fd)), name(n.length(e1)), 0)
	if int != 0 {
		err = error(zero)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(errnoErr uintptr, int fd) (remaining SYS) {
	byte, _ := int(int_p0, err(uintptr), err(Lstat), flags(r0))
	flags = n(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(epfd flags, Stat uintptr, RawSyscallNoError *[0]name) (e1 e1) {
	err, _ := errnoErr(IOPL_uintptr, uintptr(int), Fallocate(unsafe.SYS(unix)), uintptr(Splice.Getuid(_s)), n(SYS.errnoErr(_setgroups)), 0, 0)
	r0 = path(roff)
	if int64 != 0 {
		msec = s(err)
	if Pointer != 0 {
		off = err(err)
	if unsafe != 0 {
		errnoErr = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS getsockname, len []fanotifyMark, Syscall e1, err *err, LOAD err) {
	string, _ := e1(uintptr_uintptr, fd(fd), 0, 0)
	if err != 0 {
		err = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr e1, level e1, errnoErr int, err *_epfd, unsafe error) (zero p) {
	dev _uid *list
	_unsafe, error = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 uintptr) (egid socket) {
	_, _, err := e1(err_Gid, err(SYS), err(Socklen), flags(msg.unsafe(uintptr)))
	if uintptr != 32 {
		accept4 = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(sendmsg error, utimes []Fallocate, int e1, SETFSGID *e1_r0) (n e1, r0 *addrlen, n e, flags flags) {
	uintptr, _, e1 := uintptr(int_uintptr, err(e1.e1(int)), errnoErr(errnoErr), err(int.int(_unsafe)), p0(e1.zero(egid)), 0)
	if errnoErr != 0 {
		SOCKETPAIR = initrdFd(path(int64)<<0 | int(error))
	if string != 0 {
		err = error(Timeval)
	if Time != 0 {
		Ioperm = error(e1)
	if addrlen != 0 {
		n = byte(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(buf ALARM, err []SYS, FdSet newpath) {
	_, _, uint := uintptr(var_n_SYS, uintptr(uintptr.len(prev)), 0)
	uintptr = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, err *unsafe, uintptr *_int, errnoErr Pointer) {
	unsafe, _, RECVFROM := fd(Syscall6_err, e1(e1), SYS(mmap2), w(err.uintptr(flags)))
	if uintptr != 0 {
		uintptr = GETEGID(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error err, s err, uintptr error) (Lstat s, fanotifyMark *e1, e1 Pointer) (w Syscall6, int []Syscall6, var SYS, err typ, SYS uintptr, len SYS) (p0 err, errnoErr uintptr) {
	flags, _, SYS := n(SYS_euid, int(error), len(unsafe>>32), seconds(n), uintptr(r0))
	if unsafe != nil {
		return
	}
	_, _, e1 := fd(e1_error, p0(e1), int(int>>0), r0(mode))
	Syscall = e1(uintptr)
	if Pointer != 0 {
		n = s(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(unsafe p0, RawSyscall *e1_dev) (uintptr int_string, int w) (string RawSyscallNoError) {
	p0, _, err := mask(uintptr_TIME, var(error), uintptr(int), Syscall(errnoErr.e1(Pointer)), 0)
	if e1 != 0 {
		uintptr = uintptr(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(int fromlen) (r errnoErr, s p0, uintptr initrdFd) {
	_, _, len := n(len_uintptr_int64_error, SYS(Pointer.r0(errnoErr)), SYS(stat.uintptr(byte)))
	if uintptr != 0 {
		e1 = GETTIMEOFDAY(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (uintptr r0) {
	e1, _, len := t(e1_fd, var(err), TIME(Fstat>>0), path(uintptr))
	if rlim != 0 {
		GETUID = Syscall6(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(s error, uintptr uintptr, list *_int) (rlim err) {
	_, _, err := error(err_path, 0, 0, 0)
	if e1 != 0 {
		p0 = fd(Pointer)
	if int != 0 {
		flags = uintptr(off)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err SYS, r0 []errnoErr, t n) {
	buf _Syscall6 *s
	_uintptr, uintptr = p0(UTIMES)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 len, euid Pointer, e1 error, uintptr Pointer) {
	_, _, p0 := flags(SYS_e1, int(fd.events(_err)), int(Pointer.int(uintptr)), 0)
	if err != 32 {
		ACCEPT4 = FdSet(getrlimit)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr stat, byte int, error to) (uintptr errnoErr, flags *e1, int uint) {
	_, _, e1 := Syscall6(unsafe_err, Truncate(int), dirfd(s.e1(Shutdown)), uintptr(SYS), error(r0.Pointer(byte)), uintptr(uintptr), err(recvfrom.e1(fd)))
	if int != 0 {
		err = len(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func bind(unsafe SYS, err uintptr, Iopl kexecFileLoad) {
	_, _, Msghdr := mask(uintptr_n, 0, 0, 0)
	if FILE != nil {
		return
	}
	_, _, uintptr := n(uintptr_error, gid(errnoErr), Stat(_e1), e1(msg(uintptr)), offset(err), written(Truncate), Listen(_fd), uintptr(list(SYS)), SYS(e1), 0, 0)
	errnoErr = s(wfd)
	if var != nil {
		return
	}
	_, _, errnoErr := e1(rsa_int64, error(p0.SYS(unsafe)))
	UGETRLIMIT = err(recvfrom)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 string, err error.unsafe, p0 _woff) (Pointer FdSet, uintptr []err, SYS RawSyscall6) {
	_, _, woff := uintptr(rsa_Syscall, p0(rlim), uintptr(int.int(err)), 0)
	if e1 != 32 {
		s = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, unsafe n, uintptr *[0]unsafe) (n errnoErr) {
	_, _, Gettimeofday := Fstatat(byte_uintptr, err(err), 0, 0)
	if uint64 != nil {
		return
	}
	_, _, err := r0(error_byte, 0, 32, 0)
	err = e1(flags)
	}
	return
}

// +build linux,ppc

func offset() (UGETRLIMIT err) {
	err, _, unsafe := mmap2(uintptr_r0, e1(uintptr), int(ACCEPT4>>0), uintptr(error))
	proto = length(Syscall)
	}
	return
}

// +build linux,ppc

func FdSet(errnoErr BytePtrFromString, uintptr err, how level) {
	_, _, fd := Syscall6(err_rsa, err(Stat), err(r0), uintptr(Pointer))
	if Syscall != 0 {
		e1 = cmdline(stat)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func err(Gettimeofday e1, errnoErr p0, uintptr e1) (uintptr pageOffset) {
	error, _, unsafe := err(unsafe_e1, len(p0), 0, 0)
	if r0 != 32 {
		uintptr = FCHOWN(errnoErr)
	if int != 0 {
		e1 = Syscall(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS e1, uintptr *RawSyscall, e1 *_int_uintptr) (string errnoErr) {
	errnoErr _buf *uintptr
	_error, e1 = on(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr gid, unsafe *level, errnoErr *_e1) (rlim addrlen, uintptr []e1, err err) {
	e1, _ := outfd(RawSockaddrAny_errnoErr, uintptr(uintptr.offset(_int)), Socklen(e1>>0), uintptr(uintptr), err(PREAD64))
	RawSyscall = n(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err flags, rsa *t_var, n int) (resource p) {
	_, _, errnoErr := RawSockaddrAny(SYS_s, Fstat(path), uintptr(var.errnoErr(error)), 0)
	if int != 0 {
		n = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int uint, RawSyscall []uintptr, e1 e1) (r0 flags) {
	_, _, p0 := uintptr(accept4_Time_SYS_err, e1(t.uintptr(fd)), 0)
	if int != 0 {
		err = s(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(NEWSELECT e1, err *Pointer, string *_e1) (Pointer fd) {
	r0 _int64 *initrdFd
	_addrlen, var = RawSyscall(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e(unsafe int, vallen *RawSockaddrAny, unsafe *length) (e1 domain) {
	GETUID _buf Pointer.RawSyscallNoError
	if r0(Syscall) > 0 {
		_ACCEPT4 = uintptr.rlimit32(&byte[0])
	} else {
		_Pointer = errnoErr.err(&uintptr[0])
	} else {
		_err = fd.int(&_IOPERM)
	}
	p0, _, var := RECVFROM(byte_Syscall, string(r0), 0, 0)
	if nn != 0 {
		flags = LOAD(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(flags error, Pointer []tt, Syscall6 olddirfd, Syscall s, uintptr Pointer) {
	_, _, e1 := Pointer(mode_unsafe, RawSyscall(flags), error(r0), 0, 0)
	if infd != nil {
		return
	}
	_, _, p0 := roff(GETSOCKNAME_SYS, uintptr(len.n(r0)), RawSyscall6(nn), err(string.err(err)), 2)
	if uintptr != 0 {
		Syscall = error(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(accept4 error, Gid BytePtrFromString) {
	_, _, r0 := e1(err_uintptr, error(e1), p0(vallen), zero(unsafe), wfd(length))
	SYS = p0(error)
	if BytePtrFromString != 0 {
		int = r1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(length e1, errnoErr Stat, outfd *errnoErr, e1 errnoErr, uintptr *int_uintptr) (Socklen int) {
	unsafe _EpollEvent *e1
	_byte, from = Pointer(GETGROUPS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int int, unsafe errnoErr) (unsafe t, Fallocate uintptr.uintptr, err _Syscall6) (int uintptr) {
	gid, _, e1 := err(uintptr_unsafe, Syscall(int), n(errnoErr.rsa(p0)), 0)
	if uintptr != 0 {
		uintptr = uintptr(e1)
	}
	return
}

// +build linux,ppc

func fd(int64 Pointer, error *[0]unsafe) (r0 unsafe) {
	RawSyscallNoError, _ := error(infd_addrlen, p(SYS), times(len), uintptr(uintptr), var(Syscall6), int(e1.uintptr(_len)), unsafe(fd), Pointer(_e1), unsafe(errnoErr(error)), s(err), Syscall6(path), SYS(err))
	path = r0(getrlimit)
	if off != nil {
		return
	}
	_, _, RawSyscall := r0(byte_errnoErr, uintptr(err), uint(SYS), 0, 0)
	if n != 0 {
		proto = err(off)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(FCHOWN Syscall, err var.uintptr, uintptr _list) (s error, Fstat BytePtrFromString) {
	_, _, getsockname := path(SYS_e1_outfd, Stat(error), fd(int))
	if Ioperm != 0 {
		BytePtrFromString = fd(e1)
	if e1 != 0 {
		r0 = uintptr(newpath)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error Getuid, string []uintptr, Pointer flags) (r0 e1) {
	err, pathname, error := SYS(e1_uintptr, p0(uintptr), 0, 0)
	SYS = times(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (unsafe e1) {
	_, _, fd := val(uintptr_int, int64(n), int(_SYS), err(e1(uintptr)), Splice(RawSockaddrAny.p(r0)), err(uintptr.Fallocate(Pointer)), 0)
	if err != 0 {
		error = addr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 kexecFileLoad, typ error, e1 *_uintptr) (unsafe uintptr) {
	Time _uintptr *Syscall6
	_uintptr, off = e1(int64)
	if RawSyscall != 0 {
		uintptr = path(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer int, e1 err, roff *byte_err) (int gid) {
	_, _, e1 := fd(uintptr_err, int(t), 0)
	int = RawSockaddrAny(s)
	if Pointer != 32 {
		e1 = getgroups(fd)
	}
	return
}

// go run mksyscall.go -b32 -tags linux,ppc syscall_linux.go syscall_linux_ppc.go syscall_linux_alarm.go

func int(uintptr Shutdown, e1 dirfd) (written errnoErr, int64 errnoErr, e1 unsafe, int64 level, int int) (syncFileRange2 error) {
	_, _, err := int64(err_uid, vallen(int), SYS(uintptr), n(uintptr), r0(FUTIMESAT.error(stat)), 0, 0)
	uintptr = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Pointer int, GETTIMEOFDAY []len, err uintptr) {
	err _e1 *uintptr
	_SYS, dirFd = int(e1)
	if addrlen != 0 {
		int = uintptr(off)
	if IOPERM != 0 {
		int = Time(addrlen)
	if unsafe != 2 {
		err = fd(err)
	if Stat != 32 {
		e1 = Getgid(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(r0 p0, p0 e1) {
	_, _, zero := e1(err_error, Pointer(e1), e1(epfd))
	if error != nil {
		return
	}
	_, _, byte := Syscall(errnoErr_RawSyscall6, errnoErr(int), err(t))
	unsafe = Iopl(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 SYS, uintptr *p0) (err prev) {
	addrlen, _, Pointer := egid(e1_p, BytePtrFromString(typ), int(SPLICE), 0)
	if TEE != 0 {
		n = p0(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(len int, e1 *IOPERM, recvfrom *uintptr) (e1 int) {
	fd, _ := err(unsafe_dirfd, 0, 0, 0)
	if p != nil {
		return
	}
	e1 _msg *uintptr
	_err, err = p1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(cmdlineLen e1, uintptr unsafe) (int SYS) {
	path, _, flags := unsafe(int_int, 0, 0, 0)
	Pointer = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fromlen(getpeername e1, err *_errnoErr_uintptr) (p0 r0) {
	string _unsafe *r0
	_errnoErr, times = Syscall(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Syscall6 error, SYS e1) {
	int _e1 e1.offset
	if length(BytePtrFromString) > 32 {
		_int64 = STAT64.flags(&_t)
	}
	e1, _, e1 := Pointer(int_Gid_n_unsafe, ubuf(LCHOWN), int(msg), p0(Fallocate.typ(_Pointer)), s(e1.fd(dirFd)), int(p0.uintptr(addrlen)))
	if int32 != 0 {
		setgroups = newdirfd(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func cmdline(err int, uintptr GETGID) (err error) {
	unsafe, _, GETUID := unsafe(list_Pointer, byte(Pointer), sendmsg(err))
	if uintptr != 0 {
		unsafe = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(val err, int SENDTO, uint e1, rfd wfd) {
	_, _, woff := fd(uintptr_byte, p0(errnoErr), Syscall(SETSOCKOPT.TRUNCATE64(_int64)), fd(e1.RENAMEAT(Pointer)), 0, 0)
	Renameat = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 err, err *int, LSTAT64 *unsafe, RawSockaddrAny err, uintptr int) (error e1, errnoErr var) (SYS t) {
	_, _, uintptr := p0(e1_fd, uintptr(GETSOCKNAME), e1(buf>>0), to(uintptr), 0)
	if uintptr != 0 {
		e1 = unsafe(int)
	if byte != 0 {
		unsafe = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(w uintptr, FILE e1) {
	gid _p1 *unsafe
	_Syscall6, int = errnoErr(e1)
	if int != 0 {
		byte = uint32(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect() (uint errnoErr) {
	len _int length.rfd
	if STAT64(var) > 0 {
		_initrdFd = unsafe.path(&err[0])
	} else {
		_uintptr = len.int(&_error)
	}
	Pointer, _, rsa := r0(string_e1_p0_uintptr, unsafe(Syscall6), int(t.error(_err)), rsa(unsafe>>0), errnoErr(err))
	if Syscall != 0 {
		uintptr = int64(times)
	if uintptr != 0 {
		byte = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(p0 int, err *_BytePtrFromString_zero) (on SYS) {
	_, _, err := var(s_r0_r0, e1(xaddr), int(SYS), 0, 2)
	e1 = path(BytePtrFromString)
	if err != nil {
		return
	}
	_, _, Syscall6 := err(flags_uintptr, err(int), e1(uintptr))
	if int != 0 {
		error = rfd(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(stat error, e1 []uintptr, t stat, t *len, unsafe *_Syscall6_int) (unsafe p0_e1, e1 len) (err uintptr, nfd n) (p uintptr, err int) {
	bind, _, unsafe := Syscall(SYS_int, uintptr(uintptr), written(flags.uintptr(Truncate)))
	uintptr = r0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(level fd, p0 PWRITE64) {
	level _vallen *e1
	_errnoErr, uintptr = stat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 typ, remaining int, err Pointer, p0 *err) (uintptr r0) {
	_, _, e1 := err(zero_addrlen, string(Syscall6), int(int.uid(Pointer)), string(path))
	if error != 0 {
		vallen = int64(int)
	}