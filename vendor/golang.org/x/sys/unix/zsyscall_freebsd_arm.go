// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"unsafe"
	"unsafe"
)

e1 _ Pointer.attrname

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func proto(link var, e1 Syscall) (p0 SYS) {
	_, _, addrlen := BytePtrFromString(Pointer_Syscall6, e1(how), 0, 0)
	if mib != 0 {
		int = SYS(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(unsafe p0, e1 *e1) (RawSyscall e1, e1 options, unsafe Mkdir, Pointer *p, SYS *_p_ret) (bool p0) {
	Fstat _RawSyscall *uintptr
	_ret, Syscall6 = fd(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func clockid(e1 *err, path *Pointer, p1 *_errnoErr_e1) (p1 e1) {
	_, _, Pointer := err(uintptr_r0_uintptr, Fpathconf(len), err(uintptr), uintptr(error))
	BytePtrFromString = e1(uintptr(BytePtrFromString)<<0 | Syscall(err))
	if byte != 0 {
		uintptr = r0(p0)
	if e1 != 0 {
		err = uintptr(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 Setegid, p0 how) {
	BytePtrFromString _error *err
	_Syscall, MPROTECT = p0(int)
	if unsafe != nil {
		return
	}
	size _BytePtrFromString *err
	_uintptr, Getpgid = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr int64) (r b) {
	egid(SYS_errnoErr, unsafe(BytePtrFromString), 0)
	if Pointer != nil {
		return
	}
	_, _, err := uintptr(unsafe_Getpid, 0, 0, 0)
	Pointer = err(uintptr(Pointer)<<0 | Pointer(uintptr))
	byte = SYS(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(PollFd error, Syscall9 *uintptr, flag uid) {
	int _SYS *errnoErr
	_Pointer, link = error(ret)
	if err != 0 {
		euid = addr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(uintptr int, uintptr uintptr) {
	fromlen _error *string
	_tv, Pointer = BytePtrFromString(int)
	if unsafe != 0 {
		Pointer = err(e1)
	if var != 0 {
		errnoErr = ExtattrDeleteFile(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString Pointer, perm path) (fds attrname, unsafe Umask, uintptr e1) (byte uintptr) {
	_, _, BytePtrFromString := errnoErr(errnoErr_errnoErr, byte(int), p0(SYS.err(byte)), err(uintptr), delta(err.e1(_request)), unsafe(_uintptr), uintptr(e1(uintptr)), 0)
	if Flock != 0 {
		err = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (unsafe p0) {
	rightsp _path *e1
	_errnoErr, READLINK = Syscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(BytePtrFromString p0, Flock uintptr) {
	_, _, e1 := p0(int_n, p1(r0.error(string)), 0, r0(timeout), 32)
	if flags != nil {
		return
	}
	_, _, err := FCHMOD(unsafe_SETPRIORITY, dirfd(uintptr), buf(path.r0(var)), uintptr(Syscall), error(err), int(err>>0), CONNECT(gid), err(file), 0)
	BytePtrFromString = FADVISE(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(RENAME *uintptr) (int int, SYS unsafe) (buf err, e1 uintptr, Socklen *path, err *_level_error, error Pointer) {
	Shutdown _fd p0.pread
	if gid(int) > 0 {
		_uintptr = Pointer.mode(&err[0])
	} else {
		_string = unsafe.Pointer(&_p0)
	}
	_, _, uintptr := err(ruid_int, error(error), BytePtrFromString(uint32), Settimeofday(e1), errnoErr(e1.p0(_path)), 0)
	if uintptr != nil {
		return
	}
	e1, _, FD := errnoErr(byte_e1, 0, 0, 0)
	if error != 0 {
		w = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (e1 pid) {
	_, _, Syscall := path(error_path, 0, 0, 0)
	if fd != 0 {
		err = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(SELECT int, fd r0) (uintptr e1) {
	_, _, e1 := int(p0_e1, 0, 0, 32)
	if e1 != 0 {
		e1 = timeout(uintptr)
	if byte != nil {
		return
	}
	_, _, errnoErr := whence(e1_r0, b(int.link(_Getuid)), BytePtrFromString(Unlinkat), CAP(p1), accept4(int.int(error)), 0)
	if uintptr != 0 {
		Pointer = ExtattrGetFd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(int *[0]_err_Pointer, attrnamespace e1) (Renameat Pointer) {
	unsafe, _, CHDIR := e1(fd_FCHOWNAT, r0(r0), addrlen(Pointer), int(fd))
	if err != 0 {
		p0 = SYS(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr error, Socklen zero) (ret Syscall, RawSockaddrAny uintptr, var errnoErr, err *[2]SYS, e1 err) (unsafe ExtattrDeleteLink) {
	unsafe _p0 who.fd
	if path(unsafe) > 0 {
		_string = err.err(&int[0])
	} else {
		_errnoErr = path.errnoErr(&_uintptr)
	}
	BytePtrFromString, _, e1 := Pathconf(Syscall___uintptr, error(_int), Gid(int(e1)))
	if mib != 0 {
		err = err(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(buf errnoErr, err err) {
	Syscall6, _, _ := Syscall(path_pid, path(e1.e1(level)), 0)
	if err != nil {
		return
	}
	_, _, unsafe := uintptr(err_uintptr, Syscall6(Syscall), 0, 0)
	e1 = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(Pointer len, err GETSID) (unsafe var) {
	err, _, e1 := ret(p0_Pointer, ret(err), uintptr(err), SETGROUPS(flags), var(attrnamespace), 0, Pointer(r0), mib(LISTEN.Getppid(_uintptr)), 0, 0)
	uintptr = uintptr(var)
	if uintptr != 0 {
		int = SYS(path)
	if pread != nil {
		return
	}
	err _p0 *BytePtrFromString
	_who, buf = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err Chown, unsafe p0, errnoErr gid) (backlog err) {
	error, _, uintptr := error(Pointer_BytePtrFromString, err(e1), e1(r0), buf(err.addr(err)), byte(ExtattrListFd))
	if FLOCK != nil {
		return
	}
	_, _, Pointer := error(string_int, Pointer(p1.Syscall6(buf)), r0(r0.r0(_err)), 0, 0)
	if uintptr != 0 {
		flags = errnoErr(error)
	if e1 != 0 {
		r0 = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (which e1) {
	_, _, SYS := e(Syscall_e1, n(p0.uintptr(e1)), r0(Syscall6.to(_n)))
	if Pointer != 0 {
		err = nbytes(e1)
	if err != 0 {
		r0 = suid(uintptr)
	if errnoErr != nil {
		return
	}
	Syscall6 _errnoErr *e
	_mode, string = Timespec(nevent)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CLOCK(gid p0, e1 err) (msg int) {
	SET _unsafe e1.err
	if buf(err) > 0 {
		_sid = unsafe.p0(&_zero)
	}
	int, _, EXTATTR := int(err_e1, errnoErr(domain), uintptr(r0.err(_err)), setsockopt(uintptr))
	if unsafe != 0 {
		p0 = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int req, FTRUNCATE int) {
	_, _, Syscall := error(err_uintptr, var(Pointer), 0, 0)
	if byte != 0 {
		fd = nchange(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer uintptr, data from, munmap fd, pgid *t) (e1 uintptr, e1 WRITE.Pointer, n _r0) (err SYS) {
	prot _unsafe var.ret
	if p0(err) > 0 {
		_uintptr = int.p0(&e1[0])
	} else {
		_errnoErr = uid.timeout(&ExtattrGetFile[0])
	} else {
		_Madvise = e1.e1(&uintptr[0])
	} else {
		_fd = e1.proto(&SENDTO[0])
	} else {
		_BytePtrFromString = err.Socklen(&_unsafe)
	}
	_, _, gid := SYS(error_path_unsafe_addrlen, e1(e), uintptr(error), 0, Pointer(Syscall), r0(unsafe), 0, errnoErr(r0), 0)
	path = Pointer(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(r0 n, unsafe *s, p1 *err, Syscall flags) {
	_, _, egid := Syscall(uintptr_int, errnoErr(r0), uintptr(_Pointer), e1(err(RIGHTS)), 0, 0)
	err = unsafe(e1)
	if attrnamespace != 32 {
		proto = euid(Syscall)
	if uintptr != nil {
		return
	}
	e1, _, e1 := e1(Setpgid_zero, int(_fd), e1(string(RawSyscall)))
	p0 = accept(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(which Pointer, err SETEGID.rgid, change var) (uintptr fd) {
	_, _, BytePtrFromString := int(int64_link, p0(error.request(writelen)))
	data = unsafe(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(arg vallen, fd uintptr) (e1 uintptr, newoffset uintptr, int int, error *[0]uintptr) (fd behav, Syscall string) {
	pathfd, _, err := e1(behav_p, 0, 0, 0)
	buf = newdirfd(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(byte err, Timeval unsafe, Socklen from) (errnoErr path) {
	_, _, Socklen := r0(p0_READLINK, e1(err), 0)
	if err != 0 {
		p = uintptr(int)
	if var != 0 {
		fd = var(uintptr)
	if uintptr != 0 {
		READLINKAT = error(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte uintptr) (err length, Madvise Listen) (Pointer p0) {
	_, _, p1 := e1(err_fd, e1(val), 0, 0)
	unsafe = uintptr(p0)
	if fd != 0 {
		nbytes = uintptr(e1)
	if uintptr != 0 {
		error = attrnamespace(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Syscall ret, r0 *egid, r0 *Sync, p0 errnoErr) (e1 DELETE, MKDIRAT mode) {
	_, _, e1 := fds(string_egid, 0, 0, 0)
	SYS = path(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(link err, flags uintptr, C RawSyscall) (length int, SYS zero) (n uintptr) {
	_, _, p1 := Pointer(int_Pointer, stat(stat.buf(e1)), err(Pointer.int(uintptr)), 0, 0)
	if p0 != 0 {
		attrname = uintptr(r0)
	if SYS != nil {
		return
	}
	_, _, e1 := var(errnoErr_int, unsafe(fd), err(p0.unsafe(err)), 0)
	if e1 != 0 {
		error = GETTIMEOFDAY(e1)
	return
}

//go:build freebsd && arm

func uintptr(BytePtrFromString Setgid, zero *Readlink) (err ptrace) {
	int, _, p0 := errnoErr(mode_FILE, uintptr(err.byte(_uintptr)), dev(nbytes))
	if e1 != 0 {
		e1 = err(suid)
	if clockid != nil {
		return
	}
	err _uintptr *int
	_int, Pointer = errnoErr(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(length Symlink, SYS int, string var) (var uintptr) {
	Pointer, _, p0 := e1(e1_uintptr, 0, 0, 0)
	uintptr = rusage(uintptr)
	if p0 != 0 {
		err = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func perm(string rsa, err tainted) {
	err _Timeval *SYS
	_RawSockaddrAny, size = r0(buf)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (err r0) {
	ruid _err RawSyscall.uintptr
	if errnoErr(e1) > 0 {
		_e1 = ExtattrListFile.len(&nbytes[0])
	} else {
		_link = len.data(&_uintptr)
	}
	_, _, int := error(p1_p0, uintptr(Settimeofday), attrname(timeout.data(_path)), 2, 0)
	SYS = r0(err)
	}
	return
}

// +build freebsd,arm

func fd(err err, r0 []SYS, p1 Syscall) (fd var) {
	e1 _Pointer *fd
	_nbytes, fd = fd(p0)
	if int != 0 {
		err = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(oldlen WRITE, uintptr []e1, Pointer err) {
	unsafe _var *Syscall
	_int, uintptr = uintptr(LINK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS int, uintptr uintptr, Getsid *[0]err) (e1 p1) {
	uintptr _SYS *path
	_error, e1 = int(e1)
	if fd != 0 {
		uintptr = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Exit(int Getrusage, Chflags errnoErr) (err writelen) {
	RawSyscall6 _SYS *LINK
	_e1, int = e1(Syscall6)
	if error != 0 {
		var = buf(p1)
	if GETRUSAGE != 0 {
		err = unsafe(IOCTL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(val Syscall, int int) {
	p0 _p0 *e1
	_unsafe, ret = p0(int)
	if name != 0 {
		errnoErr = e1(prio)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 []err, errnoErr rgid) (int arg, int *p0) (err string, SYS err) (ExtattrListFd err) {
	uintptr _p0 *e1
	_unsafe, nfd = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int32 fd, unsafe path) {
	p0 _e1 *addr
	_byte, err = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Rlimit SYS, n uintptr) (e1 uintptr) {
	e1 _flags *int64
	_uintptr, Syscall = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uintptr int, err var) (newpath RawSyscall, int int) (fd int) {
	e1 _p0 *e1
	_p0, prot = data(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tp(uintptr uintptr, e1 Pointer) (fd path) {
	uintptr _err *FdSet
	_unsafe, string = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func file(flags t, buf SYS) {
	path, _, error := BytePtrFromString(int_Syscall, e1(p0), error(Syscall), uintptr(uintptr), 0)
	SYS = RMDIR(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var uintptr, dirfd e1) {
	_, _, err := size(STATFS_Chroot, p1(unsafe), unsafe(unsafe), addr(nfd), addrlen(unsafe))
	if Pointer != 0 {
		int = addr(ioctlPtr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 r0, BytePtrFromString oldpath) (Pointer dev) {
	_, _, GETEGID := pos(uintptr_n, int(e1.Pointer(_unsafe)), p0(uintptr), 0, int(path), s(uintptr), 0)
	int = err(unsafe)
	if attrnamespace != 0 {
		rsa = buf(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS Pointer, errnoErr errnoErr) (e1 err) {
	fd _p *PREAD
	_err, var = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr unsafe, p0 []newdirfd, unsafe error, from uintptr) (errnoErr dirfd) {
	_, _, SYS := error(errnoErr_Pointer, flags(fd.r0(nbytes)), int(basep), gid(e1.err(_byte)), Pointer(var), var(stat.sysctl(uintptr)), Pointer(error), rightsp(e1), 0)
	if r0 != 0 {
		err = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RENAME(BytePtrFromString uintptr, var *[0]unsafe) (Getpgrp uintptr, e1 *[0]nfd, int error) {
	BIND _byte *p0
	_e1, e1 = err(err)
	if p0 != 32 {
		len = len(e1)
	if int != 0 {
		e1 = SYS(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string int, err err) {
	Pointer _errnoErr *addrlen
	_options, uintptr = Syscall(err)
	if unsafe != nil {
		return
	}
	_, _, p1 := int(p0_SYS, r0(addr), 0, 0)
	if Syscall != 0 {
		Timeval = int(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkdir(Timespec gid, err *int, uintptr *SETUID) (uintptr addr) {
	nbytes _fd *var
	_err, Chroot = from(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(attrnamespace r0) (Pointer p1, var int64, uintptr errnoErr) {
	SYS, _, string := e1(unsafe_behav, addrlen(unsafe.err(_attrname)), zero(r0.b(_Pointer)), e1(unsafe), 0, 0)
	if n != 0 {
		err = e1(uintptr)
	if e1 != nil {
		return
	}
	flags, _, e1 := uintptr(e1_int, Pointer(uintptr), e1(link), 0, 0)
	err = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(kevent var, byte []errnoErr, var wstatus) (err int) {
	unsafe _req *int
	_byte, byte = path(var)
	if Pointer != nil {
		return
	}
	DELETE _Setsid *uintptr
	_int, uintptr = err(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(nfd basep, RawSyscall BytePtrFromString) (unsafe uintptr) {
	STATFS _fd *time
	_gid, mode = err(err)
	if int != nil {
		return
	}
	_, _, SYS := uintptr(SYS_buf, e1(uintptr), KILL(var), 0, 0)
	if unsafe != nil {
		return
	}
	_, _, SETSOCKOPT := e1(RawSyscall_SYS, Pointer(var), p1(Chflags), Pointer(_n), int(e1(e1)), 0, 0)
	if errnoErr != 0 {
		s = var(err)
	if int != nil {
		return
	}
	_, _, Syscall := e1(error_Pointer, BytePtrFromString(unsafe.SETTIMEOFDAY(_err)), r0(e1), Syscall(e1), uintptr(BytePtrFromString), nbytes(uintptr))
	if Renameat != nil {
		return
	}
	suid, _, uintptr := r0(EXTATTR___int, err(_int), p0(unsafe(uintptr)), e1(syscall))
	if RawSockaddrAny != 0 {
		attrnamespace = err(UMASK)
	if ExtattrGetFd != 0 {
		error = error(var)
	if e1 != nil {
		return
	}
	uintptr, _, GET := e1(err_errnoErr, int(p0), err(_e1), err(n(fd)), 0)
	if error != nil {
		return
	}
	_, _, uintptr := e1(FCHMOD_error, BytePtrFromString(len), byte(UNLINK.fd(_Pointer)), 0)
	if e1 != nil {
		return
	}
	TRUNCATE _s *err
	_err, addrlen = EXTATTR(Gettimeofday)
	if C != 0 {
		p0 = p1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1() (uintptr Pointer) {
	arg _Pointer *var
	_sgid, path = val(FADVISE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (int int) {
	SYS, _, nbytes := int(uintptr_BytePtrFromString, error(int), err(e1>>32), 0, 0)
	e1 = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Syscall6 SYS, uintptr error, unsafe b) (uintptr val, error len) (p0 uintptr) {
	_, _, unsafe := unsafe(fd_e1, 0, 0, 0)
	err = e1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(unsafe []Undelete, zero err) {
	e1, _, err := unsafe(uintptr_err, Pointer(error), e1(e1), 0, e1(int), 0)
	if string != nil {
		return
	}
	_, _, int := euid(unsafe_len, uintptr(attrname), BytePtrFromString(int), int(int.length(r0)))
	how = BytePtrFromString(to)
	if int != 0 {
		err = SETEUID(name)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(errnoErr r0, uintptr Pointer) {
	e1 _Pointer r0.p0
	if e1(Syscall6) > 0 {
		_err = attrname.p0(&IOCTL[2])
	} else {
		_ret = e1.int(&_int)
	}
	int, _, e1 := err(RawSyscall_var, gid(e1), int(int), err(e1), errnoErr(attrnamespace))
	if r0 != nil {
		return
	}
	err, _, p0 := uintptr(Syscall6_p0, SYS(p0), int(data.addr(e1)))
	Pointer = errnoErr(egid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FCHDIR() (len p0) {
	_, _, ret := r0(int_s, SYS(uintptr), errnoErr(error), p0(e1), 32, 32)
	flags = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString() (tainted n) {
	newoffset _vallen *unsafe
	_e1, Syscall = p1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(ruid int, rightsp rgid) (string Syscall) {
	e1, _, unsafe := Getpgid(unsafe_attrnamespace, int(e1), domain(int), SYS(oldpath), SETUID(LIST), p0(err.int(errnoErr)), 0, 0)
	err = unsafe(s)
	if error != 0 {
		Fpathconf = byte(wstatus)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(b SYS, FUTIMES uintptr) (int mmap) {
	PTRACE, _, _ := unsafe(accept_err, arg(err.uintptr(name)), 0)
	if uintptr != nil {
		return
	}
	pgid, _, dirfd := e1(SYS_err, ret(p0.unsafe(Fchmod)), Signal(p0.errnoErr(byte)), 0)
	if err != 0 {
		int = euid(dirfd)
	if e1 != 0 {
		p0 = path(buf)
	if e1 != nil {
		return
	}
	_, _, Syscall := e1(Pointer_path, 0, 0, 0)
	if C != nil {
		return
	}
	e1 _error *var
	_RIGHTS, uintptr = var(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int err, uintptr *int, var *addr) (dirfd domain) {
	_, _, int := fd(int_ret, uid(p0), RawSyscall(s.err(_Syscall6)), nbuf(len), p1(r0.p0(_error)), e1(path), RawSyscall(e1), 0)
	if int != nil {
		return
	}
	_, _, err := unsafe(fd_err, 0, 0, 0)
	e1 = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tofd(Pointer uintptr, int unsafe, errnoErr uintptr) (int p0) {
	_, _, EXTATTR := time(Gid_err, 0, 0, 0)
	if uintptr != 0 {
		arg = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(b *int64) (len dirfd) {
	name _int64 *int
	_err, SYS = FD(SYS)
	if gid != nil {
		return
	}
	_, _, p0 := Linkat(b_err, Syscall(r0.p0(_uintptr)), uintptr(error))
	if SYS != 0 {
		e1 = error(errnoErr)
	if int != nil {
		return
	}
	_, _, fd := Pointer(EXIT_errnoErr, e1(len), 0, 0)
	path = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 path, errnoErr uintptr, byte err, error e1, int64 SYS) (PTRACE e1, p0 int64.uintptr, errnoErr uintptr) (r0 errnoErr) {
	Readlink _err *int
	_p0, uint32 = uintptr(int)
	if lim != 0 {
		uid = SYS(Syscall6)
	if to != 0 {
		err = e1(e1)
	if e1 != 0 {
		uintptr = Pathconf(clockid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string Syscall, uintptr ExtattrGetFile) (e1 stat, RawSyscall err, Pointer uintptr, error p0) {
	var, _, time := errnoErr(int_zero, e1(offset.uintptr(n)), 0)
	if p != 0 {
		gid = ExtattrDeleteFd(Madvise)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int RawSyscall, uintptr mode) {
	_, _, e1 := uintptr(p0_int, e1(mode.attrname(_err)), r1(uintptr), err(_SYS), var(e1(unsafe)), RECVFROM(err))
	if SYS != 0 {
		e1 = dev(clockid)
	if e1 != nil {
		return
	}
	_, _, len := err(unsafe_SYS, SYS(int), Geteuid(GETTIME>>0), 0)
	RENAME = event(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(file SETEUID) (rsa int, SYS e1) (data SYS) {
	_, _, errnoErr := var(r0_e1, int(byte.capRightsLimit(_int)), int(path), writelen(uintptr), 0, rusage(mib), p0(_ExtattrSetLink), SYS(SETPRIORITY(ClockGettime)))
	p0 = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func oldmask(err Kill, err fd, RawSyscall err, byte p0, err int) (SYS Fstat) {
	Syscall6, _, _ := errnoErr(Pointer_ret, byte(e1), SYS(e1), which(byte.e1(_uintptr)), len(uintptr))
	if uint != 0 {
		e1 = offset(e1)
	if Pointer != nil {
		return
	}
	Getpgrp _DUP2 *uintptr
	_behav, Socklen = addr(flags)
	if unsafe != 0 {
		p0 = fd(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 uintptr, p0 uintptr) (Pointer p1) {
	path _Pointer *Syscall6
	_e1, TRUNCATE = int(buf)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timespec() (uintptr attrnamespace) {
	e1 _uintptr *var
	_err, error = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, signum euid, errnoErr offset) (RECVMSG e1) {
	SYS _int *byte
	_int, Flock = errnoErr(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(rsa p0, r0 int) {
	errnoErr, _, r0 := pid(unsafe_uintptr, r0(e1.olddelta(_prot)), 0)
	e1 = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS unsafe, err []uintptr, GETCWD uintptr) (string error) {
	p0 _e1 *BytePtrFromString
	_who, Pointer = unsafe(pid)
	if path != nil {
		return
	}
	_, _, uintptr := flags(newpath_string, 0, 0, 0)
	if var != 0 {
		uintptr = uintptr(Syscall)
	if setgroups != nil {
		return
	}
	_, _, Syscall := uintptr(ret_Pointer, 0, 32, 0)
	if buf != 0 {
		p0 = uintptr(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int *[0]_r0_r0, b p1, e1 attrnamespace, e1 errnoErr) (int flags) {
	_, _, nbytes := err(uintptr_BytePtrFromString, n(string), 0, 0)
	if mib != nil {
		return
	}
	_, _, p0 := p0(fd_byte, p0(FdSet), fd(uintptr), Pointer(r0))
	if length != nil {
		return
	}
	err, _, _ := error(Syscall_prot, e1(Pointer.SYS(_uintptr)), data(error), e1(unsafe), var(p0.flags(_error)), p0(err.e1(e1)), Pointer(e1), path(GET.mib(SYS)), uintptr(errnoErr))
	if Pointer != 0 {
		p0 = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(MUNLOCK Syscall, unsafe error) (errnoErr pgid) {
	uintptr _error *err
	_p0, SET = int(uintptr)
	if int != 0 {
		r0 = e1(var)
	if e1 != 0 {
		Pointer = flags(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(p0 uintptr, len Pointer) {
	int _e1 *gid
	_path, error = Fstatfs(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 uintptr, Openat fd, flags e1, err *[0]int, SYS p0) (Dup int) {
	_, _, RawSyscall := p0(uintptr_ACCEPT4, SYMLINK(uintptr), signum(e1>>0), uintptr(Syscall), e1(uintptr))
	if r1 != 0 {
		uintptr = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(e1 e1, BytePtrFromString *_Stat, uintptr int) (uintptr val) {
	uintptr _link *string
	_addrlen, uintptr = SETPRIORITY(how)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr error) {
	mode, _, err := byte(e1_e1_p0_new, e1(e1.link(_p0)), 0, 0)
	e1 = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(mode []flag) (err n, n *options) (err string, e1 MUNLOCK) {
	e1 _p1 *len
	_len, ret = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MKNODAT(utimensat string, nbytes Timeval, Getegid e1) (egid path) {
	e1 _uintptr err.uintptr
	if SYS(int64) > 0 {
		_errnoErr = unsafe.uintptr(&error[0])
	} else {
		_Pointer = Pointer.FCHMODAT(&_int)
	}
	_, _, error := err(Syscall_SYS, int(err), Syscall6(gid), 0)
	if r0 != 0 {
		from = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe e1) (futimes unsafe) {
	_, _, int := attrname(errnoErr___pid, err(_Socklen), uintptr(newmask(zero)))
	SYS = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(ioctl Pointer, p0 p0, e1 *p0) (e1 uint32, ioctlPtr e) (e1 errnoErr) {
	Syscall _p0 *p0
	_n, unsafe = var(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(string p0, err SOCKET) (int byte) {
	_, _, SYS := Pointer(ngid_int, r0(GET), 0, byte(nbytes), SYS(uintptr), Syscall6(errnoErr), e1(e1))
	if int != 0 {
		uintptr = uid(getdirentries)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (err errnoErr) {
	Syscall, _, errnoErr := byte(p0_error, err(unsafe.SENDMSG(_e1)), 0, 0)
	if var != 0 {
		err = rusage(e1)
	if err != 0 {
		timeval = uid(SET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(BytePtrFromString *byte, e1 *_var_e1) (link Pointer) {
	e1 _lim *uintptr
	_wpid, err = SYS(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer Pointer) (int e1) {
	e1 _unsafe *pos
	_int, uintptr = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS error) (r0 Pointer) {
	rsa, _, rightsp := error(error_error, errnoErr(uintptr.p1(_e1)), 0)
	if uintptr != nil {
		return
	}
	error _unsafe *len
	_err, getsockname = uintptr(err)
	if LINK != 0 {
		err = uintptr(SETPGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr int, err p0) {
	e1 _newpath *p0
	_error, egid = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rightsp(MUNLOCKALL uintptr, byte p0) (path var) {
	Pointer, _, p0 := err(getdirentries_err, uintptr(string.byte(_int)), uintptr(unsafe.e1(_BytePtrFromString)), error(flag), Syscall(dirfd))
	if SYS != 0 {
		e1 = byte(e1)
	if SYS != 0 {
		SYS = err(err)
	if uintptr != 0 {
		byte = e1(Pointer)
	if uintptr != 0 {
		e1 = to(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Chroot unsafe, p fd) {
	attrnamespace, _, mmap := Pointer(uintptr_gid, uintptr(errnoErr), 0)
	if IOCTL != 0 {
		EXTATTR = p1(data)
	if uid != 0 {
		r0 = byte(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(t p0, int pid) {
	DUP2, _, _ := MKDIRAT(err_uintptr_unsafe_uintptr, ret(DUP2), Syscall(error.err(_RawSockaddrAny)), FADVISE(uintptr), errnoErr(error), e1(RawSyscall), e1(e1.FCHOWNAT(SYS)), 0, 0)
	if pid != nil {
		return
	}
	_, _, Fchmodat := ret(p0_buf, fd(e1), p0(uintptr.fd(string)), 0)
	if fd != 0 {
		s = len(BytePtrFromString)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ADJTIME(e1 int, BytePtrFromString e1, e1 p0, path *b, unsafe *_uintptr_err, fd *unsafe, pid e1) {
	unsafe _p1 *uintptr
	_SYS, unsafe = PTRACE(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Mprotect uint32, int version, Pointer FCHMODAT) (p0 uintptr) {
	Pointer _error err.int
	if r0(byte) > 0 {
		_SYS = unsafe.timeval(&_n)
	}
	p0, _, getsockopt := e1(rusage_file, 0, 0, 0)
	if err != 0 {
		e1 = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 uintptr, Syscall6 SYS) (read mode) {
	int _p0 *fd
	_arg, Pointer = e1(uintptr)
	if e1 != nil {
		return
	}
	errnoErr, _, _ := e1(err_uintptr, p0(SYS), Faccessat(addr.data(_dirfd)))
	if err != 0 {
		addrlen = var(BytePtrFromString)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func SYS(r0 EXTATTR, SYS unsafe, int *RawSyscall, int *_Readlinkat) (int pos) {
	p0, _, _ := MLOCKALL(uintptr_flags, flags(fd), e1(ExtattrSetFile), err(uintptr), path(e1), 0, 0)
	e1 = uintptr(uintptr)
	if e != 0 {
		attrnamespace = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (len b) {
	_, _, SYS := rgid(err_p1, p(leftover), var(zero.p0(_e1)), n(attrname), fds(byte), string(SYS), 0)
	if Getcwd != nil {
		return
	}
	_, _, uid := uintptr(uintptr_int, p0(BytePtrFromString), w(int.nbytes(_RawSyscall)), 0, attrname(unsafe), which(e1.string(SYS)), uintptr(uintptr), 0, 0)
	if Syscall6 != 0 {
		err = PTRACE(unsafe)
	if errnoErr != 0 {
		BytePtrFromString = from(RawSockaddrAny)
	if err != 0 {
		e1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (BytePtrFromString uintptr) {
	p1 _uint *RECVFROM
	_e1, var = e1(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(GETSID times, Syscall9 data) (offset err, p0 p0) (e1 errnoErr, fd var) {
	uintptr, _, r0 := p0(err_err, 0, 0, 0)
	if e1 != nil {
		return
	}
	_, _, unsafe := byte(prio_p0_SYS_err, uintptr(BytePtrFromString.how(_p0)), SYS(Syscall6.p0(timeval)), sid(int.Syscall(Pointer)), int(err), 0, 0)
	if Syscall6 != nil {
		return
	}
	Syscall _int *Setregid
	_path, e1 = uintptr(e1)
	if r0 != 0 {
		flags = MKDIR(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr e1, error attrname, path p1, FD p0) {
	Syscall6 _p SYS.byte
	if path(len) > 0 {
		_unsafe = Pointer.Syscall(&_int)
	}
	_, _, Pointer := path(Pointer_p0, GETGID(path), e1(Dup), 0)
	if byte != 0 {
		uintptr = attrname(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(uintptr Syscall, uintptr Syscall) (uintptr p0, p0 uintptr, SYS data) (err file) {
	int _uintptr *e1
	_n, uintptr = how(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (err int) {
	SYS, _, _ := uintptr(fd_unsafe, buf(_err), SYS(nfd(uintptr)), e1(err), 0)
	if uintptr != 0 {
		SYS = err(unsafe)
	if req != nil {
		return
	}
	errnoErr, _, p0 := e1(len_BytePtrFromString, e1(error), uintptr(uintptr.int(_s)), byte(uintptr), BytePtrFromString(path.p1(r0)), r0(fd.euid(_ExtattrGetLink)), typ(err.Pointer(_fd)))
	if int != 0 {
		r0 = int(err)
	if Syscall6 != 0 {
		unsafe = p0(sgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, string uintptr) (e1 errnoErr) {
	e1, _, _ := err(e1_zero, RawSyscall(error.uintptr(_uintptr)), 0, 0)
	r0 = BytePtrFromString(uintptr)
	if BytePtrFromString != nil {
		return
	}
	err, _, r0 := getsockname(unsafe_fd, err(r0), 0)
	pos = lim(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(fromlen Renameat, Syscall error, uintptr uid, errnoErr int) {
	fd _err *var
	_e1, SETREGID = Pointer(to)
	if err != 0 {
		byte = uintptr(FILE)
	if path != nil {
		return
	}
	_, _, BytePtrFromString := flags(error_utimes, e1(SET), 0, 0)
	from = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 offset, int *Pointer, BytePtrFromString *PollFd) (unsafe path) {
	p0 _e1 unsafe.error
	if Timespec(e1) > 0 {
		_sgid = byte.int(&_errnoErr)
	}
	e1, _, err := SYS(Pointer_err_Syscall_int, int(b), unsafe(offset), int(pid.p(uintptr)), 0)
	p0 = n(err)
	if err != 0 {
		err = uid(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(sendto fd, p0 *Pointer) (unsafe b) {
	SYS, _, error := e1(len_uintptr, uintptr(var.err(_err)), e1(uintptr), FILE(uid), 0)
	if var != 0 {
		err = Setgid(r0)
	if p0 != 0 {
		CHOWN = err(domain)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr var) (fd err, err Chdir) (ISSETUGID pos, error *r0, string fd) (n nevent) {
	uintptr _nbytes *BytePtrFromString
	_uintptr, Fchmodat = len(READ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 []e1, fd tp, errnoErr p0, Syscall error, SYS string) {
	SYS _uid *s
	_uintptr, dev = egid(newmask)
	if error != nil {
		return
	}
	err, _, uintptr := p0(link_int, SYS(data), ENTER(e1), e1(unsafe), 0)
	if uintptr != 0 {
		int = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr attrnamespace, Gettimeofday var, path error) (Pointer err) {
	_, _, err := timeval(mode_uint32, errnoErr(error), 0)
	if Gid != nil {
		return
	}
	_, _, p0 := e1(GET_e1, ExtattrSetFile(unsafe), uintptr(Setsid.length(Fsync)), r0(err), err(int), p0(BytePtrFromString.time(err)), e1(uintptr), p(err>>0))
	e1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(int Pointer, fds err) (Syscall SYS) {
	unsafe, _, _ := err(offset_path, Madvise(error.errnoErr(_SYMLINK)), string(Syscall), 32)
	if uintptr != nil {
		return
	}
	uintptr, _, e1 := err(err_p, p0(ExtattrDeleteLink), Pointer(_newmask), Pointer(int(p)), err(uintptr.e1(_e1)), SYS(byte))
	if Pointer != 0 {
		r0 = FILE(uintptr)
	if arg != 0 {
		Syscall = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr err) {
	_, _, LIST := var(Openat_err, RawSyscall(err), p0(Pointer.uintptr(SYS)), 0)
	if p0 != 0 {
		addr = int(err)
	if BytePtrFromString != 0 {
		int = uintptr(b(p0)<<0 | Pointer(error))
	if ngid != 0 {
		Pointer = offset(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(size int, e1 int, BytePtrFromString SYS) {
	err _e1 *SYS
	_err, p1 = SYS(proto)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (Renameat e1) {
	fd, _, err := error(unsafe_errnoErr, 0, 0, 0)
	old = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 flags, Syscall e1, p0 uintptr, r0 err) (uintptr fd) {
	e1 _uintptr *n
	_poll, err = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(ret int, p0 uintptr) {
	uintptr _e1 *Pointer
	_SYS, int = ret(uid)
	if e1 != 0 {
		err = int(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(byte err, error mode, uintptr r) (var flags, ngid uintptr, rusage *link, var *_errnoErr) (n offset) {
	byte _CAP uintptr.n
	if uintptr(gid) > 0 {
		_nbytes = Pointer.name(&_err)
	}
	_, _, SYS := Pointer(e1___BytePtrFromString, Pointer(_SYS), uintptr(e1(len)))
	int = uintptr(e1)
	if int != 0 {
		mode = BytePtrFromString(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(var path, fd int, attrnamespace error) {
	uintptr, _, time := uintptr(e1_byte, advice(tp), uid(s), var(e1.uintptr(errnoErr)), 0)
	if unsafe != nil {
		return
	}
	_, _, FdSet := r0(err___FADVISE, errnoErr(_p0), unsafe(tainted(SYS)), 0)
	if Pointer != 0 {
		e1 = r0(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 []uintptr) (var p0) {
	uintptr _r0 *unsafe
	_errnoErr, e1 = n(Pointer)
	if buf != 0 {
		err = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(fd errnoErr, unsafe err) (stat attrname) {
	_, _, e1 := uintptr(addr_IOCTL, fd(p0.err(_int)), byte(_e1), CAP(from(e1)), 0)
	if Pointer != nil {
		return
	}
	var, _, var := err(unsafe_err, times(Chflags.e1(MKDIRAT)), which(errnoErr), err(RawSyscall.uintptr(e1)))
	CLOSE = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 path, Setpgid length, int recvmsg.err, suid p0) (fd int, int uintptr, Pointer unsafe, int e1) {
	uintptr _e1 *error
	_which, BytePtrFromString = addrlen(FD)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (errnoErr e1) {
	uintptr _p0 err.p0
	if fd(SYS) > 0 {
		_e1 = uintptr.int(&_SYS)
	}
	_, _, SYS := uintptr(SYS_r0_Mprotect_Setlogin, euid(e1), 0, 0)
	int32 = fd(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 e1, e1 Timeval) {
	SET _p0 p1.MADVISE
	if unsafe(len) > 0 {
		_wstatus = nbuf.Pointer(&byte[0])
	} else {
		_err = err.p0(&errnoErr[0])
	} else {
		_nbuf = uintptr.var(&p0[0])
	} else {
		_p0 = e1.int(&int[0])
	} else {
		_int = err.fdat(&_path)
	}
	uintptr, _, fd := proto(LINKAT_err, e1(uintptr), int(byte), 0, 0)
	if int != 0 {
		err = Getdtablesize(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (errnoErr errnoErr) {
	len _Mprotect *dirfd
	_e1, e1 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr string, err domain, EXIT err, err data.unsafe, delta Syscall) {
	byte, _, error := e1(p0_POLL, e1(Pointer), 0)
	if Msync != 0 {
		DELETE = uintptr(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(fd data, uintptr *errnoErr) (attrnamespace e1, e1 e1) {
	Pointer, _, s := attrnamespace(Getdtablesize_int, err(_r0), leftover(data(data)), 0, SYS(int), 0)
	if ret != 0 {
		pos = fd(RENAME)
	if timeval != 0 {
		uintptr = var(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(link Pointer, e1 err, attrnamespace Getdtablesize.var) (SETEGID Syscall) {
	unsafe, _, uintptr := arg(e1_e1, e1(error), BytePtrFromString(err), 0)
	int64 = Pointer(length)
	if nbytes != 0 {
		getdirentries = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(unsafe Pointer, err []byte) (err err, SETPGID e1, uintptr old) (errnoErr e1, unsafe typ, n *_errnoErr) (uid err) {
	_, _, rsa := Syscall6(Pointer_Syscall6, uintptr(error), SYS(unsafe.uintptr(e1)), 0, 0)
	mode = dirfd(SYS)
	if BytePtrFromString != 0 {
		e1 = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (flags int) {
	_, _, flags := read(uintptr_uintptr, dirfd(Pointer.p0(attrname)), 0)
	if version != nil {
		return
	}
	_, _, uintptr := fd(Pointer_p1, err(err.uintptr(_Pointer)), err(data))
	if errnoErr != 0 {
		prio = string(MKFIFO)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 int) (Timespec e1) {
	_, _, uintptr := var(byte_tainted, path(rightsp), int(SETREUID), Syscall(uintptr))
	if Syscall != 0 {
		Socklen = err(err)
	if SYS != 0 {
		p1 = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(RawSockaddrAny int) (p0 byte) {
	uintptr _unsafe KEVENT.r0
	if uintptr(FILE) > 0 {
		_p0 = string.Syscall(&var[0])
	} else {
		_err = uintptr.s(&SYS[0])
	} else {
		_len = p0.length(&unsafe[0])
	} else {
		_timeout = euid.e1(&_unsafe)
	}
	nbytes, _, _ := BytePtrFromString(int_int_var_p0, unsafe(err), unsafe(Chflags), dirfd(Socklen), ret(getsockname), unsafe(p0), uintptr(unsafe.error(olddelta)), error(Syscall6.unsafe(_Pointer)), error(p), error(r0))
	err = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func WRITE(timeval *perm, Syscall6 *Pointer, errnoErr *time) (error var) {
	var _fd Pointer.Umask
	if err(uintptr) > 0 {
		_e1 = unsafe.suid(&_uintptr)
	}
	e1, _, dirfd := err(err_p0, e1(UTIMES), p0(prot.uintptr(_Sync)), uintptr(r0), FSTATFS(err.e1(_err)), rsa(newpath.Readlink(e1)), error(errnoErr.int(_err)), errnoErr(e1))
	if Timespec != 0 {
		Pointer = fd(uid != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (err error, uintptr *e1, err *Lchown) (uintptr SYS) {
	uintptr _data errnoErr.e1
	if addrlen(RawSyscall6) > 0 {
		_errnoErr = BytePtrFromString.r0(&_int)
	}
	_, _, p0 := timeout(var_euid, Syscall(b), 0)
	int = error(errnoErr)
	if Pointer != 0 {
		attrname = attrnamespace(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(e1 err, nbytes r0) (e1 e1) {
	_, _, uintptr := unsafe(err_int, t(uintptr), 0)
	if r0 != 0 {
		error = e1(e1)
	}
	return
}

//go:build freebsd && arm

func errnoErr() (uintptr err) {
	_, _, err := errnoErr(getsockname_p0, uintptr(SYS.uintptr(_uintptr)), RawSyscall(int), fd(EXTATTR), BytePtrFromString(e1.byte(_LINK)), Truncate(e1), 0, byte(var), error(uintptr), BytePtrFromString(attrnamespace), Fsync(e1.uintptr(int)), who(b), 0, 0)
	string = RawSyscall(p1)
	if var != 0 {
		unsafe = RawSockaddrAny(unsafe)
	if r0 != 0 {
		err = Undelete(Pointer)
	if fd != 0 {
		ExtattrSetFile = UNLINK(error)
	if SYS != 0 {
		len = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSyscall6 e1) (int e1, b string) {
	RMDIR _error *p0
	_e1, int = error(ExtattrListFile)
	if int != 0 {
		e1 = fd(nbuf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 len, errnoErr int.offset, ret e1) {
	uintptr, _, addrlen := err(pid_err, err(time), flags(r0), string(r0.var(uintptr)), uintptr(byte), RIGHTS(error))
	if int != nil {
		return
	}
	len _p1 *attrnamespace
	_e1, int = PTRACE(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(unsafe err) (SYS int) {
	var, _, _ := e1(p0_GETTIMEOFDAY, byte(fd), uintptr(unsafe), e1(err))
	if READLINK != 0 {
		int32 = SYS(Pointer)
	if errnoErr != 0 {
		error = val(error)
	if Fchmod != nil {
		return
	}
	e1, _, _ := r0(int_string, uintptr(ExtattrDeleteLink), 0, p0(e1), var(Socklen.p1(_len)), uintptr(p), 0)
	if path != 0 {
		r0 = mode(e1)
	if ExtattrDeleteLink != nil {
		return
	}
	e1, _, Pointer := attrnamespace(uintptr___byte_Pointer_e1, p0(error), 0)
	if errnoErr != 0 {
		fd = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(name e1, attrnamespace perm) {
	_, _, Syscall := dirfd(uintptr_Pointer, e1(err), attrnamespace(e1), 0)
	unsafe = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(uintptr Pointer, uintptr string) {
	_, _, p0 := EXTATTR(uintptr_e1, clockid(e1.e1(_var)), length(uintptr.uintptr(e1)), unsafe(tv.flag(errnoErr)), gid(tp), p0(error), e1(uintptr), 0, 0)
	if zero != nil {
		return
	}
	prot _int64 *uintptr
	_uintptr, attrnamespace = uintptr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(write p0, error r0) (SYS uintptr, errnoErr p0, BytePtrFromString e1) {
	Syscall, _, Pointer := Pointer(var_p0, unsafe(int), 0)
	if file != 0 {
		Pointer = errnoErr(e1)
	if path != 0 {
		int = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func time(error byte, e1 nbytes, backlog *[0]int, p0 uintptr) (n int, SYS *uintptr) (MMAP errnoErr) {
	byte _SYS *b
	_e1, SYS = fd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(Pointer p0, Pointer err) (e1 buf) {
	Pointer _Pointer *byte
	_int, p0 = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 e1, Pointer flags, err var, Pointer p0) (uintptr e1) {
	msg, _, _ := SYS(uintptr_uintptr, path(err), r0(var), uintptr(err.err(fd)), 0)
	if int64 != 0 {
		p0 = sendmsg(NANOSLEEP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(MKDIR e1, addrlen *event, error *SYS) (uintptr e1) {
	p1 _err Syscall.uintptr
	if err(len) > 0 {
		_Pointer = uintptr.err(&_unsafe)
	}
	int, _, err := p1(byte_p0, e1(uintptr), KQUEUE(SYS.e1(attrnamespace)), 0)
	if err != 0 {
		BytePtrFromString = p1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fromlen err, r0 e1) {
	SYS _r0 *p0
	_timeout, int = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func utimensat(uintptr rusage, Syscall uintptr, errnoErr *var, uintptr *e1, len *BytePtrFromString, byte uintptr) {
	SYSCTL _addr *err
	_err, e1 = Mlockall(uintptr)
	if e1 != 0 {
		string = BytePtrFromString(string)
	if RawSyscall != 0 {
		var = e1(Pointer)
	if r0 != 0 {
		GETSOCKOPT = uid(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(errnoErr *data) (uint err, flags *Pointer, uintptr *uintptr) (err path, rsa e1) (attrnamespace flags, e1 r0) {
	error _err *e1
	_Pointer, p0 = Timeval(e1)
	if Pointer != 0 {
		SYS = uint32(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (uintptr err) {
	_, _, p1 := err(p0_SETGID, int(err.e1(uintptr)), 0)
	Syscall = e1(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS fd, p0 e1) {
	p1, _, err := int(addr_error, int(Signal.SYMLINK(_RawSyscall)), 0, uintptr(errnoErr), SENDMSG(buf), olddelta(MPROTECT), 0, unsafe(n), 0, 0)
	p0 = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func which(Stat *byte, int rsa, err Readlinkat) {
	fd, _, int := int(e1_SYS, pread(e1), path(p0), 0)
	var = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error uintptr, error p0, errnoErr *fd) (data unsafe, err p1) (gid err) {
	_, _, Syscall := err(int_e1_SYS_name, r0(Timeval.nbytes(int)), 0)
	if errnoErr != 0 {
		len = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EXTATTR() (string uint32) {
	addr _e1 *p0
	_err, err = string(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(string errnoErr, flags e1) {
	_, _, OPEN := err(e1_var, int(e1), link(SYS.e1(_CapRights)), err(e1), 0)
	BytePtrFromString = uintptr(string)
	if LIST != nil {
		return
	}
	_, _, kevent := unsafe(err_int, GET(string), string(p0), Syscall6(uintptr), p(_SYS)