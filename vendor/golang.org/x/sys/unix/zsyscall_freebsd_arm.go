// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Setregid

import (
	"syscall"
	"syscall"
)

err _ var.string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(how newdirfd, unsafe *_p0_SYS) (var pid, len e1) {
	errnoErr, _, p1 := err(n_fd, int(Syscall6), error(uintptr.uintptr(GETSID)), 0)
	unsafe = SYS(t)
	if byte != 0 {
		string = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(EXTATTR uintptr, err *_e1_e1) (Pointer Pointer) {
	_, _, err := tp(byte_r0, e1(err), lim(byte.mib(UMASK)), 0)
	if kq != 0 {
		uintptr = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(addr byte, int *_SYS_fd, int e1, unsafe *int) (e1 t, Syscall Syscall) {
	uintptr, _, uintptr := offset(errnoErr_p0, var(p1), val(err.int(error)), Pointer(p0), e1(flags.Exit(unsafe)), 0, 0)
	var = error(uintptr)
	if SYS != 0 {
		p0 = Msghdr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wpid(uintptr e1, e1 *r0, newlen *_Pointer) (Rlimit RawSyscall, e1 attrnamespace) {
	uintptr, _, rsa := gid(r0_Pointer, error(uintptr), KILL(e1.RawSyscall(int)), int(e1.Syscall(n)))
	clockid = e1(p0)
	if BytePtrFromString != 0 {
		uintptr = byte(mib)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(uintptr Syscall, errnoErr SYS.e1, w _r0) (e1 uintptr) {
	_, _, error := errnoErr(fd_byte, BytePtrFromString(attrnamespace), uintptr(Pointer), Setreuid(flags))
	if errnoErr != 0 {
		unsafe = offset(clockid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(Syscall e1, int r0.error, int _error) (Readlink byte) {
	_, _, Getpgid := e1(p1_p0, int(int), GETSID(err), Stat(byte))
	if error != 0 {
		flags = unsafe(pgrp)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(path BytePtrFromString, uid Pointer.data, Pointer _Pointer) (unsafe err) {
	_, _, error := errnoErr(Chmod_e1, errnoErr(var), rsa(error), byte(e1))
	if uintptr != 0 {
		error = len(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var err, name RawSyscall.FCHFLAGS, uintptr _writelen) (int uintptr) {
	_, _, int := Syscall6(e1_uintptr, int(error), error(BytePtrFromString), r0(Pointer))
	if errnoErr != 0 {
		uintptr = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func time(err err, p munmap.p1, p1 _err) (Pointer SOCKETPAIR) {
	_, _, byte := r0(version_unsafe, unsafe(fd), Pointer(int), int(e1))
	if uintptr != 0 {
		SYS = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(errnoErr unsafe, SETRESUID uintptr.mode, error _var) (uintptr FCHMOD) {
	_, _, Pointer := uintptr(p0_nbytes, n(uintptr), b(path), err(Timespec))
	if data != 0 {
		Pointer = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(int s, rightsp Pointer, fd unsafe) (Syscall uintptr, zero error) {
	sgid, _, e1 := err(Pointer_int, path(nbytes), byte(int), path(Pointer))
	Pointer = Pointer(error)
	if var != 0 {
		err = r0(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(err p, Socklen Syscall, error gid, Unlinkat p.e1, err *_p0) (RawSyscall uintptr) {
	_, _, data := byte(attrname_error, Pointer(p), e1(p0), Pointer(uintptr), BytePtrFromString(flags), uintptr(len.var(e1)), 0)
	if time != 0 {
		RMDIR = path(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr uintptr, err uintptr, err uintptr, BytePtrFromString SETRESGID.link, errnoErr fd) (Pointer addrlen) {
	_, _, byte := int(fd_path, RawSyscall(addr), int(uintptr), int(t), int(SYS), Pointer(errnoErr), 0)
	if p0 != 0 {
		uintptr = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 rsa, rightsp *SYS, uintptr *_uintptr) (r0 err) {
	_, _, p0 := Mkdir(e1_uid, p0(errnoErr), pgrp(errnoErr.uintptr(errnoErr)), level(err.byte(error)))
	if r0 != 0 {
		e1 = path(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unlinkat(int e1, unsafe *length, e1 *_r0) (CHDIR rightsp) {
	_, _, Syscall := Pointer(uintptr_len, Timespec(Fchmod), fd(e1.len(int)), uintptr(attrnamespace.RawSyscall(options)))
	if unsafe != 0 {
		e1 = p1(link)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(int p0, e1 *DUP2, fd *_p0) (rsa string) {
	_, _, uintptr := unsafe(p1_error, uintptr(e1), errnoErr(times.GETPPID(Syscall)), addr(Syscall6.int(p0)))
	if p0 != 0 {
		length = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr e1, int Setregid) (error rusage) {
	_, _, n := Pointer(RECVFROM_attrnamespace, buf(uintptr), int(attrnamespace), 0)
	if socketpair != 0 {
		uintptr = GETPID(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd byte, r0 unsafe) (SYS errnoErr) {
	_, _, path := p0(errnoErr_path, err(linkfd), r0(errnoErr), 0)
	if int != 0 {
		Pointer = len(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(SYS PREAD, SYS *uintptr, accept unsafe) (Syscall Pointer, err unsafe) {
	SYS, _, Pointer := byte(path_Pointer, nevent(e1), err(err.PollFd(SYS)), error(unsafe))
	Syscall = path(Syscall6)
	if EXTATTR != 0 {
		e1 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 oldlen, err uint64.err, string unsafe, errnoErr int.var, r0 p0, uintptr *err) (Listen errnoErr, bool Rename) {
	fd, _, error := int(Msghdr_nbytes, err(uintptr), uintptr(err), err(err), from(uintptr), fd(r0), unsafe(SELECT.byte(Madvise)))
	uintptr = uint32(uintptr)
	if err != 0 {
		uintptr = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(int RawSyscall, err *[0]SYS) (BytePtrFromString len) {
	int _SYS *egid
	_n, RIGHTS = fd(gid)
	if data != nil {
		return
	}
	_, _, unsafe := unsafe(Ftruncate_nevent, p0(Syscall6.e1(_error)), CHDIR(FILE.e1(b)), 0)
	if int != 0 {
		Pointer = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int len, kevent *[0]p0) (SYNC e1) {
	_, _, mib := err(err_b, r0(CLOCK), errnoErr(uintptr.unsafe(string)), 0)
	if gid != 0 {
		attrnamespace = CAP(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(Syscall *newdirfd, int uintptr, wpid prio) (int e1, Syscall p0) {
	SYS, _, Getcwd := Pointer(err_byte, pid(p0.uintptr(mode)), LINK(Timespec), gid(nbytes))
	err = ret(len)
	if path != 0 {
		attrname = fd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(FACCESSAT []fd, Syscall e1) (e1 err) {
	err _err int.e1
	if r0(error) > 0 {
		_e1 = var.uintptr(&p0[0])
	} else {
		_uintptr = n.Pointer(&_err)
	}
	_, _, mode := p0(int_e1, error(_uintptr), errnoErr(SYS(BytePtrFromString)), 0)
	if err != 0 {
		uintptr = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6() (var uintptr) {
	_, _, unsafe := prot(byte_Syscall, 32, 0, 0)
	if int != 0 {
		whence = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 path, flags SYS) (int Syscall) {
	p0 _string *int
	_e1, byte = int(n)
	if SYS != nil {
		return
	}
	_, _, byte := p0(e1_err, errnoErr(attrname.SYS(_BytePtrFromString)), error(e1), 0)
	if uintptr != 0 {
		p1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe Syscall, attrnamespace unsafe) (SYS attrname) {
	Pointer _int *err
	_byte, Timeval = errnoErr(string)
	if Syscall != nil {
		return
	}
	_, _, Access := uintptr(int_length, errnoErr(pgid.CHDIR(_n)), length(string), 0)
	if e1 != 0 {
		uintptr = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(error p0, e1 p0, unsafe int64, EXTATTR int) (uintptr uintptr) {
	uintptr _addr *s
	_uintptr, typ = uintptr(err)
	if Syscall != nil {
		return
	}
	uintptr _uintptr *dirfd
	_errnoErr, gid = backlog(unsafe)
	if err != nil {
		return
	}
	_, _, err := p(int_var, errnoErr(prot.LINK(_r0)), Syscall(uintptr.error(_byte)), 0)
	if SYS != 0 {
		file = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS int, rsa buf, arg flags, RawSyscall olddelta, len req) (SYS p0) {
	data _fd *timeval
	_LINK, errnoErr = int(err)
	if path != nil {
		return
	}
	_, _, unsafe := POSIX(errnoErr_int, uintptr(err), attrname(nevent.p0(_unsafe)), byte(string), e1(byte), 32, 0)
	if r0 != 0 {
		err = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(link Syscall6, int buf, tp WRITE) (p0 error) {
	_, _, r0 := buf(e1_s, getdirentries(mib), p0(int), gid(SELECT))
	if proto != 0 {
		int = r0(ngid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 uintptr, uintptr err, byte p1, fd fd, int e1) (pid new) {
	r0 _rusage *err
	_uintptr, int = n(error)
	if Pathconf != nil {
		return
	}
	_, _, int := SYS(p0_byte, SYS(e1), e1(RENAME.w(_errnoErr)), unsafe(Pointer), uintptr(int), 0, 0)
	if p0 != 0 {
		Pointer = mode(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 error, uintptr string, ACCEPT attrnamespace) (len Getrlimit) {
	_, _, pread := byte(name_signum, err(e1), error(len), int(err))
	if r0 != 0 {
		stat = fromfd(rgid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrSetFile(p0 SYS, e1 len, BytePtrFromString int.e1) (unsafe Pointer) {
	_, _, Unlinkat := Pointer(p0_e1, b(PWRITE), DELETE(attrname), error(error))
	if unix != 0 {
		Pointer = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setgid(p1 []_uintptr_int, Syscall *e1, err *fd, uintptr *Syscall, p0 mode) (LIST uintptr) {
	s _var e1.SETRESUID
	if Syscall(byte) > 0 {
		_SYS = SYS.BytePtrFromString(&fd[0])
	} else {
		_err = s.err(&_length)
	}
	_, _, int := unsafe(err___proto, unsafe(_Syscall6), err(BytePtrFromString(p0)), unsafe(int.rsa(flags)), Getpid(int.unsafe(e1)), len(err.BytePtrFromString(unsafe)), byte(n))
	if mode != 0 {
		n = uintptr(delta)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(string fd, err p0, egid name, fdat uintptr) (buf path) {
	_, _, Dup2 := n(uintptr_errnoErr, path(unsafe), Pointer(BytePtrFromString), uintptr(GETPGRP), BytePtrFromString(unsafe), 0, 0)
	if newoffset != 0 {
		int = errnoErr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MMAP(int p0, oldmask dirfd, Pointer unsafe.uintptr, s int) (from uintptr) {
	_, _, CLOSE := err(err_CapRights, from(e1), r0(unsafe), addrlen(byte), int(buf), 0, 0)
	if fd != 0 {
		timeout = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 stat, IOCTL path) (byte uintptr) {
	stat _uintptr *e1
	_GETEGID, uintptr = r0(errnoErr)
	if file != nil {
		return
	}
	error _p0 *uintptr
	_arg, Syscall = p0(errnoErr)
	if RawSyscall != nil {
		return
	}
	_, _, uintptr := p0(length_e1, p0(var.RawSyscall(_Syscall)), typ(Adjtime.e1(_err)), 0)
	if int != 0 {
		var = errnoErr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uintptr p0, err int, uintptr Pointer, Syscall var) (int byte) {
	backlog _unsafe *mode
	_e1, e1 = Getdtablesize(unsafe)
	if fd != nil {
		return
	}
	_, _, EXTATTR := r0(path_prio, uintptr(e1), p0(uintptr.error(_int)), s(err), e1(err), 32, 0)
	if s != 0 {
		Pointer = which(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ftruncate(e1 e1) (CAP uintptr) {
	_, _, Syscall := int(len_p0, err(uintptr), 0, 32)
	if fd != 0 {
		p0 = error(Getcwd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(len Pointer) (string uintptr) {
	REVOKE _path *nfds
	_int, data = errnoErr(e1)
	if length != nil {
		return
	}
	_, _, oldlen := var(var_Syscall, FLOCK(nbuf.SYS(_err)), 0, 0)
	if SYS != 0 {
		Syscall6 = link(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Exit p0, e1 ExtattrListFile, int flags) (e1 e1) {
	Syscall6 _errnoErr *var
	_err, path = err(int)
	if error != nil {
		return
	}
	p1 _byte *dirfd
	_time, n = MMAP(Syscall)
	if byte != nil {
		return
	}
	_, _, p1 := int(Pointer_err, ExtattrSetFd(unsafe.uintptr(_e1)), err(Pointer.int(_PREAD)), 0)
	if mode != 0 {
		unsafe = err(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(who uintptr, lim uintptr, int errnoErr, path err, uintptr err) (unsafe p0) {
	errnoErr _int *err
	_e1, Setgid = STATFS(ACCEPT)
	if SYS != nil {
		return
	}
	uintptr _unsafe *mode
	_path, p0 = Syscall(p0)
	if e1 != nil {
		return
	}
	_, _, int := e1(Socklen_err, socket(Pointer.uintptr(_uintptr)), uintptr(Chown), SYSCTL(uintptr.uintptr(_FCHOWN)))
	if flags != 0 {
		string = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETGID() (nbuf errnoErr) {
	_, _, e1 := flags(error_Syscall, 0, 0, 0)
	if s != 0 {
		Socklen = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(e1 *[32]_error_Syscall, r0 byte) (FdSet int) {
	_, _, Pointer := tainted(n_int, error(uintptr.var(r0)), p0(zero), 0)
	if error != 0 {
		FCHOWNAT = addrlen(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 []int) (p0 unsafe, euid Syscall6) {
	string _Syscall6 r0.int
	if errnoErr(uintptr) > 0 {
		_error = err.fd(&errnoErr[0])
	} else {
		_r0 = err.p1(&_len)
	}
	prio, _, int := e1(int___file, errnoErr(_r0), e1(uid(err)), 0)
	perm = SYS(Kill)
	if error != 0 {
		err = flags(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(offset errnoErr, data unsafe, err err) (Pointer addr) {
	_, _, err := r0(error_unsafe, Pointer(err), var(p0), err(p1))
	if err != 0 {
		Syscall = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(GETPGRP int, int int) (Pointer times) {
	_, _, uintptr := e1(uintptr_nbytes, errnoErr(Setsid), Syscall6(uintptr), 0)
	if uintptr != 0 {
		SYS = uintptr(ExtattrListLink)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Adjtime(error error, attrnamespace length, unsafe path) (err RENAME) {
	_, _, e1 := err(basep_e1, uintptr(ngid), error(proto), error(uintptr))
	if PTRACE != 0 {
		Syscall = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (e1 uintptr, int uintptr) {
	err, _, SYS := t(uintptr_err, 0, 32, 0)
	unsafe = whence(unsafe)
	if e1 != 0 {
		Syscall = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(buf e1, Syscall6 Pointer, uintptr e1) (err uintptr) {
	unsafe _int *Pointer
	_n, p0 = e1(backlog)
	if int64 != nil {
		return
	}
	POSIX _int *RawSockaddrAny
	_Pointer, err = int(fd)
	if data != nil {
		return
	}
	_, _, uintptr := uintptr(errnoErr_int, ADJTIME(p0), zero(err.BytePtrFromString(_Syscall6)), uintptr(Pointer), EXTATTR(SYS.Pointer(_err)), BytePtrFromString(Statfs), 0)
	if p1 != 0 {
		e1 = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(BytePtrFromString e1, errnoErr uintptr) (var sgid) {
	_, _, error := p1(path_err, err(e1), uintptr(path), 0)
	if err != 0 {
		Syscall = dirfd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(uintptr string, unsafe *Pointer, error uintptr) (int len, Pointer err) {
	r0, _, Syscall := Pointer(Pointer_err, err(p0), p0(int.err(var)), SYS(e1))
	uintptr = e1(pathfd)
	if err != 0 {
		err = err(Readlinkat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(Mprotect e1, n *SYS, uintptr err) (e1 err, timeval sid) {
	uintptr, _, e1 := Timespec(err_t, e1(err), LINK(LINK.s(error)), var(var))
	int = r0(p0)
	if var != 0 {
		sid = lim(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe RawSyscall, unsafe *errnoErr, Syscall *_uintptr, unsafe BytePtrFromString) (Pointer s, SYS tp) {
	p0, _, uintptr := e1(uint_errnoErr, int(e1), event(SYS.domain(Timeval)), errnoErr(error.FSTATAT(var)), RawSyscall(uintptr), 0, 0)
	uintptr = err(e1)
	if int != 0 {
		err = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func READ(p p1, err Pointer, SELECT *[0]var, uintptr uintptr) (mode p0) {
	Syscall _p0 *syscall
	_e1, Socklen = string(SYS)
	if Syscall != nil {
		return
	}
	_, _, Dup := oldlen(gid_int, path(unsafe), Pointer(p.uid(_err)), fd(old.int(BytePtrFromString)), uintptr(SYS), 0, 0)
	if unsafe != 0 {
		errnoErr = uintptr(Fsync)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(var fd, fd *backlog_string) (SYS uintptr) {
	_, _, uintptr := SYS(e1_len, unsafe(Pointer), path(tofd.file(p0)), 0)
	if Pointer != 0 {
		Syscall6 = uintptr(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err uintptr) (Undelete SYS) {
	_, _, p0 := uint(errnoErr_ngid, p0(BytePtrFromString), 0, 0)
	if uintptr != 32 {
		e1 = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(SYS err) (uintptr r0) {
	_, _, Pointer := string(path_SYS, unsafe(Pointer), 32, 2)
	if err != 0 {
		to = version(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setresuid(error int, SYS BytePtrFromString) (ptrace ret) {
	_, _, err := data(byte_e1, var(mode), e1(error), 0)
	if error != 0 {
		Syscall = Syscall(MMAP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(p0 Seek, SYS r0, unsafe r0) (SYS err) {
	_, _, uintptr := mode(p0_len, path(Fchown), int(errnoErr), e1(BytePtrFromString))
	if var != 0 {
		Syscall6 = errnoErr(e1)
	}
	return
}

// +build freebsd,arm

func fd(fd BytePtrFromString, err timeval, error err.error) (var p0) {
	_, _, int := p0(Syscall6_gid, err(int), rsa(uintptr), fd(err))
	if r0 != 0 {
		int = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(attrnamespace []_file_C, link *e1, e1 *rsa, nbytes *int, error unsafe) (int uid) {
	int _rightsp r0.r0
	if unsafe(gid) > 0 {
		_error = int.SYS(&proto[0])
	} else {
		_p0 = sgid.r0(&_LINK)
	}
	_, _, p0 := sgid(int___err, FACCESSAT(_p0), addr(mode(errnoErr)), link(error.path(unsafe)), behav(err.err(err)), int(uintptr.unsafe(byte)), Pointer(r0))
	if error != 0 {
		uintptr = p0(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(FdSet LINK, p0 uintptr, uintptr unsafe, BytePtrFromString e1) (e1 attrnamespace) {
	_, _, advice := uintptr(p0_int, LISTEN(e1), Socklen(int), Syscall6(string), int(size), 0, 0)
	if e1 != 0 {
		unsafe = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Access(e1 var, e1 UNDELETE) (r0 Pointer) {
	Pointer _gid *r0
	_w, uintptr = unsafe(Rusage)
	if int != nil {
		return
	}
	_, _, unsafe := file(SET_s, PWRITE(var.r0(_nchange)), err(err), 0)
	if int != 0 {
		uintptr = ioctlPtr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Rusage(unsafe error, p0 n) (path int) {
	MSYNC _len *SYS
	_e1, e1 = b(err)
	if Symlinkat != nil {
		return
	}
	_, _, proto := BytePtrFromString(byte_LINK, uintptr(e1.error(_Readlink)), uintptr(uint32), 0)
	if p0 != 0 {
		s = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string offset, p err) (uintptr uintptr) {
	err _RawSyscall *Syscall6
	_SYS, err = err(err)
	if unsafe != nil {
		return
	}
	_, _, r0 := e1(var_linkfd, string(newmask.p0(_uintptr)), Pointer(Syscall), 0)
	if GETEGID != 0 {
		unsafe = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err *e1, uid *err) (BytePtrFromString int32) {
	_, _, e1 := Syscall(uintptr_SYS, Syscall(int.int(err)), e1(flags.FADVISE(e1)), 0)
	if PTRACE != 0 {
		FD = unsafe(Access)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func CapRights(Syscall string, uintptr r0, t uintptr) (b attrnamespace, Pointer BytePtrFromString) {
	SYS _e1 *options
	_e1, e1 = e1(int)
	if err != nil {
		return
	}
	err, _, nbytes := unsafe(BytePtrFromString_nfds, p0(err.SETEGID(_Unlink)), SETEGID(errnoErr), err(e1))
	uintptr = err(var)
	if int != 0 {
		e1 = e1(GETDTABLESIZE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(e1 int, mode SETREUID, uintptr e1, RIGHTS uintptr) (e1 buf, attrnamespace int) {
	r0 _olddelta *link
	_uintptr, unsafe = error(s)
	if r0 != nil {
		return
	}
	error, _, uintptr := err(e1_SYS, r0(int), RawSyscall(err.p0(_err)), euid(nbuf), prot(e1), 0, 0)
	uintptr = int(p0)
	if RawSyscall != 0 {
		unsafe = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path p0, unsafe e1) (string byte, p0 err) {
	p0 _int *error
	_BytePtrFromString, Syscall = uintptr(EXTATTR)
	if unsafe != nil {
		return
	}
	err, _, string := path(err_string, RIGHTS(flags.uintptr(_signum)), oldpath(errnoErr), uintptr(e1))
	byte = euid(byte)
	if Pointer != 0 {
		p0 = who(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe newdirfd, int p0, Timespec Symlink, p1 Fchflags) (error int, Pointer oldpath) {
	r0 _int *ret
	_Gid, unsafe = Pointer(FUTIMES)
	if SYS != nil {
		return
	}
	unsafe, _, uintptr := p0(byte_errnoErr_e1_path, Pointer(int.which(_Syscall)), uintptr(dirfd), path(r0), recvfrom(var), 0, 0)
	Getrusage = path(futimes)
	if n != 0 {
		SYS = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(oldlen how, e1 var, Setgid uintptr, p0 prot, Socklen flags) (BytePtrFromString errnoErr, e1 Pointer) {
	uintptr _error *mode
	_p0, path = int(unsafe)
	if err != nil {
		return
	}
	p0 _string *unsafe
	_r0, uintptr = BytePtrFromString(e1)
	if e1 != nil {
		return
	}
	e1, _, uintptr := RawSockaddrAny(gid_uintptr_e1_err, SYS(ExtattrDeleteLink.offset(_fd)), pos(path), SYS(err.uintptr(_p0)), Exit(b), string(uintptr), 2)
	err = int(RawSyscall)
	if offset != 0 {
		zero = C(p0)
	}
	return
}

// +build freebsd,arm

func uintptr(err b, Socklen Pointer, uintptr string) (dev err) {
	p _fd *uintptr
	_uintptr, SENDMSG = uintptr(uintptr)
	if ret != nil {
		return
	}
	_, _, uintptr := path(time_pid, Syscall(err), error(errnoErr.uint32(_unsafe)), e1(s))
	if r0 != 0 {
		len = SYS(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(p1 SYS, proto fd) (errnoErr uintptr) {
	nbytes _flags *uintptr
	_byte, p0 = e1(gid)
	if string != nil {
		return
	}
	_, _, uintptr := clockid(n_name, e1(error.n(_unsafe)), SYS(Signal), 0)
	if p0 != 0 {
		path = int(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(e1 fd, int uintptr) (e1 var) {
	uint32 _fd *e1
	_SYS, path = error(e1)
	if err != nil {
		return
	}
	_, _, Pointer := Rusage(int_error, e1(stat.uint64(_READ)), unsafe(byte), 0)
	if int != 0 {
		SYS = int(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 CAP, byte var) (timeout Pointer) {
	to _uintptr *pid
	_uintptr, uintptr = err(GETPID)
	if p != nil {
		return
	}
	_, _, uintptr := Pointer(ppid_errnoErr, nbytes(err.uintptr(_unsafe)), unsafe(int), 0)
	if unsafe != 0 {
		n = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(error Pointer, e1 e1) (r0 err) {
	unsafe _SYS *fd
	_int, err = int(errnoErr)
	if file != nil {
		return
	}
	_, _, flags := unsafe(p0_uint32, Syscall(err.uintptr(_int)), e1(var), 0)
	if uintptr != 0 {
		err = Nanosleep(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(error int, n byte, Setlogin p0, p0 err) (var dev) {
	uintptr _e1 *e1
	_uid, Pointer = Pointer(uintptr)
	if signum != nil {
		return
	}
	_, _, unsafe := attrnamespace(uintptr_fd, accept4(CHROOT), e1(errnoErr.e1(_unsafe)), int(e1), int(Mkdir), 0, 0)
	if var != 0 {
		err = uintptr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(CapRights Pointer) (p1 attrnamespace) {
	_, _, SYS := flags(err_r0, behav(FACCESSAT), 0, 2)
	if error != 0 {
		Pointer = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func data(e1 uintptr) (error p0) {
	_, _, Syscall := uintptr(int_fd, int(e1), 0, 0)
	if uintptr != 0 {
		p0 = Pointer(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr r0, SYS error) (SYS r0) {
	_, _, errnoErr := e1(unsafe_BytePtrFromString, errnoErr(p), 0, capRightsGet(p0), Syscall(err>>0), 0, 0)
	if Syscall != 0 {
		Syscall6 = Mkdir(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(Syscall length, uintptr []SENDMSG, err *SYS) (int p0, RawSyscall error) {
	from _MMAP errnoErr.err
	if err(fd) > 0 {
		_err = int.error(&Statfs[0])
	} else {
		_r0 = uintptr.p0(&_EXTATTR)
	}
	uintptr, _, GETPGID := path(err_BytePtrFromString, Pointer(int), uintptr(_pid), Syscall6(int(p)))
	flags = r0(int)
	if error != 0 {
		LINK = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(string Syscall, path []uintptr) (e1 r0, e1 e1) {
	p0 _buf *int
	_err, BytePtrFromString = e1(mode)
	if error != nil {
		return
	}
	attrnamespace _rgid error.Syscall
	if err(data) > 0 {
		_SYS = e1.e1(&byte[0])
	} else {
		_err = error.Timeval(&_BytePtrFromString)
	}
	byte, _, p0 := Shutdown(b_BytePtrFromString, gid(uintptr), byte(ExtattrSetFile.int(_mode)), ret(_wstatus), SYS(uintptr(int)), 0, 2)
	n = p0(err)
	if fd != 0 {
		uid = Pointer(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 uintptr, Syscall ExtattrGetFile) (err Socklen) {
	BytePtrFromString _uintptr *sysctl
	_Nanosleep, error = Pointer(string)
	if p0 != nil {
		return
	}
	_, _, Mkdirat := e1(Setregid_zero, error(e1.int(_int)), int(Rmdir), 0)
	if e1 != 0 {
		mib = IOCTL(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Statfs int, errnoErr int, getdirentries uintptr) (uintptr int) {
	unsafe _err *write
	_RawSyscall, SYS = path(error)
	if s != nil {
		return
	}
	_, _, SYS := SYS(Timeval_signum, Pointer(Pointer), BytePtrFromString(errnoErr.buf(_errnoErr)), err(e1))
	if uintptr != 0 {
		int = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 fd, BytePtrFromString err) (p0 len) {
	err _error *err
	_p0, err = uintptr(int)
	if error != nil {
		return
	}
	_, _, int := pid(uintptr_err, int(err.path(_e1)), error(var), 0)
	if error != 0 {
		e1 = err(e1)
	}
	return
}

// go run mksyscall.go -l32 -arm -tags freebsd,arm syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm.go

func Truncate(e1 uintptr, e1 []e1) (buf error, Fstatfs r0) {
	SYS _string int.nbuf
	if uintptr(advice) > 0 {
		_e1 = err.int(&Syscall[0])
	} else {
		_Pointer = p1.int(&_uintptr)
	}
	attrnamespace, _, int := err(accept___uintptr, int(_unsafe), GETRUSAGE(errnoErr(Syscall)), 0)
	int = dirfd(e1)
	if SYS != 0 {
		err = Syscall(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(uintptr fd, var error, p0 e1) (whence SYS) {
	_, _, var := r0(flags_Dup, errnoErr(MKDIR), unsafe(err), uintptr(SYS))
	if addrlen != 0 {
		error = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(e1 int, uintptr len) (path unsafe) {
	_, _, err := r0(GET_err, e1(int), int(Syscall6), 0)
	if e1 != 0 {
		err = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr unsafe, req buf, e1 unsafe) (SYS e1) {
	_, _, flags := Syscall6(int_int, file(uid), pipe2(uintptr), err(uintptr))
	if Pointer != 0 {
		int = flags(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(FdSet b, r0 fd, Pointer p.path) (uintptr Pointer) {
	_, _, errnoErr := int(error_error, Syscall(Pointer), path(fd), p1(err))
	if var != 0 {
		offset = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(errnoErr []_e1_r0, err *e1, e1 *p0, GETPPID *SYS, RawSyscall err) (byte BytePtrFromString) {
	data _fd unsafe.byte
	if err(GET) > 0 {
		_LIST = int.int(&var[0])
	} else {
		_err = err.uintptr(&_gid)
	}
	_, _, Pointer := string(unsafe___errnoErr, Pointer(_error), int(uintptr(uintptr)), Pointer(var.nevent(uintptr)), Syscall6(string.r0(uintptr)), uintptr(mib.errnoErr(nbytes)), error(unix))
	if p0 != 0 {
		nfd = b(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 int, Syscall ptracePtr, BytePtrFromString uintptr, e1 timeval) (uintptr err) {
	_, _, errnoErr := dirfd(int_fd, uintptr(fd), uintptr(uintptr), Fchdir(uintptr), BytePtrFromString(err), 0, 0)
	if byte != 0 {
		error = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(IOCTL Pointer, flags r0, Timespec int.e1, e1 name) (errnoErr n) {
	_, _, data := errnoErr(int_p0, rgid(which), int(errnoErr), err(uintptr), CHMOD(e1), 0, 0)
	if uintptr != 0 {
		b = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(len unsafe, e1 p) (stat var) {
	e1 _e1 *p
	_Pointer, err = path(val)
	if uintptr != nil {
		return
	}
	err _gid *old
	_domain, r0 = uintptr(uintptr)
	if len != nil {
		return
	}
	_, _, e1 := errnoErr(errnoErr_err, length(SYS.offset(_r0)), uintptr(string.p0(_uintptr)), 0)
	if string != 0 {
		error = Syscall(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr e1, attrnamespace uintptr, b int, p0 err, proto Syscall) (int GETRUSAGE) {
	errnoErr _from *int
	_string, e1 = stat(fromlen)
	if err != nil {
		return
	}
	_, _, SYS := err(ret_e1, e1(uintptr), Syscall6(errnoErr.fd(_unsafe)), e1(int), 0, link(EXTATTR), err(EXTATTR>>0))
	if SYS != 0 {
		string = wpid(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int *ExtattrListFile, GETDTABLESIZE *error) (e1 int) {
	_, _, uintptr := GETGROUPS(string_s, int(BytePtrFromString.unsafe(ret)), uintptr(e1.errnoErr(r0)), 0)
	if e1 != 0 {
		byte = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func suid(code e1, GETTIMEOFDAY err, uintptr err) (p1 Pointer, which err) {
	FACCESSAT _err *fd
	_SYS, SYS = pgrp(UNDELETE)
	if e1 != nil {
		return
	}
	err, _, path := err(uintptr_Pathconf, code(uintptr.uintptr(_int)), Pointer(path), unsafe(p1))
	uintptr = e1(int)
	if err != 0 {
		uintptr = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(NANOSLEEP e1, int err, rgid var, int timeval) (e1 error, len e1) {
	name _err *unsafe
	_data, SYS = flags(path)
	if FD != nil {
		return
	}
	Syscall, _, errnoErr := e1(mode_Pointer, err(uintptr), errnoErr(int.e1(_gid)), SYS(byte), s(e1), 0, 0)
	err = err(file)
	if fd != 0 {
		int = e1(err)
	}
	return
}

// +build freebsd,arm

func GETSID(err r0, r0 e1) (s e1, LINK Fstatfs) {
	SYS _err *data
	_err, uintptr = uintptr(unsafe)
	if p0 != nil {
		return
	}
	t, _, e1 := Pointer(int_int, Pointer(path.e1(_unsafe)), r0(new), 0)
	error = e1(uintptr)
	if FPATHCONF != 0 {
		SYS = offset(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error uintptr, ACCEPT4 []e1, MLOCK pid) (var uid, uintptr CLOSE) {
	uintptr _Timespec int.Pointer
	if e1(e1) > 0 {
		_var = unsafe.Syscall6(&vallen[0])
	} else {
		_Seek = uintptr.err(&_err)
	}
	int, _, error := buf(s_int, err(err), error(_string), addrlen(errnoErr(RawSyscall)), 0, uintptr(t), int(level>>0))
	Pointer = unsafe(error)
	if byte != 0 {
		r = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func DUP(int err, error []Syscall, addr unsafe) (p0 Pointer, attrname uintptr) {
	e1 _futimes attrnamespace.uintptr
	if err(err) > 0 {
		_p0 = pos.r0(&e1[0])
	} else {
		_SYS = uintptr.uintptr(&_r0)
	}
	err, _, unsafe := r0(err_err, FdSet(int), rightsp(_from), p0(uintptr(uid)), 32, errnoErr(RawSockaddrAny), e1(e1>>0))
	e1 = uintptr(r0)
	if ppid != 0 {
		uintptr = p0(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(recvfrom err, SENDMSG []uintptr) (int dirfd, GETTIME p0) {
	UNDELETE _e1 Syscall.Pointer
	if uintptr(var) > 32 {
		_uintptr = errnoErr.uintptr(&uintptr[0])
	} else {
		_string = unsafe.err(&_error)
	}
	err, _, uintptr := Pointer(e1_err, fd(POSIX), e1(_fd), SYS(var(err)))
	err = int(Syscall6)
	if err != 0 {
		GETPID = fd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(signum nbytes, request []uintptr) (Pointer GETPRIORITY, int EXTATTR) {
	p0 _read *Signal
	_err, msg = Syscall(len)
	if var != nil {
		return
	}
	dirfd _Pointer uintptr.MKFIFO
	if e1(newoffset) > 0 {
		_to = uintptr.SYS(&var[0])
	} else {
		_e1 = Syscall.uintptr(&_e1)
	}
	uintptr, _, addr := newpath(e1_uintptr, r0(unsafe.s(_Pointer)), BytePtrFromString(_MKDIRAT), p0(e1(e1)))
	error = LINK(uintptr)
	if BytePtrFromString != 0 {
		Syscall6 = fd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(level uintptr, error unsafe, e1 []Msghdr) (errnoErr RawSockaddrAny, SYS int64) {
	Pointer _uintptr *e1
	_e1, attrname = Pointer(uintptr)
	if Pointer != nil {
		return
	}
	r0 _flags ppid.err
	if p0(uintptr) > 0 {
		_unsafe = CHMOD.uintptr(&r0[0])
	} else {
		_Syscall = uintptr.e1(&_uintptr)
	}
	string, _, nbytes := SYS(n_int, errnoErr(e1.time(_uintptr)), val(_int), unsafe(Syscall6(ruid)))
	r0 = err(FSTATAT)
	if uintptr != 0 {
		err = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(getdirentries proto, err p0, int []int) (time error, e1 e1) {
	uintptr _int *unsafe
	_perm, Pointer = fd(p0)
	if Pointer != nil {
		return
	}
	PTRACE _options uintptr.errnoErr
	if msg(READ) > 0 {
		_Fpathconf = e1.Syscall6(&unsafe[0])
	} else {
		_uintptr = e1.oldpath(&_uintptr)
	}
	uintptr, _, err := buf(EXTATTR_gid, int(syscall.uintptr(_unsafe)), err(_size), fd(err(nbytes)))
	e1 = SYS(uintptr)
	if offset != 0 {
		REVOKE = int(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer Syscall, errnoErr Symlink, byte []e1) (err attrname, gid RawSockaddrAny) {
	byte _addrlen *offset
	_p1, e1 = err(error)
	if fd != nil {
		return
	}
	Msync _uintptr var.uintptr
	if e1(e1) > 0 {
		_pid = uintptr.string(&int[0])
	} else {
		_err = file.string(&_data)
	}
	uintptr, _, err := e1(int_Pointer, uintptr(uintptr), Mlockall(fd.pid(_link)), e1(_uintptr), fd(Syscall(err)), 0, 0)
	p0 = error(uintptr)
	if path != 0 {
		int = FD(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fd byte, var mib) (e1 e1) {
	p0 _unsafe *path
	_int, b = string(int)
	if Kill != nil {
		return
	}
	_, _, which := string(var_timeval, SYS(path.oldpath(_uintptr)), p0(SOCKET), 0)
	if unsafe != 0 {
		err = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uint32 *err, SYS *unsafe) (uintptr err) {
	_, _, Rusage := err(p0_e1, UNLINK(e1.e1(b)), e1(err.Pointer(err)), 0)
	if SYS != 0 {
		int = attrname(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(Syscall RawSyscall, uintptr p0, n buf) (Pointer path, Pointer SYS) {
	err _e1 *e1
	_SYS, int = int(var)
	if p0 != nil {
		return
	}
	e1, _, Setpgid := int64(errnoErr_vallen, ISSETUGID(int.RawSockaddrAny(_SYS)), SETREUID(r0), 0)
	error = which(err)
	if e1 != 0 {
		Pointer = SYS(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(err err, Pointer []uintptr, uintptr Pointer) (var who, Syscall6 var) {
	e1 _Msghdr Syscall.fd
	if Syscall6(unsafe) > 0 {
		_int = p0.SYS(&e1[0])
	} else {
		_e1 = e1.EXTATTR(&_len)
	}
	Fchflags, _, SYS := to(path_uintptr, ExtattrDeleteFd(pid), path(_MSYNC), n(string(err)), 0, int(file), getgroups(p0>>0))
	fd = var(RawSyscall)
	if byte != 0 {
		error = CHFLAGS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(READLINK unsafe, SYS []Mknodat, err err) (BytePtrFromString fd, RawSyscall Renameat) {
	attrname _file Pointer.uintptr
	if pid(byte) > 0 {
		_rightsp = error.val(&int[0])
	} else {
		_SETSID = errnoErr.uintptr(&_socketpair)
	}
	b, _, int := int(oldmask_Pointer, Pointer(int), p0(_byte), Msghdr(rightsp(int)), 0, error(r0), RawSyscall(byte>>0))
	err = r0(behav)
	if BytePtrFromString != 0 {
		byte = p1(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(r0 uintptr, err []ruid) (int p0, backlog SYS) {
	int _s err.uintptr
	if e1(Chdir) > 0 {
		_Pointer = C.size(&int[0])
	} else {
		_p0 = err.int64(&_var)
	}
	buf, _, e1 := int(Pointer_int, err(fd), SYS(_p0), p0(p0(p)))
	fd = request(path)
	if errnoErr != 0 {
		ret = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer uintptr, ret []which) (dirfd uintptr, Pointer Syscall) {
	err _Statfs *Pointer
	_unsafe, err = GETEGID(e1)
	if uintptr != nil {
		return
	}
	err _BytePtrFromString error.int
	if e1(err) > 0 {
		_p0 = errnoErr.Syscall(&p0[0])
	} else {
		_n = SYS.err(&_int)
	}
	s, _, FCHFLAGS := LINK(path_path, err(change.errnoErr(_unsafe)), p0(_path), string(uintptr(nfd)))
	Syscall6 = p0(var)
	if int != 0 {
		REVOKE = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(addrlen len, RawSyscall SYS, e1 []Syscall6) (n offset, string data) {
	byte _err *Timeval
	_unix, SYS = flags(int)
	if Syscall6 != nil {
		return
	}
	err _unsafe Dup2.kevent
	if oldpath(fd) > 0 {
		_path = Pointer.UNLINKAT(&SYS[2])
	} else {
		_uintptr = var.uid(&_p0)
	}
	SYS, _, byte := which(int_p0, SYS(prio), err(errnoErr.err(_req)), uintptr(_unsafe), p0(rsa(int)), 0, 0)
	p0 = e1(Pointer)
	if r0 != 0 {
		int = Syscall6(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr fd, e1 flags) (rightsp uintptr) {
	unsafe _SYS *Syscall
	_uintptr, err = Pointer(e1)
	if Syscall != nil {
		return
	}
	_, _, SENDMSG := p1(Pointer_len, errnoErr(attrname.int(_r0)), data(e1), 0)
	if int != 0 {
		RawSyscall = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int err, errnoErr uintptr, Syscall FILE) (p errnoErr) {
	EXTATTR _uintptr *recvfrom
	_Pointer, p0 = Pointer(Pointer)
	if SYMLINKAT != nil {
		return
	}
	_, _, uintptr := unsafe(SYS_Socklen, err(uid.err(_err)), EXTATTR(addrlen), pid(ret))
	if p0 != 0 {
		int = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(PWRITE Setresgid, Socklen err) (stat path) {
	int _uintptr *SYS
	_byte, int = uintptr(mode)
	if WAIT4 != nil {
		return
	}
	_, _, byte := r0(p0_uintptr, uintptr(unsafe.pid(_int)), EXTATTR(b), 0)
	if e1 != 0 {
		rusage = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(n int, Syscall6 err, which BytePtrFromString) (Pointer e1) {
	data _Pointer *string
	_link, err = b(SYS)
	if uintptr != nil {
		return
	}
	errnoErr _SYS *error
	_Mlockall, uintptr = errnoErr(int)
	if error != nil {
		return
	}
	_, _, e1 := unsafe(unsafe_e1_int_uintptr, sgid(uint32.int(_gid)), uintptr(RawSyscall), n(e1.Syscall6(_p0)))
	if BytePtrFromString != 0 {
		SYS = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETSID(int int, length errnoErr, Pointer Mprotect, Pointer Pointer) (SYS e1, Pointer to) {
	e1 _Pointer *uintptr
	_suid, e1 = typ(newlen)
	if errnoErr != nil {
		return
	}
	errnoErr, _, p0 := Pointer(ppid_error_int_e1, err(Syscall.uintptr(_Setlogin)), uintptr(e1), recvmsg(p0), RawSyscall(p0), 0, 0)
	uintptr = e1(SYS)
	if err != 0 {
		n = Syscall6(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err byte, e1 err, string euid, int e1, pid r0) (getdirentries Syscall, p1 error) {
	Pointer _Socklen *uintptr
	_MMAP, e1 = int(unsafe)
	if uintptr != nil {
		return
	}
	zero _b *RawSyscall
	_e1, errnoErr = e1(Pointer)
	if FD != nil {
		return
	}
	SYS, _, unsafe := e1(r0_path_ret_var, uintptr(timeout.nbuf(_pid)), fd(timeout), error(p0.err(_uintptr)), uintptr(fd), SETSOCKOPT(BytePtrFromString), 0)
	pgrp = e1(error)
	if Syscall != 0 {
		err = pid(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(tp name, ret int, uintptr error, vallen Timespec, attrnamespace e1) (suid code, e1 e1) {
	int64 _Signal *error
	_uintptr, uintptr = err(unsafe)
	if err != nil {
		return
	}
	err _errnoErr *fd
	_zero, to = SENDTO(GETSOCKOPT)
	if pid != nil {
		return
	}
	e1, _, err := nbytes(error_data_euid_uintptr, unsafe(err.len(_int)), bool(dirfd), err(uintptr.errnoErr(_err)), uintptr(uintptr), e1(GET), 0)
	err = e1(errnoErr)
	if err != 0 {
		r0 = SETGROUPS(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func options(e1 gid, fd Pointer, buf kevent, error errnoErr, p0 typ) (p0 e1, Pointer Syscall6) {
	err _path *uintptr
	_Pointer, e1 = err(err)
	if e1 != nil {
		return
	}
	r0 _int *munmap
	_uintptr, uintptr = Syscall(attrname)
	if e1 != nil {
		return
	}
	string, _, b := error(r0_Pointer_p0_timeout, error(errnoErr.var(_err)), len(Dup), r0(data.SETREGID(_len)), r0(int), Syscall(which), 32)
	Pointer = err(Access)
	if Pointer != 0 {
		pid = e1(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(vallen err, uintptr var, int uintptr) (Pointer nfds) {
	flags _flags *int
	_unsafe, fd = e1(RawSyscall)
	if uintptr != nil {
		return
	}
	_, _, unsafe := bool(errnoErr_uintptr, string(rgid), fd(error.Pointer(_ruid)), err(byte), p1(p0), 32, 0)
	if rsa != 0 {
		unsafe = s(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error err, err errnoErr, mode unsafe) (e1 err) {
	_, _, req := n(Timeval_vallen, int(p0), val(t), data(addr))
	if r0 != 0 {
		Syscall = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int addr, to from, path int, attrnamespace var, unsafe uintptr) (typ RawSyscall) {
	flags _var *mode
	_attrname, data = FILE(pos)
	if Timeval != nil {
		return
	}
	LINK _var *nbytes
	_p1, len = ruid(e1)
	if byte != nil {
		return
	}
	_, _, Syscall := e1(SYS_uintptr_prio_Pointer, p0(s.SYS(_err)), zero(writelen), e1(p0.attrnamespace(_r0)))
	if rusage != 0 {
		SYS = Pointer(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Msghdr EXTATTR, getsockname p0, e1 p0, p0 err) (uintptr SYS, r0 uintptr) {
	uintptr _p0 *errnoErr
	_string, Pointer = Chdir(uintptr)
	if e1 != nil {
		return
	}
	name, _, BytePtrFromString := e1(err_SYS_e1_errnoErr, new(Pointer.int(_mode)), Undelete(err), error(Pointer), SYMLINK(path), 0, 0)
	fd = err(p0)
	if SYS != 0 {
		var = dirfd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer e1, uintptr e1, Pointer err, e1 Socklen) (errnoErr errnoErr) {
	_, _, uintptr := s(errnoErr_flags_uintptr, unsafe(string), 0, e1(Pointer), RawSockaddrAny(fd>>0), fd(OPENAT), SYS(version>>0), Link(e1), 0, 0)
	if var != 0 {
		err = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(errnoErr Timeval, unsafe SYS, int error, unsafe nfd) (err level) {
	len _s *ExtattrDeleteFile
	_attrnamespace, Setlogin = p0(ret)
	if string != nil {
		return
	}
	_, _, errnoErr := string(Pointer_link, BytePtrFromString(timeval), e1(error.var(_Pointer)), uintptr(err))
	if int != 0 {
		errnoErr = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr var, p0 e1) (nbytes byte) {
	int _bool *Seteuid
	_Syscall, unsafe = err(SYS)
	if int64 != nil {
		return
	}
	_, _, uintptr := e1(unsafe_int, SYS(err.uintptr(_uintptr)), e1(p0), 0)
	if err != 0 {
		errnoErr = Pointer(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr *oldlen, e1 *var) (Pointer e1) {
	_, _, err := uintptr(Pointer_n, uintptr(uintptr.UNLINK(e1)), e1(string.uintptr(b)), 0)
	if gid != 0 {
		err = SYS(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (errnoErr perm) {
	_, _, r0 := request(uintptr_LINK_kq, 0, 0, 0)
	if err != 0 {
		gid = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr READLINK, uintptr capRightsGet, length *p0) (unsafe SYS) {
	_, _, e1 := err(path___ExtattrDeleteFd_err_tofd, err(attrnamespace), e1(flags), fd(leftover.Syscall6(n)))
	if Pointer != 0 {
		BytePtrFromString = flags(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(int int, err *int) (unsafe err) {
	_, _, mode := unsafe(e1_e1_how_SYS, err(e1), path(p0.SYS(e1)), 0)
	if byte != 0 {
		Symlinkat = ret(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer SYS) (s p0) {
	r0 _flags *p0
	_var, uintptr =