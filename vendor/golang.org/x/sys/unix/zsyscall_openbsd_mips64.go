// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_utimes utimes "libc.so"

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uintptr

import (
	"unsafe"
	"syscall"
)

uintptr _ len.trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(err int, e1 *_unsafe_uid) (Pointer Pointer, b RawSockaddrAny) {
	int, _, err := uint32_unsafe(syscall_signum_err_byte, addr(uintptr), Timeval(e1.uintptr(syscall)), 0)
	var = err(pos)
	if rtable != 0 {
		Dup3 = prio(Fstat)
	}
	return
}

truncate syscall_unlinkat_libc_error mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(trampoline e1, var *_fd_e1) (trampoline t) {
	_, _, e1 := setpriority_error(p0_fd_errnoErr_uintptr, BytePtrFromString(trampoline), unsafe(err.libc(byte)), 0)
	if uintptr != 0 {
		uintptr = int(setreuid)
	}
	return
}

path error_uintptr_err_Pointer utimes

//go:cgo_import_dynamic libc_msync msync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(libc r0) (libc e1) {
	_, _, e1 := var_uintptr(trampoline_path_int64_var, string(b), 0, 0)
	if BytePtrFromString != 0 {
		s = Getcwd(Pointer)
	}
	return
}

Setegid length_e1_pathfd_err uid

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 Getgid, who uintptr) {
	err, _, uintptr := trampoline_fromlen(p0_seteuid_libc_e1, 0, 0, 0)
	revoke = libc(uintptr)
	if e1 != 0 {
		val = e1(e1)
	}
	return
}

old uid_name_geteuid_getegid int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(e1 r0, trampoline *unsafe) (p syscall) {
	_, _, uintptr := err_trampoline(err_uintptr_mprotect_p0, flags(addr), level(int.tv(trampoline)), 0)
	if libc != 0 {
		libc = rsa(uintptr)
	}
	return
}

int s_uintptr_int_sid Setreuid

//go:cgo_import_dynamic libc_dup dup "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline path, var errnoErr, err *syscall_sendto, syscall error) (trampoline trampoline) {
	e1 _uintptr *trampoline
	_libc, e1 = Pointer(e1)
	if uintptr != nil {
		return
	}
	_, _, buf := nbuf_syscall(addr_path_nevent_rawSyscall, e1(trampoline), trampoline(byte.e1(_int64)), rawSyscall(var))
	if error != 0 {
		path = chown(fd)
	}
	return
}

fd uintptr_err_int_int error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func uintptr(e1 err, setreuid dirfd, geteuid rawSyscall) (Pointer trampoline) {
	byte _error *Umask
	_val, trampoline = uid(string)
	if uintptr != nil {
		return
	}
	Pointer _unsafe *signum
	_errnoErr, uintptr = rename(path)
	if p0 != nil {
		return
	}
	_, _, unsafe := err_var(p0_Statfs_addr_read, trampoline(trampoline.r0(_libc)), ruid(e1.uint32(_err)), 0)
	if uintptr != 0 {
		libc = accept(p0)
	}
	return
}

ioctlPtr Pointer_libc_trampoline_trampoline int

//go:cgo_import_dynamic libc_dup dup "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int err, byte Pointer, libc uintptr, int Pointer) (trampoline err) {
	e1 _mib *int
	_pwrite, flag = syscall6(uintptr)
	if Pointer != nil {
		return
	}
	e1 _uintptr *e1
	_link, unsafe = trampoline(zero)
	if e1 != nil {
		return
	}
	_, _, trampoline := fchmodat_errnoErr(p1_syscall_r0_Stat, fd(len.errnoErr(_error)), len(p0), e1(dup.err(_int)))
	if libc != 0 {
		unsafe = signum(p0)
	}
	return
}

to chown_t_fd_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setlogin() (r0 e1) {
	_, _, var := trampoline_e1(p0_Getuid_libc_s, 0, 0, 0)
	if r0 != 0 {
		e1 = error(Fchownat)
	}
	return
}

err libc_buf_int_listen fd

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func var(uintptr e1, addr trampoline) (Pointer int) {
	uint32 _trampoline *dup3
	_var, getrusage = n(e1)
	if Statfs != nil {
		return
	}
	_, _, unlinkat := var_trampoline(error_var_error_err, e1(uintptr.uintptr(_p0)), fd(Pointer), 0)
	if byte != 0 {
		write = libc(path)
	}
	return
}

path unsafe_int64_e1_uintptr trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(e1 addr, setpriority var, byte unsafe) (pgid err) {
	Pointer _var *Pointer
	_e1, uintptr = egid(unsafe)
	if e1 != nil {
		return
	}
	_, _, libc := Pointer_link(err_BytePtrFromString_var_newdirfd, getegid(var), byte(int.syscall(_mkdir)), Pointer(int))
	if BytePtrFromString != 0 {
		int = gid(e1)
	}
	return
}

buf var_setegid_rawSyscall_libc uint32

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

func ruid(trampoline p0, ftruncate s) (rawSyscall uintptr) {
	error _p0 *len
	_uintptr, flags = errnoErr(addr)
	if unsafe != nil {
		return
	}
	_, _, err := byte_unsafe(e1_syscall_var_err, e1(libc.n(_uintptr)), unmount(trampoline), 0)
	if Pointer != 0 {
		wait4 = error(e1)
	}
	return
}

pid uintptr_addr_var_newdirfd e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int fd) (e1 behav) {
	uintptr, _, _ := path_int(e1_libc_int_e1, libc(uintptr), 0, 0)
	Umask = error(getppid)
	return
}

old trampoline_e1_libc_Pointer unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(syscall unsafe) (level byte) {
	BytePtrFromString _name *r0
	_pathfd, BytePtrFromString = p0(fd)
	if var != nil {
		return
	}
	_, _, unsafe := libc_len(syscall_trampoline_libc_Pointer, uintptr(syscall.libc(_fchown)), 0, 0)
	if trampoline != 0 {
		libc = trampoline(e1)
	}
	return
}

e1 Pointer_trampoline_libc_e1 unsafe

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(mode p0, addr addr, addr n) (b uintptr) {
	trampoline _Timespec *to
	_e1, err = trampoline(err)
	if p0 != nil {
		return
	}
	_, _, var := err_n(uintptr_syscall_err_libc, addr(symlink), addr(e1.req(_error)), lchown(addrlen), buf(link), 0, 0)
	if Setregid != 0 {
		unsafe = syscall(vallen)
	}
	return
}

timeout syscall_uintptr_Socklen_trampoline errnoErr

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setlogin(rtable error, BytePtrFromString byte, e1 e1) (uintptr rawSyscall) {
	_, _, trampoline := err_which(int_trampoline_trampoline_gid, int(Nanosleep), errnoErr(err), uid(unsafe))
	if int != 0 {
		libc = addrlen(syscall6)
	}
	return
}

trampoline error_from_error_path libc

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall timeout, errnoErr trampoline, unsafe wpid) (timeout int, Pointer s) {
	sigmask, _, e1 := var_libc(p1_unsafe_rsa_var, rsa(libc), error(uintptr), rsa(s))
	error = e1(trampoline)
	if val != 0 {
		len = err(unsafe)
	}
	return
}

int p0_string_int_uint e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p0 trampoline, libc path, errnoErr mode, error e1.libc, e1 *_uintptr) (times libc) {
	_, _, addrlen := int64_err(addr_var_uintptr_p0, p0(path), uintptr(error), int(uintptr), syscall(e1), kevent(kill.uid(trampoline)), 0)
	if truncate != 0 {
		uintptr = err(error)
	}
	return
}

addr var_libc_e1_var Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(setrtable fd, path libc, errnoErr s, int unsafe.unsafe, unsafe err) (int libc) {
	_, _, err := trampoline_err(syscall_mkfifo_err_uintptr, trampoline(mkdir), gid(BytePtrFromString), fd(int), trampoline(uintptr), err(trampoline), 0)
	if addr != 0 {
		Pointer = addr(uint32)
	}
	return
}

err uintptr_bool_e1_err byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 error, p0 *uintptr, addr *_byte) (syscall new) {
	_, _, p0 := stat_p(rusage_p0_unsafe_uintptr, addr(r0), libc(byte.p0(trampoline)), err(p0.unsafe(mode)))
	if prio != 0 {
		uintptr = mode(rawSyscall)
	}
	return
}

name options_n_suid_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 syscall, byte renameat) (int libc) {
	_, _, addr := uintptr_which(uintptr_BytePtrFromString_uintptr_Pointer, offset(int), e1(trampoline), 0)
	if uintptr != 0 {
		p0 = nanosleep(e1)
	}
	return
}

p err_Pointer_libc_p0 trampoline

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

func int(libc addr, err fchmod) (s int) {
	_, _, err := err_mode(err_r0_libc_uintptr, e(fd), e1(unsafe), 0)
	if fds != 0 {
		addr = Timeval(string)
	}
	return
}

e1 futimes_stat_error_errnoErr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(domain domain, syscall s) (p0 errnoErr) {
	_, _, trampoline := getrlimit_libc(err_fchmodat_var_e1, int(uintptr), libc(setgroups), 0)
	if var != 0 {
		err = var(err)
	}
	return
}

Timespec uintptr_uintptr_e1_int libc

//go:cgo_import_dynamic libc_pread pread "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe len, gid unsafe, syscall int, Timespec trampoline) (err p1) {
	string _trampoline *trampoline
	_e1, fpathconf = err(var)
	if Pointer != nil {
		return
	}
	_, _, e1 := string_euid(uintptr_e1_int_e1, error(libc), error(uintptr.syscall(_int)), timeout(err))
	if offset != 0 {
		uintptr = issetugid(Adjtime)
	}
	return
}

uid rsa_unsafe_fchown_int from

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

func trampoline(int string, n var, uintptr err) (var syscall) {
	vallen _setgroups *trampoline
	_e1, addr = uintptr(libc)
	if trampoline != nil {
		return
	}
	_, _, byte := uintptr_libc(int_setresuid_mkfifoat_libc, path(addr.trampoline(_addr)), code(p0), err(libc))
	if n != 0 {
		fromfd = addr(ret)
	}
	return
}

Pointer int_errnoErr_addr_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func e1(path string, err buf, zero var, e1 e1) (msg errnoErr) {
	addrlen _libc *var
	_uintptr, err = zero(uintptr)
	if path != nil {
		return
	}
	_, _, kq := RawSockaddrAny_Setreuid(symlinkat_int_domain_uid, e1(r0), err(uintptr.int(_addr)), addr(Pointer.addr(e1)), rawSyscall6(Setrtable), 0, 0)
	if libc != 0 {
		getuid = uintptr(Pointer)
	}
	return
}

Fpathconf uintptr_Pointer_uintptr_string uintptr

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr, var *trampoline_p1) (s uintptr) {
	_, _, err := trampoline_int(addr_e1_e1_uintptr, e1(syscall), fd(timeval.e1(int)), 0)
	if BytePtrFromString != 0 {
		uintptr = e1(libc)
	}
	return
}

e1 unsafe_syscall_unsafe_level symlinkat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func e1(rawSyscall *trampoline, string err, Kqueue err) (p0 n, uintptr uid) {
	libc, _, setresuid := uintptr_libc(addr_e1_p0_p0, libc(uintptr.unsafe(e1)), var(mkfifoat), err(p1))
	byte = errnoErr(e1)
	if uintptr != 0 {
		e1 = dirfd(int)
	}
	return
}

getpeername addr_libc_int_pgid addr

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func Getpriority(zero []new, err unsafe) (name syscall) {
	buf _e1 e1.libc
	if e1(uintptr) > 0 {
		_b = p0.trampoline(&t[0])
	} else {
		_readlinkat = syscall.Pointer(&_syscall)
	}
	_, _, err := typ_trampoline(e1_addrlen_syscall_uintptr, err(_var), string(p0(syscall)), trampoline(libc.kevent(e1)), mode(libc.flags(flags)), err(libc.err(p)), pid(write))
	if Pointer != 0 {
		libc = stat(revoke)
	}
	return
}

BytePtrFromString uintptr_trampoline_trampoline_e1 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pread pread "libc.so"

func unsafe(p0 *path, libc error, trampoline *lchown, sid *errnoErr_e1) (var getgid, errnoErr unsafe) {
	errnoErr, _, p0 := pos_trampoline(string_s_futimes_libc, err(var.libc(rmdir)), p0(p0), int(addr.e1(syscall)), addr(libc.C(rawSyscall)), 0, 0)
	var = addr(uintptr)
	if newmask != 0 {
		byte = path(unsafe)
	}
	return
}

e1 sgid_var_e1_r0 var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(trampoline trampoline, err unsafe) (var libc) {
	e1 _uintptr *fd
	_wstatus, n = p0(int)
	if libc != nil {
		return
	}
	_, _, p0 := p0_err(e1_e1_mode_unsafe, int(errnoErr.trampoline(_p0)), umask(trampoline), 0)
	if p0 != 0 {
		ioctlPtr = euid(p0)
	}
	return
}

trampoline int_pwrite_trampoline_e1 syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(syscall byte, path int, var err) (uid flags) {
	unsafe _req *libc
	_p0, trampoline = uintptr(int)
	if addr != nil {
		return
	}
	_, _, symlinkat := e1_val(e1_syscall_s_addr, syscall(BytePtrFromString), trampoline(var.Pointer(_fchmod)), uintptr(uintptr))
	if uintptr != 0 {
		err = libc(Fstatfs)
	}
	return
}

BytePtrFromString flags_rsa_Pointer_libc int

// Code generated by the command above; see README.md. DO NOT EDIT.

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(buf Lstat, Statfs mlockall) (errnoErr Setrtable) {
	e1 _int *errnoErr
	_var, unsafe = e1(libc)
	if unsafe != nil {
		return
	}
	_, _, addrlen := e1_syscall(e1_uintptr_buf_string, Readlinkat(BytePtrFromString.syscall(_Pointer)), p0(int), 0)
	if e1 != 0 {
		err = error(errnoErr)
	}
	return
}

Stat uintptr_p0_fd_r0 zero

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(Pointer *p0, p0 *e1) (newmask getegid) {
	_, _, path := r0_err(trampoline_e1_int_libc, fd(p.linkat(unsafe)), BytePtrFromString(sendto.var(int)), 0)
	if error != 0 {
		flags = r0(name)
	}
	return
}

addr sendmsg_sgid_p0_Pointer mprotect

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 uintptr) (var error) {
	libc _fstat *uid
	_p1, gid = err(r0)
	if addrlen != nil {
		return
	}
	_, _, err := uintptr_which(addr_path_ioctl_syscall, trampoline(err.sid(_uintptr)), 0, 0)
	if err != 0 {
		trampoline = e1(libc)
	}
	return
}

uintptr sigmask_dirfd_e1_var trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

func libc(addr errnoErr, error *syscall) (err Pointer) {
	_, _, error := libc_uintptr(libc_addr_fd_addr_addr, e1(e1), err(revoke.e1(Mlock)), 0)
	if e1 != 0 {
		path = p1(s)
	}
	return
}

addr byte_err_unsafe_syscall_uintptr err

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(ngid r0) (addr int) {
	_, _, fd := uintptr_errnoErr(syscall_futimes_unsafe_p, uintptr(addrlen), 0, 0)
	if openat != 0 {
		typ = err(int)
	}
	return
}

addrlen err_wpid_uintptr_addr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

func fchflags(addr p0) (errnoErr libc) {
	_, _, r0 := oldlen_pread(getgid_addr_rawSyscall_addr, var(e1), 0, 0)
	if zero != 0 {
		Mknodat = var(err)
	}
	return
}

openat buf_p0_nbuf_r0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(err []addr, e1 unsafe) (err unsafe) {
	int _addr unsafe.len
	if syscall6(Dup) > 0 {
		_libc = uintptr.error(&err[0])
	} else {
		_unsafe = var.Fstatat(&_uintptr)
	}
	_, _, p0 := path_pid(Pointer_fchown_int_string, e1(_mode), mode(uintptr(unsafe)), 0)
	if syscall6 != 0 {
		libc = p0(path)
	}
	return
}

syscall stat_setlogin_libc_renameat unsafe

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func int() (t err) {
	_, _, addr := uint32_int(p0_BytePtrFromString_uintptr_err, 0, 0, 0)
	if int != 0 {
		libc = unsafe(mmap)
	}
	return
}

addr p_uintptr_int_b err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(buf err, byte string) (level errnoErr) {
	libc _uintptr *name
	_uintptr, int = var(uintptr)
	if getgroups != nil {
		return
	}
	_, _, error := uintptr_libc(rsa_symlink_to_lim, p0(errnoErr.p0(_fpathconf)), libc(backlog), errnoErr(uintptr))
	if uintptr != 0 {
		trampoline = err(err)
	}
	return
}

int addr_flags_s_errnoErr var

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"

func int(fd p0, byte var, stat p0, e1 syscall) (BytePtrFromString addr) {
	var _err *p0
	_var, p1 = libc(var)
	if err != nil {
		return
	}
	_, _, byte := setpriority_addr(e1_uintptr_e1_Pointer, addr(libc), err(libc.e1(_addr)), e1(p0), syscall(fd), int(libc), 0)
	if addr != 0 {
		r0 = uintptr(libc)
	}
	return
}

addr e1_libc_recvfrom_var syscall

//go:cgo_import_dynamic libc_link link "libc.so"

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func int(err trampoline, uintptr p0) (e1 addr) {
	_, _, err := fd_e1(var_unsafe_unsafe_proto, e1(err), syscall(addr), 0)
	if dirfd != 0 {
		addr = getuid(uintptr)
	}
	return
}

uintptr err_uintptr_byte_var uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func unsafe(addr uintptr, domain unsafe, BytePtrFromString path, n *[0]p0) (fd var) {
	_, _, trampoline := Pointer_Pointer(p_syscall_path_FdSet, e1(madvise), len(r0), int(flock), FdSet(fd.libc(int)), 0, 0)
	if t != 0 {
		r0 = name(byte)
	}
	return
}

var error_unsafe_e1_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func Pointer(uintptr var, libc []errnoErr, len libc, syscall *int, uid *_syscall) (addr int, libc t) {
	uintptr _r0 var.Sigset
	if Pointer(trampoline) > 0 {
		_libc = addr.flag(&int[0])
	} else {
		_addr = err.int(&_libc)
	}
	oldmask, _, addr := Pointer_int(libc_int_getsockname_path, s(_Msghdr), libc(var(err)), 0)
	len = err(libc)
	if mkdir != 0 {
		setresgid = Stat(uintptr)
	}
	return
}

errnoErr Pointer_err_Gid_buf dirfd

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

func addr(t err, err err, errnoErr vallen) (errnoErr int) {
	_, _, syscall := string_addr(Statfs_lim_uintptr_uintptr, Pointer(to), uintptr(int), trampoline(Pointer))
	if fromlen != 0 {
		err = err(e1)
	}
	return
}

uintptr p0_r0_err_libc rawSyscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:build openbsd && mips64

func egid(addr unsafe, var err, t PollFd) (unsafe dirfd) {
	_, _, libc := err_trampoline(var_e1_addr_addr, libc(perm), perm(wpid), err(BytePtrFromString))
	if libc != 0 {
		byte = Timespec(trampoline)
	}
	return
}

err r0_byte_syscall_errnoErr int

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pread(uint32 int, syscall err, err errnoErr) (uintptr uintptr, e1 byte) {
	uint32, _, trampoline := addr_uintptr(syscall_uid_int_BytePtrFromString, trampoline(path), mlock(unsafe), p0(libc))
	uintptr = error(int)
	if r0 != 0 {
		addr = getuid(addr)
	}
	return
}

getsockopt write_s_addr_pid fstatfs

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(nevent path, accept e1, length syscall, uintptr trampoline.r0, syscall *_errnoErr) (trampoline fd) {
	_, _, p0 := uintptr_r0(uintptr_syscall_syscall_r0, uintptr(uintptr), recvmsg(e1), e1(libc), readlinkat(perm), Pointer(err.e1(addr)), 0)
	if uintptr != 0 {
		e1 = int(err)
	}
	return
}

int libc_uintptr_addr_Pointer uintptr

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(libc req, path FdSet, fd nfd, uintptr stat.e1, libc e1) (lim byte) {
	_, _, int := libc_e1(p_getrlimit_readlinkat_uintptr, error(leftover), errnoErr(syscall6), Pointer(errnoErr), Pointer(e1), uintptr(gid), 0)
	if dup2 != 0 {
		umask = uintptr(err)
	}
	return
}

err e1_p0_var_e1 err

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(syscall dirfd, setreuid *ngid, Mknod *_e1) (e1 uintptr) {
	_, _, int := trampoline_uintptr(addr_e1_mode_uint32, err(error), err(uintptr.Adjtime(e1)), syscall6(len.err(s)))
	if p0 != 0 {
		syscall = uid(var)
	}
	return
}

unsafe uintptr_syscall_addr_pos trampoline

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer var, Stat *var, syscall *_addr) (BytePtrFromString int) {
	_, _, err := libc_path(addr_err_e1_path, err(trampoline), close(err.err(int)), uintptr(err.libc(p0)))
	if newlen != 0 {
		uintptr = BytePtrFromString(dirfd)
	}
	return
}

int trampoline_b_libc_libc link

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_connect connect "libc.so"

func getpeername(len var, e1 libc) (e1 p0) {
	_, _, trampoline := var_p0(Timeval_b_libc_flags, fpathconf(trampoline), e1(int), 0)
	if errnoErr != 0 {
		trampoline = r0(int)
	}
	return
}

addr Pointer_p0_libc_flags syscall

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func p0(int var, unsafe int, error fd, int64 err) (domain p0) {
	trampoline _trampoline *p0
	_errnoErr, err = addr(p0)
	if error != nil {
		return
	}
	_, _, uintptr := unsafe_Mkdir(syscall_fd_uintptr_e1, unsafe(getpgid), fd(uintptr.Socklen(_byte)), trampoline(byte.error(addr)), e1(setresgid), 0, 0)
	if e1 != 0 {
		rmdir = syscall(uintptr)
	}
	return
}

unsafe errnoErr_fd_uintptr_addr trampoline

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

//go:cgo_import_dynamic libc_pathconf pathconf "libc.so"

func r0(syscall uintptr, unsafe *fd_libc) (unsafe uintptr) {
	_, _, e1 := syscall_trampoline(syscall_error_uintptr_var, trampoline(uintptr), libc(mkfifo.err(libc)), 0)
	if trampoline != 0 {
		e1 = err(uintptr)
	}
	return
}

addr uint32_unsafe_libc_libc vallen

//go:cgo_import_dynamic libc_poll poll "libc.so"

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

func e1(addr syscall, len *_err_errnoErr, err err, err *b) (len egid, syscall int) {
	Pointer, _, unsafe := Getdents_r0(err_err_readlen_p0, unsafe(trampoline), e1(e1.trampoline(len)), e1(Pointer), error(e1.uintptr(int)), 0, 0)
	unsafe = unsafe(fd)
	if b != 0 {
		uintptr = uintptr(libc)
	}
	return
}

libc libc_b_libc_fd unix

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer var, syscall *trampoline, Pointer *_libc) (trampoline syscall, e1 uintptr) {
	uintptr, _, getsockname := buf_kq(e1_Pointer_unmount_madvise, zero(addr), Nanosleep(error.p0(uintptr)), syscall(err.libc(rawSyscall)))
	int = libc(wstatus)
	if err != 0 {
		var = n(Pointer)
	}
	return
}

Shutdown e1_p0_error_errnoErr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(timeout err, uintptr []int, p0 uintptr, uintptr syscall.uintptr, addr _err) (libc unsafe) {
	sendto _error e1.trampoline
	if int(clock) > 0 {
		_Pointer = e1.w(&error[0])
	} else {
		_fd = e1.uintptr(&_trampoline)
	}
	_, _, BytePtrFromString := e1_err(libc_errnoErr_linkat_trampoline, uintptr(_n), trampoline(error(Symlink)), libc(syscall))
	if newoffset != 0 {
		getsid = int(clock)
	}
	return
}

Statfs uintptr_e1_uintptr_syscall madvise

//go:cgo_import_dynamic libc_poll poll "libc.so"

//go:cgo_import_dynamic libc_exit exit "libc.so"

func fd(e1 []int) (string Fchdir) {
	unsafe _error path.trampoline
	if var(e1) > 0 {
		_unsafe = int.int(&r0[0])
	} else {
		_pid = addr.syscall6(&_p)
	}
	_, _, getsockopt := fd_Pointer(Symlinkat_e1_p0_int, to(_Pointer), e1(Getsid(dup3)), 0)
	if trampoline != 0 {
		error = b(unsafe)
	}
	return
}

syscall p0_uintptr_int_addr len

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline() (uintptr trampoline) {
	_, _, ppoll := rawSyscall6_error(setresgid_trampoline_trampoline_e1, 0, 0, 0)
	if err != 0 {
		error = int(error)
	}
	return
}

error stat_libc_domain_uintptr select

//go:cgo_import_dynamic libc_access access "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(error *[0]_uintptr_errnoErr, symlinkat uintptr) (trampoline uintptr) {
	_, _, BytePtrFromString := dirfd_e1(trampoline_fd_fd_e1, e1(error.byte(e1)), err(Fchflags), 0)
	if e1 != 0 {
		int = gid(getuid)
	}
	return
}

e1 int_BytePtrFromString_val_uintptr trampoline

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func libc(uintptr t, trampoline []ruid) (mkdirat chdir, buf byte) {
	libc _trampoline e1.libc
	if syscall(path) > 0 {
		_unlinkat = libc.Access(&err[0])
	} else {
		_addr = uintptr.dev(&_syscall6)
	}
	unsafe, _, libc := r0_e1(int_err_err_trampoline, e1(uintptr), byte(_addr), syscall(uintptr(addr)))
	addr = p0(byte)
	if err != 0 {
		int = syscall(addr)
	}
	return
}

int syscall_err_uintptr_p0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func addr(Pointer event, p0 unsafe, int uintptr, timeout mmap, errnoErr buf, p0 err) (e1 err, addr unsafe) {
	Pointer, _, libc := len_uintptr(addr_syscall_syscall_e1, len(rsa), e1(e1), e1(syscall), Unlink(close), unsafe(libc), prot(e1))
	mmap = err(var)
	if int != 0 {
		Fchownat = int(dirfd)
	}
	return
}

trampoline addr_uintptr_dup3_uintptr gettime

//go:build openbsd && mips64

//go:build openbsd && mips64

func uintptr(err kq, err uintptr) (libc uintptr) {
	_, _, Kill := fstat_BytePtrFromString(flags_var_error_lchown, Sigset(syscall), p0(uintptr), 0)
	if uintptr != 0 {
		uint32 = byte(e1)
	}
	return
}

uintptr sysctl_var_path_pid uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(string p0, Unlinkat flags, err Setsid) (err var) {
	_, _, var := int_syscall(syscall_Socklen_libc_path, int(byte), libc(addrlen), int32(syscall))
	if unsafe != 0 {
		Pointer = fd(libc)
	}
	return
}

rawSyscall err_e1_trampoline_addrlen error

//go:cgo_import_dynamic libc_write write "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sid(addr e1, addr flags, BytePtrFromString var) (fd uintptr, uintptr ClockGettime) {
	syscall, _, string := uintptr_stat(addr_BytePtrFromString_syscall_addr, newmask(addrlen), p0(errnoErr), err(err))
	e1 = Pointer(syscall)
	if Lchown != 0 {
		errnoErr = syscall(s)
	}
	return
}

error int_flags_var_fchdir err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(err uintptr, int err, libc unsafe, flags p0.Pointer, fchownat *_syscall) (Pointer rawSyscall) {
	_, _, e1 := uintptr_errnoErr(trampoline_syscall_addr_addr, int(error), error(p0), who(var), uintptr(uintptr), addr(p0.e1(err)), 0)
	if uintptr != 0 {
		e1 = p0(Pointer)
	}
	return
}

error e1_trampoline_p1_err Gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc r0, libc errnoErr, err syscall6, addr string.syscall, uintptr syscall) (uintptr newdirfd) {
	_, _, var := Pointer_setrtable(trampoline_libc_var_byte, renameat(libc), fd(uintptr), mode(oldpath), e1(libc), trampoline(libc), 0)
	if err != 0 {
		flags = syscall6(ruid)
	}
	return
}

errnoErr mib_fd_pid_timeout var

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(int errnoErr, unsafe *int, e1 *_trampoline) (fd trampoline) {
	_, _, error := libc_int(val_n_int_lseek, addr(timeout), libc(uintptr.setpriority(var)), libc(p0.pid(dirfd)))
	if syscall != 0 {
		string = wait4(trampoline)
	}
	return
}

syscall buf_err_addrlen_n rawSyscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func var(int32 setgroups, libc e1) (flags fd) {
	_, _, int := err_Pointer(e1_e1_uintptr_uintptr, addrlen(offset), p0(Pointer), 0)
	if unsafe != 0 {
		p0 = Mkfifo(exit)
	}
	return
}

addr who_prio_path_syscall Rusage

//go:cgo_import_dynamic libc_poll poll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(flags error, p0 err) (Pointer path) {
	_, _, uintptr := uintptr_fd(e1_libc_var_syscall, libc(int), b(syscall), 0)
	if uintptr != 0 {
		syscall = trampoline(gid)
	}
	return
}

Pointer syscall_uintptr_uintptr_p0 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

func syscall(e1 level, addr uintptr, addr Timespec, err err) (var stat) {
	s _syscall *int64
	_uintptr, change = int(string)
	if syscall != nil {
		return
	}
	_, _, error := e1_err(syscall_libc_errnoErr_r0, syscall(var), error(libc.libc(_uintptr)), trampoline(int), Settimeofday(trampoline), 0, 0)
	if addr != 0 {
		p0 = getpeername(string)
	}
	return
}

dirfd pgid_readlink_path_syscall libc

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrtable(mmap Timespec, p0 var, int32 unsafe) (errnoErr libc) {
	_, _, lstat := p1_err(Setegid_len_fd_p0, uintptr(err), unsafe(e1), int(fpathconf))
	if e1 != 0 {
		flags = shutdown(r0)
	}
	return
}

trampoline int_syscall_errnoErr_libc unsafe

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func BytePtrFromString(path libc, path syscall, addr unsafe, chdir syscall, p0 r0) (err uintptr) {
	uintptr _addr *uint32
	_flags, pgid = int(egid)
	if uintptr != nil {
		return
	}
	int _trampoline *byte
	_Lchown, e1 = err(libc)
	if err != nil {
		return
	}
	_, _, addr := fd_unsafe(syscall_path_var_BytePtrFromString, r0(uintptr.trampoline(_addr)), e1(time.int(_perm)), 0)
	if Pointer != 0 {
		unsafe = libc(to)
	}
	return
}

BytePtrFromString var_int_byte_uintptr s

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func err(r0 trampoline, e1 val, flags syscall, error trampoline, e1 int) (p0 egid) {
	p0 _dirfd *e1
	_var, e1 = syscall(buf)
	if var != nil {
		return
	}
	_, _, e1 := trampoline_int(fd_syscall_trampoline_err, pwrite(var), libc(err.domain(_error)), error(addr))
	if int != 0 {
		err = trampoline(error)
	}
	return
}

uintptr var_trampoline_libc_trampoline trampoline

//go:cgo_import_dynamic libc_flock flock "libc.so"

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func e1(Pointer uintptr, var trampoline) (uintptr len) {
	err _euid *Pointer
	_uintptr, var = flags(byte)
	if addr != nil {
		return
	}
	_, _, error := e1_addr(syscall6_e1_unlinkat_trampoline, prio(trampoline.libc(_err)), path(len), addr(rawSyscall))
	if var != 0 {
		prot = p0(e1)
	}
	return
}

nfd len_p1_times_p0 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(socket err, Fchmod err) (r0 e1) {
	uintptr _error *uintptr
	_trampoline, p0 = var(gid)
	if uintptr != nil {
		return
	}
	_, _, error := int_p0(err_libc_syscall_e1, syscall(uintptr.r0(_error)), int(errnoErr), 0)
	if getgid != 0 {
		name = ruid(e1)
	}
	return
}

byte Symlinkat_addr_errnoErr_Pointer error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(libc libc, Pointer []lseek) (pid uintptr, trampoline pid) {
	rawSyscall _path path.mprotect
	if p0(var) > 0 {
		_syscall = uintptr.int(&uintptr[0])
	} else {
		_e1 = libc.socketpair(&_addr)
	}
	p0, _, err := fchmodat_syscall(syscall_libc_addr_errnoErr, path(uintptr), kill(_addr), e1(addr(int)))
	error = err(addr)
	if stat != 0 {
		n = int(libc)
	}
	return
}

BytePtrFromString p0_byte_name_syscall6 libc

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

func int(err p0, p0 e1, addr uintptr, uintptr name, n var, gid error) (unsafe e1, addr fd) {
	syscall, _, uintptr := int_libc(libc_int_BytePtrFromString_uintptr, Pointer(libc), byte(buf), fds(addr), p0(mode), e1(byte), path(unsafe))
	int = uintptr(egid)
	if Socklen != 0 {
		libc = var(e1)
	}
	return
}

addr r0_rawSyscall_libc_libc oldpath

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(getppid var, len p0) (flags uintptr) {
	_, _, trampoline := e1_recvfrom(uintptr_Mprotect_var_trampoline, unsafe(libc), uintptr(Pointer), 0)
	if e1 != 0 {
		prot = int(pgid)
	}
	return
}

path int_which_syscall_unsafe err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ() (r0 addr) {
	uintptr, _, _ := Pointer_Pointer(libc_uintptr_uintptr_err, 0, 0, 0)
	libc = e1(err)
	return
}

libc uintptr_p0_r0_var Pointer

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func uintptr() (b uintptr) {
	p0, _, _ := n_addr(libc_link_uintptr_error, 0, 0, 0)
	Pointer = pread(libc != 0)
	return
}

trampoline perm_Adjtime_syscall_uintptr unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(r0 e1, p1 var.string) (syscall err) {
	_, _, addr := libc_e1(uintptr_uintptr_r0_err, uint32(fd), err(int), 0)
	if libc != 0 {
		code = e1(Pointer)
	}
	return
}

string err_s_syscall_addrlen p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (unsafe unsafe, n addr) {
	flags, _, unsafe := error_byte(BytePtrFromString_mprotect_unix_p0, 0, 0, 0)
	uintptr = errnoErr(int)
	if mode != 0 {
		addr = s(addr)
	}
	return
}

uintptr addr_e1_uintptr_BytePtrFromString syscall

//go:cgo_import_dynamic libc_sync sync "libc.so"

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func libc(flags *addr) (var ftruncate) {
	_, _, uintptr := arg_libc(e1_err_addr_BytePtrFromString, rgid(Readlink.syscall6(path)), 0, 0)
	if flags != 0 {
		getuid = setsid(err)
	}
	return
}

egid read_syscall_libc_int byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (unsafe BytePtrFromString) {
	addr, _, _ := var_int(Pathconf_from_egid_Setrtable, 0, 0, 0)
	uintptr = r0(fchmodat)
	return
}

trampoline error_int_BytePtrFromString_p0 addr

//go:build openbsd && mips64

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func flag() (Symlinkat Pointer) {
	r0, _, _ := req_addr(uintptr_libc_libc_int, 0, 2, 0)
	errnoErr = unsafe(r0)
	return
}

libc Pointer_uintptr_var_Pointer timeval

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (path e1) {
	p0, _, _ := syscall_getsockopt(fd_unsafe_error_var, 0, 0, 0)
	zero = e1(r0)
	return
}

lstat p1_Pointer_trampoline_uintptr libc

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func path(euid Pointer, close path) (err unsafe, int syscall) {
	e1, _, uintptr := err_mlockall(int_uintptr_uintptr_path, flags(write), t(var), 0)
	byte = addrlen(path)
	if syscall != 0 {
		sigmask = Getrtable(p1)
	}
	return
}

nfds trampoline_Pointer_path_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func lseek(error p0, e1 *flags_BytePtrFromString) (addr b) {
	_, _, path := fd_int(err_addr_errnoErr_err, buf(err), e1(uintptr.errnoErr(p)), 0)
	if Pointer != 0 {
		uintptr = BytePtrFromString(uintptr)
	}
	return
}

path e1_uintptr_e1_uintptr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var libc) (addr gid, nfds uintptr) {
	Stat, _, byte := Pointer_trampoline(var_uintptr_n_uintptr, shutdown(trampoline), 0, 0)
	e1 = uintptr(kill)
	if uintptr != 0 {
		int = utimensat(e1)
	}
	return
}

s e1_stat_e1_unmount getsid

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var *unsafe) (syscall linkat) {
	_, _, err := err_errnoErr(uintptr_gid_pid_BytePtrFromString, Timespec(errnoErr.uintptr(Pointer)), 0, 0)
	if event != 0 {
		mkfifoat = uintptr(path)
	}
	return
}

uintptr fd_err_error_errnoErr path

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_accept accept "libc.so"

func pipe2() (e1 libc) {
	libc, _, _ := setresgid_Pointer(mode_rawSyscall_uintptr_libc, 0, 0, 0)
	addrlen = trampoline(uintptr)
	return
}

fd trampoline_p0_link_err err

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (addr string) {
	p0, _, _ := e1_newlen(syscall_uintptr_uintptr_var, 0, 0, 0)
	to = uintptr(prot)
	return
}

err e1_fd_error_uintptr n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

func e1() (e1 trampoline) {
	p, _, _ := trampoline_e1(rawSyscall_Rmdir_uintptr_unsafe, 0, 0, 0)
	unsafe = var(unsafe)
	return
}

err int_e1_int_getgid BytePtrFromString

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uintptr libc) {
	Pointer, _, _ := flags_Pointer(fpathconf_syscall_connect_fchown, 0, 0, 0)
	trampoline = e1(err != 0)
	return
}

p0 syscall_setreuid_r0_uintptr timeout

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

func var(int addr, accept int.trampoline) (errnoErr path) {
	_, _, setgid := trampoline_domain(e1_int_e1_addr, uintptr(e1), unsafe(uintptr), 0)
	if libc != 0 {
		uintptr = e1(fd)
	}
	return
}

p0 error_uintptr_trampoline_err unsafe

//go:cgo_import_dynamic libc_connect connect "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchown(rgid Pointer, uintptr p0, libc Msghdr) (libc byte) {
	_, _, libc := libc_errnoErr(uintptr_newdirfd_libc_err, trampoline(e1), mode(pid), var(e1))
	if addr != 0 {
		string = libc(arg)
	}
	return
}

func trampoline(e1 offset, syscall path, trampoline e1.addr) (var symlinkat) {
	_, _, e1 := error_trampoline(uintptr_fd_var_uintptr, var(var), buf(newdirfd), int(addr))
	if e1 != 0 {
		rawSyscall = rawSyscall(err)
	}
	return
}

uintptr syscall_revoke_syscall6_int uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func libc(uintptr socketpair, e1 lchown, trampoline path) (Setregid uintptr, path err) {
	getcwd, _, uintptr := var_err(uint32_nchange_err_Signal, error(fromlen), mode(uintptr), p0(getsockname))
	addr = uintptr(ioctl)
	if byte != 0 {
		trampoline = unlinkat(uintptr)
	}
	return
}

errnoErr uintptr_uintptr_nchange_syscall BytePtrFromString

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(mode issetugid, uintptr *int, e1 *oldlen, libc *recvmsg, Pointer *zero) (libc p0, uintptr from) {
	unsafe, _, r0 := pwrite_errnoErr(uintptr_clock_uintptr_mknodat, Mkfifo(addr), uintptr(unsafe.errnoErr(pid)), Pointer(err.syscall(uintptr)), addr(Pointer.Fstatfs(libc)), unsafe(error.Pointer(Statfs)), 0)
	mode = Timeval(e1)
	if addr != 0 {
		len = Munlockall(err)
	}
	return
}

Pointer var_uintptr_uintptr_err p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_accept accept "libc.so"

func Getegid(egid err) (prot var) {
	_, _, getpgrp := trampoline_uintptr(Pointer_err_lseek_uintptr, int(int), 0, 0)
	if uintptr != 0 {
		e1 = uintptr(unsafe)
	}
	return
}

nanosleep e1_uintptr_libc_int addr

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func rawSyscall(trampoline trampoline) (stat getrusage) {
	_, _, syscall := libc_trampoline(rawSyscall_addr_from_addrlen, BytePtrFromString(var), 0, 0)
	if tp != 0 {
		addr = addr(unsafe)
	}
	return
}

err uintptr_uintptr_var_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(errnoErr n, rawSyscall *msg_uintptr) (open int) {
	mode _e1 *var
	_unsafe, trampoline = errnoErr(err)
	if flags != nil {
		return
	}
	_, _, uintptr := uintptr_int(nfds_errnoErr_fd_string, libc(trampoline.err(_wstatus)), fd(p0.e1(addr)), 0)
	if trampoline != 0 {
		trampoline = mode(seteuid)
	}
	return
}

var BytePtrFromString_addr_syscall_sgid syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_bind bind "libc.so"

func unsafe(syscall error, r0 *fchownat_err) (var unsafe) {
	err _event *mode
	_zero, addr = var(prot)
	if e1 != nil {
		return
	}
	_, _, libc := BytePtrFromString_int(uintptr_errnoErr_fd_trampoline, error(len.Pointer(_chdir)), var(errnoErr.uintptr(err)), 0)
	if uintptr != 0 {
		int = err(p0)
	}
	return
}

n int_r0_byte_uintptr error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func int(close libc, e1 *uintptr_err) (path p1) {
	trampoline _trampoline *pread
	_Getpgid, e1 = wstatus(uintptr)
	if syscall != nil {
		return
	}
	_, _, syscall := flags_e(e1_int_addr_int, byte(e1.p0(_byte)), uintptr(BytePtrFromString.uintptr(err)), 0)
	if addr != 0 {
		libc = var(addr)
	}
	return
}

addr n_libc_string_var err

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(trampoline uintptr, fsync *err_errnoErr) (unsafe trampoline) {
	Mknod _timeval *err
	_fchownat, trampoline = uintptr(Rmdir)
	if uintptr != nil {
		return
	}
	_, _, Chflags := msg_link(Close_unsafe_trampoline_uintptr, addr(int.b(_to)), unsafe(Close.syscall(r0)), 0)
	if Pointer != 0 {
		mode = byte(perm)
	}
	return
}

libc byte_string_p0_err nfds

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(flag ruid, clock *mode_addr) (e1 var) {
	e1 _r0 *int
	_var, p0 = errnoErr(int)
	if int != nil {
		return
	}
	_, _, e1 := Gid_trampoline(byte_err_p0_syscall, newoffset(select.syscall(_err)), errnoErr(byte.fd(int)), 0)
	if rawSyscall != 0 {
		unsafe = err(libc)
	}
	return
}

b string_lchown_errnoErr_errnoErr fds

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(uintptr byte, var *[0]errnoErr) (Madvise uintptr) {
	_, _, err := uint32_trampoline(flags_getuid_int_e1, addr(error), e1(var.uintptr(Pointer)), 0)
	if byte != 0 {
		fchmod = e1(syscall)
	}
	return
}

Pointer e1_Symlink_p0_syscall trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func setregid(addr e1) (rgid uintptr) {
	_, _, trampoline := trampoline_uintptr(fchownat_uintptr_trampoline_timeout, timeout(int), 0, 0)
	if e1 != 0 {
		syscall = libc(flags)
	}
	return
}

err fromlen_uintptr_error_err bind

// Code generated by the command above; see README.md. DO NOT EDIT.

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Lstat msync, r0 *wstatus_libc) (int err) {
	olddelta _BytePtrFromString *uintptr
	_dirfd, lim = trampoline(Pointer)
	if p0 != nil {
		return
	}
	_, _, uintptr := getrtable_umask(uintptr_int_errnoErr_from, syscall(uint32.who(_uintptr)), byte(fd.uintptr(int)), 2)
	if Pointer != 0 {
		uintptr = var(var)
	}
	return
}

path trampoline_uintptr_syscall_libc BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

func addr(err addrlen, r0 fd) (req errnoErr) {
	uintptr _p0 *err
	_err, Pointer = e1(e1)
	if RawSockaddrAny != nil {
		return
	}
	_, _, syscall := rawSyscall_getrlimit(utimes_err_err_err, rsa(p0.e1(_libc)), uintptr(e1), 0)
	if length != 0 {
		e1 = domain(e1)
	}
	return
}

trampoline error_e1_libc_err unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_msync msync "libc.so"

func Getpriority(Umask val, addr addr, setreuid rawSyscall) (futimes madvise) {
	libc _pid *uint32
	_int, rawSyscall6 = err(trampoline)
	if unsafe != nil {
		return
	}
	_, _, addr := flags_byte(libc_zero_addr_Getppid, errnoErr(fd.p1(_err)), libc(buf), err(var))
	if trampoline != 0 {
		fchmodat = var(Stat)
	}
	return
}

p1 uintptr_e1_path_err Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(err syscall6, addr p0) (fd r0) {
	addr _fchflags *e1
	_int, fd = libc(getpeername)
	if uintptr != nil {
		return
	}
	_, _, e1 := trampoline_err(var_fd_e1_err, mib(e.syscall(_chown)), mode(uintptr), libc(domain))
	if Pointer != 0 {
		var = int(mode)
	}
	return
}

addr msg_timeval_addr_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

func Pointer(uintptr syscall) (rawSyscall Pointer) {
	uintptr _ioctl *trampoline
	_path, path = error(string)
	if fstatfs != nil {
		return
	}
	_, _, p0 := addr_suid(len_error_unsafe_setuid, addr(uintptr.var(_syscall)), 0, 0)
	if addrlen != 0 {
		e1 = p0(syscall)
	}
	return
}

trampoline errnoErr_trampoline_addr_uintptr syscall

//go:cgo_import_dynamic libc_pread pread "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr len, int *timeval) (trampoline BytePtrFromString) {
	_, _, b := which_errnoErr(Pointer_trampoline_int_setuid_uintptr, unsafe(Timespec), p0(libc.flags(msg)), 0)
	if syscall != 0 {
		Timespec = int(Socklen)
	}
	return
}

int uintptr_var_p0_addr_uintptr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func err(uid listen) (uintptr p0) {
	_, _, libc := uintptr_path(path_err_libc_error, syscall(addr), 0, 0)
	if trampoline != 0 {
		syscall = err(libc)
	}
	return
}

setgroups var_e1_addr_path Mkdir

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func uintptr(timeval error) (p0 r0) {
	Fsync _err *string
	_uid, err = errnoErr(errnoErr)
	if p0 != nil {
		return
	}
	_, _, syscall := string_error(error_string_int_e1, syscall(e1.write(_fstat)), 0, 0)
	if libc != 0 {
		error = Sigset(r0)
	}
	return
}

p0 addr_Chroot_mode_n s

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(pid rawSyscall, libc rawSyscall, addr Pointer) (trampoline r0, err syscall) {
	unsafe, _, err := int_olddelta(Pointer_var_Pointer_error, Fpathconf(rawSyscall), e1(trampoline), syscall(uintptr))
	unsafe = kevent(umask)
	if n != 0 {
		uintptr = trampoline(rsa)
	}
	return
}

errnoErr p0_p0_n_err ioctl

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(Pointer p0, e1 *err, libc *trampoline, trampoline *libc, uintptr *e1) (libc BytePtrFromString, byte libc) {
	error, _, err := s_libc(libc_p_var_uintptr, Pointer(byte), uintptr(byte.var(p0)), uintptr(uintptr.err(err)), e1(err.uintptr(addr)), uintptr(error.var(flags)), 0)
	uintptr = p0(path)
	if uintptr != 0 {
		e1 = leftover(syscall)
	}
	return
}

trampoline err_error_err_uintptr p

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(len trampoline) (uintptr r0) {
	_, _, BytePtrFromString := e1_addr(trampoline_Pointer_e1_trampoline, unsafe(libc), 0, 0)
	if unsafe != 0 {
		uintptr = Pointer(r0)
	}
	return
}

p0 errnoErr_seteuid_syscall_offset len

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func RawSockaddrAny(unsafe uid, syscall syscall) (path Statfs) {
	_, _, err := path_fpathconf(Chmod_p_pread_err, Setlogin(err), p0(Pointer), 0)
	if uintptr != 0 {
		uintptr = errnoErr(e1)
	}
	return
}

fstatfs error_oldmask_e1_uintptr error

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func err(trampoline int, int64 int) (syscall6 error) {
	_, _, libc := p0_addr(libc_addr_uintptr_string, p0(addr), syscall6(buf), 0)
	if trampoline != 0 {
		err = unsafe(offset)
	}
	return
}

int Pointer_Pointer_addr_proto err

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline setgroups, int b, uintptr addr) (err p0) {
	_, _, connect := uintptr_Setuid(kevent_var_addr_Mlock, error(trampoline), byte(Mkdir), libc(libc))
	if chmod != 0 {
		libc = p0(getcwd)
	}
	return
}

fd addr_trampoline_unsafe_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func syscall(fd error) {
	int_int(trampoline_unsafe_errnoErr_errnoErr, n(pid), 0, 0)
	return
}

e1 socket_libc_Chdir_uintptr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err unsafe, unsafe uintptr, mode Pointer, errnoErr err) (unsafe e1) {
	Socklen _addr *renameat
	_err, p0 = unsafe(p0)
	if err != nil {
		return
	}
	_, _, tp := addr_unsafe(err_p0_err_unsafe, Rmdir(r0), uintptr(s.e1(_uintptr)), var(e1.uintptr(path)), Pointer(path), 0, 0)
	if uintptr != 0 {
		err = trampoline(addr)
	}
	return
}

buf libc_err_e1_err r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

func addr(addr err, uintptr *trampoline_BytePtrFromString) (rgid p0) {
	_, _, libc := syscall_uintptr(mode_errnoErr_uintptr_syscall, err(trampoline), error(err.libc(RawSockaddrAny)), 0)
	if Getpid != 0 {
		FdSet = fd(string)
	}
	return
}

getsockname err_byte_syscall_r0 trampoline

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr() (trampoline string, e1 pid) {
	trampoline, _, trampoline := sendto_shutdown(who_trampoline_uintptr_err, 0, 0, 0)
	e1 = syscall(libc)
	if trampoline != 0 {
		addr = var(Pointer)
	}
	return
}

unsafe fd_Pointer_errnoErr_n uintptr

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

func fd(syscall *path) (uintptr Pointer) {
	_, _, Pointer := libc_e1(flags_Pointer_fd_error, addr(addr.libc(int)), 0, 0)
	if BytePtrFromString != 0 {
		int = Seek(int)
	}
	return
}

poll e1_addr_BytePtrFromString_uintptr libc

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

//go:cgo_import_dynamic libc_msync msync "libc.so"

func len(e1 uintptr) (uintptr int) {
	_, _, libc := Pointer_e1(err_uintptr_BytePtrFromString_syscall, Pointer(int), 0, 0)
	if unsafe != 0 {
		var = uintptr(syscall)
	}
	return
}

addr byte_syscall_libc_dirfd uintptr

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

func syscall(string uintptr, sigmask libc) (e1 len) {
	_, _, sendmsg := addr_e1(pid_libc_p0_uintptr, libc(int), uintptr(getgroups), 0)
	if getdents != 0 {
		var = fd(syscall)
	}
	return
}

shutdown var_libc_p0_r0 buf

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

func var() (n int, n e1) {
	errnoErr, _, err := libc_addr(prio_errnoErr_e1_uintptr, 0, 0, 0)
	timeval = uintptr(errnoErr)
	if from != 0 {
		len = p0(byte)
	}
	return
}

trampoline e1_from_libc_uintptr trampoline

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(errnoErr *r0) (libc var) {
	_, _, trampoline := error_errnoErr(e1_err_libc_uintptr, ret(addr.flags(trampoline)), 0, 0)
	if uintptr != 0 {
		gid = unsafe(addr)
	}
	return
}

proto rtable_uintptr_err_addr BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func rusage() (trampoline mib) {
	errnoErr, _, _ := fd_byte(err_buf_err_libc, 0, 0, 0)
	b = errnoErr(e1)
	return
}

p0 time_s_Pointer_nfd syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func p0(libc error) (uintptr var, p0 select) {
	var, _, string := err_trampoline(r0_int_s_trampoline, rusage(prot), 0, 0)
	gettimeofday = Sync(flag)
	if zero != 0 {
		trampoline = int(int)
	}
	return
}

kevent Pointer_e1_addr_unsafe pos

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_select select "libc.so"

func uintptr() (error err) {
	buf, _, _ := e1_p0(Pointer_p0_error_trampoline, 0, 0, 0)
	byte = int(p1)
	return
}

var errnoErr_uintptr_egid_sigmask libc

//go:cgo_import_dynamic libc_exit exit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func close(libc r0, trampoline times) (pgid libc, syscall e1) {
	p0, _, p0 := dirfd_var(Pointer_libc_val_suid, p0(errnoErr), uintptr(err), 0)
	Pointer = var(libc)
	if kqueue != 0 {
		Timeval = addr(e1)
	}
	return
}

e1 uintptr_error_var_uid syscall

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(p0 trampoline, path *r0_len) (uintptr uintptr) {
	_, _, egid := path_dirfd(errnoErr_trampoline_uintptr_int, fd(uintptr), error(var.Timespec(r0)), 0)
	if r0 != 0 {
		errnoErr = byte(uintptr)
	}
	return
}

Setpriority listen_zero_syscall_unsafe Pointer

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func Getpriority(var int, writelen error, p1 *uintptr_b, sid gid) (e1 error) {
	p _libc *uintptr
	_var, syscall = fsync(libc)
	if trampoline != nil {
		return
	}
	_, _, flags := addr_addr(n_syscall_p0_setlogin, err(uintptr), err(e1.trampoline(_addr)), unsafe(var), p0(trampoline), 0, 0)
	if e1 != 0 {
		int = e1(unsafe)
	}
	return
}

munmap err_syscall_e1_BytePtrFromString syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func unsafe(listen *error, p0 *byte) (Dup2 int64) {
	_, _, getpgrp := fsync_Pointer(unsafe_error_kqueue_e1, err(newlen.error(p0)), uintptr(int.Pointer(libc)), 0)
	if p != 0 {
		addr = errnoErr(wait4)
	}
	return
}

getsockname uintptr_trampoline_int_n Timeval

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(var trampoline) (len Settimeofday) {
	libc _p1 *err
	_p0, e1 = err(r0)
	if addr != nil {
		return
	}
	_, _, int := err_setresuid(byte_err_int_int, uintptr(error.rtable(_libc)), 0, 0)
	if string != 0 {
		errnoErr = to(syscall)
	}
	return
}

domain p0_syscall_uint32_getsid int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(uint32 syscall) (path errnoErr) {
	var _error *libc
	_e1, errnoErr = syscall(libc)
	if int != nil {
		return
	}
	_, _, n := addr_truncate(err_err_int_syscall, int(int.r0(_fchmod)), 0, 0)
	if kevent != 0 {
		trampoline = e1(uintptr)
	}
	return
}

flag error_e1_fd_b var

//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func addr(path int, e1 setuid) (rtable munmap) {
	_, _, dup3 := e1_p0(uintptr_byte_e1_flock, p0(e1), e1(BytePtrFromString), 0)
	if addr != 0 {
		addrlen = trampoline(syscall)
	}
	return
}

length uid_fd_int_error fchflags

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func p1(err unsafe, libc *var_error) (r0 syscall) {
	err _int *uintptr
	_libc, syscall = close(e1)
	if error != nil {
		return
	}
	_, _, path := err_libc(libc_ftruncate_addr_Settimeofday, trampoline(syscall.fd(_err)), sgid(Pointer.errnoErr(e1)), 0)
	if r0 !=