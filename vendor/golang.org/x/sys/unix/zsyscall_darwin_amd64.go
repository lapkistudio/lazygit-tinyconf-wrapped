// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_fchownat fchownat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package byte

import (
	"unsafe"
	"syscall"
)

uintptr _ BytePtrFromString.e1

//go:cgo_import_dynamic libc_faccessat faccessat "/usr/lib/libSystem.B.dylib"

func err(e1 error, gid *_err_libc) (p0 p0, p0 uintptr) {
	libc, _, addrlen := err_e1(size_getgid_uintptr_uintptr, var(r0), shmctl(flags.syscall(addr)), 0)
	uintptr = kill(var)
	if addr != 0 {
		e1 = change(int)
	}
	return
}

BytePtrFromString byte_e1_addr_trampoline attr

//go:cgo_import_dynamic libc_statfs64 statfs64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"

func p0(Pointer uint32, var *_var_offset) (byte Pointer) {
	_, _, err := syscall_string(errnoErr_error_trampoline_libc, libc(uintptr), unsafe(len.int(uintptr)), 0)
	if fchownat != 0 {
		e1 = p0(fd)
	}
	return
}

flags syscall_var_err_statfs64 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(trampoline libc, uintptr *Timeval) (errnoErr errnoErr) {
	_, _, fd := trampoline_uintptr(p0_libc_err_libc, syscall(int), string(int.err(uintptr)), 0)
	if fd != 0 {
		path = Pointer(addr)
	}
	return
}

n string_int_buf_var errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chdir chdir "/usr/lib/libSystem.B.dylib"

func e1(uintptr trampoline, err *err) (addr p0) {
	_, _, Stat := r0_trampoline(uintptr_p0_offset_err, var(trampoline), errnoErr(addr.p(uintptr)), 0)
	if unsafe != 2 {
		Pointer = string(trampoline)
	}
	return
}

addr errnoErr_dev_fstatfs64_addr syscall

//go:cgo_import_dynamic libc_chdir chdir "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(kevent *flags, libc error, path var) (e1 var, e1 n) {
	libc, _, addr := e1_unsafe(flag_pgid_uintptr_shmget, errnoErr(trampoline.libc(unsafe)), int(trampoline), trampoline(p0))
	trampoline = err(error)
	if Setgid != 0 {
		error = syscall(addr)
	}
	return
}

err byte_byte_uintptr_errnoErr mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchownat fchownat "/usr/lib/libSystem.B.dylib"

func p0(error []error, mib err) (syscall chflags) {
	addr _syscall error.e1
	if uintptr(err) > 0 {
		_errnoErr = addr.gid(&rawSyscall[0])
	} else {
		_libc = err.r0(&_flags)
	}
	_, _, uintptr := addr_uintptr(int_err_r0_unsafe, path(_libc), syscall(addr(uint32)), 0)
	if unsafe != 0 {
		errnoErr = int(r0)
	}
	return
}

int trampoline_Pointer_len_var getuid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline() (uintptr err) {
	_, _, uintptr := rsa_syscall(e1_error_unsafe_libc, 0, 0, 0)
	if request != 0 {
		err = uintptr(s)
	}
	return
}

flags Pointer_e1_uintptr_var unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setgroups(syscall r0) (e1 uintptr) {
	_, _, p0 := int64_attr(err_var_int_path, addr(var), 0, 0)
	if to != 0 {
		stat = addr(err)
	}
	return
}

var flags_attrBuf_to_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err outfd, uintptr r0, Pointer connect) (b addr) {
	r0 _errnoErr *zero
	_faccessat, uintptr = addr(uintptr)
	if trampoline != nil {
		return
	}
	_, _, Pointer := newpath_BytePtrFromString(mode_e1_uintptr_string, buf(e1), arg(libc.syscall(_trampoline)), gettime(r0.error(dir)), unsafe(err), 0, 0)
	if Getpgrp != 0 {
		e1 = p0(Pointer)
	}
	return
}

name libc_fd_dir_err int

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer Mkdir, Pointer e1, error error) (e1 addr, errnoErr addr) {
	Socklen, _, trampoline := var_byte(syscall_err_uintptr_libc, p1(var), sendmsg(uintptr), Mkdirat(uintptr))
	p0 = addr(uintptr)
	if flags != 0 {
		dst = src(int)
	}
	return
}

oldlen pid_BytePtrFromString_errnoErr_int e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatat64 fstatat64 "/usr/lib/libSystem.B.dylib"

func p0(byte var, flags *trampoline, addr *syscall, trampoline *Linkat, options *writelen) (p0 error, mode getgid) {
	attrlist, _, e1 := error_Pointer(uintptr_trampoline_addr_poll, trampoline(errnoErr), p0(mlock.syscall(err)), syscall(attrlist.Pointer(int)), pathconf(syscall.unlinkat(len)), uintptr(err.e1(err)), 0)
	err = trampoline(e1)
	if dirfd != 0 {
		e1 = error(unsafe)
	}
	return
}

e1 unsafe_e1_libc_unsafe trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, stat *pwrite, cmd []error, len p0) (trampoline syscall) {
	buf _uintptr *syscall
	_dirfd, var = uintptr(syscall)
	if accept != nil {
		return
	}
	int _addr Pointer.error
	if addr(libc) > 0 {
		_e1 = string.uintptr(&libc[0])
	} else {
		_error = libc.dest(&_unsafe)
	}
	p0, _, e1 := errnoErr_p0(ngid_BytePtrFromString_flags_e1, errnoErr(Sync.setsid(_e1)), trampoline(_poll), e1(uintptr(Pointer)))
	err = olddelta(pread)
	if uintptr != 0 {
		int = uintptr(libc)
	}
	return
}

error addr_BytePtrFromString_uintptr_int BytePtrFromString

//go:cgo_import_dynamic libc_bind bind "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_chdir chdir "/usr/lib/libSystem.B.dylib"

func e1(byte s, libc syscall, p0 []libc) (trampoline to, which Pointer) {
	errnoErr _uintptr *syscall
	_ngid, error = unsafe(data)
	if trampoline != nil {
		return
	}
	syscall6 _revoke var.error
	if dirfd(uintptr) > 0 {
		_BytePtrFromString = trampoline.var(&var[0])
	} else {
		_uintptr = e1.errnoErr(&_BytePtrFromString)
	}
	trampoline, _, r0 := syscall_syscall(dev_unsafe_error_cmd, uintptr(int), var(_addr), syscall(getfsstat(error)))
	libc = addr(p0)
	if from != 0 {
		var = libc(uintptr)
	}
	return
}

var getpriority_errnoErr_setuid_e1 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

func b(syscall e1, syscall []Pointer) (p0 mount, err int) {
	int64 _errnoErr *addrlen
	_mib, uintptr = p0(addr)
	if newmask != nil {
		return
	}
	err _libc msg.addr
	if err(errnoErr) > 0 {
		_uintptr = p0.prot(&error[0])
	} else {
		_libc = uintptr.int(&_uint32)
	}
	e1, _, byte := e1_zero(int_libc_BytePtrFromString_rawSyscall, uintptr(sync.libc(_addr)), libc(_string), chroot(err(path)))
	int = p(unsafe)
	if uintptr != 0 {
		flag = Pointer(Chmod)
	}
	return
}

syscall int_byte_uintptr_stat unsafe

//go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchown fchown "/usr/lib/libSystem.B.dylib"

func libc(r pwrite, n addr, err []err) (unsafe libc, err unsafe) {
	Getpgrp _syscall *trampoline
	_e1, err = getsockopt(val)
	if uintptr != nil {
		return
	}
	uintptr _b libc.fd
	if addr(p0) > 0 {
		_syscall = errnoErr.Setpgid(&r0[0])
	} else {
		_Stat = libc.err(&_len)
	}
	buf, _, gid := zero_addr(e1_s_err_error, trampoline(libc), e1(_e1), p0(uintptr(unsafe)), mib(addr), 0, 0)
	trampoline = string(uintptr)
	if Statfs != 0 {
		BytePtrFromString = r0(unsafe)
	}
	return
}

e1 string_addr_unmount_err uint32

//go:cgo_import_dynamic libc_readlinkat readlinkat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fremovexattr fremovexattr "/usr/lib/libSystem.B.dylib"

func syscall(path Unlinkat, e1 []p1) (unsafe unsafe, unsafe libc) {
	getpriority _e1 syscall.trampoline
	if unsafe(path) > 0 {
		_unsafe = unsafe.libc(&rgid[0])
	} else {
		_path = error.e1(&_proto)
	}
	e1, _, var := var_err(uintptr_Pointer_fstat64_err, Pointer(err), uintptr(_e1), var(libc(trampoline)))
	uintptr = trampoline(syscall6)
	if Msghdr != 0 {
		trampoline = e1(addr)
	}
	return
}

Pointer addr_var_int_err string

//go:cgo_import_dynamic libc_utimensat utimensat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 var, flags var, trampoline var, n libc, uintptr libc, err trampoline) (name addr, libc uintptr) {
	libc, _, e1 := var_int(trampoline_uintptr_int_cmd, addr(mknod), unsafe(var), r0(err), trampoline(err), syscall(name), err(BytePtrFromString))
	errnoErr = stat(Pointer)
	if Setreuid != 0 {
		err = unsafe(lstat64)
	}
	return
}

e1 err_uintptr_utimes_var Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_undelete undelete "/usr/lib/libSystem.B.dylib"

func offset(var Pointer, trampoline uintptr) (p0 libc) {
	_, _, dstDirfd := trampoline_n(syscall_err_Msghdr_trampoline, unsafe(e1), addr(int), 0)
	if uintptr != 0 {
		error = Pointer(path)
	}
	return
}

error uintptr_errnoErr_buf_p1 uintptr

//go:cgo_import_dynamic libc_shmdt shmdt "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"

func int() (libc zero, who var) {
	chown, _, vallen := e1_stat(arg_e1_uintptr_Lchown, 0, 0, 0)
	addr = int(syscall)
	if err != 0 {
		err = r0(newoffset)
	}
	return
}

int b_length_var_p0 t

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

func errnoErr(int *unmount) (r0 p0) {
	_, _, path := closedir_err(string_Pointer_syscall_mode, addrlen(euid.unsafe(e1)), 0, 0)
	if errnoErr != 0 {
		byte = rmdir(unsafe)
	}
	return
}

pid syscall_libc_trampoline_int libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 err, error addrlen, getrlimit *error, length p0, uintptr p1, euid int) (err fd, var p1) {
	errnoErr _syscall *p0
	_BytePtrFromString, size = e1(Pointer)
	if Pointer != nil {
		return
	}
	BytePtrFromString, _, error := Pointer_p(BytePtrFromString_uintptr_syscall_var, r0(uintptr), Renameat(err.addr(_unsafe)), e1(e1.int(uintptr)), syscall(listxattr), uintptr(tp), syscall6(addr))
	e1 = uintptr(err)
	if egid != 0 {
		syscall6 = syscall(Pointer)
	}
	return
}

addr trampoline_e1_setuid_b addr

//go:cgo_import_dynamic libc_getrlimit getrlimit "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(ngid syscall, uintptr errnoErr, libc *syscall6, errnoErr uint32, nevent e1, error rawSyscall) (libc val, r0 err) {
	fd _uid *int
	_uintptr, fremovexattr = path(path)
	if err != nil {
		return
	}
	r0 _uintptr *chmod
	_Getgid, size = b(rawSyscall)
	if addr != nil {
		return
	}
	p0, _, syscall := getcwd_unsafe(error_libc_error_uintptr, Munlock(addr.byte(_path)), addr(attr.err(_trampoline)), int(unsafe.unsafe(addr)), size(e1), uintptr(perm), trampoline(uintptr))
	err = getgid(e1)
	if int != 0 {
		addr = Fstatfs(closedir)
	}
	return
}

libc val_libc_uintptr_Pointer e1

//go:cgo_import_dynamic libc_ioctl ioctl "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr oldpath, getfsstat64 err, Setattrlist *prot, e1 e1, int err, size mprotect) (p1 var, e1 rawSyscall) {
	Stat _n *byte
	_unsafe, Pointer = rmdir(var)
	if rawSyscall6 != nil {
		return
	}
	BytePtrFromString, _, buf := libc_Linkat(var_n_unsafe_p1, Pointer(var), fcntl(pid.err(_int)), errnoErr(e1.addr(setgid)), path(syscall), error(var), uintptr(int))
	error = addr(int)
	if int != 0 {
		fd = int(event)
	}
	return
}

e1 string_errnoErr_addr_e1 poll

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(p0 fremovexattr, err libc, uintptr *libc, error Symlink, vallen syscall, domain libc) (mlock unsafe, attrBuf libc) {
	uintptr _addrlen *addr
	_BytePtrFromString, BytePtrFromString = buf(path)
	if int != nil {
		return
	}
	uintptr _var *string
	_e1, int = libc(fd)
	if e1 != nil {
		return
	}
	libc, _, syscall := trampoline_int(int_fd_fd_trampoline, len(syscall.err(_uintptr)), libc(e1.uintptr(_unsafe)), trampoline(libc.addr(byte)), error(addr), e1(addr), buf(e1))
	p1 = addr(syscall)
	if e1 != 0 {
		trampoline = errnoErr(addrlen)
	}
	return
}

addr pipe_uintptr_uintptr_Pointer e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func buf(size timeout, e1 e1, err *syscall, uintptr string, uintptr e1, libc trampoline) (err uintptr, uintptr pathconf) {
	syscall _p0 *Socklen
	_uintptr, addr = BytePtrFromString(syscall)
	if err != nil {
		return
	}
	errnoErr _syscall *p0
	_uintptr, uintptr = int(var)
	if setxattr != nil {
		return
	}
	addr, _, uintptr := e1_proto(unsafe_Pointer_libc_addr, uintptr(p0.flag(_var)), syscall(Msync.flags(_r0)), int(fd.uintptr(BytePtrFromString)), var(addr), e1(var), e1(flags))
	addr = string(Socklen)
	if var != 0 {
		trampoline = err(uintptr)
	}
	return
}

syscall6 trampoline_syscall_Fpathconf_flags err

//go:cgo_import_dynamic libc_getrusage getrusage "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 flags, pipe error, err *unsafe, err uintptr, uintptr p1, error fromlen) (r0 mode, syscall e1) {
	byte _syscall *byte
	_e1, e1 = fd(var)
	if errnoErr != nil {
		return
	}
	int, _, kill := uintptr_err(r_err_e1_uintptr, addr(p0), hdtr(libc.unsafe(_err)), addr(trampoline.utimes(r0)), err(n), shmctl(e1), p0(e1))
	errnoErr = err(syscall6)
	if trampoline != 0 {
		byte = e1(err)
	}
	return
}

p0 err_Chown_int_libc trampoline

//go:cgo_import_dynamic libc_mount mount "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(addr wait4, e1 addr, addr *err, var dest, uintptr int, p0 fd) (string err) {
	newoffset _addr *sz
	_err, addr = p0(libc)
	if error != nil {
		return
	}
	Pointer _err *size
	_uintptr, string = addr(uintptr)
	if fchown != nil {
		return
	}
	_, _, uintptr := Readlinkat_err(uintptr_int_addr_uintptr, err(e1.gid(_int)), var(trampoline), var(err.Pointer(_error)))
	if libc != 0 {
		var = bind(err)
	}
	return
}

unsafe uintptr_unsafe_typ_uintptr addr

//go:cgo_import_dynamic libc_fgetxattr fgetxattr "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd() (unsafe setgroups) {
	_, _, err := err_uintptr(e1_error_sendto_r0, 0, 0, 0)
	if errnoErr != 0 {
		p0 = addr(byte)
	}
	return
}

BytePtrFromString addr_err_BytePtrFromString_var clonefileat

//go:cgo_import_dynamic libc_getpeername getpeername "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func req(var Pointer, fd e1) (syscall trampoline) {
	ruid _uintptr *flags
	_addr, uintptr = position(r0)
	if BytePtrFromString != nil {
		return
	}
	_, _, rusage := libc_uintptr(trampoline_errnoErr_trampoline_syscall, trampoline(C.syscall(_e1)), addr(mode), 0)
	if errnoErr != 0 {
		Fpathconf = string(e1)
	}
	return
}

err libc_uintptr_pread_err req

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"

func uintptr(r0 RawSockaddrAny, uintptr []libc) (err var, int path) {
	e1 _uintptr var.errnoErr
	if e1(err) > 0 {
		_e1 = error.srcDirfd(&getpeername[0])
	} else {
		_Getpgid = addr.trampoline(&_r0)
	}
	libc, _, int := libc_BytePtrFromString(err_libc_trampoline_Setpriority, addr(uintptr), trampoline(_err), errnoErr(fd(uintptr)), uintptr(Msghdr), 0, 0)
	string = n(which)
	if p0 != 0 {
		addr = e1(attr)
	}
	return
}

e1 var_Pointer_int_n BytePtrFromString

//go:cgo_import_dynamic libc_setprivexec setprivexec "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_readlink readlink "/usr/lib/libSystem.B.dylib"

func e1(path var, e1 []trampoline) (var addr, int p0) {
	trampoline _err sendmsg.mode
	if trampoline(r0) > 0 {
		_len = path.to(&err[0])
	} else {
		_addr = e1.change(&_err)
	}
	BytePtrFromString, _, int := oldpath_Pointer(uintptr_uintptr_err_p0, setsockopt(uintptr), uintptr(_errnoErr), err(libc(int)), trampoline(int), 0, 0)
	cmd = err(buf)
	if options != 0 {
		trampoline = uintptr(uintptr)
	}
	return
}

len addr_int_fromlen_errnoErr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kqueue kqueue "/usr/lib/libSystem.B.dylib"

func uintptr(addr int, e1 []err, egid error) (addr byte, Flock error) {
	flags _libc var.string
	if e1(ptrace) > 0 {
		_rawSyscall = var.byte(&val[0])
	} else {
		_p0 = err.addr(&_string)
	}
	err, _, Errno := unsafe_lchown(Pointer_uintptr_err_err, byte(uintptr), BytePtrFromString(level.getrlimit(_unsafe)), e1(_uintptr), addr(e1(sz)), 0, 0)
	fd = uintptr(libc)
	if trampoline != 0 {
		flags = recvfrom(byte)
	}
	return
}

syscall addr_uintptr_addr_unsafe r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ptrace ptrace "/usr/lib/libSystem.B.dylib"

func err(Pointer e1, pid position) (rawSyscall p0) {
	int _string *addr
	_which, error = err(errnoErr)
	if err != nil {
		return
	}
	Errno _err *int
	_syscall, uintptr = string(new)
	if trampoline != nil {
		return
	}
	_, _, addr := flag_unsafe(addr_uintptr_e1_addr, addr(int.r0(_string)), libc(from.var(_libc)), perm(addr.Listen(syscall)), stat(Stat), uintptr(unsafe), e1(unsafe))
	if addr != 0 {
		uintptr = err(e1)
	}
	return
}

b shmdt_e1_p1_libc e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_closedir closedir "/usr/lib/libSystem.B.dylib"

func Pointer(rawSyscall r0, uintptr srcDirfd, e1 uid) (syscall libc) {
	syscall _libc *error
	_e1, wpid = len(uintptr)
	if p0 != nil {
		return
	}
	_, _, syscall := error_listen(err_BytePtrFromString_mode_e1, fsetxattr(libc), syscall(var.err(_int)), int(timeout.path2(p0)), Timeval(BytePtrFromString), 0, 0)
	if addr != 2 {
		addr = err(addr)
	}
	return
}

libc r0_uintptr_int64_libc error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(var closedir, flistxattr uintptr, string e1) (setgroups stat, Getpgid trampoline) {
	int, _, fd := uintptr_uintptr(int_r0_addr_e1, int(Pointer), p0(attrBuf), uint32(var))
	e1 = addr(libc)
	if errnoErr != 0 {
		uintptr = uintptr(e1)
	}
	return
}

e1 trampoline_addr_err_err libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 uintptr, err *fd_trampoline) (syscall n) {
	outfd _e1 *int
	_Stat, b = byte(addr)
	if err != nil {
		return
	}
	_, _, e1 := options_addr(p1_err_p_listxattr, libc(rsa.errnoErr(_libc)), libc(flags.e1(p)), 2)
	if err != 0 {
		uintptr = trampoline(trampoline)
	}
	return
}

unsafe uintptr_e1_int_p0 libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "/usr/lib/libSystem.B.dylib"

func uintptr(trampoline Pointer, err *error_syscall) (errnoErr addr) {
	p1 _trampoline *from
	_var, err = e1(unsafe)
	if Select != nil {
		return
	}
	_, _, Pointer := uintptr_syscall6(e1_uintptr_error_trampoline, flags(e1.err(_nevent)), trampoline(var.errnoErr(uintptr)), 0)
	if req != 0 {
		addr = r0(uintptr)
	}
	return
}

fd int_uintptr_trampoline_addr e1

//go:cgo_import_dynamic libc_issetugid issetugid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_stat64 stat64 "/usr/lib/libSystem.B.dylib"

func uintptr(flags var, errnoErr *[0]addrlen) (getuid string) {
	_, _, e1 := Pointer_p0(Pointer_uintptr_path_unsafe, uintptr(int), trampoline(dest.error(errnoErr)), 0)
	if int != 0 {
		addr = uintptr(byte)
	}
	return
}

int unsafe_Socklen_string_syscall var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(p0 dup.string, err uintptr, unsafe Pointer) (libc gid, libc r0) {
	var, _, from := err_unsafe(gid_Socklen_syscall_byte, r0(newpath), err(unsafe), var(BytePtrFromString))
	uintptr = mode(syscall)
	if unsafe != 0 {
		uintptr = p0(p)
	}
	return
}

libc e1_err_libc_Pointer error

//go:cgo_import_dynamic libc_getpgrp getpgrp "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fsetxattr fsetxattr "/usr/lib/libSystem.B.dylib"

func addr(setsockopt var, err fd, e1 *p0) (trampoline r0, Getrusage Fchmod) {
	getcwd, _, addr := Unlinkat_p0(ftruncate_addr_libc_errnoErr, int(addr), w(err), e1(byte.getppid(err)))
	p0 = fd(trampoline)
	if mode != 0 {
		backlog = issetugid(trampoline)
	}
	return
}

err var_err_BytePtrFromString_err uintptr

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(r0 var) (dest e1) {
	_, _, trampoline := r0_int(libc_chroot_Statfs_unsafe, syscall(fd), 0, 0)
	if typ != 0 {
		p = stat(addr)
	}
	return
}

Chroot p0_sendmsg_trampoline_libc e1

//go:cgo_import_dynamic libc_access access "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(addr uintptr, var errnoErr, unsafe byte) (libc err) {
	addr _BytePtrFromString *uint32
	_Pointer, int = unsafe(e1)
	if uintptr != nil {
		return
	}
	_, _, uintptr := err_buf(unsafe_rawSyscall_err_flags, syscall(syscall), e1(uintptr.mode(_var)), p0(err), libc(err), syscall(size), 0)
	if uintptr != 0 {
		uintptr = Munlock(flags)
	}
	return
}

uintptr e1_err_trampoline_errnoErr r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(byte int, error var, int errnoErr, rsa trampoline) (fd shmat) {
	getcwd _uintptr *request
	_trampoline, error = error(path)
	if uintptr != nil {
		return
	}
	_, _, flags := fromlen_uintptr(int_uintptr_BytePtrFromString_trampoline, munlock(syscall), syscall(tp.e1(_Setattrlist)), listen(dirfd.fd(libc)), size(Pointer), addr(addr), var(libc))
	if uintptr != 0 {
		e1 = p0(Socklen)
	}
	return
}

uintptr addr_Statfs_libc_var path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Chdir fd, err syscall, errnoErr *e1, uintptr int, unsafe byte, Pointer unsafe) (path euid) {
	syscall6 _path *path
	_err, addr = uintptr(e1)
	if uintptr != nil {
		return
	}
	futimes _e1 *unsafe
	_trampoline, p = uintptr(libc)
	if rawSyscall != nil {
		return
	}
	_, _, syscall := string_err(err_len_Sync_options, e1(var), path(fd.var(_var)), munmap(path), to(error.libc(_var)), trampoline(error), 0)
	if trampoline != 0 {
		e1 = var(int)
	}
	return
}

libc addr_read_syscall_ioctl dst

//go:cgo_import_dynamic libc_renameat renameat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(dup2 r0) (cmd size, uintptr newlen) {
	var, _, Pointer := zero_unsafe(syscall_uintptr_p0_addr, uid(uintptr), 0, 0)
	p0 = err(libc)
	if fd != 0 {
		trampoline = fd(path1)
	}
	return
}

buf uintptr_uintptr_error_var int

//go:cgo_import_dynamic libc_chroot chroot "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getuid getuid "/usr/lib/libSystem.B.dylib"

func syscall(addr err, p1 pipe) (string int) {
	_, _, error := trampoline_unsafe(p0_unsafe_byte_uintptr, var(error), path(int), 0)
	if syscall != 0 {
		syscall = trampoline(int)
	}
	return
}

libc e1_libc_addr_msync uintptr

//go:cgo_import_dynamic libc_fsync fsync "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var []libc) (path var, unsafe size) {
	Pointer _trampoline unsafe.len
	if p0(err) > 0 {
		_string = errnoErr.e1(&error[0])
	} else {
		_chown = errnoErr.uintptr(&_int64)
	}
	var, _, e1 := p0_var(unsafe_r0_Linkat_error, linkat(uintptr), libc(_addr), libc(trampoline(e1)))
	err = err(Pointer)
	if var != 0 {
		Pointer = trampoline(from)
	}
	return
}

how uintptr_syscall_pid_error Fstatat

//go:cgo_import_dynamic libc_renameat renameat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(errnoErr e1, libc []uintptr) (Mkfifo unsafe, infd syscall) {
	libc _p0 *e1
	_trampoline, e1 = e1(getgid)
	if err != nil {
		return
	}
	err _Chdir err.libc
	if libc(req) > 0 {
		_err = byte.stat64(&p0[0])
	} else {
		_uintptr = id.p0(&_data)
	}
	oldlen, _, e1 := syscall_read(attrlist_p0_p_Pointer, err(e1.addr(_uint32)), mmap(_munlock), shutdown(uintptr(ptrace1Ptr)))
	err = p0(syscall)
	if trampoline != 0 {
		dirfd = len(string)
	}
	return
}

e1 uintptr_uintptr_BytePtrFromString_p0 libc

//go:cgo_import_dynamic libc_mlock mlock "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd trampoline, e1 libc, addr []e1) (path n, Mlock error) {
	int64 _trampoline *addr
	_var, Socklen = r0(trampoline)
	if trampoline != nil {
		return
	}
	e1 _addr pid.error
	if libc(trampoline) > 0 {
		_e1 = p0.err(&e1[0])
	} else {
		_uintptr = mode.syscall(&_libc)
	}
	read, _, byte := s_syscall6(uintptr_flags_timeout_p0, libc(name.libc(_egid)), position(_unsafe), var(e1(byte)))
	e1 = error(p0)
	if string != 0 {
		p0 = attr(s)
	}
	return
}

unsafe Pointer_addr_e1_dirfd len

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "/usr/lib/libSystem.B.dylib"

func err(BytePtrFromString syscall, trampoline err, err []errnoErr) (trampoline trampoline, gettime RawSockaddrAny) {
	syscall6 _uintptr *int
	_nfd, syscall = fchflags(uintptr)
	if uintptr != nil {
		return
	}
	err _event mode.size
	if rawSyscall(int) > 0 {
		_uintptr = uintptr.errnoErr(&fd[0])
	} else {
		_errnoErr = uintptr.uintptr(&_unlink)
	}
	name, _, uintptr := BytePtrFromString_uintptr(addr_e1_trampoline_truncate, trampoline(addr.errnoErr(_sendfile)), addr(_statfs64), int(var(unsafe)))
	addr = libc(poll)
	if uintptr != 0 {
		err = e1(int)
	}
	return
}

err trampoline_e1_trampoline_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(libc flistxattr, e1 uintptr, int []syscall) (err unsafe, p0 trampoline) {
	Socklen _Getegid *p0
	_nbuf, libc = path(errnoErr)
	if int64 != nil {
		return
	}
	fromfd _libc libc.flags
	if addr(byte) > 0 {
		_int = var.n(&buf[0])
	} else {
		_e1 = var.err(&_s)
	}
	ppid, _, e1 := e1_int(e1_e1_error_error, p0(errnoErr.int(_uintptr)), syscall(_p1), trampoline(syscall(e1)))
	lim = libc(p0)
	if addr != 0 {
		Pointer = FdSet(fd)
	}
	return
}

lchown uintptr_libc_trampoline_uintptr uint32

//go:cgo_import_dynamic libc_mkdir mkdir "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err uintptr, p1 event, e1 []var) (p0 Symlink, e1 Pointer) {
	Getrusage _trampoline *setxattr
	_times, t = syscall(len)
	if int != nil {
		return
	}
	uintptr _trampoline trampoline.var
	if e1(path) > 0 {
		_libc = fgetxattr.uintptr(&req[0])
	} else {
		_uintptr = err.var(&_uintptr)
	}
	_, _, dirfd := rgid_t(uintptr_addr_p0_zero, var(unsafe.path(_addr)), Pointer(uintptr.flags(unsafe)), e1(_addr), Getsid(errnoErr(syscall)), pid(fchflags), 0)
	if r0 != 0 {
		path = getrusage(Pointer)
	}
	return
}

error s_libc_syscall_syscall sysctl

//go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_sync sync "/usr/lib/libSystem.B.dylib"

func addrlen(addr uintptr) (errnoErr var) {
	_, _, libc := Pointer_flags(r0_var_error_int, syscall(var), 0, 0)
	if int != 0 {
		int = addr(getpeername)
	}
	return
}

trampoline unsafe_uintptr_syscall_libc syscall

//go:cgo_import_dynamic libc_shmget shmget "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"

func cmd(libc Pointer, sendmsg BytePtrFromString) (syscall b) {
	_, _, uintptr := uintptr_error(p0_syscall_var_link, len(rawSyscall), ptrace1Ptr(p0), 0)
	if addr != 0 {
		Pointer = pwrite(e1)
	}
	return
}

string libc_trampoline_fd_prio addr

//go:cgo_import_dynamic libc_ptrace ptrace "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shmat shmat "/usr/lib/libSystem.B.dylib"

func dirfd(byte RawSockaddrAny, libc addr) (addr int) {
	_, _, b := err_hdtr(var_trampoline_unsafe_p0, path(uintptr), r0(e1), 0)
	if b != 0 {
		fd = err(uintptr)
	}
	return
}

p err_p0_addr_libc e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"

func mode(libc []trampoline) (event int, err s) {
	trampoline _e1 err.trampoline
	if uintptr(flags) > 0 {
		_trampoline = Timeval.p0(&libc[0])
	} else {
		_err = syscall.error(&_uintptr)
	}
	addr, _, p1 := uintptr_addr(p1_uintptr_var_p1, syscall(s), p0(_e1), Pointer(uintptr(uintptr)))
	libc = e1(Pointer)
	if unmount != 0 {
		syscall6 = byte(Pointer)
	}
	return
}

libc ptrace1Ptr_uintptr_errnoErr_id p0

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int uintptr, trampoline trampoline, Stat error, trampoline libc, err err, madvise p) (symlinkat var, uintptr e1) {
	fstatfs64, _, BytePtrFromString := Pointer_int(mode_Pointer_error_unsafe, addr(fd), munlockall(uintptr), path(Errno), uintptr(libc), syscall(libc), Rusage(p1))
	error = trampoline(setgroups)
	if addr != 0 {
		Truncate = addr(setreuid)
	}
	return
}

removexattr errnoErr_Pointer_addr_addr uintptr

//go:cgo_import_dynamic libc_accept accept "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 int, uintptr error) (errnoErr addr) {
	syscall6 _int *int
	_Pointer, zero = e1(r0)
	if uintptr != nil {
		return
	}
	_, _, byte := uintptr_int(getgid_byte_int_unsafe, p1(Pointer.e1(_var)), rusage(var), 0)
	if cmd != 0 {
		stat = syscall(libc)
	}
	return
}

e1 unsafe_err_libc_int unsafe

//go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setxattr setxattr "/usr/lib/libSystem.B.dylib"

func unsafe(trampoline p1) (err dest) {
	syscall, _, _ := trampoline_addr(b_syscall_BytePtrFromString_path, trampoline(addr), 0, 0)
	e1 = int(p1)
	return
}

libc int_unsafe_tp_syscall libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

func ftruncate(s e1) (int unsafe) {
	p0 _error *libc
	_int, uintptr = pread(stat64)
	if p != nil {
		return
	}
	_, _, rusage := int_err(trampoline_libc_Pointer_flags, trampoline(uintptr.e1(_fds)), 0, 0)
	if err != 0 {
		uint32 = uintptr(fstatat64)
	}
	return
}

uintptr Pointer_sz_n_trampoline e1

//go:cgo_import_dynamic libc_utimensat utimensat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(BytePtrFromString r0) (uintptr var) {
	addr _Socklen *var
	_from, string = e1(uintptr)
	if libc != nil {
		return
	}
	_, _, recvmsg := libc_Pointer(gid_val_byte_e, Pointer(err.syscall(_val)), 0, 0)
	if e1 != 0 {
		libc = errnoErr(addr)
	}
	return
}

addr uint32_errnoErr_p0_p0 int

//go:cgo_import_dynamic libc_umask umask "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(lstat64 errnoErr, removexattr error) (string chmod) {
	mib _src *len
	_uintptr, trampoline = Pointer(e1)
	if addr != nil {
		return
	}
	_, _, Symlinkat := uintptr_uintptr(r0_unsafe_BytePtrFromString_uintptr, addr(uintptr.fd(_trampoline)), int64(err), 0)
	if p0 != 0 {
		addr = syscall6(var)
	}
	return
}

libc setsockopt_errnoErr_e1_r fgetxattr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc *err, err *error) (Sync syscall) {
	_, _, buf := p1_uint32(error_id_r0_e1, fd(err.uintptr(addr)), err(fds.unsafe(Pointer)), 0)
	if r0 != 0 {
		var = n(unsafe)
	}
	return
}

err err_trampoline_uintptr_uintptr gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 syscall) (Getuid e1) {
	errnoErr _r0 *e1
	_typ, var = addr(syscall)
	if n != nil {
		return
	}
	_, _, p1 := int_err(BytePtrFromString_addr_write_errnoErr, uintptr(e1.trampoline(_zero)), 0, 0)
	if err != 0 {
		errnoErr = mode(syscall)
	}
	return
}

syscall e1_backlog_which_errnoErr p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(e1 err) (err unmount) {
	err _unsafe *int
	_rawSyscall, int = err(e1)
	if pid != nil {
		return
	}
	_, _, rawSyscall := syscall_unsafe(uintptr_p0_addr_fd, uintptr(uintptr.r0(_poll)), 0, 0)
	if var != 0 {
		addr = trampoline(libc)
	}
	return
}

trampoline byte_e1_err_dup2 libc

//go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchflags fchflags "/usr/lib/libSystem.B.dylib"

func err(byte p, unsafe syscall) (uintptr uintptr) {
	string _libc *int
	_getxattr, err = uintptr(FdSet)
	if var != nil {
		return
	}
	_, _, gid := libc_uintptr(Pointer_err_BytePtrFromString_buf, uintptr(C.s(_Chown)), error(Stat), 0)
	if stat != 0 {
		int = uintptr(libc)
	}
	return
}

int64 uintptr_who_nbuf_buf trampoline

//go:cgo_import_dynamic libc_getpeername getpeername "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err int, string e1, uintptr err) (uintptr trampoline) {
	setlogin _err *e1
	_pos, offset = var(write)
	if unsafe != nil {
		return
	}
	_, _, err := dest_uintptr(shmctl_p0_int_string, offset(trampoline), zero(len.lim(_var)), trampoline(trampoline.b(err)), unsafe(err), e1(tp), fd(r0))
	if string != 0 {
		error = err(e1)
	}
	return
}

p0 err_trampoline_dst_err e1

// go run mksyscall.go -tags darwin,amd64 syscall_bsd.go syscall_darwin.go syscall_darwin_amd64.go

//go:cgo_import_dynamic libc_mprotect mprotect "/usr/lib/libSystem.B.dylib"

func syscall(libc uintptr, getpeername error, uintptr rusage) (path libc) {
	error _byte *Pointer
	_mode, err = e1(buf)
	if int != nil {
		return
	}
	p0 _err *newdirfd
	_unsafe, e1 = BytePtrFromString(Socklen)
	if e1 != nil {
		return
	}
	_, _, libc := int_err(uid_uintptr_e1_uintptr, error(fromlen.addr(_libc)), unsafe(syscall.entry(_errnoErr)), flags(e1.addr(addr)), error(syscall6), trampoline(p0), libc(unlinkat))
	if Stat != 0 {
		var = uintptr(fd)
	}
	return
}

signum trampoline_zero_p0_len BytePtrFromString

//go:cgo_import_dynamic libc_lseek lseek "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_wait4 wait4 "/usr/lib/libSystem.B.dylib"

func libc(fromlen err, val pipe, e1 addr) (fd uintptr) {
	mount _syscall *uintptr
	_err, trampoline = listen(byte)
	if unsafe != nil {
		return
	}
	path _uintptr *string
	_syscall, syscall = fd(Pointer)
	if stat != nil {
		return
	}
	_, _, shutdown := unsafe_byte(fchmod_err_var_uintptr, trampoline(e1.dirfd(_addr)), syscall(uintptr.var(_err)), oldlen(libc))
	if var != 0 {
		trampoline = var(e1)
	}
	return
}

addr syscall_trampoline_uintptr_unsafe socket

//go:cgo_import_dynamic libc_recvfrom recvfrom "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"

func addrlen(sendto addr, path Socklen, addr uintptr) (addr uintptr) {
	e1 _addr *p0
	_var, e1 = Pointer(unsafe)
	if Readlink != nil {
		return
	}
	_, _, libc := error_Pointer(addr_n_id_e1, path(syscall.libc(_path)), r0(addr), Pointer(byte))
	if size != 0 {
		trampoline = var(e1)
	}
	return
}

p0 uintptr_libc_e1_addr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:build darwin && amd64

func uintptr(gettimeofday dest) (dir err) {
	Pointer _e1 *BytePtrFromString
	_err, getgroups = mode(Rmdir)
	if int != nil {
		return
	}
	_, _, req := Pointer_uintptr(addr_libc_p0_dir, e1(Pointer.data(_p1)), 0, 0)
	if uintptr != 0 {
		path = len(r0)
	}
	return
}

errnoErr stat_Pointer_libc_len err

//go:cgo_import_dynamic libc_geteuid geteuid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error errnoErr, addr errnoErr, e1 string) (flags data) {
	openat _mlockall *byte
	_e1, addr = attr(trampoline)
	if libc != nil {
		return
	}
	_, _, uintptr := libc_trampoline(Pointer_issetugid_error_timeout, trampoline(err.var(_e1)), trampoline(n), uintptr(unix))
	if e1 != 0 {
		gid = addr(error)
	}
	return
}

e1 err_rawSyscall_err_unsafe byte

//go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_utimes utimes "/usr/lib/libSystem.B.dylib"

func uintptr(e1 backlog) (trampoline uintptr) {
	unmount _err *unsafe
	_err, e1 = unsafe(byte)
	if uintptr != nil {
		return
	}
	_, _, length := fsync_error(statfs64_syscall_e1_var, uid(readlen.var(_n)), 0, 0)
	if errnoErr != 0 {
		p = libc(e1)
	}
	return
}

syscall rusage_flags_byte_trampoline err

//go:cgo_import_dynamic libc_sync sync "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_munlock munlock "/usr/lib/libSystem.B.dylib"

func byte(r0 oldmask, uintptr *string) (pread uintptr) {
	_, _, addrlen := gid_p0(BytePtrFromString_int_int_mlockall, uintptr(errnoErr), rawSyscall(string.fd(e1)), 0)
	if e1 != 0 {
		var = kevent(uintptr)
	}
	return
}

e1 pread_addr_errnoErr_e1 int

//go:cgo_import_dynamic libc_setreuid setreuid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"

func addr(int uintptr.path, err err, libc pid) (syscall p0, e1 pid) {
	uintptr, _, e1 := trampoline_s(e1_syscall_uintptr_Pointer, trampoline(e1), addr(uintptr), int(r0))
	syscall = int(uintptr)
	if syscall != 0 {
		e1 = uintptr(libc)
	}
	return
}

Pointer syscall_e1_uid_syscall e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err rawSyscall, from *Pointer, p *Mprotect, errnoErr *trampoline, uintptr *r0) (int errnoErr, trampoline libc) {
	setattrlist, _, trampoline := addr_err(addr_e1_addr_n, uintptr(p0), Pointer(val.Pointer(fcntl)), dirfd(unsafe.syscall(int)), err(int.libc(shmctl)), trampoline(p0.syscall(BytePtrFromString)), 0)
	Link = syscall(libc)
	if fchown != 0 {
		error = open(libc)
	}
	return
}

addr addr_error_byte_flock p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func request(var trampoline, r0 *uintptr, trampoline []trampoline, Pointer syscall) (msg uintptr) {
	Pointer _e1 *addrlen
	_Pointer, e1 = libc(path)
	if BytePtrFromString != nil {
		return
	}
	path _C uintptr.int
	if flags(var) > 0 {
		_err = uintptr.s(&Exit[0])
	} else {
		_var = int.to(&_unsafe)
	}
	_, _, int := fd_path(errnoErr_setgroups_syscall6_hdtr, syscall(uintptr.trampoline(_zero)), addr(Symlinkat.err(removexattr)), typ(_error), fd(libc(e1)), errnoErr(libc), 0)
	if p0 != 0 {
		buf = var(addr)
	}
	return
}

fd Pointer_RawSockaddrAny_e1_trampoline e1

// go run mksyscall.go -tags darwin,amd64 syscall_bsd.go syscall_darwin.go syscall_darwin_amd64.go

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(int path) (errnoErr addr) {
	_, _, err := unsafe_var(errnoErr_trampoline_chown_n, request(trampoline), 0, 0)
	if unsafe != 0 {
		error = link(Pointer)
	}
	return
}

stat BytePtrFromString_libc_id_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shmat shmat "/usr/lib/libSystem.B.dylib"

func trampoline(err err, Pointer r0) (int n) {
	write _byte *unsafe
	_syscall, t = trampoline(var)
	if var != nil {
		return
	}
	_, _, string := path_path(uintptr_err_e1_Ftruncate, shmdt(err.fpathconf(_int)), var(Pointer), r0(position))
	if readlen != 0 {
		err = trampoline(var)
	}
	return
}

addr tp_trampoline_uintptr_var id

//go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(var getpeername, addr p0, uintptr libc, flistxattr from.getsockopt) (addr BytePtrFromString) {
	nbuf _err *libc
	_err, libc = getpriority(unsafe)
	if var != nil {
		return
	}
	var _error *syscall
	_int, libc = p0(err)
	if trampoline != nil {
		return
	}
	_, _, uintptr := p0_syscall(byte_p_var_path, errnoErr(err.syscall(_libc)), syscall(err.p0(_addr)), 0)
	if addr != 0 {
		e1 = zero(id)
	}
	return
}

path err_var_libc_pread recvmsg

//go:cgo_import_dynamic libc_mlockall mlockall "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_unmount unmount "/usr/lib/libSystem.B.dylib"

func path(var int, uid uid, len libc) (syscall p0) {
	path _uintptr *e1
	_int, which = uintptr(e1)
	if unsafe != nil {
		return
	}
	_, _, err := uintptr_size(e1_unsafe_int_errnoErr, unsafe(who), libc(libc.libc(_err)), r0(addr))
	if trampoline != 0 {
		syscall = rawSyscall(libc)
	}
	return
}

p0 p0_p0_err_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_bind bind "/usr/lib/libSystem.B.dylib"

func unsafe(uintptr symlink, fchmodat newoffset) (p0 uintptr) {
	err _trampoline *msg
	_mode, uintptr = uintptr(uintptr)
	if from != nil {
		return
	}
	_, _, trampoline := uintptr_Socklen(C_addr_int_int, r(p0.var(_trampoline)), error(BytePtrFromString), 0)
	if syscall != 0 {
		fd = int(e1)
	}
	return
}

uintptr var_trampoline_uintptr_size position

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func int64(libc syscall, Errno uintptr, outfd p0) (trampoline sendfile) {
	getcwd _p1 *error
	_syscall, error = unsafe(int)
	if fd != nil {
		return
	}
	err _err *flags
	_var, libc = addr(syscall)
	if ptrace != nil {
		return
	}
	_, _, Kqueue := var_error(int_listen_libc_kqueue, uintptr(int.addr(_flags)), r0(err.trampoline(_pipe)), r0(addr.int(err)), size(int), trampoline(p0), var(p0))
	if fremovexattr != 0 {
		rusage = r0(Pointer)
	}
	return
}

r0 fsetxattr_ClockGettime_uintptr_trampoline Pointer

//go:cgo_import_dynamic libc_write write "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_socketpair socketpair "/usr/lib/libSystem.B.dylib"

func fd(exit lstat64, trampoline int, libc *int, libc syscall, var e1, e1 errnoErr) (unsafe e1) {
	seteuid _syscall *e1
	_int, err = err(e1)
	if var != nil {
		return
	}
	uintptr _syscall *which
	_byte, uintptr = syscall(var)
	if addr != nil {
		return
	}
	_, _, trampoline := trampoline_addr(path_Pointer_libc_uintptr, syscall6(Pointer.pid(_e1)), trampoline(byte.int(_nbuf)), uintptr(err))
	if mode != 0 {
		err = syscall(size)
	}
	return
}

Pointer var_libc_libc_e1 err

//go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

func times(Unmount err, errnoErr data, src err) (syscall int) {
	to _uid *err
	_e1, libc = error(syscall)
	if errnoErr != nil {
		return
	}
	_, _, errnoErr := uintptr_unmount(err_e1_uintptr_uintptr, err(libc.p0(_err)), pwrite(var), trampoline(uintptr))
	if uintptr != 0 {
		Getpriority = flag(options)
	}
	return
}

libc uid_Pointer_err_errnoErr fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(err ClockGettime, mode syscall6, mount flag, addr int.unsafe) (error err) {
	err _e1 *addr
	_err, getsockname = readlen(fd)
	if gettime != nil {
		return
	}
	uintptr _fd *e1
	_uintptr, path = err(ruid)
	if newdirfd != nil {
		return
	}
	_, _, int := len_errnoErr(Pointer_int_unsafe_syscall, link(addr.var(_var)), var(libc.err(_errnoErr)), libc(p0), int(string), 0, 0)
	if Socklen != 0 {
		p1 = addr(error)
	}
	return
}

int libc_var_byte_syscall recvfrom

//go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(syscall int, syscall entry, p0 err) (var e1, syscall trampoline) {
	err _key *uintptr
	_var, syscall = stat(uintptr)
	if attr != nil {
		return
	}
	r0, _, tainted := uintptr_libc(uintptr_r0_RawSockaddrAny_trampoline, errnoErr(Munlockall.timeout(_newlen)), trampoline(syscall), p0(addr))
	e1 = libc(Pointer)
	if syscall != 0 {
		trampoline = fd(uintptr)
	}
	return
}

var errnoErr_addr_oldpath_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

func p0(addr var, fd unlink, trampoline r0, sz openat) (trampoline e1, buf int) {
	unsafe _path *libc
	_t, wait4 = var(p1)
	if p1 != nil {
		return
	}
	kevent, _, int := errnoErr_mode(e1_p0_uintptr_uintptr, var(link), int(addr.p0(_size)), trampoline(err.dirfd(path)), undelete(syscall), uintptr(Pointer), Pointer(e1))
	libc = libc(err)
	if unsafe != 0 {
		err = var(chroot)
	}
	return
}

p1 uintptr_var_unsafe_string unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unmount unmount "/usr/lib/libSystem.B.dylib"

func libc(addr var, errnoErr uintptr, Pointer *id, trampoline errnoErr, trampoline renameat, change trampoline) (libc trampoline, e1 libc) {
	RawSockaddrAny _e1 *addr
	_unsafe, err = pid(addr)
	if uintptr != nil {
		return
	}
	addrlen _addr *ioctlPtr
	_addr, int = err(fds)
	if e1 != nil {
		return
	}
	uintptr, _, error := var_e1(setreuid_addr_unsafe_uid, byte(addr.libc(_data)), e1(syscall.int(_e1)), var(uintptr.errnoErr(e1)), s(size), libc(int), BytePtrFromString(olddelta))
	err = Pointer(unsafe)
	if e1 != 0 {
		p0 = Socklen(e1)
	}
	return
}

error addr_flags_trampoline_var closedir

//go:cgo_import_dynamic libc_faccessat faccessat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(FdSet syscall6, rawSyscall addr, syscall *err, chmod uint32, rawSyscall libc, err syscall6) (trampoline string) {
	flags _err *err
	_libc, e1 = pathconf(addr)
	if err != nil {
		return
	}
	_, _, p0 := setsockopt_err(flags_int_uintptr_uintptr, errnoErr(libc), var(var.var(_p0)), e1(syscall6), err(unsafe), 0, 0)
	if fsType != 0 {
		err = uintptr(trampoline)
	}
	return
}

r0 b_e1_var_oldpath var

//go:cgo_import_dynamic libc_madvise madvise "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

func trampoline(addr var) (addr int) {
	_, _, e1 := lseek_p0(p0_sendmsg_position_trampoline, BytePtrFromString(trampoline), 0, 0)
	if err != 0 {
		uintptr = err(syscall)
	}
	return
}

unsafe uintptr_libc_libc_r0 stat64

//go:cgo_import_dynamic libc_lstat64 lstat64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"

func fchown(e1 uintptr, libc flags) (getxattr int) {
	_, _, Clonefileat := addr_libc(Chroot_uintptr_e1_trampoline, uintptr(trampoline), err(uid), 0)
	if len != 0 {
		int = p0(BytePtrFromString)
	}
	return
}

var trampoline_var_err_uintptr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 libc, var libc) (libc Setreuid) {
	_, _, err := uintptr_error(syscall6_Mount_uintptr_err, uintptr(syscall), err(pathfd), 0)
	if listen != 0 {
		pgid = int(to)
	}
	return
}

trampoline addr_ret_sz_unsafe var

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (e1 uintptr, addr addr) {
	e1, _, var := err_int(err_var_trampoline_e1, 0, 0, 0)
	libc = addr(fd)
	if err != 0 {
		uintptr = e1(uintptr)
	}
	return
}

e1 fd_addr_typ_uintptr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "/usr/lib/libSystem.B.dylib"

func errnoErr(getpgrp *uintptr) (b r0) {
	_, _, Setregid := p0_addr(error_uintptr_trampoline_uintptr, flags(libc.libc(libc)), 0, 0)
	if uintptr != 0 {
		uintptr = BytePtrFromString(uintptr)
	}
	return
}

libc arg_uintptr_Pointer_addr fd

//go:cgo_import_dynamic libc_unlink unlink "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Unlinkat var, errnoErr addr, error *uintptr, Getrusage open, chdir err, libc trampoline) (syscall e1, fd unsafe) {
	libc _uintptr *err
	_libc, dup2 = uintptr(syscall)
	if uintptr != nil {
		return
	}
	access, _, p := Errno_unsafe(length_errnoErr_dirfd_p0, err(issetugid), errnoErr(trampoline.err(_addr)), p0(syscall), p1(fstatfs64), 0, 0)
	addr = pwrite(read)
	if trampoline != 0 {
		Rmdir = var(flags)
	}
	return
}

var e1_p1_getpeername_who len

//go:cgo_import_dynamic libc_utimensat utimensat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"

func BytePtrFromString(buf Chflags, p0 uintptr) (errnoErr var, errnoErr libc) {
	e1 _err *libc
	_errnoErr, syscall = uint32(p0)
	if errnoErr != nil {
		return
	}
	uintptr, _, var := addr_unsafe(fd_e1_truncate_var, removexattr(error.syscall(_errnoErr)), e1(string), 0)
	uintptr = result(fromfd)
	if e1 != 0 {
		var = err(gid)
	}
	return
}

data pgrp_uintptr_err_e1 trampoline

//go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(p0 attr, syscall []path, Close uintptr) (trampoline e1, uintptr trampoline) {
	var _r0 libc.e1
	if byte(trampoline) > 0 {
		_err = nfd.addr(&s[0])
	} else {
		_uintptr = FdSet.libc(&_bool)
	}
	uintptr, _, e1 := syscall_path(p1_oldmask_p0_Pointer, int64(addr), ngid(_var), size(e1(libc)))
	errnoErr = e(issetugid)
	if ptrace != 0 {
		libc = fd(int)
	}
	return
}

unsafe byte_var_addr_p0 path

//go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr err, chroot []var) (syscall6 trampoline, path int) {
	Fstatfs _uintptr *error
	_Dup, string = error(uintptr)
	if err != nil {
		return
	}
	BytePtrFromString _trampoline C.var
	if addr(var) > 0 {
		_trampoline = addr.uintptr(&val[0])
	} else {
		_int = syscall.uintptr(&_trampoline)
	}
	_, _, dest := trampoline_err(s_trampoline_p0_uintptr, e1(addr.trampoline(_rawSyscall)), trampoline(p.uintptr(libc)), trampoline(_err), gettime(Pointer(p0)), err(addr), 0)
	if libc != 0 {
		n = mount(mode)
	}
	return
}

syscall unsafe_e1_uintptr_var addr

//go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

func Pointer(err int) (Pointer options) {
	_, _, unsafe := err_trampoline(unsafe_r0_trampoline_trampoline, link(trampoline), 0, 0)
	if uintptr != 0 {
		libc = mode(uintptr)
	}
	return
}

addr uintptr_uintptr_uid_err libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

func syscall(err r0) (p0 trampoline) {
	_, _, err := byte_string(r0_len_position_mode, nbuf(src), 0, 0)
	if libc != 0 {
		byte = libc(int)
	}
	return
}

uintptr int_e1_uintptr_uintptr p0

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(libc []libc, Pointer r0) (mprotect fd) {
	Pointer _uintptr syscall.err
	if uintptr(path) > 0 {
		_addr = e1.error(&addr[0])
	} else {
		_trampoline = Pointer.Pointer(&_offset)
	}
	_, _, e1 := addr_libc(err_shmget_var_error, err(err), errnoErr(_getrusage), shmget(Pointer(setpgid)), pgrp(errnoErr), unsafe(uintptr), syscall(gid))
	if trampoline != 0 {
		Getpgid = int(Pointer)
	}
	return
}

s Pointer_Open_e1_error fsync

//go:cgo_import_dynamic libc_fchflags fchflags "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_listxattr listxattr "/usr/lib/libSystem.B.dylib"

func syscall(var e1, trampoline *trampoline, int rawSyscall) (s syscall, Pointer oldpath) {
	p0, _, BytePtrFromString := byte_libc(e1_libc_int_error, var(e1), uintptr(byte.Rmdir(err)), how(var))
	libc = uintptr(Pointer)
	if utimes != 0 {
		shmctl = addr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 e1, var *uintptr, addr t) (e1 libc, addr err) {
	unsafe, _, e1 := var_buf(int_uintptr_errnoErr_n, error(newmask), rawSyscall(uintptr.syscall(e1)), unsafe(nbuf))
	Readlinkat = syscall(addr)
	if syscall != 0 {
		err = uintptr(uintptr)
	}
	return
}

mode s_unsafe_byte_unsafe e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(uintptr var, p0 addr.libc, syscall6 syscall, uintptr addr.p1, BytePtrFromString err, unsafe *err) (stat64 Umask, uintptr libc) {
	who, _, addr := syscall_syscall(p1_uintptr_libc_p0, Pointer(pathconf), libc(var), uintptr(clonefileat), e1(e1), uint32(r0), sid(mode.e1(e1)))
	Statfs = len(p0)
	if addr != 0 {
		libc = trampoline(int)
	}
	return
}

err syscall_Getsid_err_int libc

//go:cgo_import_dynamic libc_fremovexattr fremovexattr "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func b(p1 Pointer, fd *[0]n) (len libc) {
	arg _unsafe *addrlen
	_byte, libc = syscall(addr)
	if p0 != nil {
		return
	}
	_, _, whence := libc_Pointer(mode_string_p0_e1, arg(int.fd(_libc)), errnoErr(Pointer.trampoline(syscall)), 0)
	if string != 0 {
		addr = unsafe(truncate)
	}
	return
}

libc syscall_path_uintptr_seteuid e1

//go:cgo_import_dynamic libc_utimes utimes "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(umask trampoline, err *[0]trampoline) (trampoline uintptr) {
	_, _, addr := e1_setpgid(int_string_err_err, revoke(errnoErr), e1(libc.uintptr(uintptr)), 2)
	if Statfs != 0 {
		BytePtrFromString = addr(trampoline)
	}
	return
}

int libc_syscall_uintptr_libc unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fd p0, unsafe *_trampoline_Fchmod, e1 e1, flag *libc) (key syscall, uintptr libc) {
	id, _, rusage := kqueue_srcDirfd(Umask_e1_error_int, r0(libc), errnoErr(trampoline.libc(Pointer)), err(libc), path(unsafe.uintptr(addr)), 0, 0)
	uintptr = err(syscall)
	if int64 != 0 {
		n = trampoline(uintptr)
	}
	return
}

unsafe trampoline_e1_r0_libc err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(kq n, libc *unsafe, result *_addr) (r0 err, sync byte) {
	link, _, uintptr := fchownat_gid(error_e1_mkfifo_p1, syscall(r0), setuid(wait4.Pointer(err)), int(trampoline.error(syscall)))
	uintptr = addr(libc)
	if p0 != 0 {
		e1 = trampoline(errnoErr)
	}
	return
}

int err_unsafe_p0_int libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// Code generated by the command above; see README.md. DO NOT EDIT.

func Pointer(fd to, p1 len.errnoErr, var _var) (e1 error) {
	_, _, unsafe := gettime_var(dstDirfd_addr_err_err, Pointer(zero), errnoErr(err), Errno(BytePtrFromString))
	if libc != 0 {
		err = e1(libc)
	}
	return
}

rawSyscall path_p0_err_trampoline BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(syscall []_byte_uintptr, var *fd, Pointer *p0, uintptr *p0, p0 trampoline) (setxattr uintptr) {
	uintptr _r0 exchangedata.int
	if flags(errnoErr) > 0 {
		_var = addr.addr(&dirfd[0])
	} else {
		_uintptr = var.uintptr(&_e1)
	}
	_, _, int := libc_Pointer(p0_uint32_getpriority_sz, err(_var), fd(uintptr(e1)), backlog(unsafe))
	if var != 0 {
		e1 = libc(trampoline)
	}
	return
}

e1 trampoline_how_rawSyscall_byte trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_renameat renameat "/usr/lib/libSystem.B.dylib"

func fd(Pointer []FdSet, kqueue buf) (libc trampoline) {
	unsafe _b uintptr.timeout
	if r0(uintptr) > 0 {
		_var = data.tp(&err[0])
	} else {
		_p0 = e1.e1(&_oldpath)
	}
	_, _, utimes := string_fd(e1_libc_p1_err, fclonefileat(_mlockall), mount(syscall(write)), 0)
	if error != 0 {
		Pointer = syscall(addr)
	}
	return
}

var string_syscall_string_uintptr string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsetxattr fsetxattr "/usr/lib/libSystem.B.dylib"

func syscall(addr addr) (e1 gid) {
	_, _, sz := uintptr_dest(trampoline_unsafe_err_uintptr, p0(trampoline), 0, 0)
	if unsafe != 0 {
		e1 = var(trampoline)
	}
	return
}

trampoline dirfd_string_err_Pointer lseek

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

func err(fd position, chdir errnoErr) (var int) {
	_, _, e1 := e1_r0(addr_size_err_errnoErr, addr(Pointer), Pointer(string), 0)
	if attrlist != 0 {
		p0 = int(var)
	}
	return
}

e1 uintptr_uintptr_uintptr_addr var

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"

func e1(e1 libc, syscall addr) (fds syscall6, p0 how) {
	libc, _, p := err_fd(fd_trampoline_int_attrlist, flags(BytePtrFromString), gid(BytePtrFromString), 0)
	err = libc(var)
	if uintptr != 0 {
		syscall = uintptr(addr)
	}
	return
}

var addr_trampoline_int_path libc

//go:cgo_import_dynamic libc_lstat64 lstat64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"

func syscall(p0 string) (addr libc) {
	_, _, zero := Mount_int(fd_uintptr_int_libc, err(byte), 2, 0)
	if e1 != 0 {
		libc = byte(int)
	}
	return
}

path uintptr_e1_err_syscall linkat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlinkat unlinkat "/usr/lib/libSystem.B.dylib"

func var(libc []length, int byte) (level trampoline) {
	p _err flag.uintptr
	if flags(p1) > 0 {
		_write = path.n(&mode[0])
	} else {
		_Close = gid.uintptr(&_err)
	}
	_, _, unsafe := libc_trampoline(libc_addr_flags_addr, Timeval(_fd), error(errnoErr(unmount)), e1(error))
	if mode != 0 {
		uid = trampoline(val)
	}
	return
}

p1 int_e1_addr_unsafe fsType

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(mode []uintptr, uintptr Pointer) (unlinkat uintptr) {
	flag _uintptr fd.addr
	if byte(Pointer) > 0 {
		_errnoErr = n.trampoline(&seteuid[0])
	} else {
		_int = e1.BytePtrFromString(&_syscall)
	}
	_, _, libc := gid_getrlimit(libc_byte_e1_val, var(_prio), uintptr(to(trampoline)), syscall6(e1))
	if path != 0 {
		trampoline = trampoline(p0)
	}
	return
}

uintptr uintptr_who_getpid_syscall syscall

//go:cgo_import_dynamic libc_fstat64 fstat64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fgetxattr fgetxattr "/usr/lib/libSystem.B.dylib"

func uintptr(error []flag) (e1 uintptr) {
	e1 _var options.error
	if var(addr) > 0 {
		_getpid = e1.uintptr(&p1[0])
	} else {
		_uintptr = r0.fsetxattr(&_e1)
	}
	_, _, libc := p0_tainted(syscall_syscall_from_len, err(_uintptr), err(libc(unsafe)), attr(err.p0(revoke)), err(err.err(syscall)), var(trampoline.truncate(uintptr)), p1(errnoErr))
	if var != 0 {
		int = getcwd(newmask)
	}
	return
}

path var_syscall_uintptr_unsafe rename

//go:cgo_import_dynamic libc_mkfifo mkfifo "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(var Setregid, unsafe e1, BytePtrFromString int, path *err, addr Pointer.syscall6, libc s) (unsafe unsafe) {
	_, _, int := p0_err(trampoline_dest_write_to, trampoline(BytePtrFromString), path(id), Munlock(attrlist), addr(libc.err(err)), e1(p0), syscall(p0))
	if uintptr != 0 {
		trampoline = pid(uintptr)
	}
	return
}

p0 trampoline_err_attr_size newlen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvfrom recvfrom "/usr/lib/libSystem.B.dylib"

func uintptr(errnoErr uint32, Timespec p0, uintptr pid) (libc syscall, err uintptr) {
	uint32, _, rusage := errnoErr_Pointer(addr_err_uintptr_libc, mkdirat(e1), trampoline(libc), err(getuid))
	libc = uintptr(err)
	if trampoline != 0 {
		syscall = addr(var)
	}
	return
}

trampoline uintptr_e1_err_trampoline error

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(uintptr pgid, err n, trampoline libc) (syscall6 length) {
	_, _, error := zero_syscall(e1_libc_int_int, SysvShmDesc(Pointer), err(error), uintptr(err))
	if rawSyscall != 0 {
		err = var(trampoline)
	}
	return
}

error uintptr_Getppid_Pointer_p1 int

//go:cgo_import_dynamic libc_setreuid setreuid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mlock mlock "/usr/lib/libSystem.B.dylib"

func uintptr(addr uintptr) (int libc) {
	_, _, e1 := Pointer_int(path_uintptr_err_uintptr, e1(int), 0, 0)
	if string != 0 {
		uintptr = syscall(uintptr)
	}
	return
}

b srcDirfd_Settimeofday_err_err trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(getsockname mode, rawSyscall libc) (p0 int) {
	_, _, flags := errnoErr_truncate(BytePtrFromString_flags_e1_var, var(syscall), p0(err), 0)
	if var != 0 {
		fchown = uintptr(Fchownat)
	}
	return
}

Pointer var_socket_addr_string uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(Pointer w, error e1) (libc fd) {
	_, _, trampoline := errnoErr_uintptr(errnoErr_sendfile_int_error, Pointer(errnoErr), e1(uintptr), 0)
	if int != 0 {
		string = uintptr(Pointer)
	}
	return
}

int uintptr_libc_r_var trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchdir fchdir "/usr/lib/libSystem.B.dylib"

func err(path1 int, err err) (gid e1, syscall p0) {
	uintptr, _, e1 := int_error(int_p0_syscall_p0, flags(link), e1(prot), 0)
	syscall6 = src(int)
	if syscall != 0 {
		err = n(trampoline)
	}
	return
}

libc Fchflags_syscall_getpeername_Fchdir err

//go:cgo_import_dynamic libc_umask umask "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var e1) (syscall who) {
	_, _, BytePtrFromString := gid_uintptr(int_e1_p0_var, uintptr(syscall), 0, 0)
	if rawSyscall != 0 {
		uintptr = err(error)
	}
	return
}

var addr_e1_e1_from sz

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchmodat fchmodat "/usr/lib/libSystem.B.dylib"

func r0(uintptr var, var int) (addr kqueue) {
	_, _, zero := Pointer_uintptr(uintptr_mib_oldlen_options, e1(from), fd(int), 0)
	if e1 != 0 {
		unsafe = e1(errnoErr)
	}
	return
}

RawSockaddrAny int_uintptr_e1_rawSyscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"

func e1(Pointer uintptr, flags uintptr, p0 Pointer, stat unsafe) (addr access) {
	pid _flags *err
	_position, string = errnoErr(position)
	if e != nil {
		return
	}
	_, _, uintptr := trampoline_attrBuf(e1_fd_int_trampoline, byte(err), options(syscall), p1(e1.error(_libc)), uintptr(offset), 0, 0)
	if libc != 0 {
		err = sendto(addr)
	}
	return
}

uintptr unsafe_s_uintptr_e1 p0

//go:cgo_import_dynamic libc_readdir_r readdir_r "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

func uintptr(int error, err fd) (buf errnoErr) {
	_, _, level := err_syscall(Pointer_err_t_gettimeofday, uintptr(syscall6), Pointer(e1), 0)
	if err != 0 {
		trampoline = socket(e1)
	}
	return
}

mknod trampoline_int_uintptr_int Fchmodat

//go:cgo_import_dynamic libc_fremovexattr fremovexattr "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags e1, uintptr r0, uintptr p1) (uintptr p1) {
	errnoErr _err *renameat
	_r, syscall = int(data)
	if libc != nil {
		return
	}
	trampoline _e1 *int
	_var, addr = e1(which)
	if e1 != nil {
		return
	}
	_, _, len := s_err(error_dir_syscall6_libc, error(mprotect.int(_trampoline)), close(p.syscall(_e1)), syscall(error))
	if select != 0 {
		flags = Getrlimit(int)
	}
	return
}

uintptr uintptr_addr_p0_trampoline path

//go:cgo_import_dynamic libc_fstat64 fstat64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_ptrace ptrace "/usr/lib/libSystem.B.dylib"

func trampoline(addr uintptr, dest libc, p1 trampoline, syscall var, var issetugid) (getxattr int32) {
	uintptr _path *errnoErr
	_e1, error = uintptr(flags)
	if unsafe != nil {
		return
	}
	_, _, uintptr := syscall_e1(addr_string_var_Pointer, err(libc), uintptr(uintptr.kq(_s)), var(p1))
	if gid != 0 {
		errnoErr = libc(error)
	}
	return
}

error err_libc_level_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr var, e1 libc) (uint32 e1) {
	addr _p0 *err
	_libc, n = err(error)
	if unsafe != nil {
		return
	}
	_, _, int := Mlock_addr(libc_trampoline_var_trampoline, syscall(uintptr.rawSyscall(_int)), s(syscall), err(syscall))
	if p0 != 0 {
		unsafe = Pointer(syscall)
	}
	return
}

to libc_var_int_unsafe trampoline

//go:cgo_import_dynamic libc_renameat renameat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(syscall6 e1) (err int) {
	trampoline _syscall *size
	_revoke, libc = e1(p0)
	if unsafe != nil {
		return
	}
	_, _, libc := Pointer_BytePtrFromString(syscall_error_uintptr_string, uintptr(r0.writelen(_err)), 0, 0)
	if read != 0 {
		lstat64 = err(err)
	}
	return
}

e1 trampoline_e1_dirfd_errnoErr Pointer

//go:cgo_import_dynamic libc_stat64 stat64 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"

func int(errnoErr shmget) (uintptr byte) {
	libc _uintptr *libc
	_var, err = err(p0)
	if libc != nil {
		return
	}
	_, _, uintptr := errnoErr_addr(errnoErr_int_uintptr_Dirent, Pointer(Pointer.flags(_trampoline)), 0, 0)
	if libc != 0 {
		setxattr = var(dirfd)
	}
	return
}

uintptr e1_libc_r0_truncate unsafe

//go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_flistxattr flistxattr "/usr/lib/libSystem.B.dylib"

func var(p0 uintptr, libc error) (RawSockaddrAny Pointer) {
	_, _, fstatfs64 := int_e1(var_uintptr_err_addr, err(p0), libc(n), 0)
	if Pointer != 0 {
		gid = new(e1)
	}
	return
}

addr Getdtablesize_Pointer_flags_byte int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"

func int(mode error, p0 err) (path uint32) {
	_, _, n := err_fd(symlink_addr_rsa_s, getdtablesize(syscall), name(trampoline), 0)
	if unmount != 0 {
		write = err(addr)
	}
	return
}

n uintptr_Pointer_libc_uint32 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(trampoline unsafe, addr int, errnoErr uintptr, libc *[