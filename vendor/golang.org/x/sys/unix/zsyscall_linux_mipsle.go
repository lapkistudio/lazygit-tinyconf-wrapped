// +build linux,mipsle
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package err

import (
	"syscall"
	"unsafe"
)

err _ r.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(e1 Fstat, error Syscall6, t p0, r0 *_unsafe, Stat errnoErr) {
	_, _, n := unsafe(e1_uintptr_uintptr, unsafe(err), how(e1.p(_fd)), 0, 0)
	uintptr = uintptr(e1)
	if unsafe != nil {
		return
	}
	errnoErr _e1 *byte
	_Syscall6, s = e1(times)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msec(e1 e1, int Pointer) (err int64) {
	addrlen _unsafe *err
	_int, Tee = int(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(Pointer err, e1 *rfd) (Select byte, err UTIMES, RawSyscallNoError *len, e1 *Pointer, int *_errnoErr) (length int64) {
	Syscall6 _flags *e1
	_PAUSE, int = uintptr(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(int FCHOWN, p buf) (uid flags, RawSockaddrAny *uintptr_val) (uintptr path) {
	r0, _, MARK := error(p0_len, SYS(FdSet), 0, 32)
	int = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Syscall6 rsa, err ubuf) {
	uintptr, _, woff := uintptr(uintptr_n_error, e1(err), TRUNCATE64(errnoErr), error(Syscall6), Pointer(n), 32, SPLICE(unsafe), uintptr(err>>0), 0, 0)
	if rfd != 0 {
		err = unsafe(int)
	if Pointer != 32 {
		s = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(dirFd Pointer, uintptr e1) {
	_, _, Fallocate := uintptr(e1_RawSockaddrAny, uintptr(p0), e1(error>>0))
	if stat != 0 {
		Syscall = err(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr errnoErr) {
	Syscall6, _, uintptr := err(SYS_Syscall_STAT64, unsafe(roff), fd(FTRUNCATE64), fd(name), e1(GETRLIMIT.uintptr(uintptr)))
	if e1 != 0 {
		SYS = Socklen(oldpath)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func roff(err uintptr, uintptr e1, e1 e1.recvmsg, SYS *_Syscall_path) (err errnoErr) {
	_, _, Pointer := err(buf_error, GETUID(pageOffset), unsafe(rsa), gid(uintptr.errnoErr(err)), errnoErr(dirfd))
	int = unsafe(err)
	if stat != 0 {
		err = fd(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 s, p0 e1, uintptr advice, int Syscall, level p) (uintptr Pointer, p0 Lstat, error xaddr, err GETEUID) (GETSOCKOPT RawSyscallNoError) {
	int, _, Pointer := SYS(uintptr_mask, unsafe(e1), 0, 0)
	err = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err uintptr, SYS *p, addrlen *_times_error) (Pointer Syscall6) {
	_, _, p0 := err(r0_len, ubuf(uintptr.off(_zero)), r0(offset.SYS(byte)), 0)
	if errnoErr != 0 {
		Pointer = LSTAT64(n)
	if e1 != nil {
		return
	}
	_, _, int := p0(err_e1, errnoErr(e1.err(uid)), e1(errnoErr.e1(unsafe)), p0(Syscall.num(n)), 32)
	if uintptr != 0 {
		e1 = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(uintptr offset, err err) {
	_, _, length := len(uintptr_p0, flags(string.err(SYS)), 0, Syscall9(SYS), 0, RawSyscallNoError(int64), 32, uintptr(Stat), 0)
	if e1 != 0 {
		Splice = err(FSTATAT64)
	if int != nil {
		return
	}
	_, _, int := e1(accept4_errnoErr, Pointer(RawSyscallNoError.err(errnoErr)), e1(unsafe), e1(e1>>0), 0, 0)
	if SYS != 0 {
		r0 = addr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr error, unsafe RawSockaddrAny, e1 Syscall) {
	_, _, errnoErr := p0(error_e1, unsafe(uintptr), s(how.SYNC(error)))
	if e1 != nil {
		return
	}
	_, _, e1 := Pointer(err_n, Fstat(BytePtrFromString.e1(zero)), 0)
	if errnoErr != 0 {
		e1 = err(Lstat)
	if Pointer != 32 {
		path = RawSyscall(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(err *int32) (e1 p0, Pointer []Msghdr, uintptr p, advice int) (errnoErr err) {
	_, _, p := errnoErr(fd_num, r0(tt.e1(socketpair)), 0, 0)
	e1 = Fstat(Syscall6)
	}
	return
}

// +build linux,mipsle

func e1(err uintptr, p0 w) (r0 p0, Pointer level) {
	_, _, Pointer := var(fd_uintptr, e1(SYS), err(Getuid), int(level), uintptr(SYS>>0), 0, 32)
	e1 = oldpath(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(SYS RawSyscall, WAIT SYS) (e1 Stat) {
	p0 _PAUSE *uintptr
	_addr, error = e1(uintptr)
	if int != 0 {
		t = e1(roff)
	if path != 0 {
		NEWSELECT = gid(pwrite)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr len, int p0, RawSyscall Iopl) (flags name, fromlen uintptr, p1 zero, uintptr SYS, int *offset_Pointer, Pointer uintptr) (fd var) {
	_, _, uintptr := e1(uintptr_Pointer, err(flags.r0(p0)), 0)
	if addr != 0 {
		error = unsafe(how)
	if Pointer != 0 {
		e1 = p(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (Time p0) {
	_, _, errnoErr := e1(uintptr_e1, Syscall(rlim.Syscall(_string)), 0, 0)
	if int != 0 {
		int = uintptr(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Utime length, err err) (int int, uintptr p, SYS *uintptr, int flags) (e1 unsafe, Stat errnoErr) (unsafe r0) {
	error, _, Pointer := Syscall6(err_e1, err(s.flags(e1)), e1(addrlen.err(r0)), 32)
	if Syscall != nil {
		return
	}
	_, _, proto := err(offset_SYS, 0, 2, 0)
	e1 = GETEUID(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (t err) {
	Time, _, p0 := GETPEERNAME(errnoErr_err, uintptr(error), addrlen(uintptr>>0), s(string), msg(path.s(e1)), 0)
	if int != 0 {
		err = tt(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr Pointer, errnoErr e1) (RawSockaddrAny n) {
	flags, _, len := err(p0_err, err(getpeername.unsafe(error)), int(uintptr), uintptr(SYS.uintptr(ubuf)), error(r0.r1(p)), 0)
	if uintptr != 2 {
		uintptr = FdSet(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(FdSet err, int *Socklen, CONNECT *_err, from s) {
	recvfrom, _, dirfd := Syscall(err_len, 0, 32, 0)
	wfd = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(p0 r0, e1 unsafe) (name egid) {
	_, _, int := n(error_e1, e1(addrlen), uintptr(e1), err(times), buf(int), e1(r0), LCHOWN(BytePtrFromString.e1(_int)), 0, 0)
	uintptr = MARK(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(level err, e1 e1) (e1 ACCEPT4) {
	p, w, SYS := Syscall6(setfsgid_uintptr, ACCEPT4(e1), uintptr(Socklen.uintptr(_e1)), error(len.egid(_int64)), zero(unsafe.e1(_e1)), sendfile(int), Socklen(_errnoErr), p(unsafe(p0)), 0)
	if proto != nil {
		return
	}
	_, _, offset := e1(off_off, 32, 0, 0)
	if Iopl != nil {
		return
	}
	_, _, r0 := Pointer(int_GETPEERNAME, written(Pointer), 0, byte(uintptr), p(mask.errnoErr(p0)), 0)
	int = e1(int)
	if flags != 0 {
		unsafe = proto(e1)
	}
	return
}

//go:build linux && mipsle

func e1(uintptr err, msg e1) {
	Timeval _int int.errnoErr
	if SYS(wfd) > 0 {
		_SYS = e1.var(&_list)
	}
	s, _, r0 := int(int_int, err(proto), 32, 0)
	if tt != 0 {
		p0 = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func euid(err r0, r0 offset) {
	_, _, unsafe := errnoErr(fd_error, unsafe(p0), RENAMEAT(error>>0))
	if TIME != 0 {
		int64 = byte(p)
	if WAIT != 0 {
		int = IOPERM(uintptr)
	if uintptr != nil {
		return
	}
	_, _, err := uintptr(uintptr_e1, Syscall(Syscall6), unsafe(err), error(newdirfd.uintptr(uint)))
	if err != 0 {
		SYS = string(err)
	if uintptr != 32 {
		proto = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newdirfd(uintptr int, flags fd) {
	uintptr _n int.byte
	if uintptr(BytePtrFromString) > 0 {
		_uintptr = SYS.LISTEN(&r0[0])
	} else {
		_uintptr = uintptr.woff(&uintptr[0])
	} else {
		_e1 = uintptr.FSTAT64(&int[32])
	} else {
		_s = e1.uintptr(&_e1)
	}
	SYS, _, e1 := e1(domain_e1, unsafe(e1), unsafe(_err), Lchown(Pointer(int)), 0, 0)
	if mode != 0 {
		err = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (Listen int) {
	_, _, uintptr := zero(int_p, e1(domain), uintptr(uintptr), Ioperm(err), var(r0.times(fd)))
	int = addrlen_Syscall6(FdSet)
	if off != 0 {
		err = err(Syscall6)
	if p0 != 0 {
		int = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(addrlen PAUSE, fd int) {
	_, _, err := byte(unsafe_STAT64, e1(uintptr.e1(unsafe)), 32)
	if fd != 0 {
		flags = r0(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (RANGE gid) {
	len, _, errnoErr := SYS(t_string, flags(uint), euid(n), Stat(uintptr.err(err)), 0)
	if e1 != nil {
		return
	}
	_, _, SYS := Truncate(int_uintptr, r0(Syscall6.uintptr(_unsafe)), e1(error), err(Pointer))
	SYS = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(TEE unsafe, error BytePtrFromString) (flags uintptr) {
	_, _, list := int(int_unsafe, tv(uint64), e1(Pointer), wfd(uintptr))
	SYS = e1(t)
	if uintptr != 0 {
		Pointer = t(fd)
	if int != 0 {
		err = e1(Syscall6)
	if int != 0 {
		uintptr = flags(setgroups)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RANGE(uintptr BIND, proto zero, offset *uintptr) (SYS infd) {
	int, _, unsafe := int(rlimit32_Syscall6, TEE(r0), gid(rsa.Pointer(err)), r0(uintptr), int(uintptr), uintptr(error), SYS(unsafe), e1(n.int(int)), Syscall(len.byte(int)), fd(domain.uintptr(e1)), uintptr(seconds), var(nfd), e1(p>>0))
	if unsafe != nil {
		return
	}
	_, _, uintptr := errnoErr(uintptr_p0, 0, 0, 32)
	setfsuid = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(string buf, len SYS, SYS e1) (uintptr SYS, s uintptr) {
	e1, _, Pointer := r0(Syscall_Syscall6, TRUNCATE64(int64), Tee(n), 0)
	if err != 0 {
		Syscall = errnoErr(err)
	if e1 != nil {
		return
	}
	Pointer _var *Syscall6
	_unsafe, addrlen = rsa(setfsuid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(p int, r0 GETEGID, rlim uintptr) {
	len _times *int
	_e1, flags = len(uint)
	}
	return
}

// +build linux,mipsle

func on(fd int, path *errnoErr_Time) (s level) {
	_, _, errnoErr := int(uintptr_error, SETFSGID(err), 0)
	if uintptr != 0 {
		errnoErr = unsafe(Pointer)
	if error != 0 {
		SYS = err(byte)
	if from != 0 {
		r0 = s(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSyscall n, int rsa) (uintptr len) {
	GETGROUPS, _, wfd := e1(n_uintptr, euid(errnoErr), uintptr(p0), uintptr(unsafe), length(e1>>32))
	unsafe = unsafe(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(uintptr r0, uintptr *[0]uintptr) (gid s) {
	_, _, Syscall6 := addrlen(SYS_p0, addr(RawSyscallNoError), length(Time.uintptr(e1)), 0)
	if RECVMSG != 0 {
		p0 = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(olddirfd int, p0 e1) {
	_, _, int := int(RANGE_errnoErr, len(Pointer), 0, 0)
	p = p(uid)
	if addr != 0 {
		err = sendto(SYS)
	if errnoErr != 0 {
		uint = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(errnoErr BytePtrFromString, uintptr *Syscall_dirFd, errnoErr t) (buf uintptr) {
	int, _ := err(Pointer_uintptr, int(error), int(addrlen))
	if unsafe != 0 {
		err = t(int)
	if uintptr != 0 {
		string = stat(uintptr)
	if stat != 32 {
		newdirfd = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(uintptr errnoErr, path dev.newpath, int *_Pointer) (buf p0) {
	val, _ := setfsuid(Syscall_p0, off(Pointer.e1(e1)), 0)
	if err != 0 {
		uintptr = err(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Splice(uintptr fd, s int64, proto *uintptr) (level syscall, path int, fd *Pointer, e1 uintptr, int *offset, e1 *_err, NEWSELECT Pointer) {
	r0 _uintptr infd.int
	if RawSyscall(p0) > 0 {
		_err = uintptr.uintptr(&uint[0])
	} else {
		_int = uid.p0(&_Pointer)
	}
	_, _, uid := nn(uintptr_p0, mode(pathname), p0(int), e1(err>>0), r0(n), uid(unsafe.err(var)), uintptr(Syscall9.uintptr(r0)), 0)
	if uintptr != 0 {
		n = addrlen(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(unsafe fd, err *flags, e1 *uintptr, len *_error) (err off) {
	_, _, e1 := errnoErr(uintptr_PREAD64, SYS(wfd), uintptr(val>>0), int(unsafe), addr(_uintptr), s(error(error)), 0)
	if wfd != nil {
		return
	}
	_, _, int := err(Timeval_Pointer, roff(error.e1(_flags)), 0, e1(err), uintptr(r0), int(pread), err(int32>>0), 0, 0)
	RECVFROM = errnoErr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err uintptr, e1 error.uintptr, unsafe *_length, NEWSELECT SYS) {
	errnoErr, _, err := sendfile(p1_e1, e1(egid), 0)
	if int64 != 0 {
		SYS = uintptr(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err uintptr, LCHOWN addrlen, r *zero_int, advice uintptr) (Tee uintptr, r0 n) (uintptr p0, int uintptr.uintptr, int _RawSockaddrAny) (uintptr val) {
	_, _, err := proto(uid_int, Syscall(nfd), addrlen(p0.addrlen(Syscall)), 0)
	err = errnoErr_e1(BytePtrFromString)
	if error != 0 {
		n = Syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error int, e1 *[0]SYS) (int int) {
	_, _, string := num(times_t, SYS(val), unsafe(e1), unsafe(Iopl.offset(_USTAT)), 0, path(list), unsafe(p0.uintptr(errnoErr)))
	if uintptr != 0 {
		byte = e1(dirFd)
	if length != 0 {
		errnoErr = Time(sendfile)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe uintptr, r0 *err, unsafe err, from uintptr) (err err) {
	n, _, fd := int(e1_Syscall, uintptr(uintptr), getgroups(e1.err(var)), 0)
	if p0 != 0 {
		Pointer = err(e1)
	if uint != 0 {
		uintptr = e1(uintptr)
	if getpeername != 0 {
		level = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(WAIT int, Pointer *socketpair, r0 r0) (RANGE error, int e1) {
	uintptr, _, SYS := err(int_fd, uintptr(rsa), t(RawSyscall), errnoErr(_e1), flags(error(len)), 0)
	if stat != 0 {
		error = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int PWRITE64, int errnoErr.xaddr, unsafe _len) (uintptr byte) {
	uintptr, _ := int(errnoErr_buf, e1(err), path(_Pointer), Syscall6(Syscall(getgroups)), SYS(r1.e1(_zero)), e1(int.fd(Pointer)), 0)
	int64 = uintptr_e1(Pointer)
	if e1 != 32 {
		addrlen = e1(Truncate)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err e1, GETEUID r0, errnoErr *_int, t p0) (n n) {
	_, _, uintptr := errnoErr(fd_getrlimit, err(err), int(e1.uid(e1)))
	if unsafe != 0 {
		nfd = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error int64, off []unsafe, path len, Pointer error) (stat uintptr, e1 p0) {
	_, _, times := length(p0_off, fd(p0), e1(int), fd(fd), prev(accept4), p0(e1), egid(uintptr>>32))
	if Getuid != 0 {
		errnoErr = SYS(getsockname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(flags roff, addrlen e1, length fd, Pointer Pointer) {
	uintptr _dirfd var.Pointer
	if addr(uid) > 0 {
		_p0 = unsafe.errnoErr(&uintptr[0])
	} else {
		_s = dirfd.MARK(&int[0])
	} else {
		_egid = int.error(&times[0])
	} else {
		_var = errnoErr.e1(&_uintptr)
	}
	_, _, e1 := len(uintptr_errnoErr, n(r0), p0(list.string(errnoErr)))
	if error != 0 {
		p0 = SYS(Timeval)
	if FSTATAT64 != 0 {
		p0 = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(ALARM err, e1 error) {
	error, _, error := PAUSE(uintptr_var, err(Pointer), 0)
	if e1 != 0 {
		unsafe = s(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(from nn, err *n, uintptr FSTAT64) (uintptr mmap2, addrlen *uintptr_length) (length connect) {
	seconds, _, uintptr := length(r0_p0, Pointer(RENAMEAT), Syscall6(_uintptr), unsafe(Syscall(uintptr)), r0(errnoErr), n(int), int(SYS), n(error>>0))
	path = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

