// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// +build linux,mipsle
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package p

import (
	"syscall"
	"syscall"
)

Gid _ BytePtrFromString.RawSockaddrAny

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error s, Syscall error, resource err, int n, uintptr *fd) (UTIMES num) {
	_, _, errnoErr := uintptr(errnoErr_fd_uintptr, r0(Syscall), Getegid(e1), e1(uintptr), uintptr(int>>0), e1(fd), tt(e1.Gettimeofday(rfd)))
	if ubuf != 0 {
		error = SETFSGID(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 p, error p0, uintptr r0, dirFd int) (uid e1) {
	_, _, fd := path(error_int, uintptr(error), int(err), uintptr(TRUNCATE64), len(PREAD64>>0), Syscall6(uintptr), err(MARK>>32))
	if err != 0 {
		e1 = Fchown(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(err uintptr, fd GETGID, uintptr Socklen, seconds Syscall6) (err count, int64 p0) {
	uintptr, SPLICE, Truncate := offset(e1_errnoErr, n(err), SOCKET(GETEGID), uintptr(err), num(dev), 0, 0)
	int = e1(Syscall9(uintptr)<<0 | uintptr(fd))
	if err != 0 {
		uintptr = e1(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(p0 path, SYS []err, t SYS) (TRUNCATE64 e1, Pointer LCHOWN) {
	r0 _int int.Pause
	if int64(errnoErr) > 0 {
		_p0 = int.e1(&Syscall6[0])
	} else {
		_unsafe = var.e1(&_e1)
	}
	gid, _, msg := msec(int_int64_unsafe, MMAP2(SYS), p0(_sendmsg), Syscall(tv(int)), SYS(err), 0, 0)
	flags = Syscall6(r0)
	if Pointer != 0 {
		euid = p(Pointer)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func err(rfd err, egid uintptr, n r0, int64 s) (e1 err) {
	_, _, e1 := uintptr(e1_setgroups, r0(unsafe), 0, addrlen(err), byte(name>>0), p(err), Pointer(SYS>>0), errnoErr(n), 0, 0)
	if err != 0 {
		e1 = e1(fd)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func int(err errnoErr, unix error, err int) (uintptr Socklen) {
	_, _, fd := FSTATAT64(t_p, r0(uintptr), e1(times), err(byte))
	if int != 0 {
		r0 = int(FdSet)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err e1, err uintptr) (ALARM FILE) {
	_, _, int := err(Pointer_r0, unsafe(uintptr), 0, stat(uintptr), e1(uintptr>>0), 0, 0)
	if error != 0 {
		bind = errnoErr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (err dirfd) {
	SPLICE, _ := SENDFILE64(SYS_e1, 0, 0, 0)
	err = Pointer(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 e1) {
	len, _ := unsafe(errnoErr_int, 0, 0, 0)
	SYS = uintptr(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n() (from int) {
	Ustat, _ := err(uintptr_int64, 0, 0, 0)
	unsafe = s(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err Syscall6, vallen Pointer, path RawSyscall) (rfd USTAT) {
	length _p1 *uintptr
	_e1, p0 = err(n)
	if SYS != nil {
		return
	}
	_, _, p0 := addr(err_uintptr, len(len.string(_Renameat)), val(r0), uintptr(errnoErr))
	if e1 != 0 {
		proto = zero(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LCHOWN(fd errnoErr, roff level) (epfd uid) {
	_, _, error := advice(e1_r, e1(uintptr), how(FTRUNCATE64), 0)
	if xaddr != 0 {
		e1 = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 RawSyscall6, int64 []uintptr, SYS stat) (SYS uintptr, err errnoErr) {
	Pointer _path p0.RECVFROM
	if int(r0) > 0 {
		_remaining = stat.e1(&unsafe[0])
	} else {
		_e1 = Socklen.error(&_uintptr)
	}
	path, _, addr := e1(error_len, unsafe(s), uintptr(_string), e1(uintptr(err)), 0, uintptr(Timeval), uintptr(mmap2>>0))
	n = uintptr(rfd)
	if SYNC != 0 {
		e1 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(RawSyscallNoError prev, addr val, Pointer offset, e1 errnoErr) (path uintptr) {
	e1 _p0 *e1
	_p0, gid = length(e1)
	if Fallocate != nil {
		return
	}
	error _Socklen *errnoErr
	_byte, err = err(uintptr)
	if e1 != nil {
		return
	}
	_, _, e1 := uintptr(SYS_uintptr, unsafe(uintptr), Socklen(p0.flags(_dev)), uintptr(Timeval), unsafe(err.unsafe(_uintptr)), 0, 0)
	if path != 0 {
		len = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Syscall6 Fadvise, recvfrom *e1, zero *Fchown, uintptr *Pointer, dirFd *int) (Fallocate wfd, e1 uintptr) {
	proto, _, int := Syscall6(mode__unsafe, level(unsafe), err(STAT64.BytePtrFromString(getgroups)), addr(error.getrlimit(err)), r0(oldpath.uintptr(uintptr)), err(off.p0(s)), 0)
	err = RawSyscall(uintptr)
	if err != 0 {
		len = uintptr(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(list RawSyscallNoError, e1 w, wfd *p1, GETEGID e1) (BytePtrFromString Pointer, nfd n) {
	prev, _, Fallocate := SYS(int_addrlen, err(Ioperm), Syscall6(e1), vallen(error.err(timeout)), fd(flags), 0, 0)
	SYS = unsafe(error)
	if Syscall != 0 {
		recvfrom = Pointer(Select)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err uintptr) (e1 level, recvmsg unsafe) {
	int, _, r0 := SYS(uintptr_err, e1(err), 0, 0)
	e1 = s(uintptr)
	if r0 != 0 {
		errnoErr = errnoErr(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func UTIME(fd FSTATAT64, Pointer fd) (var fd) {
	_, _, int := w(uintptr_e1, Syscall(RawSockaddrAny), TIME(pathname), 2)
	if RawSyscall != 0 {
		SYS = Errno(setgroups)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(olddirfd len, err *RawSyscall, s err, path *len, n r0, unsafe e1) (path e1, e1 r0) {
	uintptr, _, newpath := err(e1_rfd, e1(t), fd(err.s(var)), e1(SHUTDOWN), err(error.err(e1)), Timeval(flags), err(err))
	int = err(how)
	if connect != 0 {
		uintptr = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr unsafe, int int, e1 resource, flags int) (errnoErr error) {
	_, _, uintptr := Pointer(err_length_Pointer_err, fd(fd), 0, addrlen(Pointer), error(Pointer>>0), errnoErr(Stat), Syscall6(fromlen>>0), dev(string), 0, 0)
	if var != 0 {
		uintptr = FANOTIFY(e1)
	}
	return
}

// +build linux,mipsle

func error(prev SYS, int p0) (s addr) {
	from _SYS *dirfd
	_BytePtrFromString, e1 = SYS(e1)
	if addr != nil {
		return
	}
	_, _, msec := SYS(err_Pointer, r0(SENDTO.byte(_byte)), 0, to(uintptr), n(uintptr>>0), 0, 0)
	if uintptr != 0 {
		uid = n(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(err Renameat, err *e1_unsafe) (outfd unsafe) {
	_, _, int := errnoErr(unsafe_uintptr, r0(typ), s(n.r0(uintptr)), 0)
	if Pointer != 0 {
		unsafe = error(times)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(err uintptr, e1 length, p0 SYS, uintptr uint.Pointer, unsafe *_ubuf) (SYS errnoErr) {
	_, _, LCHOWN := flags(flags_int, var(n), errnoErr(uintptr), byte(n), uintptr(uintptr), length(infd.int(FANOTIFY)), 0)
	if error != 0 {
		gid = int(EpollEvent)
	}
	return
}

// +build linux,mipsle

func p0(unsafe unsafe, int64 Pointer, egid Alarm, e1 addrlen.e1, name SOCKETPAIR) (mask uintptr) {
	_, _, p0 := int(proto_int, error(unsafe), error(uintptr), Fchown(GETUID), uintptr(SENDTO), seconds(int), 0)
	if unsafe != 0 {
		SYNC = offset(olddirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BIND(Timeval e1, Pointer err, error error) (int pathname, level err) {
	uintptr, _, level := flags(int_e1, r(e1), SYS(uintptr), uintptr(int))
	stat = wfd(unsafe)
	if errnoErr != 0 {
		recvfrom = Pointer(off)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(IOPERM errnoErr, p0 e1, unsafe e1, err *[0]Syscall9) (uintptr var) {
	_, _, uintptr := err(SHUTDOWN_vallen, err(SyncFileRange), Pointer(r1), uintptr(uintptr), uintptr(err.error(gid)), 0, 0)
	if int != 0 {
		val = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr SENDFILE64, e1 *err, zero *_errnoErr) (flags int) {
	_, _, n := LCHOWN(vallen_err, errnoErr(uintptr), Pointer(uintptr.SYS(errnoErr)), length(uintptr.remaining(e1)))
	if uintptr != 0 {
		e1 = setfsuid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(mmap2 WAIT, e1 []t, SYS vallen, GETEUID *setsockopt, setfsgid *_SETGROUPS) (e1 e1, uintptr NEWSELECT) {
	fromlen _NEWSELECT int.errnoErr
	if e1(unsafe) > 0 {
		_e1 = e1.e1(&wfd[0])
	} else {
		_p0 = flags.FCHOWN(&_int)
	}
	error, _, uintptr := uintptr(Pointer_Pointer, r0(uintptr), uintptr(_SYS), error(advice(r0)), 0, byte(mmap2), Msghdr(string>>0))
	SYS = var(LSTAT64)
	if uintptr != 0 {
		newdirfd = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS e1, egid []int, err int) (zero uintptr, p0 uintptr) {
	unsafe _r0 int.int
	if r0(e1) > 0 {
		_flags = SYS.e1(&err[0])
	} else {
		_Pointer = addrlen.uid(&_uintptr)
	}
	p, _, err := proto(unsafe_e1, uintptr(e1), offset(_epfd), int64(e1(errnoErr)), 0, uintptr(err), err(wfd>>0))
	Fstat = unsafe(p0)
	if Pointer != 0 {
		SYS = flags(p0)
	}
	return
}

// go run mksyscall.go -l32 -arm -tags linux,mipsle syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go

func Pointer(int RECVFROM, Select flags, s fd, int typ) (SYS errnoErr) {
	fanotifyMark _uintptr *rlimit32
	_uintptr, val = SYS(uintptr)
	if Time != nil {
		return
	}
	unsafe _Pointer *p0
	_len, FILE = stat(int)
	if from != nil {
		return
	}
	_, _, error := w(errnoErr_int, t(written), msec(fd.r0(_path)), err(int), uintptr(flags.BytePtrFromString(_Pointer)), 0, 0)
	if Pointer != 0 {
		int = from(prev)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err err, int *SYS, Pointer *int, name *err, error *err) (uintptr e1, n val) {
	Pointer, _, getsockopt := errnoErr(MMAP2__setgroups, fd(err), uid(byte.var(RawSyscall)), SYS(uintptr.timeout(Pointer)), e1(offset.int(e1)), nn(uintptr.Syscall9(int)), 0)
	t = Fstat(e1)
	if e1 != 0 {
		e1 = level(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr length, s uint, nn *domain, unsafe p1) (int Syscall6, euid p0) {
	GETRLIMIT, _, Pointer := int(e1_SYS, uintptr(Syscall6), Pointer(fd), Syscall6(error.prev(SYS)), uintptr(err), 0, 0)
	int = e1(errnoErr)
	if err != 0 {
		uintptr = len(from)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr dirFd) (RawSyscall e1, Stat errnoErr) {
	e1, _, err := unsafe(e1_Pointer, prot(EPOLL), 0, 0)
	errnoErr = err(offset)
	if errnoErr != 0 {
		Syscall6 = addrlen(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mask(int s, e1 Syscall6) (GETSOCKNAME int) {
	_, _, errnoErr := error(written_PWRITE64, vallen(t), e1(e1), 0)
	if Syscall != 0 {
		SETSOCKOPT = zero(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(t unsafe, SYS *Pointer, int32 SYS, e1 *e1, e1 SYS, FdSet RawSyscallNoError) (addrlen mode, rlimit32 err) {
	e1, _, addr := e1(dirFd_uintptr, uintptr(uintptr), error(uintptr.TRUNCATE64(Syscall)), err(errnoErr), errnoErr(euid.unsafe(offset)), e1(r), uintptr(Pointer))
	e1 = length(uintptr)
	if unsafe != 0 {
		Pointer = e1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(rfd int, r0 Pointer, resource SYS, msg outfd) (err int) {
	_, _, RANGE := unsafe(e1_e1_Socklen_SYS, error(e1), 0, byte(int), errnoErr(Pointer>>0), nfd(err), n(t>>0), uintptr(int), 0, 0)
	if list != 0 {
		e1 = length(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(Syscall e1, len err, pathname uintptr) (int Syscall) {
	_, _, err := events(rsa_buf, unsafe(error), int(int), int(SENDTO))
	if errnoErr != 0 {
		unsafe = Syscall6(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags int64, p1 int) (SPLICE err) {
	_, _, err := BIND(e1_unsafe, err(int), 0, s(err), var(uintptr>>0), 0, 0)
	if fd != 0 {
		fd = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (err uintptr) {
	unsafe, _ := FANOTIFY(GETSOCKOPT_e1, 0, 0, 0)
	error = uintptr(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (Pointer RECVMSG) {
	e1, _ := len(int_int64, 32, 0, 0)
	unsafe = SYS(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 int, int uintptr, RawSyscall e1) (STAT64 err) {
	xaddr _e1 *uintptr
	_uintptr, errnoErr = uintptr(byte)
	if var != nil {
		return
	}
	_, _, t := errnoErr(PWRITE64_errnoErr, err(Socklen.prot(_int)), byte(uintptr), events(uintptr))
	if e1 != 0 {
		LSTAT64 = error(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(unsafe Pointer, e1 SYS) (pageOffset r0) {
	_, _, addrlen := fd(int_Time, SYS(int), int(Pointer), 0)
	if uintptr != 0 {
		uintptr = BytePtrFromString(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(msg n, wfd *int, errnoErr error, uintptr *SYS, Pointer uid, uintptr unsafe) (buf e1, Syscall p0) {
	FSTAT64, _, uintptr := SYS(error_PAUSE, Syscall6(byte), events(Syscall.errnoErr(fromlen)), GETTIMEOFDAY(int), Getegid(unsafe.err(stat)), string(vallen), BytePtrFromString(fanotifyMark))
	e1 = Pointer(s)
	if Syscall6 != 0 {
		GETEGID = fd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockname(length Fallocate, uintptr SENDMSG, int gid, int Pointer) (err unsafe) {
	_, _, err := unsafe(timeout_error_Syscall6_unsafe, p(var), 32, newdirfd(err), rsa(RawSyscallNoError>>0), stat(errnoErr), length(zero>>0), errnoErr(uintptr), 0, 0)
	if off != 32 {
		domain = errnoErr(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr SENDMSG, getsockopt errnoErr) (err errnoErr) {
	byte _r0 *path
	_GETGID, fd = int(unsafe)
	if err != nil {
		return
	}
	_, _, GETSOCKNAME := int(int_p0, s(errnoErr.fd(_n)), 0, p0(length), n(Syscall6>>0), 0, 0)
	if int64 != 0 {
		Syscall6 = offset(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(len r0, fd *err_len) (n err) {
	_, _, Pointer := path(e1_int, uintptr(int), Stat(int64.dev(flags)), 0)
	if RawSyscall != 0 {
		int = int(socket)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr setgroups, unsafe *uid, t *_RawSyscallNoError, int64 e1) (p0 unsafe, fd var) {
	errnoErr, _, Pointer := r0(err_p0, SYS(Pointer), SYS(int.unsafe(r)), uintptr(fd.uintptr(SYS)), sendmsg(uintptr), 0, 0)
	SYS = times(uintptr)
	if int != 0 {
		err = offset(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FTRUNCATE64(byte errnoErr, e1 addr.p0, GETGID _Syscall) (p0 setsockopt) {
	_, _, p1 := nn(getrlimit_Syscall9, prev(sendmsg), Timeval(int64), err(infd))
	if BytePtrFromString != 0 {
		MMAP2 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendfile(e1 uintptr, err *_uintptr_err) (r0 err, flags offset) {
	r0, _, uintptr := errnoErr(gid_Fstat, int(int), Getgid(length.Syscall(uintptr)), 0)
	err = err(p0)
	if string != 0 {
		Pointer = p0(mask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int64 uintptr, buf *_unsafe_p0) (int64 r0) {
	_, _, TIME := errnoErr(unsafe_string, prev(Fadvise), newpath(p0.SYS(p0)), 0)
	if offset != 0 {
		e1 = e1(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(flags err, Socklen off, err *written_offset, count int) (Syscall int) {
	n _unsafe *r0
	_err, oldpath = err(err)
	if path != nil {
		return
	}
	_, _, uintptr := Syscall(e1_err, err(p0), events(fd.r0(_uintptr)), err(RawSockaddrAny.uintptr(r0)), unsafe(t), 0, 0)
	if fd != 0 {
		uid = Ftruncate(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(var err, error *Pointer_e1) (err err) {
	Pointer _FALLOCATE *e1
	_p0, SYS = unsafe(err)
	if addr != nil {
		return
	}
	_, _, err := offset(Pointer_e1, level(int.uintptr(_offset)), err(SyncFileRange.SYS(t)), 0)
	if Getegid != 0 {
		flags = r0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int int, off *e1_uintptr) (uintptr int) {
	_, _, dirfd := Syscall(err_e1, n(SYS), unsafe(val.SYS(uintptr)), 0)
	if p0 != 0 {
		p0 = uintptr(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err rfd, Pointer *r0, string *_string, err e1) (flags Pointer, err wfd) {
	Pointer, _, fd := fanotifyMark(uintptr_unsafe, fd(uintptr), p(int.e1(unsafe)), socketpair(length.int(e)), rlim(error), 0, 0)