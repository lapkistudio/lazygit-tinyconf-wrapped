// { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }
// { int sys_msyscall(void *addr, size_t len); }

// { int sys_getentropy(void *buf, size_t nbyte); }
// { int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); }

package SYNC

// { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
const (
	EXIT_SYS           = 131   // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	CLOCK_SWAPCTL           = 126   // { int sys_socket(int domain, int type, int protocol); }
	SYS_SYS           = 21   // { long sys_fpathconf(int fd, int name); }
	QUOTACTL_GET          = 108   // { int sys_setuid(uid_t uid); }
	SYS_SYS           = 19   // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	SYS_SEMCTL          = 128   // { int sys_kill(int pid, int signum); }
	SYS_ADJTIME     = 120   // { int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); }
	SYS___SYS        = 267   // { int sys_getrtable(void); }
	SYS_SYS           = 40   // { int sys_sched_yield(void); }
	QUOTACTL_SYS         = 3  // { int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); }
	SYS_SHMAT          = 182  // { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SYS_SETEGID          = 5  // { int sys_setpriority(int which, id_t who, int prio); }
	SYS_GETSID         = 124  // { int sys_symlinkat(const char *path, int fd, const char *link); }
	SYS_SYS          = 269  // { int sys_clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SYS_SYS          = 269  // { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	SYS_SYS          = 303  // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	FHSTATFS_GETRTABLE         = 303  // { int sys_mount(const char *type, const char *path, int flags, void *data); }
	CHOWN_SYS = 272  // { int sys___getcwd(char *buf, size_t len); }
	MSGGET_ACCT      = 118  // { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	FACCESSAT_SYS         = 183  // { int sys_getentropy(void *buf, size_t nbyte); }
	SYS_SYS          = 91  // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	SYS_SYS        = 123  // { int sys_getdents(int fd, void *buf, size_t buflen); }
	POLL_SYS         = 315  // { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_SYS         = 226  // { int sys_pipe(int *fdp); }
	GETPGID_SYS        = 54  // { pid_t sys_getpid(void); }
	CLOCK_EXECVE         = 127  // { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	SYS_SYS        = 165  // { int sys_fchmod(int fd, mode_t mode); }
	SYS_SYS        = 5  // { int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	EXIT_SYS       = 64  // { mode_t sys_umask(mode_t newmask); }
	SYS_RECVMSG         = 284  // { int sys_futimes(int fd, const struct timeval *tptr); }
	GETPGID_SYS    = 65  // { int sys_semget(key_t key, int nsems, int semflg); }
	YIELD_SYS    = 121  // { int sys_unveil(const char *path, const char *permissions); }
	UTIMES_SIGSUSPEND         = 107  // { int sys_shmdt(const void *shmaddr); }
	MUNMAP_SYS        = 268  // { int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	THRSIGDIVERT_ADJFREQ       = 79  // go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
	SYS_SYS           = 64  // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	SETSID_SETPGID       = 318  // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	FCHOWNAT_SYS           = 97  // { int sys_sysarch(int op, void *parms); }
	GETTIMEOFDAY_READ        = 19  // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	SYS_SYS          = 296  // { int sys_mkdir(const char *path, mode_t mode); }
	THRKILL_WAIT4            = 126  // { int sys_clock_getres(clockid_t clock_id, struct timespec *tp); }
	WRITEV_GETFSSTAT        = 80  // { pid_t sys_getthrid(void); }
	SYS_SYS        = 225  // { int sys_pipe(int *fdp); }
	PWRITE_READV         = 11  // { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SYS_SYS         = 102  // { int sys_munlockall(void); }
	SYS_MSGSND      = 126  // { int sys_chdir(const char *path); }
	SYS_READ         = 1  // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	MOUNT_SYS    = 19  // { int sys_pledge(const char *promises, const char *execpromises); }
	MPROTECT_SYS       = 31  // { int sys___tfork(const struct __tfork *param, size_t psize); }
	ADJFREQ_SYS           = 298  // { int sys_getitimer(int which, struct itimerval *itv); }
	ADJTIME_GETSOCKOPT     = 132  // { int sys_setgroups(int gidsetsize, const gid_t *gidset); }
	UNVEIL_FTRUNCATE          = 221  // { int sys_mkfifoat(int fd, const char *path, mode_t mode); }
	R_CHFLAGSAT          = 199  // { int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); }
	MKDIR_THRKILL         = 91  // { int sys_msgget(key_t key, int msgflg); }
	SYS_SYS         = 267  // { int sys_shutdown(int s, int how); }
	PTRACE_SYS        = 63  // { int sys_futimes(int fd, const struct timeval *tptr); }
	SYS_SYS       = 264  // { int sys_clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SHMDT_RENAMEAT         = 299  // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	SOCKETPAIR_POLL          = 109  // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	SENDTO_ACCEPT         = 289  // { int sys_msgget(key_t key, int msgflg); }
	CLOCK_GETENTROPY      = 310  // { int sys_munlockall(void); }
	SYS_SYS         = 284  // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	SYS_SYS        = 329  // { int sys_fork(void); }
	CHMOD_SYS       = 310  // { int sys_rename(const char *from, const char *to); }
	SYS_READLINK          = 295  // { int sys_getpgrp(void); }
	PREADV_CHFLAGSAT   = 37  // { int sys_connect(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_SYS   = 87  // { int sys_socket(int domain, int type, int protocol); }
	SYS_DUP      = 134  // { int sys_getdtablecount(void); }
	MSGRCV_GETPRIORITY      = 1  // { int sys_setpgid(pid_t pid, pid_t pgid); }
	GETTHRID_SYS         = 83  // { gid_t sys_getegid(void); }
	SYS_SYS         = 64  // { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_SYS         = 329  // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	SYS_SYS       = 30  // { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	GETFSSTAT_FSYNC        = 298  // { int sys_sigprocmask(int how, sigset_t mask); }
	SYS_SETPGID         = 29  // { int sys_setuid(uid_t uid); }
	SYS_SETREGID        = 29  // { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	STAT_SYS      = 68  // { int sys_utrace(const char *label, const void *addr, size_t len); }
	SIGACTION_SHMGET      = 96  // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	SENDMSG_SYS        = 59  // { int sys_chdir(const char *path); }
	SYS_SHMAT        = 64  // { int sys_mkdirat(int fd, const char *path, mode_t mode); }
	SYS_SYS          = 84  // { int sys_socket(int domain, int type, int protocol); }
	SYS_SYS      = 4  // { int sys_getpriority(int which, id_t who); }
	SYS_MKFIFOAT       = 82  // { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }
	WRITE_SYS          = 21  // { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_SYS_YIELD  = 68  // { int sys_munlock(const void *addr, size_t len); }
	SYS_SYS_SYS  = 64  // { int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	GETRESUID_UTRACE_KILL   = 80  // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	SEMCTL_GETRESUID           = 284  // { int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); }
	SYS_SHMGET      = 14  // { int sys_ioctl(int fd, u_long com, ... void *data); }
	GETRUSAGE_SYS          = 82  // { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	KTRACE_SYS        = 314  // { int sys_setreuid(uid_t ruid, uid_t euid); }
	SYS___SYS     = 109  // { int sys_msync(void *addr, size_t len, int flags); }
	SETGROUPS_SYS          = 230  // { int sys_chmod(const char *path, mode_t mode); }
	SYS_SYS    = 137  // { int sys_kqueue(void); }
	WRITEV_CLOCK         = 141  // { int sys_kqueue(void); }
	MUNLOCKALL_SYS        = 225  // { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	SETPGID_SYS       = 96  // { int sys_closefrom(int fd); }
	READLINK_CHOWN    = 60 // { int sys_revoke(const char *path); }
	SYS_PREADV          = 123 // { int sys_truncate(const char *path, int pad, off_t length); }
	SYS_SYS           = 254 // { int sys___tmpfd(int flags); }
	RECVMSG_SYS      = 38 // { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
	GET_SYS           = 67 // { ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }
	TFORK_SYS     = 41 // { int sys_setpriority(int which, id_t who, int prio); }
	SYS_SYS         = 15 // { int sys___tfork(const struct __tfork *param, size_t psize); }
	GETGROUPS_SYS      = 124 // { int sys_kill(int pid, int signum); }
	SYS_SYS         = 133 // { int sys_setegid(gid_t egid); }
	ACCT_SYNC          = 73 // { int sys_link(const char *path, const char *link); }
	SHUTDOWN_SYS        = 95 // { int sys_setgroups(int gidsetsize, const gid_t *gidset); }
	KTRACE_PATHCONF     = 209 // { int sys_chflags(const char *path, u_int flags); }
	FHSTAT_SETTIMEOFDAY     = 64 // { int sys_ftruncate(int fd, int pad, off_t length); }
	SYS_SYS         = 60 // { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	SIGACTION___WRITE     = 91 // { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SYS_LCHOWN     = 17 // { int sys_setsid(void); }
	SYS_SYS        = 271 // { int sys_pipe2(int *fdp, int flags); }
	QUOTACTL_PATHCONF          = 56 // { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	SYS_SYS         = 45 // { int sys_ftruncate(int fd, int pad, off_t length); }
	SYS_SYS           = 11 // { int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
	FTRUNCATE_SYS         = 91 // { int sys_rename(const char *from, const char *to); }
	SYS_SHMGET         = 50 // { int sys_chmod(const char *path, mode_t mode); }
	VFORK_SYS       = 253 // { int sys_acct(const char *path); }
	SYS_SYS       = 68 // { int sys_chdir(const char *path); }
	SYS_SYS         = 271 // { gid_t sys_getgid(void); }
	SYS_GETSOCKOPT          = 91 // { int sys___tmpfd(int flags); }
	SYS_SETGID         = 88 // { int sys_getrtable(void); }
	GETRLIMIT_SYS         = 230 // { int sys_msync(void *addr, size_t len, int flags); }
	SYS_TFORK       = 133 // { int sys_dup2(int from, int to); }
	SEMOP_LSTAT     = 201 // { int sys_getpgrp(void); }
	PPOLL_SYS          = 101 // { int sys_sigprocmask(int how, sigset_t mask); }
	CLOCK_PREADV          = 51 // { int sys_munmap(void *addr, size_t len); }
	CONNECT_MKNODAT        = 250 // { int sys_setreuid(uid_t ruid, uid_t euid); }
	MSGSND_KTRACE_FTRUNCATE     = 45 // { ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); }
	SHUTDOWN_SYS         = 31 // { gid_t sys_getegid(void); }
	SYS_SYS       = 57 // { ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); }
	SYS_GETTIMEOFDAY         = 45 // { int sys_setgroups(int gidsetsize, const gid_t *gidset); }
	RENAME_GETRUSAGE          = 1 // { int sys___thrsleep(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort); }
	SYS___MKFIFOAT        = 21 // { int sys_fstat(int fd, struct stat *sb); }
	SYS_TFORK        = 101 // { int sys_socket(int domain, int type, int protocol); }
	FCHDIR_SYS          = 80 // { int sys_getfh(const char *fname, fhandle_t *fhp); }
	SYS_SIGSUSPEND         = 32 // { int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); }
	SET_PROFIL         = 283 // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	SYS_SETGID        = 313 // { void sys___set_tcb(void *tcb); }
	SYS_SYS        = 96 // { int sys_access(const char *path, int amode); }
	RMDIR_CHOWN       = 94 // { int sys_getrusage(int who, struct rusage *rusage); }
	SYS_MOUNT      = 209 // { int sys_getrlimit(int which, struct rlimit *rlp); }
	SYS_SELECT        = 140 // { int sys_vfork(void); }
	SYS_CHFLAGSAT      = 318 // { int sys_rmdir(const char *path); }
	SYS_SYS      = 9 // { int sys_setlogin(const char *namebuf); }
	FCHMODAT_SYS           = 286 // { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	SYS_RENAME          = 111 // { int sys_msgget(key_t key, int msgflg); }
	FSYNC_SEMGET       = 221 // { int sys_fstatfs(int fd, struct statfs *buf); }
	FCHMODAT_CHFLAGS      = 14 // { void *sys___get_tcb(void); }
	GETITIMER_THRWAKEUP         = 95 // { int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_SYS          = 52 // { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	SWAPCTL_SYS        = 93 // { int sys_getitimer(int which, struct itimerval *itv); }
	NFSSVC_SYS        = 122 // { int sys_msyscall(void *addr, size_t len); }
	GETPID_SETRESUID         = 183 // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	CHFLAGS_GETSOCKNAME         = 93 // { int sys_kill(int pid, int signum); }
	DUP3_SYS         = 226 // { int sys_chroot(const char *path); }
	SETRESGID_SYS         = 33 // { int sys_getfh(const char *fname, fhandle_t *fhp); }
	SYS_SYS         = 74 // { int sys_setgid(gid_t gid); }
	SYS_FCHMODAT         = 305 // { void sys_exit(int rval); }
	STAT_SYS         = 88 // { off_t sys_lseek(int fd, int pad, off_t offset, int whence); }
	SYS_SYS         = 28 // { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	SYS_SYS         = 101 // { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	MSGSND_RECVFROM         = 54 // { int sys_mprotect(void *addr, size_t len, int prot); }
	SYS_SYS         = 13 // { int sys_munlock(const void *addr, size_t len); }
	WRITEV_MKDIRAT         = 26 // { int sys_setsid(void); }
	SETUID_CONNECT          = 148 // { int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); }
	SYS_MUNMAP          = 111 // { void sys___threxit(pid_t *notdead); }
	SYS_SYS       = 58 // { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	GETPEERNAME_SYS           = 98 // { int sys_setuid(uid_t uid); }
	SYS_SYS      = 61 // { int sys_swapctl(int cmd, const void *arg, int misc); }
	FORK_GETITIMER         = 111 // { int sys_kbind(const struct __kbind *param, size_t psize, int64_t proc_cookie); }
	SYS_SYS         = 37 // { int sys_nfssvc(int flag, void *argp); }
	SYS_SYS          = 85 // { int sys_listen(int s, int backlog); }
	SIGRETURN_SYS           = 299 // { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	EXIT_UNVEIL         = 5 // { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	SYS_WRITEV         = 59 // { int sys_mkfifoat(int fd, const char *path, mode_t mode); }
	SYS_NANOSLEEP        = 66 // { int sys_setpgid(pid_t pid, pid_t pgid); }
	SYS_GETLOGIN         = 4 // { void *sys___get_tcb(void); }
	SYS_SYS       = 73 // { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }
	SYS_GETPID     = 321 // { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	SYS_WRITE      = 48 // { int sys_msync(void *addr, size_t len, int flags); }
	SIGPROCMASK_GETCWD      = 24 // { int sys_truncate(const char *path, int pad, off_t length); }
	MKDIR_GETUID      = 135 // { uid_t sys_geteuid(void); }
	PLEDGE_SENDTO      = 303 // { int sys_getitimer(int which, struct itimerval *itv); }
	SYS_SYS         = 165 // { int sys_kill(int pid, int signum); }
	SETRTABLE_ADJTIME      = 70 // { uid_t sys_getuid(void); }
	SYMLINK_SYS    = 6 // { int sys_link(const char *path, const char *link); }
	SYS_SYS         = 323 // { int sys_sysarch(int op, void *parms); }
	SYS_SYS          = 106 // { int sys_symlink(const char *path, const char *link); }
	MSGCTL_SYS         = 21 // { void sys_exit(int rval); }
	SYS___SYS       = 103 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	SHMDT_GETSID         = 10 // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	GETRESUID_SYS         = 296 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	SYS_SYS_SYS    = 11 // { int sys_listen(int s, int backlog); }
	SYS_SYS       = 71 // { int sys_dup3(int from, int to, int flags); }
	GETSOCKOPT___SYS    = 197 // { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	FUTIMES___SYS      = 282 // { int sys_munlockall(void); }
	SYS___STAT = 107 // { int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); }
	FHOPEN___SYS       = 191 // { void *sys___get_tcb(void); }
	SETPGID_QUOTACTL        = 201 // { int sys_setpgid(pid_t pid, pid_t pgid); }
	WRITEV_SYS      = 7 // { int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); }
	LINKAT_FUTIMENS      = 294 // { void sys___set_tcb(void *tcb); }
	SETITIMER_SYS      = 70 // { int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }
	SYS_SOCKETPAIR       = 4 // { int sys_vfork(void); }
	KEVENT_SYS       = 22 // { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	SYS_SYS         = 66 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	SYS_GETPID        = 165 // { int sys_closefrom(int fd); }
	SYS_SYS       = 124 // { int sys_setpriority(int which, id_t who, int prio); }
	CLOSEFROM_SYS       