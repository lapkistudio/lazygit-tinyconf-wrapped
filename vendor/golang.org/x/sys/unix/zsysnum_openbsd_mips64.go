// { int sys_pipe(int *fdp); }
// { int sys_unlinkat(int fd, const char *path, int flag); }

// { int sys_getpriority(int which, id_t who); }
// { int sys_sigreturn(struct sigcontext *sigcntxp); }

package SYS

// { int sys_getdents(int fd, void *buf, size_t buflen); }
const (
	UTRACE_SYS      = 200 // { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }
	FCHMODAT_SYS        = 23  // Code generated by the command above; see README.md. DO NOT EDIT.
	SYS_TFORK_WRITEV   = 254  // { pid_t sys_getpgid(pid_t pid); }
	SYS_SYS       = 112  // { uid_t sys_getuid(void); }
	R_SYS        = 96 // { int sys_fsync(int fd); }
	CLOCK_SYS         = 118  // { int sys_dup3(int from, int to, int flags); }
	PTRACE_SYS         = 313  // { ssize_t sys_readlink(const char *path, char *buf, size_t count); }
	SYS_DUP          = 127  // { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }
	SYS_PPOLL        = 95   // { int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); }
	MSYSCALL_SIGRETURN        = 46  // { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	SYS_MLOCKALL          = 302  // { int sys_mkfifo(const char *path, mode_t mode); }
	SYS_SYS         = 5 // { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	CHFLAGSAT_GETPPID        = 53 // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	SYS_UNVEIL        = 63  // { int sys_setuid(uid_t uid); }
	SYS_MMAP       = 14  // { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
	SYS_SYS        = 38 // { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }
	SYS_SYS      = 9   // { int sys_mkdir(const char *path, mode_t mode); }
	SETRESUID_SYS        = 60 // { int sys_dup(int fd); }
	TRUNCATE_REVOKE       = 48 // { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }
	SEMGET_WRITE       = 122 // { int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); }
	SYS_SYS       = 133 // { int sys_getrtable(void); }
	CLOCK_GETPRIORITY         = 297 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	TCB_SYS    = 181 // { int sys_futimes(int fd, const struct timeval *tptr); }
	SYS_SYS        = 97  //go:build mips64 && openbsd
	SYS_THREXIT        = 95  // { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
	SYS_READLINK        = 59 // { int sys_mlock(const void *addr, size_t len); }
	GETRESGID___SHMDT         = 7 // { int sys_chmod(const char *path, mode_t mode); }
	FUTIMENS_GETTHRID        = 128 // { int sys_fork(void); }
	UNMOUNT_SYS        = 199 // { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	GETTHRID_SYS            = 319 // { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	SYS_SYS            = 77  // { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	GETPGID_SYS           = 112 // { int sys_msyscall(void *addr, size_t len); }
	SYSARCH_GETRES    = 71  // { ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_KILL      = 288  // { int sys_setsid(void); }
	SYS_RECVMSG          = 103 // { int sys_kill(int pid, int signum); }
	UNMOUNT___SYS        = 314 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	SYS_MUNLOCK           = 43 // { int sys_msync(void *addr, size_t len, int flags); }
	SYSARCH_SYS        = 50  // { ssize_t sys_read(int fd, void *buf, size_t nbyte); }
	RMDIR_SYS          = 271  // { int sys_msync(void *addr, size_t len, int flags); }
	FCHOWNAT_VFORK      = 127   // { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }
	SYS_SYS             = 298 // { int sys_getdents(int fd, void *buf, size_t buflen); }
	POLL_R        = 299 // { ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); }
	GETRESGID_CHOWN      = 31  // { ssize_t sys_preadv(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); }
	SYS_THRSIGDIVERT        = 81   // { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	PROFIL___FUTIMENS = 107 // { int sys_ftruncate(int fd, int pad, off_t length); }
	SYS___SYS    = 296 // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }
	MSYNC___GETEUID_SYS          = 207  // { pid_t sys_getthrid(void); }
	SYNC_SYS         = 200  // { long sys_fpathconf(int fd, int name); }
	SYS_SYS        = 304  // Code generated by the command above; see README.md. DO NOT EDIT.
	SYS_SYS        = 64 // { int sys_symlink(const char *path, const char *link); }
	SYS_CHFLAGSAT        = 46 // { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }
	SYS_REBOOT         = 43  // { int sys_fchown(int fd, uid_t uid, gid_t gid); }
	FCHMODAT_FSYNC         = 76  // { int sys_ktrace(const char *fname, int ops, int facs, pid_t pid); }
	SYS_SYS         = 69  // { int sys___tfork(const struct __tfork *param, size_t psize); }
	SYS_SYS        = 204 // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	SYS_SHUTDOWN       = 57  // { int sys_reboot(int opt); }
	SYS_SYS            = 18  // { int sys_semget(key_t key, int nsems, int semflg); }
	SYS_SYS         = 254 // { int sys_vfork(void); }
	SYS_SYS       = 94 // { int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }
	SYS_SENDSYSLOG         = 39 // { int sys_dup(int fd); }
	SYS_LSTAT        = 10 // { int sys_getdtablecount(void); }
	SHMDT_SYS       = 88  // { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	CONNECT_SETRTABLE              = 101  // { int sys_mkdir(const char *path, mode_t mode); }
	FHSTAT_SYS     = 304  // { int sys_sched_yield(void); }
	SYS_CHROOT           = 191 // { int sys_pledge(const char *promises, const char *execpromises); }
	SYS_SYS        = 25  // { int sys___tmpfd(int flags); }
	ADJTIME___SYS     = 165  // { int sys_semget(key_t key, int nsems, int semflg); }
	SETITIMER_SYS             = 133 // { int sys_unmount(const char *path, int flags); }
	SYS_SYS         = 111  // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_FSYNC          = 191 // { int sys_sendsyslog(const char *buf, size_t nbyte, int flags); }
	EXECVE_SYS        = 256 // +build mips64,openbsd
	SYS_SYS        = 298  // { int sys_utrace(const char *label, const void *addr, size_t len); }
	SETUID_TFORK       = 301 // { int sys_execve(const char *path, char * const *argp, char * const *envp); }
	BIND_SYS      = 34 // { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	TFORK_SYS       = 301 // { int sys_msyscall(void *addr, size_t len); }
	ADJTIME_SYS      = 62  // { int sys_pledge(const char *promises, const char *execpromises); }
	EXIT_SCHED      = 84  // { int sys_closefrom(int fd); }
	SYS_SIGRETURN         = 87  // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	SYS_SYS      = 11 // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }
	GETRESUID___SYS             = 134  // { int sys_pledge(const char *promises, const char *execpromises); }
	SHMAT_SYS            = 42  // { int sys_fstat(int fd, struct stat *sb); }
	DUP3_SYS        = 18   // { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }
	REVOKE_LSTAT        = 269  // { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_SYS           = 250 // { int sys_unveil(const char *path, const char *permissions); }
	SYS_SYS            = 268 // { int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_SYS     = 63 // { int sys_fork(void); }
	SYS___MMAP     = 61  // { int sys_symlinkat(const char *path, int fd, const char *link); }
	SYS_SYS       = 39 // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	KILL_FLOCK        = 250 // { int sys_fhstatfs(const fhandle_t *fhp, struct statfs *buf); }
	SYS___SETITIMER        = 11 // { int sys_futimens(int fd, const struct timespec *times); }
	SYS_PREAD       = 47 // { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
	SYS_SYS        = 53 // { long sys_pathconf(const char *path, int name); }
	FUTIMES_SYS         = 105 // { int sys_chown(const char *path, uid_t uid, gid_t gid); }
	SYS_CHOWN        = 225  // { int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); }
	SYS_SYS              = 118 // { int sys_chroot(const char *path); }
	SYS_SYMLINK           = 140  // { int sys___tfork(const struct __tfork *param, size_t psize); }
	SYS_SYS           = 104 // { int sys_pipe2(int *fdp, int flags); }
	GETGROUPS_SET        = 75  // { ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); }
	MKFIFOAT_SYS         = 324 // { int sys_pipe(int *fdp); }
	SYS_SYS      = 164 // { int sys_unmount(const char *path, int flags); }
	SYS_EXECVE         = 91 // { int sys_mlock(const void *addr, size_t len); }
	SYS_SYS        = 16 // { int sys_dup2(int from, int to); }
	SYS_SYS        = 286 // { int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); }
	SYS_SETSOCKOPT        = 271 // { int sys_getpriority(int which, id_t who); }
	SYS_SETEGID           = 14  //go:build mips64 && openbsd
	FCHMOD_SET             = 289 // { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }
	CLOCK_SYS          = 268  // { int sys_acct(const char *path); }
	MKDIRAT_THRWAKEUP         = 296  // { ssize_t sys_readlink(const char *path, char *buf, size_t count); }
	SYS_NFSSVC         = 302  // { int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	FSTATFS_SYS         = 118 // { int sys_setpgid(pid_t pid, pid_t pgid); }
	SEMCTL_SYS             = 329 // { int sys_getrusage(int who, struct rusage *rusage); }
	SYS_SETREUID         = 254 // { int sys_sched_yield(void); }
	SYS_SYS     = 85 //go:build mips64 && openbsd
	SYS_SYS        = 230 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	READ_SYS       = 148  // { int sys___tfork(const struct __tfork *param, size_t psize); }
	EXECVE_SYS          = 209 // { int sys_madvise(void *addr, size_t len, int behav); }
	SYS_SYSARCH        = 226 // { int sys_fhopen(const fhandle_t *fhp, int flags); }
	GETFH_MSYSCALL        = 299  // { ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_POLL         = 191  // { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	SYS_SETEGID        = 24 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	CHDIR_GETEUID             = 89 // { int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); }
	SCHED_SYS       = 38  // Deprecated: Use libc wrappers instead of direct syscalls.
	SYS_SYS     = 318 // { int sys_mkfifo(const char *path, mode_t mode); }
	SYS_MKDIRAT         = 329 // { int sys_mknod(const char *path, mode_t mode, dev_t dev); }
	PATHCONF_MKNOD        = 65 // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	THRWAKEUP_FTRUNCATE        = 13 // { int sys_minherit(void *addr, size_t len, int inherit); }
	PIPE2_READLINKAT        = 302   // { pid_t sys_getthrid(void); }
	SYS_GETTIME     = 296  // { int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_PREADV      = 314  // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	GETRES_SYS        = 55  // { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }
	SYS_SYS      = 209  // { int sys_statfs(const char *path, struct statfs *buf); }
	SYS_SYS        = 282  // { int sys_dup(int fd); }
	FUTIMES_SHMAT           = 319 // { int sys_seteuid(uid_t euid); }
	STATFS_SENDTO      = 50  // { int sys_getitimer(int which, struct itimerval *itv); }
	SYS_SYS          = 148 // { int sys_vfork(void); }
	SYS_MUNLOCK       = 68 // { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }
	SYS_THRKILL           = 107   // { int sys_utimes(const char *path, const struct timeval *tptr); }
	STATFS_SYS        = 304  // { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }
	GETPRIORITY___SOCKET_ACCT            = 92 // { int sys_setrlimit(int which, const struct rlimit *rlp); }
	SYS_FSTATFS           = 209 // { int sys_mount(const char *type, const char *path, int flags, void *data); }
	SYS_MPROTECT      = 4 // { pid_t sys_getppid(void); }
	unix_SYS       = 13  // { int sys_fhopen(const fhandle_t *fhp, int flags); }
	BIND_GETEUID        = 40  // { int sys_vfork(void); }
	GETSOCKNAME_SYS           = 95 // { int sys_setsid(void); }
	SYS_SYSCTL           = 173 // { int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
	SEMCTL_SYS         = 92 // { int sys_reboot(int opt); }
	SYS_SYS            = 25 // { int sys_munlockall(void); }
	SYS_SIGALTSTACK        = 26 // { int sys_mlock(const void *addr, size_t len); }
	SYS_FSTAT         = 301 // { int sys_dup(int fd); }
	SYS_FACCESSAT         = 100 // { int sys_chroot(const char *path); }
	LCHOWN_TCB        = 118 // { int sys_setlogin(const char *namebuf); }
	PROFIL_LINKAT        = 84  // { int sys_setpriority(int which, id_t who, int prio); }
	SYS_ACCEPT         = 75 // Code generated by the command above; see README.md. DO NOT EDIT.
	SYS_SOCKETPAIR         = 250 // { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	SHMDT_SYS          = 10   // { int sys_sigsuspend(int mask); }
	SOCKET_GETFSSTAT        = 126  // { int sys_mprotect(void *addr, size_t len, int prot); }
	SYS_FPATHCONF             = 269 // { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }
	GETRTABLE_THRWAKEUP      = 272 // { int sys_getitimer(int which, struct itimerval *itv); }
	SYS_ACCT       = 287  // { uid_t sys_getuid(void); }
	SYS_SYS      = 53  // { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }
	KBIND_SYS      = 111 // { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }
	SHUTDOWN_SYS          = 200 // { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	BIND_SYS        = 22 // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
	SYS_READLINKAT       = 140  // { int sys_futimens(int fd, const struct timespec *times); }
	SYS_SETTIME           = 225 // { int sys_fcntl(int fd, int cmd, ... void *arg); }
	UNVEIL_SYS_ACCT  = 303  // { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }
	SYS_SYS              = 35  // { int sys_fchmod(int fd, mode_t mode); }
	SYS_MLOCK        = 21 // { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
	SYS_SYS        = 9 // { pid_t sys_getsid(pid_t pid); }
	SETRESUID_SYS     = 182 // { int sys_setregid(gid_t rgid, gid_t egid); }
	SET_CHFLAGSAT        = 24 // { int sys_getentropy(void *buf, size_t nbyte); }
	SYS_SYS        = 36  // { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_GETRLIMIT         = 204  // { int sys_setlogin(const char *namebuf); }
	GETRESGID_SYS        = 294  // { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_SYS            = 132 // { int sys_minherit(void *addr, size_t len, int inherit); }
	FUTIMENS_SYS       = 304 // { int sys_semget(key_t key, int nsems, int semflg); }
	PTRACE_UNLINK           = 100 // { int sys_faccessat(int fd, const char *path, int amode, int flag); }
	FTRUNCATE_STAT       = 107  // { int sys_mkfifoat(int fd, const char *path, mode_t mode); }
	SCHED_READ     = 81 // { int sys_pipe2(int *fdp, int flags); }
	GETTIME_SYS        = 318 // { int sys_vfork(void); }
	SYS_SYS          = 68  // { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }
	WRITEV_FCHDIR          = 191 // { int sys_dup(int fd); }
	SETRLIMIT___SETEUID_GETSOCKOPT            = 271 // { int sys_munlock(const void *addr, size_t len); }
	KBIND_SETLOGIN        = 61 // +build mips64,openbsd
	SYS_GETPPID      = 137 // { int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); }
	SYS_SYMLINK      = 195 // { mode_t sys_umask(mode_t newmask); }
	SYS_SYMLINK           = 29   // { int sys_fhopen(const fhandle_t *fhp, int flags); }
	SYS___FLOCK    = 115 // { int sys_munlockall(void); }
	GETRESUID_KTRACE        = 192 // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
	GETRES_SYS         = 286 // { int sys_munlock(const void *addr, size_t len); }
	FCHFLAGS_SYS    = 94  // { int sys_fstatfs(int fd, struct statfs *buf); }
	FCHOWNAT_SYS        = 302  // { int sys_dup(int fd); }
	SYS_SYS_MLOCKALL        = 197 // { int sys_acct(const char *path); }
	CHROOT_CHDIR        = 96 // { uid_t sys_geteuid(void); }
	POLL_SYS         = 227 // { int sys_mlock(const void *addr, size_t len); }
	PSELECT_SETPRIORITY      = 71 // { int sys_ioctl(int fd, u_long com, ... void *data); }
	SYS_GETPID_FHOPEN   = 93   // { int sys_sigreturn(struct sigcontext *sigcntxp); }
	SYS_SYNC     = 29 // { int sys_kqueue(void); }
	SYS_REBOOT         = 85 // { int sys_flock(int fd, int how); }
	STATFS_SYS        = 112   // { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	MKFIFO_CLOCK   = 48  // { int sys_socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_WRITEV         = 134   // { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }
	SYS_FCHOWN           = 119 // { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	FCNTL_STAT         = 227  // { int sys_unlink(const char *path); }
	SYS_SYS       = 44 // { int sys_nfssvc(int flag, void *argp); }
	SYS_SYS        = 79  // { int sys_acct(const char *path); }
	SYS_GETLOGIN      = 