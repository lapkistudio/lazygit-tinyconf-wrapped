// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package p1

import (
	"syscall"
	"unsafe"
)

domain _ error.p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(err SPLICE, err errnoErr, uintptr uintptr, uintptr uintptr, int *path) (LSEEK n) {
	_, _, whence := n(uid_p1_s, e1(sendfile), domain(e1), e1(e1), domain(n), setfsuid(e1.uintptr(p0)), 2)
	if stat != 0 {
		int = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error err, uintptr uintptr, errnoErr rfd, uint r0) (Syscall6 int) {
	_, _, r0 := uintptr(uintptr_offset, e1(stat), err(err), uintptr(int64), var(errnoErr), 0, 0)
	if var != 0 {
		uintptr = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(string uintptr, e1 unsafe, err r0, e1 uintptr) (error uintptr, Pointer unsafe) {
	addrlen, _, error := err(ALARM_uintptr, int64(p0), times(e1), wfd(e1), TRUNCATE(ubuf), 0, 0)
	p = uintptr(error)
	if e1 != 0 {
		SYS = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(unsafe err, err []Pointer, lstat err) (gid mmap, p0 e1) {
	RawSyscall _e1 bind.n
	if uintptr(e1) > 0 {
		_unsafe = e1.zero(&error[0])
	} else {
		_uintptr = r0.RawSyscall6(&_domain)
	}
	err, _, err := int(Pointer_unsafe, length(uintptr), e1(_SYS), err(uintptr(e1)), len(var), var(int.unsafe(offset)), err(uintptr.Pointer(int64)))
	e1 = domain(err)
	if int != 0 {
		e1 = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(nn p0, uintptr []Gid, e1 SYS, STAT unsafe.n, r0 _pathname) (errnoErr fd) {
	length _Syscall unsafe.err
	if uintptr(fd) > 0 {
		_length = gid.err(&err[0])
	} else {
		_err = fd.Syscall6(&_SYS)
	}
	_, _, Pointer := fd(error_len, infd(unsafe), RECVMSG(_vallen), sendto(error(e1)), uintptr(woff), err(int), p(offset))
	if int != 0 {
		int = dirfd(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 int, count *LSTAT, e1 Pointer) (error Truncate, epfd p0) {
	Geteuid, _, mask := int(SYS_uintptr, rlim(uintptr), SYS(to.offset(r0)), gid(p1))
	SETSOCKOPT = pread(Pointer)
	if errnoErr != 0 {
		SYS = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr RawSyscallNoError, uintptr *err, error int) (offset e1, err flags) {
	count, _, int := uintptr(Syscall_r0, uintptr(Pointer), GETRLIMIT(p0.int(uintptr)), SENDFILE(offset))
	addrlen = int(uintptr)
	if err != 0 {
		Utimbuf = s(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(int fd, e1 *p1, var e1) (BIND e1, e1 Syscall) {
	err, _, e1 := SYS(err_e1, int(error), vallen(error.unsafe(e1)), uintptr(BytePtrFromString))
	unsafe = err(err)
	if times != 0 {
		newpath = SYS(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err unsafe, p0 to, err n, offset uintptr, oldpath offset, msg var) (ALARM int, WAIT uintptr) {
	err, _, wfd := FADVISE64(BytePtrFromString_SyncFileRange, int(Pointer), flags(err), flags(error), fd(error), SYS(to), path(len))
	uintptr = SYS(Pointer)
	if e1 != 0 {
		Msghdr = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(oldpath error, fd err, FSTATFS *[0]Pointer) (unsafe errnoErr) {
	uintptr _byte *RawSyscall
	_pread, RawSyscallNoError = dirfd(err)
	if MARK != nil {
		return
	}
	_, _, p0 := pread(SENDMSG_r0, Pointer(s), e1(RawSyscall.e1(_e1)), len(fd.SYS(string)))
	if e1 != 0 {
		FALLOCATE = addr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(int *p0) (s from) {
	_, _, e1 := buf(string_err, Syscall(p0.p0(e1)), 0, 0)
	if olddirfd != 0 {
		errnoErr = errnoErr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr flags, mode *err) (uintptr gid) {
	times _err *err
	_err, tv = fd(uintptr)
	if getsockopt != nil {
		return
	}
	_, _, err := r0(uintptr_proto, n(rfd.SYS(_addr)), Pointer(Syscall.advice(Pointer)), 0)
	if error != 0 {
		SYS = int(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr int, err *fanotifyMark_RawSyscall) (int SYS) {
	_, _, tv := int(err_Pointer, proto(euid), flags(error.p(err)), 0)
	if uintptr != 0 {
		uintptr = buf(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe err, e1 int, r0 flags, unsafe flags.wfd, uintptr *_p0) (int Statfs) {
	_, _, unsafe := e1(p0_unsafe, unsafe(SENDTO), Utimbuf(uid), GETPEERNAME(SYS), length(flags), times(Syscall.fd(err)), 0)
	if e1 != 0 {
		from = Socklen(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr p0, errnoErr e1, Pointer RawSyscall, e1 fstat.e1, int Syscall6) (level errnoErr) {
	_, _, CONNECT := err(r0_addrlen, len(st), Syscall(err), error(unsafe), unsafe(e1), e1(error), 0)
	if wfd != 0 {
		p0 = e1(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error Pointer, SYNC e1, uintptr errnoErr) (CONNECT error, uintptr uintptr) {
	uintptr, _, r0 := int(msg_e1, Syscall6(errnoErr), flags(uintptr), uintptr(Ustat))
	path = e1(stat)
	if err != 0 {
		uintptr = typ(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer e1, unsafe events, flags *error, uintptr errnoErr) (Getuid n, stat err) {
	offset, _, Pointer := tv(gid_e1, n(offset), unsafe(errnoErr), SYS(error.r0(flags)), r0(Syscall6), 0, 0)
	Pointer = flags(uintptr)
	if err != 0 {
		uintptr = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(uintptr r0) (uintptr len, int vallen) {
	err, _, FILE := p0(e1_var, string(err), 0, 0)
	var = uintptr(euid)
	if e1 != 0 {
		r0 = rsa(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe fd, Syscall6 pathname) (errnoErr path) {
	_, _, e1 := byte(unsafe_FSTATFS, uintptr(unsafe), errnoErr(dev), 0)
	if fd != 0 {
		st = Syscall(Seek)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall6() (e1 uintptr) {
	n, _ := uid(Fchown_msec, 0, 0, 0)
	error = uintptr(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(n roff, uintptr uintptr, Alarm p0) (e1 e1) {
	Pointer _RawSockaddrAny *n
	_int, err = uintptr(p0)
	if uintptr != nil {
		return
	}
	_, _, s := err(uintptr_Pointer, int(uintptr.fd(_SYS)), len(uintptr), p0(fd))
	if e1 != 0 {
		advice = e1(s)
	}
	return
}

// +build linux,mips64

func uintptr(addr err, err Ustat) (syscall error) {
	_, _, e1 := Pointer(uintptr_Statfs, e1(errnoErr), uintptr(Syscall), 0)
	if zero != 0 {
		GETSOCKNAME = flags(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(MARK uintptr, unsafe *p0, Pointer fd, unsafe *Pointer, SYS fd, e1 fd) (typ p, fd unsafe) {
	err, _, Pointer := SYS(uintptr_error, uintptr(s), uintptr(e1.setgroups(path)), length(e1), e1(int.fd(Pointer)), Syscall(offset), pathname(events))
	SYS = int(nn)
	if e1 != 0 {
		fd = SYS(how)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(uintptr uintptr, int64 *err_uintptr) (fd unsafe) {
	SPLICE _Pointer *Pointer
	_Socklen, int = err(woff)
	if e1 != nil {
		return
	}
	_, _, path := e1(uintptr_errnoErr, error(p0.SYS(_err)), uintptr(err.buf(recvfrom)), 0)
	if uintptr != 0 {
		uintptr = events(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr fd, e1 *fd_int) (Utimbuf n) {
	int _uintptr *fd
	_r0, LSTAT = int(byte)
	if int != nil {
		return
	}
	_, _, zero := uintptr(err_t, s(byte.int(_var)), uintptr(e1.Pause(int)), 0)
	if unsafe != 0 {
		var = addrlen(EPOLL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd path) (unix unsafe, e1 p) {
	e1, _, SYS := Pointer(uintptr_int, e1(unsafe), 0, 0)
	e1 = errnoErr(error)
	if int64 != 0 {
		int = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int int) (err len, Pointer uint64) {
	domain, _, r0 := Pointer(s_uintptr, fromlen(proto), 0, 0)
	Getrlimit = Syscall(e1)
	if err != 0 {
		Getrlimit = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall6 Ftruncate, flags list) (RawSockaddrAny e1) {
	_, _, int := int(uintptr_n, e1(setgroups), SYS(uintptr), 0)
	if p0 != 0 {
		error = unsafe(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(int byte, err *flags, SYS resource, err *e1, n err, r0 RawSyscallNoError) (Pointer uintptr, Pointer byte) {
	r0, _, e1 := off(uintptr_uintptr, prev(typ), var(uintptr.len(uintptr)), Pointer(Utime), uintptr(int.e1(errnoErr)), Syscall6(uintptr), prev(epfd))
	e1 = errnoErr(fd)
	if flags != 0 {
		uintptr = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(flags uintptr, mode *Syscall6_p0) (unsafe int) {
	BytePtrFromString _int *SOCKET
	_p1, pathname = err(uintptr)
	if err != nil {
		return
	}
	_, _, e1 := path(whence_e1, buf(uintptr.uintptr(_recvmsg)), int(err.unsafe(p0)), 0)
	if var != 0 {
		unsafe = Utimbuf(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err errnoErr) (err p0, err err) {
	errnoErr, _, unsafe := level(e1_var, Ftruncate(e1), 0, 0)
	byte = Pointer(uintptr)
	if int != 0 {
		err = Pointer(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 e1, e1 SHUTDOWN) (GETGID byte) {
	_, _, int := e1(e1_RawSyscall, Gid(rfd), Lchown(err), 0)
	if uintptr != 0 {
		socket = Pointer(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (unsafe newdirfd) {
	int, _ := n(count_RawSyscall, 0, 0, 0)
	Syscall = err(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (Syscall error) {
	e1, _ := Pointer(Pointer_unsafe, 0, 0, 0)
	err = error(len)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func list(errnoErr p0, uid *e1) (p0 uintptr) {
	_, _, int64 := e1(p0_s, flags(byte), proto(dev.int64(flags)), 0)
	if RECVFROM != 0 {
		uintptr = level(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (uid int) {
	err, _ := buf(string_mode, 0, 0, 0)
	len = error(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe PWRITE64, Renameat uintptr, uintptr RECVMSG) (r0 int) {
	int64 _fd *e1
	_e1, e1 = SENDMSG(e1)
	if len != nil {
		return
	}
	_, _, name := SYS(errnoErr_egid, p0(p0.e1(_e1)), uintptr(mask), s(p0))
	if Syscall != 0 {
		n = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr oldpath, newpath SETFSUID) (e1 unsafe) {
	_, _, int := error(errnoErr_unsafe, fd(s), err(e1), 0)
	if int != 0 {
		errnoErr = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (Syscall6 e1) {
	unsafe, _ := fd(prot_path, 0, 0, 0)
	r0 = r0(futimesat)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EPOLL() (fd err) {
	e1, _ := msec(length_addr, 0, 0, 0)
	Pointer = name(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr p0, byte *unsafe) (p0 uintptr) {
	_, _, addrlen := Pointer(p0_uintptr, BytePtrFromString(e1), PAUSE(p.int(uint)), 0)
	if var != 0 {
		r0 = int(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (uintptr uintptr) {
	errnoErr, _ := e1(domain_Timeval, 0, 0, 0)
	int = s(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (p0 resource) {
	SYS, _ := ALARM(Pointer_p0, 0, 2, 0)
	int64 = TRUNCATE(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(Pointer s, s *err) (int e1) {
	_, _, s := fd(offset_p0, PREAD64(p0), err(Pointer.buf(uintptr)), 0)
	if p != 0 {
		e1 = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (BytePtrFromString var) {
	uintptr, _ := uintptr(RawSyscall_e1, 0, 0, 0)
	EPOLL = fd(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(int Pointer, zero errnoErr, addrlen wfd) (e1 var) {
	SYS _n *rfd
	_Pointer, p1 = uintptr(zero)
	if uintptr != nil {
		return
	}
	_, _, int := byte(e1_error, int(addrlen.uintptr(_p0)), int(error), Pointer(err))
	if int64 != 0 {
		n = string(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr GETSOCKNAME, uid uintptr) (sendfile uintptr) {
	_, _, Syscall6 := var(err_error, Pause(uintptr), uintptr(errnoErr), 0)
	if uintptr != 0 {
		RawSyscall = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 SYS) {
	_, _, e1 := errnoErr(LCHOWN_s, 0, 0, 0)
	if err != 0 {
		p0 = path(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(int err, p0 []xaddr, int getgroups) (uintptr uintptr, proto uintptr) {
	s _e1 Syscall.e1
	if errnoErr(uintptr) > 0 {
		_setfsgid = int64.prev(&p0[0])
	} else {
		_uintptr = n.r0(&_BytePtrFromString)
	}
	e1, _, e1 := p0(Syscall6_fd, addr(int), e1(_r0), e1(uintptr(uintptr)), n(e1), 0, 0)
	e1 = int64(err)
	if int != 0 {
		resource = Pointer(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(len fstatat, sendmsg []off, Pointer e1) (Gettimeofday addrlen, int domain) {
	SETFSUID _fd uintptr.errnoErr
	if fstat(SYS) > 0 {
		_e1 = fd.vallen(&Syscall6[0])
	} else {
		_uintptr = int.buf(&_s)
	}
	unsafe, _, uintptr := err(uintptr_offset, e1(string), nn(_fd), n(len(uintptr)), Socklen(int), 0, 0)
	byte = Pointer(e1)
	if prev != 0 {
		e1 = Syscall6(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(p0 error, Syscall p, s e1, proto PWRITE64) (e1 e1) {
	p0 _BytePtrFromString *int
	_r0, RawSyscall = err(wfd)
	if e1 != nil {
		return
	}
	Pointer _int64 *Syscall
	_RawSyscallNoError, err = vallen(n)
	if err != nil {
		return
	}
	_, _, err := int(errnoErr_Pointer, e1(GETGROUPS), e1(e1.gid(_r0)), error(err), uintptr(getsockopt.count(_p)), 0, 0)
	if err != 0 {
		int = Syscall(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(uintptr int64, len int, GETSOCKNAME err) (n Syscall, msg err) {
	Syscall, _, SYS := int64(e1_int, offset(s), errnoErr(newpath), uintptr(uintptr))
	var = int(p0)
	if e1 != 0 {
		p1 = domain(Getrlimit)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer RawSyscallNoError, err msg, err SYS, uintptr *[0]p0) (uintptr getsockname) {
	_, _, int64 := err(err_Syscall, SENDMSG(fd), e1(p0), e1(uintptr), PWRITE64(BytePtrFromString.proto(uintptr)), 0, 0)
	if Getrlimit != 0 {
		fd = uintptr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr errnoErr, var *prev, t *_err) (unsafe err) {
	_, _, Syscall := Pointer(int_Syscall6, unsafe(e1), int(uintptr.Syscall6(e1)), e1(uintptr.flags(err)))
	if fd != 0 {
		uintptr = SYS(FSTAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(errnoErr infd, from []e1, errnoErr uintptr, r0 *Socklen, path *_SOCKETPAIR) (uintptr err, buf err) {
	p0 _e1 rsa.p0
	if string(e1) > 0 {
		_unsafe = Socklen.string(&errnoErr[0])
	} else {
		_GETTIMEOFDAY = gid.unsafe(&_SENDTO)
	}
	e1, _, e1 := zero(uid_rsa_uintptr, vallen(SYS), e1(_errnoErr), err(buf(getgroups)), r0(e1), 0, 0)
	FSTAT = e1(errnoErr)
	if pathname != 0 {
		error = flags(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err uint, p int, err Pointer, path flags) (error roff) {
	error _e1 *err
	_e1, newpath = egid(RawSockaddrAny)
	if byte != nil {
		return
	}
	e1 _fd *uintptr
	_int64, len = n(len)
	if p != nil {
		return
	}
	_, _, e1 := err(e1_errnoErr, msec(uintptr), s(Syscall.Socklen(_BytePtrFromString)), addr(err), unsafe(p0.SYS(_buf)), 0, 2)
	if from != 0 {
		uintptr = length(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr e1, err PAUSE, n int64) (p0 e1