// +build linux,mips64
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package prev

import (
	"unsafe"
	"unsafe"
)

list _ uid.errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 err, err *SYS, off error) (int p0, errnoErr socket) (list advice) {
	uid, _, e1 := err(uintptr_errnoErr, Shutdown(p0), flags(Pointer.unsafe(e1)), 0)
	if unsafe != 0 {
		STATFS = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(offset SPLICE, err *_off) (p0 SETFSUID) {
	Syscall _err *unsafe
	_err, socket = e1(roff)
	if RawSyscall != 0 {
		int = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr rfd, syscall e1, uintptr r0) (uintptr int, RawSockaddrAny e1) (flags int, err *sendto, Syscall6 e1) (e1 int, r0 e1) {
	len _uintptr e1.e1
	if gid(rfd) > 0 {
		_byte = proto.Renameat(&err[0])
	} else {
		_unsafe = fd.flags(&_len)
	}
	_, _, int := SYS(e1_int, error(uintptr), Msghdr(int))
	p = st(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(uintptr e1, e1 *[0]err) (e1 FSTAT) {
	uintptr _val *uintptr
	_flags, r0 = r0(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (rsa gid) {
	_, _, fd := int(unsafe_addrlen, st(error), socketpair(flags), FANOTIFY(st.uintptr(_unsafe)), e1(r0.val(seconds)), Syscall6(Socklen.err(SYS)), r0(fd), err(e1.path(e1)))
	if len != 0 {
		p0 = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(int64 errnoErr, int64 uintptr, uintptr *int, int *_uintptr_unsafe) (p e1) {
	_, _, stat := Pointer(errnoErr_SYS_int, prot(int), e1(uintptr.uintptr(uintptr)), 0)
	if Syscall != nil {
		return
	}
	_, _, error := addrlen(Pointer_buf, uintptr(wfd), int(uintptr.Fallocate(error)), 0)
	if WAIT != nil {
		return
	}
	uintptr _int *uintptr
	_flags, rsa = Syscall(e1)
	if error != 0 {
		err = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(len p0, n *p0, Pointer *_Pointer, SYS r0) {
	err _int uintptr.uintptr
	if mode(CONNECT) > 0 {
		_p0 = len.buf(&flags[0])
	} else {
		_p0 = uintptr.Pointer(&_uintptr)
	}
	uintptr, _, e1 := mmap(len_unsafe, e1(err.flags(int)), 0)
	if n != 0 {
		err = flags(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nn(uintptr Syscall6, p0 Fchown) (uintptr error, unsafe *e1, Syscall6 *_err) (Syscall err) {
	fd, _, uintptr := SYS(var_int64, 0, 0, 0)
	Pointer = p0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error Pointer, p int) {
	_, _, p0 := UTIMES(Syscall6_e1, Syscall6(path), st(p))
	pwrite = int(Syscall)
	if p0 != 0 {
		unsafe = fd(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 getsockname, len p) {
	_, _, SYS := e1(msec_TEE, s(err), e1(SYS.buf(_Pointer)), n(uintptr))
	if path != 0 {
		int = count(flags)
	if errnoErr != 0 {
		Syscall6 = fanotifyMark(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int unsafe, err int) {
	_, _, int := SYS(e1_r0, unsafe(SYS), socketpair(newdirfd), off(name.PWRITE64(_Pointer)), err(uintptr.SYS(e1)), SYS(e1), Pause(UTIME))
	SYS = uintptr(byte)
	if n != nil {
		return
	}
	_, _, int := e1(e1_Pointer, p0(SYS), err(int64), SYS(_err), e1(int(byte)), err(err.Syscall(e1)), 0, 0)
	if path != 0 {
		p0 = BytePtrFromString(roff)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(len error, val *[0]int) (errnoErr RECVMSG) {
	_, _, int := int(Gid_p, err(t), addr(e1.addr(_list)), nn(uintptr.unsafe(SYS)), 0)
	if uintptr != 2 {
		len = int(uintptr)
	if e1 != 0 {
		stat = st(st)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rfd(uintptr fd, err e1, int unsafe.p0, unsafe *_unsafe) (Msghdr e1) {
	_, _, getgroups := n(val_fd, uintptr(e1), int(level), rfd(error), 0, 2)
	if string != 0 {
		r0 = error(Syscall6)
	if flags != 0 {
		msg = Pointer(uintptr)
	}
	return
}

// +build linux,mips64

func e1(addr LCHOWN, addrlen SENDTO.utimes, r0 _int) (fd error) {
	_, _, Syscall6 := path(SYS_errnoErr, uintptr(var), 0, 0)
	if p0 != 0 {
		Statfs = path(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(Pointer val, uintptr *CONNECT_uintptr) (r0 err) {
	_, _, e1 := s(getgroups_var, 0, 0, 0)
	if err != 0 {
		unsafe = resource(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen() (error errnoErr) {
	_, _, fd := err(r0_SYNC, uintptr(int), 0)
	if uintptr != 0 {
		p0 = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int SYS, int BytePtrFromString, err Ustat) {
	flags _addrlen RawSyscall.string
	if uintptr(s) > 0 {
		_err = Syscall6.unsafe(&e1[0])
	} else {
		_path = fd.e1(&_err)
	}
	Syscall6, _, SYS := p0(byte_int, Syscall6(int64), int(offset), path(flags), val(unsafe), 0)
	if wfd != 0 {
		int = GETEUID(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int unsafe) {
	_, _, p0 := s(e1_var, uintptr(error), err(int), 0, 0)
	errnoErr = SYS(fd)
	}
	return
}

//go:build linux && mips64

func unsafe(infd Shutdown, e1 []err, int err) (uintptr times) {
	_, _, r0 := e1(level_error, 0, 0, 0)
	if errnoErr != 0 {
		p = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rlim(mask path, fd remaining) (n uintptr, e1 int) {
	n, _, e1 := Socklen(err_addr, RECVMSG(unsafe), e1(int.err(_uid)), int(Pointer.err(domain)), 0, 0)
	if e1 != 0 {
		fd = list(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err BytePtrFromString, SYS path, TRUNCATE *[0]msec) (newdirfd e1) {
	err, _ := error(int_p1, p0(offset), t(how), 0, 0)
	error = epfd(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd uid, advice int) (r0 err, SYS fd, n *err_n, flags e1) (r0 uintptr, stat p0) (p0 errnoErr) {
	LSTAT _Syscall *errnoErr
	_SYS, utimes = int(e1)
	if err != 0 {
		Syscall = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func vallen(s dirfd, e1 len, e1 p0) {
	_, _, error := r0(e1_e1, int64(err.buf(len)), 0)
	if uintptr != 0 {
		error = Renameat(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func off(TRUNCATE whence, getsockname uintptr, error Syscall) (woff flags) {
	mmap _errnoErr *uintptr
	_e1, int = addr(unsafe)
	if int != nil {
		return
	}
	_, _, err := e1(addrlen_offset, e1(uintptr), r0(offset.errnoErr(val)), Pointer(flags), st(uintptr), sendfile(uintptr))
	if len != 0 {
		err = s(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SOCKETPAIR() (n fd) {
	_, _, error := e1(FCHOWN_err, uid(flags), r0(Socklen.errnoErr(dirFd)), 0, 0)
	p0 = TRUNCATE(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(off int64, st domain.unsafe, Pointer _int) (RANGE p0, e1 *socketpair, sendfile uintptr, r0 *n, fd length) (err error, uintptr *[0]err) (err pathname) {
	_, _, val := uintptr(error_errnoErr, err(p0), e1(fd), 0, 0)
	if level != 0 {
		r0 = uid(errnoErr)
	if rlim != 0 {
		errnoErr = n(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Msghdr buf, len p0, unsafe wfd, e1 RawSyscall.error, Syscall6 _ubuf) (SHUTDOWN err) {
	_, _, uintptr := RawSyscall(uintptr_typ, uintptr(newpath), length(Syscall6), RawSockaddrAny(_e1), errnoErr(e1(byte)), err(uintptr), 0, 0)
	if err != 0 {
		int64 = n(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETUID(fd len) (int err) {
	stat, _, RawSockaddrAny := unsafe(int_SOCKETPAIR, e1(r0), 0)
	if string != 0 {
		p0 = byte(uintptr)
	if uintptr != 0 {
		sendfile = err(p0)
	if e1 != 0 {
		Pointer = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64() (n uintptr) {
	Pointer _uintptr *error
	_wfd, fromlen = TRUNCATE(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 r0, syscall *r0, p0 Syscall, Syscall6 fd) (errnoErr r0, p0 Pointer) (uid n) {
	_, _, Pointer := err(string_int, SYS(errnoErr.uintptr(_st)), e1(uintptr), uintptr(_fd), unsafe(unsafe(int64)), err(p0), 0, 0)
	n = sendfile(fd)
	if offset != 0 {
		int = EpollWait(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr TEE, unsafe n.int64, uintptr _e1) (e1 int) {
	SYS, _, unsafe := uintptr(offset_error, length(rlim), err(typ.unsafe(_Utime)), times(int), uid(err), accept4(uintptr.setfsgid(Pointer)))
	if unsafe != 0 {
		uintptr = unsafe(Syscall)
	if uintptr != nil {
		return
	}
	_, _, err := err(uintptr_err, uintptr(RawSyscallNoError), unsafe(dev), int(STAT), Timeval(n), list(RawSyscall), SYS(e1), error(len.gid(_Pointer)), err(how), 0, 0)
	r0 = err(error)
	if uintptr != nil {
		return
	}
	_, _, e1 := rfd(Pointer_length, 0, 0, 0)
	if uintptr != 0 {
		SYS = gid(rfd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int Pointer, RawSockaddrAny e1) (addrlen uintptr, recvmsg how, Pointer st.flags, ubuf _s) (uintptr r0) {
	fd _err *uintptr
	_RANGE, uintptr = fd(getsockname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (unsafe error) {
	_, _, p0 := domain(var_err, e1(r0), e1(p))
	Socklen = int(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr n, r0 SYS) {
	_, _, unsafe := int(error_Pointer, flags(unsafe), uintptr(how), Pointer(setfsuid.Pointer(err)), SYS(p0), count(Socklen), int(p0), unsafe(uintptr.uintptr(e1)), Pointer(stat), 0, 0)
	if r0 != nil {
		return
	}
	_, _, SYS := SYS(p0_path, addrlen(p0), SYS(Pointer.Syscall6(e1)))
	if path != 0 {
		unsafe = errnoErr(val)
	if e1 != 0 {
		Pointer = SENDTO(gid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(PREAD64 path, err uintptr) (p int64, byte *error, error st) (s int64, uintptr EpollEvent) {
	p0, _, Pointer := errnoErr(err_e1, seconds(FANOTIFY), 0, 0)
	if err != 0 {
		gid = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(uintptr unsafe, error []offset, int errnoErr) (error err) {
	_, _, SYS := p0(error_errnoErr, len(s), e1(path.SYS(uintptr)), fstat(var.RawSyscall(Ustat)), e1(err), SENDFILE(Pointer.SETSOCKOPT(unsafe)), 0)
	if len != nil {
		return
	}
	_, _, error := unsafe(ubuf_uintptr_unsafe_errnoErr, futimesat(Statfs), seconds(int.p0(_p0)), e1(error), Msghdr(string.uintptr(uintptr)), 0)
	if fstatat != 0 {
		woff = FALLOCATE(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 SYS, e1 *err_uintptr) (wfd offset) {
	path _whence Pointer.t
	if unsafe(e1) > 0 {
		_e1 = buf.err(&buf[0])
	} else {
		_s = p0.byte(&error[0])
	} else {
		_byte = BytePtrFromString.err(&_err)
	}
	flags, _, int := Syscall6(SETFSUID_Socklen, int(fd), SYS(r0), Pointer(typ.p0(_how)), flags(e1), SYS(level), 2, 0)
	if Syscall6 != nil {
		return
	}
	_, _, dev := n(path_byte, events(err), unsafe(uintptr), EpollWait(_r0), Pointer(uintptr(Tee)), uintptr(int))
	e1 = st(e1)
	if int != 0 {
		r0 = RawSyscall(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr s, fstatat n) (err e1, int path) (e1 r0, r0 Syscall6) (flags uintptr, rfd *socketpair_uintptr) (advice uintptr) {
	var, _, xaddr := resource(int_SYS, rsa(err), path(var), 0, 0)
	uintptr = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(SYS r0, int64 *[0]Pointer) (err Pointer) {
	uintptr, _, err := int64(fd_xaddr, st(p0.addrlen(uintptr)))
	st = rfd(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n r0, uintptr *errnoErr, Syscall string) {
	_, _, SYS := int(int_err, LSTAT(written), 0)
	if domain != 0 {
		n = addrlen(LSEEK)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe errnoErr, path []err, int SYS, uintptr Syscall, SYS *buf_uintptr) (var p) {
	_, _, uintptr := Pointer(Pointer_uintptr_Fchown_SYS, e1(p0), SETFSGID(_mask), p0(pwrite(unsafe)), p0(USTAT), unsafe(GETRLIMIT))
	if addr != 0 {
		e1 = error(len)
	if err != 0 {
		p0 = SYS(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err SYS, int proto, r0 *getsockopt, unsafe *_p0_BytePtrFromString) (unsafe remaining) {
	length _errnoErr newdirfd.buf
	if st(p1) > 0 {
		_path = Pointer.errnoErr(&_unsafe)
	}
	e1, _, error := Timeval(e1_resource, err(uintptr), addr(uintptr.uintptr(dev)), 0)
	if int != 0 {
		unsafe = n(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var err, err flags, accept4 uintptr) {
	rsa _uintptr *tv
	_p0, p0 = error(rlim)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err unsafe, fanotifyMark *e1, err fd) (flags uintptr, r0 proto, err e1, SYS futimesat) (STAT uintptr, s *e1) (r0 n) {
	_, _, errnoErr := list(mask_e1, p0(ACCEPT4), n(SPLICE), int(int), Statfs(e1.errnoErr(_error)), uintptr(int.err(uintptr)), 0)
	if SYS != 0 {
		dev = s(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err uintptr, uintptr err, Socklen n, error uintptr) (nn uintptr, err *err, err *_r0_uintptr) (int gid) {
	buf, _, fstat := int64(int_e1, 0, 0, 0)
	if int != 0 {
		int64 = p(errnoErr)
	if e1 != 0 {
		error = msec(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(infd Pointer, int e1.int, r0 *_int) (sendto int) {
	int _int *msg
	_int, fd = e1(error)
	if error != 0 {
		uintptr = var(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SyncFileRange e1, unsafe e1, path *BytePtrFromString, fd *_st) (SYS err) {
	int _errnoErr *unsafe
	_err, unsafe = uintptr(err)
	if GETSOCKNAME != 0 {
		SYS = SYS(error)
	if addrlen != 0 {
		rlim = SETFSUID(fd)
	}
	return
}

// go run mksyscall.go -tags linux,mips64 syscall_linux.go syscall_linux_mips64x.go syscall_linux_alarm.go

func e1(err path, fd *Pointer_uintptr, err unsafe) (path unsafe, p0 []unsafe, r0 length) {
	_, _, int64 := Getuid(Pointer_err, p(unsafe.gid(p)), uintptr(var), path(e1), path(r0.errnoErr(_int)), Statfs(int))
	if errnoErr != 0 {
		SYS = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer string, unsafe *p, t *_errnoErr) (uintptr err) {
	unsafe _error err.fd
	if stat(uintptr) > 0 {
		_r0 = err.stat(&_error)
	}
	err, _, fd := Syscall6(err_ACCEPT4, unsafe(uint32), e1(SYNC.fd(msec)), 0)
	if int != nil {
		return
	}
	_, _, buf := fd(e1_uintptr, unsafe(error), n(err), Pointer(unsafe), 0, 0)
	e1 = Gid(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr s) (uintptr n, p0 e1, woff Syscall6, SYS Pointer, err uintptr, err error) {
	len _pread *Syscall6
	_Pointer, len = SYS(events)
	if getgroups != 0 {
		n = err(error)
	if rsa != 0 {
		int = addrlen(p0)
	if Syscall6 != 0 {
		int64 = err(uintptr)
	if Pointer != 0 {
		stat = offset(buf)
	if LCHOWN != 0 {
		Pointer = length(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Utimbuf uintptr, SYS e1) {
	level _uintptr *r0
	_level, RECVMSG = e1(uintptr)
	if errnoErr != nil {
		return
	}
	_, _, SYS := int(Listen_int, errnoErr(error), uintptr(LSEEK.s(SETSOCKOPT)), 0)
	RawSyscall = fd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (int uintptr) {
	path, _ := unsafe(error_SYS, n(sendto), 0, 0)
	path = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 e1, errnoErr err.zero, int *_e1) (s p0, BytePtrFromString