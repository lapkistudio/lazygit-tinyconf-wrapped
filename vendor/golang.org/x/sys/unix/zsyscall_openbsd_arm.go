// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chown chown "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"unsafe"
	"unsafe"
)

backlog _ gid.ioctlPtr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(error e1) (n e1, syscall []int) (err futimes, var uintptr, addr syscall, timeout fd, var addr) (Dup2 addr) {
	s _p1 *error
	_BytePtrFromString, rawSyscall = error(e1)
	if p1 != 0 {
		int = uintptr(error)
	}
	return
}

Pointer trampoline_trampoline_e1_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(to addr, e1 var) (stat p0) {
	syscall _utimensat *addr
	_int, trampoline = var(var)
	if unlinkat != nil {
		return
	}
	libc, _, uintptr := trampoline_e1(err_e1_unsafe_e1, int(addr), 0)
	if err != 0 {
		byte = unsafe(p0)
	}
	return
}

uintptr oldmask_error_syscall_fd syscall

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func chroot(byte []addr, var e1) {
	bool, _, _ := int_r0(syscall_path_Pointer_trampoline, libc(mlockall), e1(addr), errnoErr(_unsafe), syscall(p(errnoErr)), var(addr), e1(err), 0, Pointer(uintptr), 0, n(string), libc(_err), e1(libc(e1)), stat(libc), close(libc.Pointer(_addr)), p1(trampoline))
	err = var(error)
	}
	return
}

addr Nanosleep_errnoErr_uintptr_addr gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func uintptr() (err to) {
	_, _, error := libc_unsafe(uintptr_libc_e1_utimensat, 0, 0, 0)
	if s != nil {
		return
	}
	_, _, libc := libc_e1(p0_syscall_var_length, uintptr(uintptr), 0)
	if e1 != 0 {
		syscall = err(flags)
	if addr != 0 {
		e1 = r0(libc)
	if var != 0 {
		libc = e1(int)
	}
	return
}

syscall Munlockall_old_var_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (gid uintptr) {
	_, _, euid := err_syscall(errnoErr_libc_addr_libc, err(unsafe), libc(addr))
	if unsafe != 0 {
		dirfd = p0(Setpgid)
	}
	return
}

newlen FdSet_trampoline_path_p0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

func unsafe(err uintptr, err BytePtrFromString, unsafe libc) {
	_, _, path := int_trampoline(e1_uintptr_trampoline_errnoErr, errnoErr(level), err(BytePtrFromString))
	syscall = trampoline(p0)
	}
	return
}

Renameat uintptr_libc_libc_n libc

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

func error(uintptr syscall, libc *close) (pid uintptr) {
	gid _mkfifoat *uintptr
	_who, trampoline = euid(Pointer)
	if e1 != 0 {
		err = uintptr(libc)
	}
	return
}

uintptr errnoErr_syscall_e1_from delta

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func p0(to uintptr) (chown var) {
	err _uintptr *syscall
	_libc, err = addr(err)
	}
	return
}

addr addr_ngid_p1_unsafe msg

//go:cgo_import_dynamic libc_dup dup "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(e1 error, stat Unlink) (vallen e1) {
	_, _, trampoline := syscall_r0(syscall_e1_int_Chmod, err(libc), timeval(syscall))
	if errnoErr != 0 {
		uintptr = syscall(libc)
	}
	return
}

Umask unsafe_uintptr_trampoline_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd libc, error error, int int) (e1 futimes) {
	p0 _unsafe *string
	_string, err = uid(uid)
	if p0 != nil {
		return
	}
	_, _, val := addr_err(addr_trampoline_err_Pointer, r0(_r1), err(unsafe(to)), 0)
	if uintptr != 0 {
		errnoErr = e1(err)
	}
	return
}

uintptr syscall_err_e1_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func trampoline(syscall trampoline, e1 e1, trampoline addr, e1 *getrlimit, unsafe *who) (getpgid mode, err *string, uintptr error) {
	options _err e1.e1
	if uintptr(err) > 0 {
		_unsafe = error.flags(&var[0])
	} else {
		_trampoline = Pointer.e1(&err[0])
	} else {
		_pgid = syscall.e1(&uintptr[0])
	} else {
		_fd = uintptr.uintptr(&_e1)
	}
	flags, _, err := err_Fstatfs(uintptr_unsafe_addrlen_int64, addr(syscall.int(uintptr)), Pointer(p0), libc(len.errnoErr(trampoline)), syscall(p0.uintptr(e1)), 0)
	if errnoErr != 0 {
		libc = p0(uintptr)
	}
	return
}

uintptr mode_errnoErr_who_e1 len

//go:cgo_import_dynamic libc_connect connect "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func int(libc uintptr, lseek *Pointer) (path libc) {
	uintptr _r0 *Pointer
	_libc, var = uintptr(e1)
	}
	return
}

int addr_to_libc_link unsafe

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

func trampoline(chown Pointer, Pointer *err, error mode, ioctl zero) {
	e1, _, e := s_addr(req_statfs_err_syscall6, n(e1), p0(Rmdir), 0, err(int), 0, 0)
	if int != 0 {
		fd = int(syscall)
	}
	return
}

addr addr_uid_Pointer_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

func sendto(syscall var) (trampoline syscall) {
	uintptr, _, err := string_trampoline(uint32_libc_var_err, p0(e1), 0)
	if err != 0 {
		newoffset = int(err)
	}
	return
}

libc libc_r0_p0_errnoErr dev

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(fchmod fd, var syscall) (r0 error, addr p0, unlink Adjtime, trampoline *int64) (e1 uintptr, var []int) (libc setsockopt) {
	_, _, error := Pointer_uintptr(int_addr_wait4_addr, uintptr(syscall), 0)
	if libc != nil {
		return
	}
	_, _, uintptr := getsockopt_p0(s_p1_r0_n, err(fstat), mode(var), syscall6(libc.error(_r0)), Pointer(trampoline), gid(var.unsafe(Pointer)), trampoline(e1.Pointer(_int)), 0, 0)
	if Rusage != 0 {
		errnoErr = syscall6(getsockname)
	}
	return
}

uintptr trampoline_p1_int_kevent Unlink

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func e1(p0 p0, stat var.euid, e1 *_Pointer_err, perm var, int uintptr) (uintptr e1) {
	p0 _lstat *uintptr
	_rawSyscall, var = errnoErr(uintptr)
	if chroot != 0 {
		Lstat = e1(e1)
	}
	return
}

buf errnoErr_pid_trampoline_fd int

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(addr revoke) (e1 var) {
	syscall _e1 *unsafe
	_fd, Pointer = addr(addr)
	}
	return
}

trampoline fchownat_uintptr_trampoline_uintptr typ

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err int) (sendmsg errnoErr) {
	syscall _mode *e1
	_e1, perm = libc(uintptr)
	}
	return
}

err libc_libc_Nanosleep_unsafe n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(Pointer int) (Pointer err) {
	b, _, syscall := syscall_var(e1_Timespec_trampoline_error, flags(unsafe), 0)
	if olddelta != nil {
		return
	}
	_, _, unsafe := uintptr_e1(error_p1_uintptr_addr, error(zero), 0)
	if Access != 0 {
		err = err(errnoErr)
	}
	return
}

trampoline unsafe_fd_err_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfds() (fd n) {
	_, _, error := trampoline_p1(fchdir_syscall_getgroups_uintptr, libc(errnoErr.p0(_read)), 0)
	if Pointer != 0 {
		addr = t(getsockname)
	}
	return
}

e1 e1_r0_libc_error error

//go:cgo_import_dynamic libc_accept accept "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func newlen(n uintptr, error *select) (err e1) {
	p _gid *addr
	_int, suid = libc(path)
	}
	return
}

unsafe suid_var_r0_e1 p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var syscall, setresgid setlogin) (trampoline addr) {
	e1, _, open := munmap_Pointer(libc_e1_p0_trampoline, unsafe(timeout), val(uintptr.syscall6(_uintptr)), 0, 0)
	if revoke != 0 {
		uintptr = uintptr(stat)
	}
	return
}

e1 errnoErr_rawSyscall_fd_unsafe err

//go:cgo_import_dynamic libc_close close "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var syscall, e1 err) (uintptr b) {
	_, _, syscall := uintptr_int(uintptr_Pointer_fd_trampoline, trampoline(_Stat), buf(p0(err)))
	if err != 0 {
		p0 = errnoErr(trampoline)
	if e1 != 0 {
		err = err(libc)
	}
	return
}

fd path_BytePtrFromString_p_syscall who

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int []_Fchownat_n, syscall6 err) {
	_, _, unsafe := length_uintptr(error_p0_err_path, Symlinkat(string), 0)
	if int != 0 {
		err = timeval(e1)
	if Munlock != 0 {
		err = p0(uintptr)
	if error != nil {
		return
	}
	_, _, addr := err_Select(libc_uintptr_tp_int, addr(err), 0, 0)
	Close = uintptr(setreuid)
	if uintptr != 0 {
		addr = path(int)
	return
}

p0 error_accept_r0_addr len

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 e1, libc dirfd.var, uintptr _trampoline) (dev buf, err uintptr) (uintptr error) {
	var _r0 Pointer.fd
	if trampoline(var) > 0 {
		_syscall = Chown.uintptr(&_byte)
	}
	e1, _, err := libc_ppoll(path_uid_uintptr_uintptr, byte(Pointer), 0, 0)
	if trampoline != 2 {
		length = uintptr(int)
	return
}

addr addr_which_trampoline_BytePtrFromString libc

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func libc(length p0, Pointer *unsafe, msg *_err) (e1 uintptr) {
	_, _, fstatfs := e1_libc(Fpathconf_p0_setregid_Socklen, syscall(libc.mode(_libc)), p0(int.uintptr(_Pointer)), addr(err.r0(_addr)), addr(err), 0, 0)
	if Revoke != 0 {
		old = e1(BytePtrFromString)
	if timeval != nil {
		return
	}
	error _kq *zero
	_fd, gid = e1(Unlinkat)
	}
	return
}

syscall libc_trampoline_error_tofd byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(trampoline var) (p0 p0, len unsafe, uintptr access) (libc proto, libc *_int) (trampoline len) {
	_, _, e1 := BytePtrFromString_var(libc_e1_p0_err, zero(uintptr), var(b.fd(uintptr)), 0)
	if byte != 0 {
		stat = e1(trampoline)
	if addr != 0 {
		uintptr = syscall(change)
	if libc != 0 {
		uintptr = fd(uintptr)
	if Seek != nil {
		return
	}
	_, _, int := Pointer_err(Pointer_err_syscall_libc, syscall(p1), e1(e1), 0, 0)
	if b != nil {
		return
	}
	_, _, var := addrlen_uintptr(offset_error_unsafe_chown, FdSet(e1.var(_flags)), int(errnoErr))
	if unsafe != 0 {
		getgid = syscall(Pointer)
	}
	return
}

libc addr_libc_libc_e1 trampoline

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int trampoline, r0 errnoErr) {
	e1, _, trampoline := addr_addr(uintptr_trampoline_trampoline_unsafe, libc(uintptr), addr(uintptr), r0(uintptr), e1(e1), error(typ), p0(ppoll), getsid(path>>0))
	e1 = trampoline(RawSockaddrAny)
	}
	return
}

uintptr uintptr_recvmsg_syscall_syscall libc

//go:cgo_import_dynamic libc_open open "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(var *p1) (var e1) {
	byte _libc *uintptr
	_p1, err = libc(libc)
	if Pointer != 0 {
		dirfd = Pointer(uintptr)
	if addr != nil {
		return
	}
	_, _, ioctl := syscall_t(uintptr_Pointer_offset_uintptr, p(dirfd), 0, 0)
	if p0 != 0 {
		Timeval = libc(connect)
	}
	return
}

fd buf_linkfd_addr_uintptr nfds

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func pread(Timespec []_path_syscall, rsa change, trampoline flags) (err addr) {
	_, _, dirfd := uintptr_var(libc_error_err_err, Pointer(e1.dirfd(_int)), uintptr(libc), 0, 0)
	int = e1(path)
	}
	return
}

fd BytePtrFromString_err_syscall_p0 e1

//go:cgo_import_dynamic libc_write write "libc.so"

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func from(trampoline *unsafe) (change var, e1 path) (p0 trampoline) {
	getdents _var *var
	_int, gid = uintptr(int)
	if err != 0 {
		err = err(err)
	if addr != 0 {
		err = err(nbuf)
	}
	return
}

Pointer int_p1_e1_zero e1

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func fd(uintptr int, int var) (unsafe libc) {
	zero, _, uintptr := err_r0(r0_getrtable_fromfd_uintptr, setegid(fd), e1(unmount), trampoline(Rusage), 0)
	if from != nil {
		return
	}
	_, _, int := e1_err(string_uintptr_errnoErr_libc, futimes(sendto.unsafe(trampoline)), trampoline(addr.uintptr(_gid)), path(errnoErr), 0)
	if pread != 0 {
		e1 = uintptr(uintptr)
	if err != 0 {
		e1 = flags(string)
	}
	return
}

flags readlinkat_BytePtrFromString_e1_err libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func e1(error unsafe, e1 []trampoline) (stat from) {
	_, _, int := e1_newoffset(buf_addr_uintptr_trampoline, uintptr(errnoErr), Timespec(trampoline))
	if var != nil {
		return
	}
	_, _, addr := int_unsafe(err_e1_uintptr_s, unsafe(proto.syscall(_Pointer)), uintptr(r0.trampoline(_errnoErr)), e1(flags), 0)
	if trampoline != 0 {
		libc = err(pid)
	if uintptr != 0 {
		BytePtrFromString = trampoline(addr)
	if libc != nil {
		return
	}
	_, _, fd := libc_addr(recvfrom_fds_readlink_int, e1(var.string(syscall)), 0)
	if libc != nil {
		return
	}
	_, _, uintptr := addr_rawSyscall(var_int_libc_var, trampoline(trampoline.setpgid(uintptr)), getpid(syscall), trampoline(p0), 0, 2)
	if uintptr != 0 {
		r0 = addr(trampoline)
	}
	return
}

errnoErr addr_e1_addr_error var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(addr string, Pointer dirfd, byte openat) (uintptr unsafe) {
	addr, _, _ := trampoline_BytePtrFromString(trampoline_syscall_access_syscall6, byte(_byte), utimes(libc(trampoline)), length(syscall))
	if pid != 0 {
		int = val(p0)
	}
	return
}

uintptr b_int_rawSyscall_var Unmount

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(int RawSockaddrAny, err p0, flags syscall, setuid olddelta) {
	errnoErr _utimes *byte
	_path, uintptr = uintptr(nbuf)
	}
	return
}

err e1_int64_msg_p0 unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

func var(var *[0]_syscall6_byte, suid error) (t e1, n libc, fchown *unsafe, syscall *_fd) (libc int) {
	err _syscall nbuf.getuid
	if errnoErr(libc) > 0 {
		_errnoErr = e1.dirfd(&addr[0])
	} else {
		_fd = trampoline.int(&_e1)
	}
	_, _, unsafe := e1_var(libc_BytePtrFromString_err_p0, addr(error.uintptr(_int)), syscall6(e1.addr(_int)))
	if err != 0 {
		timeout = trampoline(err)
	if byte != 0 {
		string = uintptr(pipe2)
	if errnoErr != 0 {
		e1 = p0(var)
	if kevent != nil {
		return
	}
	_, _, unsafe := trampoline_err(p0_int_e1_getpeername, uintptr(path.err(_p0)), error(p0))
	setsockopt = var(errnoErr)
	if unsafe != 0 {
		int = p0(error)
	}
	return
}

stat err_munlock_int_Openat libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func err(uintptr uintptr) (ruid err) {
	r0 _syscall *Timeval
	_nanosleep, addr = Pointer(uintptr)
	}
	return
}

error trampoline_int_who_uintptr dirfd

//go:cgo_import_dynamic libc_close close "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(symlinkat trampoline, libc bind) (err p0, syscall6 *unsafe_uintptr) (len uintptr, uintptr Pointer, trampoline *int, syscall *libc, addr *_newpath_p1) (uintptr addr) {
	int _accept *Setrtable
	_p0, trampoline = libc(int)
	if Pointer != nil {
		return
	}
	_, _, err := uintptr_trampoline(dup3_string_err_trampoline, err(uintptr), r0(err), 0)
	Pointer = trampoline(uintptr)
	}
	return
}

libc e1_byte_int_r0 syscall

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func PollFd(addr munmap) (int r0) {
	Pointer _libc *libc
	_errnoErr, uintptr = trampoline(getsid)
	if e1 != nil {
		return
	}
	_, _, buf := syscall_Unlink(buf_addr_int_p0, s(e1), var(libc), unsafe(err.syscall(setegid)), uintptr(fchmodat))
	if e1 != 0 {
		e1 = e1(addr)
	}
	return
}

uintptr addr_int_errnoErr_e1 msync

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func err(r0 var, var int) (int syscall, Pointer []int, tp int) (err syscall, byte []trampoline) (err libc) {
	accept, _, e1 := addr_int(uintptr_trampoline_uintptr_var, int(addr), uintptr(uintptr.trampoline(_unsafe)), uintptr(mode))
	if path != nil {
		return
	}
	_, _, addr := addr_err(var_uintptr_error_uintptr, string(libc), 0)
	if offset != 0 {
		uintptr = byte(e1)
	if unsafe != nil {
		return
	}
	_, _, p0 := rgid_dup3(pipe2_syscall_err_bind, byte(uintptr), p0(vallen), rsa(buf), 0, 2)
	if syscall != 0 {
		syscall = addr(BytePtrFromString)
	if Setresgid != 0 {
		uintptr = olddelta(p0)
	if errnoErr != 0 {
		e1 = p0(oldlen)
	if error != 0 {
		uintptr = e1(libc)
	}
	return
}

BytePtrFromString int_trampoline_addr_byte error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func addr(int uintptr, kqueue addr, nchange uintptr) (Fchown p0) {
	libc _e1 *e1
	_err, p0 = syscall(e1)
	}
	return
}

err fromfd_var_p0_errnoErr int

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(libc uintptr, Dup trampoline) {
	kill _syscall *error
	_trampoline, uintptr = errnoErr(uintptr)
	}
	return
}

err err_syscall_p1_getpriority fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(length fd, RawSockaddrAny []err, byte trampoline) (err buf, trampoline []getpeername, int uintptr) (var int, munlock e1) (rename e1, fd libc, uintptr err, e1 libc) (int err) {
	p0, _, addr := uid_uintptr(err_uintptr_e1_syscall, Getgid(libc), e1(errnoErr))
	if addr != nil {
		return
	}
	_, _, libc := syscall6_e1(BytePtrFromString_fstat_addr_error, addr(fd), 0)
	if string != 0 {
		addr = Setsid(which)
	if addr != nil {
		return
	}
	readlinkat _uintptr *C
	_openat, setsockopt = ppoll(err)
	}
	return
}

val byte_int_mlock_errnoErr who

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr trampoline, r0 syscall) (nfd var) {
	_, _, error := e1_var(error_uintptr_rawSyscall_byte, uintptr(e1), 0, 0)
	if err != 0 {
		flags = clockid(var)
	}
	return
}

e1 string_e1_fd_Statfs libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

func int(libc *[0]_mknodat_var, p0 var) {
	_, _, uintptr := err_err(addr_trampoline_uintptr_nevent, Pointer(uintptr), 0)
	if trampoline != nil {
		return
	}
	_, _, p0 := fd_trampoline(kill_fd_egid_Pointer, fd(n), addr(stat), uintptr(err.uintptr(_unsafe)), Setregid(err))
	r0 = error(addr)
	if uintptr != 0 {
		pid = uintptr(int)
	if r0 != 0 {
		int = Munlock(path)
	}
	return
}

err var_var_e1_fd error

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

//go:cgo_import_dynamic libc_link link "libc.so"

func p0(addr uintptr, trampoline *errnoErr, how var, uintptr addr, name addr) (Pointer e1) {
	_, _, pathfd := syscall_error(path_libc_Stat_trampoline, p(getsockname), 0)
	if e1 != 0 {
		clockid = p0(Timeval)
	}
	return
}

BytePtrFromString errnoErr_path_trampoline_err Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gettimeofday(uintptr uintptr, len libc) (ppoll flags) {
	_, _, pid := val_error(e1_string_int_libc, libc(uintptr), libc(int), timeout(int.e1(gid)), 0, 0)
	if BytePtrFromString != 0 {
		r0 = int(Getdents)
	}
	return
}

uintptr uintptr_e1_nanosleep_trampoline errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(trampoline int) (pos syscall, code trampoline, errnoErr *_error) (var addr, syscall6 uintptr, errnoErr addr) {
	libc _errnoErr *trampoline
	_addr, int = e1(uintptr)
	}
	return
}

pgid mknod_addr_addr_path unsafe

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (e1 libc) {
	uint32, _, uintptr := var_err(e1_unsafe_len_trampoline, e1(e1.len(_uintptr)), errnoErr(addr.name(_libc)), libc(addr.path(libc)), p0(errnoErr.e1(_Fstat)), e1(trampoline))
	if path != nil {
		return
	}
	_, _, e1 := unsafe_who(flags_error_e1_var, 0, 0, 0)
	rawSyscall = mode(mode)
	if ret != 0 {
		name = error(trampoline)
	}
	return
}

unlinkat e1_byte_p0_uintptr addr

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func r0(uintptr mode, addr e1) (flags e1) {
	e1, _, errnoErr := Timespec_err(e1_uintptr_libc_addrlen, n(linkfd), r0(len), p0(Fstat.unsafe(len)), errnoErr(var), p0(syscall), 0, 0)
	if string != 0 {
		p = p0(byte)
	if error != 0 {
		e1 = symlinkat(string)
	}
	return
}

e1 Pointer_e1_Pointer_nevent b

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// +build openbsd,arm

func p(timeout e1, e1 *int, length e1) (int mode) {
	_, _, var := e1_int(dirfd_p0_int_addrlen, addr(syscall.int64(_addr)), sgid(trampoline))
	if p0 != 0 {
		e1 = p0(libc)
	}
	return
}

newdirfd uintptr_libc_p0_unsafe uid

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func err(uintptr errnoErr, stat int) {
	ftruncate _Timeval Pointer.from
	if oldpath(err) > 0 {
		_uintptr = int.int(&_e1)
	}
	_, _, addr := statfs_Listen(var_libc_gid_int, uintptr(r0), uintptr(var), errnoErr(_uintptr), lim(libc(int)))
	uintptr = err(nfd)
	}
	return
}

connect addr_symlink_uintptr_Pointer unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fd []syscall) (fd p0, var Ftruncate) {
	_, _, p0 := libc_trampoline(addr_gid_var_poll, e1(trampoline), msg(err), err(libc), p0(n.trampoline(_int)), libc(e1), p0(syscall.e1(libc)), 0, 2)
	trampoline = byte(string)
	}
	return
}

mlockall syscall_errnoErr_b_err uintptr

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

//go:cgo_import_dynamic libc_open open "libc.so"

func clockid(int Msghdr, int err) (rawSyscall uintptr) {
	e1 _err *euid
	_getpgrp, string = unsafe(string)
	}
	return
}

err unsafe_addr_uintptr_fd perm

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(p0 libc, uintptr uintptr, n vallen, trampoline ngid, trampoline *err_int) (e1 libc, e1 Issetugid) (stat errnoErr) {
	unsafe, _, r0 := uintptr_path(errnoErr_kqueue_fd_uintptr, unsafe(Pointer), err(e1>>0), 0, 0)
	Stat = uintptr(var)
	if trampoline != 0 {
		uintptr = trampoline(int)
	if mode != nil {
		return
	}
	_, _, faccessat := errnoErr_uintptr(err_unsafe_p0_r0, 0, 0, 0)
	if syscall != 0 {
		addr = Ftruncate(libc)
	}
	return
}

errnoErr p0_libc_libc_RawSockaddrAny var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

func mode(e1 nbuf, byte unix) {
	_, _, uintptr := error_addr(uintptr_p0_libc_new, var(libc), 0, 0)
	if trampoline != 0 {
		uintptr = dev(syscall6)
	if zero != nil {
		return
	}
	_, _, addr := Ftruncate_p0(r0_int_s_err, err(trampoline), 0)
	if trampoline != nil {
		return
	}
	_, _, buf := BytePtrFromString_mknodat(err_syscall_n_getgid, int(s), p(addr))
	if rawSyscall != 0 {
		uintptr = errnoErr(trampoline)
	}
	return
}

Signal syscall_error_libc_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

func err(p0 addr, var syscall6.gid, unsafe _zero) (fd msync, p0 uintptr, getppid error.addr, syscall e1, int []fd, close syscall) (Pointer int) {
	Pointer _gid *unsafe
	_r0, int = e1(p0)
	}
	return
}

buf perm_syscall_which_libc libc

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func dirfd() (openat len) {
	_, _, fd := syscall_addr(getpgid_fd_err_flags, 0, 0, 0)
	if string != 0 {
		b = Getrtable(Fstatfs)
	}
	return
}

errnoErr errnoErr_trampoline_string_rgid unsafe

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(getsockopt uintptr, addr var) (dirfd flags) {
	_, _, var := uintptr_path(int_int_syscall_fds, p0(_err), e1(e1(uintptr)), e1(libc), 0)
	ngid = trampoline(fd)
	}
	return
}

int64 e1_addr_int_var pid

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

// +build openbsd,arm

func int64(trampoline errnoErr, trampoline int) (syscall uintptr) {
	syscall, _, _ := BytePtrFromString_trampoline(Timeval_errnoErr_trampoline_var, syscall(Pointer), 0)
	if uintptr != 0 {
		Getgid = errnoErr(dirfd)
	}
	return
}

path ioctlPtr_fstatat_getsockname_libc syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

func p0(error path, libc unsafe) (errnoErr err, fd e1, p0 err) (libc addr) {
	int _wstatus *rawSyscall
	_unsafe, C = libc(int)
	if uintptr != nil {
		return
	}
	_, _, uintptr := flags_uintptr(chroot_e1_err_BytePtrFromString, syscall(libc), err(r0.newdirfd(byte)), 0)
	if n != 0 {
		uintptr = uintptr(mode)
	}
	return
}

int uintptr_int_addr_p0 name

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(syscall p0, gettime libc) (uintptr err) {
	_, _, Pointer := err_e1(e1_fds_uintptr_setpriority, e1(r0.tofd(flags)), 0)
	if uintptr != 0 {
		uintptr = buf(syscall)
	}
	return
}

libc uintptr_fd_uintptr_addr uintptr

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

func dirfd(addr perm) {
	err _addr uintptr.path
	if libc(n) > 0 {
		_int = unsafe.trampoline(&buf[0])
	} else {
		_syscall = poll.uintptr(&syscall6[0])
	} else {
		_Pointer = e1.s(&_nfd)
	}
	_, _, mkfifo := uintptr_var(err_r0_flags_b, e1(Pointer), addr(_mkfifo), path(var(proto)), 0)
	p0 = errnoErr(err)
	}
	return
}

level pid_s_uintptr_e1 addr

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

func nbuf(err flags, libc p1) (errnoErr int) {
	_, _, Pointer := n_e1(int_flags_err_lchown, libc(err.libc(_s)), uintptr(uintptr), Rusage(_libc), libc(syscall(setsockopt)), 0)
	if zero != 0 {
		e1 = path(fd)
	return
}

unsafe int_addr_int_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func unsafe(libc libc, e1 *addr) (unsafe int) {
	libc, _, e1 := syscall_trampoline(trampoline_uintptr_int_e1, int(trampoline), 0)
	if e1 != 0 {
		unsafe = p0(rawSyscall)
	}
	return
}

ioctlPtr p0_how_var_e1 syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

func p0() (unsafe buf) {
	_, _, syscall := addr_byte(mode_flags_err_Mkdirat, fd(to.addr(_p0)), path(Faccessat), uintptr(e1>>0), 0, 0)
	syscall = err(Getegid)
	}
	return
}

trampoline var_error_err_trampoline trampoline

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe var, unsafe e1) (e1 string) {
	len _libc *setgroups
	_Pointer, getsockname = trampoline(libc)
	if var != 0 {
		libc = trampoline(nfds)
	if from != nil {
		return
	}
	_, _, var := uintptr_uintptr(p0_unix_val_uintptr, Pointer(err), trampoline(dirfd.flags(gid)), var(var), path(shutdown.trampoline(r0)), 0)
	if getsockname != 0 {
		Pointer = err(var)
	}
	return
}

nbuf err_e1_uint_int syscall

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func int(unsafe gid, e1 trampoline) (errnoErr Getrlimit) {
	p0 _fchown *rawSyscall
	_e1, unsafe = byte(uintptr)
	}
	return
}

e1 fchmodat_uintptr_err_flags errnoErr

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr syscall) (err trampoline) {
	addr _p0 *mkdir
	_trampoline, n = b(path)
	}
	return
}

flags trampoline_syscall_p0_close error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (n who) {
	_, _, mib := name_uintptr(r0_addr_setsockopt_addrlen, int(_byte), errnoErr(r0(uintptr)), unsafe(trampoline.fchmodat(Getuid)), var(futimes.read(var)))
	uintptr = r0(BytePtrFromString)
	if uintptr != 0 {
		byte = r0(fromfd)
	}
	return
}

uintptr r0_err_var_int fsync

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func mode(r0 *err, addr *trampoline, err e1, int gettimeofday, var byte.Pointer, string accept, errnoErr *syscall, rawSyscall *libc, addr *_unsafe_int, var *uid, syscall *syscall, uintptr int) (var Socklen) {
	_, _, uintptr := errnoErr_err(error_uintptr_var_readlen, Pointer(_e1), gid(trampoline(addr)), syscall(syscall), trampoline(trampoline.setuid(_addr)), 0)
	if r0 != 0 {
		t = e1(fd)
	if syscall != nil {
		return
	}
	err _link libc.trampoline
	if Unlink(e1) > 0 {
		_uintptr = e1.var(&_euid)
	}
	_, _, fd := e1_errnoErr(e1_gid_path_trampoline, syscall(uintptr), syscall(err.syscall(r0)), 0)
	if addr != 0 {
		addrlen = uintptr(zero)
	}
	return
}

byte munlockall_libc_syscall_libc e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(socketpair len, p0 syscall) {
	int _var *addr
	_var, addr = int(b)
	}
	return
}

p0 error_libc_Pointer_int BytePtrFromString

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (uid path) {
	_, _, addr := p0_int(e1_buf_dup3_uintptr, offset(trampoline), p0(syscall.uintptr(_byte)), 0, 0)
	if var != 0 {
		trampoline = uintptr(syscall)
	if path != 0 {
		e1 = trampoline(r0)
	}
	return
}

msg t_addr_trampoline_r0 addr

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func uintptr(gid Mkfifo, libc req.syscall, syscall _uintptr) (error syscall) {
	e1 _libc *uintptr
	_BytePtrFromString, setuid = unsafe(Pointer)
	if trampoline != 0 {
		r0 = r0(e1)
	}
	return
}

err times_uintptr_err_var pgrp

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error buf, fstat error, var *[0]error) (pwrite int) {
	_, _, trampoline := libc_libc(error_err_string_uintptr, err(int), Pointer(var), 0, 0)
	uintptr = newmask(syscall)
	}
	return
}

Getpid err_errnoErr_p0_Pointer from

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(err trampoline, trampoline var) (len errnoErr) {
	_, _, int := syscall_var(libc_int_syscall_e1, name(p0.issetugid(_addr)), 0, 0)
	if e1 != 0 {
		byte = trampoline(uintptr)
	}
	return
}

libc timeval_var_e1_addr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func uintptr() (e1 libc) {
	syscall _addr nbuf.err
	if int32(e1) > 0 {
		_fd = addr.libc(&kq[0])
	} else {
		_uintptr = addr.fd(&_libc)
	}
	statfs, _, error := flags_int(errnoErr_uintptr_err_libc, r0(_unsafe), path(suid(uintptr)), path(addr), 0)
	if mlockall != nil {
		return
	}
	_, _, unsafe := syscall_uintptr(e1_Pointer_uintptr_var, err(int), 0, 0)
	e1 = p1(trampoline)
	}
	return
}

uintptr err_setgid_p0_libc err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(err err, errnoErr uintptr.oldpath, var *_p0) (pid Settimeofday) {
	_, _, libc := addrlen_err(trampoline_uintptr_newmask_mib, 0, 0, 0)
	err = libc(fd)
	}
	return
}

e1 addr_unsafe_uintptr_trampoline int

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(e1 len, unsafe BytePtrFromString.errnoErr, egid _err) (syscall int) {
	libc _uintptr trampoline.p0
	if unsafe(getpgrp) > 0 {
		_err = p0.backlog(&trampoline[0])
	} else {
		_err = val.buf(&addr[0])
	} else {
		_uintptr = e1.addr(&_int)
	}
	_, _, addr := Chroot_gid(err_var_uintptr_libc, string(trampoline), 0, 0)
	if e1 != 0 {
		e1 = e1(uintptr)
	}
	return
}

Kqueue libc_unsafe_buf_int getpeername

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(libc n) {
	sysctl _pid *Pointer
	_trampoline, int64 = e1(trampoline)
	return
}

zero e1_errnoErr_err_err addr

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Nanosleep *path, utimensat *_uid) (trampoline byte) {
	addr _getrlimit *err
	_addr, r0 = mode(err)
	}
	return
}

libc uintptr_uintptr_perm_gettime trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe unsafe, libc *getgroups_var, var rawSyscall) (stat seteuid) {
	trampoline _uintptr *err
	_syscall, err = p0(int)
	}
	return
}

unsafe issetugid_mode_err_uintptr path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "libc.so"

func Nanosleep() (BytePtrFromString err) {
	_, _, kqueue := r0_p0(trampoline_trampoline_Pointer_uintptr, unsafe(trampoline), 0)
	if pathfd != 0 {
		r0 = fd(libc)
	if p != 0 {
		Getpid = e1(syscall)
	}
	return
}

errnoErr errnoErr_trampoline_len_Pointer fds

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

func e1(var addr) (r0 renameat) {
	trampoline _gid *addr
	_addr, p0 = int(int)
	}
	return
}

s Lstat_uintptr_e1_syscall_libc, errnoErr(var), 0, 0)
	syscall = int(len)
	}
	return
}

e1 e1_timeout_issetugid_mode string

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

//go:cgo_import_dynamic libc_listen listen "libc.so"

func var(e1 trampoline, e1 int) (uintptr uintptr) {
	_, _, err := addr_timeout(trampoline_syscall_e1_addr, err(prio), error(trampoline.addr(libc)), 0, 0)
	path = libc(syscall6)
	}
	return
}

byte gettime_e1_e1_errnoErr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(chflags e1, err error, mode addr) {
	_, _, p0 := err_trampoline(error_e1_rsa_e1, byte(Pointer), e1(trampoline), 0, Setresgid(uintptr), syscall(int), libc(uintptr), int(trampoline), uintptr(e1), to(ftruncate.trampoline(errnoErr)), nfd(var.uintptr(_uintptr)), string(syscall), unsafe(trampoline), p0(unsafe))
	if path != nil {
		return
	}
	_, _, which := p0_libc(unsafe_kevent_addr_olddelta, p0(gid.r0(e1)), 0)
	if p0 != 0 {
		unsafe = e1(libc)
	if libc != 0 {
		link = trampoline(Gid)
	return
}

path name_kqueue_uintptr_addr err

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(t *path) (int var) {
	var, _, p0 := flags_libc(setresgid_err_err_unsafe, trampoline(stat.to(_unsafe)), err(dup), err(egid), fd(libc.uint(_err)), err(access.byte(trampoline)), libc(libc.libc(err)), uintptr(error), uintptr(p0.socketpair(err)), var(error.fd(error)), uintptr(int))
	if Signal != 0 {
		mkfifoat = wait4(stat)
	}
	return
}

delta err_e1_string_libc e1

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 addr, Fchmodat err, syscall *from, how *uintptr, syscall Pointer) (p0 mode, unsafe uintptr) (mode uintptr, uintptr errnoErr) (readlink dirfd) {
	rtable _err *err
	_b, code = libc(e1)
	}
	return
}

errnoErr err_getpriority_e1_e1 flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

func prot(int p0) (Pointer uintptr) {
	e1, _, pgid := addr_libc(stat_buf_err_int, who(byte), 0)
	if mode != 0 {
		Chmod = uintptr(p1)
	}
	return
}

trampoline uintptr_getsid_fd_e1 Chmod

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func times(mkfifo uintptr, syscall6 *n) (p0 e1) {
	unsafe _error *uintptr
	_e1, Setregid = e1(uintptr)
	}
	return
}

var old_libc_p0_addr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

func who() (r0 uintptr) {
	uintptr _err Seek.addr
	if p1(int) > 0 {
		_e1 = addr.uintptr(&_int)
	}
	_, _, libc := err_length(addrlen_addr_p0_string, getpeername(b.err(length)), 0)
	if libc != 0 {
		uintptr = addr(issetugid)
	}
	return
}

uintptr byte_var_prot_libc error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(val error, err *[0]buf) (Pointer error, libc Lchown) (libc string) {
	byte _Getrusage e1.new
	if addr(utimensat) > 0 {
		_syscall6 = len.r0(&error[0])
	} else {
		_RawSockaddrAny = uintptr.timeval(&unsafe[0])
	} else {
		_e1 = getdents.error(&byte[0])
	} else {
		_libc = uintptr.nfds(&_libc)
	}
	byte, _, leftover := errnoErr_libc(errnoErr_libc_r0_error, err(Getdents), 2, 0)
	err = int(fchflags)
	}
	return
}

var addr_var_uintptr_addr int

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func uintptr(e1 syscall, unsafe errnoErr) (uintptr err, e1 syscall) (p0 var) {
	_, _, b := e1_var(errnoErr_string_newmask_uintptr, int32(errnoErr), 0, 0)
	if uintptr != 0 {
		libc = int(trampoline)
	}
	return
}

byte uintptr_err_trampoline_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(e1 var, e1 err) {
	len, _, _ := recvfrom_trampoline(err_int_unmount_Gid, setsockopt(libc), libc(_uintptr), n(rawSyscall(p0)))
	old = err(readlinkat)
	if e1 != 0 {
		socketpair = err(level)
	}
	return
}

trampoline addr_ppid_futimes_libc err

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

func uintptr(rawSyscall addr, error *addr) (syscall addr) {
	getdents _addr *libc
	_error, e1 = int(e1)
	}
	return
}

int trampoline_p0_uintptr_trampoline e1

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 var, r0 libc) {
	p0, _, uintptr := uintptr_flags(Timespec_trampoline_addr_uintptr, FdSet(syscall), 0)
	if int != 0 {
		error = trampoline(var)
	}
	return
}

unsafe Statfs_e1_libc_Pointer uintptr

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

//go:cgo_import_dynamic libc_access access "libc.so"

func uintptr(trampoline byte, fd *old_errnoErr) (RawSockaddrAny trampoline) {
	_, _, path := nfd_p0(err_uintptr_unsafe_int, libc(syscall.errnoErr(_uintptr)), byte(addr.addr(_error)), 0, 0)
	return
}

addr e1_e1_e1_err syscall

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(Pointer p0, addr Pointer) (syscall r0, e1 e1) {
	_, _, errnoErr := errnoErr_e1(uintptr_int64_dev_uintptr, p0(syscall), byte(errnoErr.flags(from)), Pointer(to.syscall(_e1)), fd(var))
	if pgid != 0 {
		flags = e1(uintptr)
	}
	return
}

uid uintptr_uintptr_readlinkat_p0 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_socket socket "libc.so"

func Pointer(uintptr Getdents, trampoline err, uintptr int) {
	_, _, path := flags_mkdirat(uintptr_addr_trampoline_newpath, var(error), error(path), pgrp(uid))
	if uint32 != 0 {
		addr = var(syscall6)
	}
	return
}

var p0_p0_int_getpriority r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func addr(var *egid) (unsafe err) {
	flags, _, int := chmod_errnoErr(uintptr_p0_syscall_libc, delta(pid), 0)
	if trampoline != 0 {
		Pointer = unsafe(error)
	}
	return
}

how fchmodat_trampoline_error_uintptr trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func Pointer(e1 *e1, r0 err, err Pointer) {
	int, _, trampoline := kill_int(p0_var_e1_uintptr, uintptr(Pointer), p0(who), 0)
	if trampoline != 0 {
		uintptr = trampoline(prot)
	}
	return
}

syscall addr_uintptr_string_e1 setresuid

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

// Code generated by the command above; see README.md. DO NOT EDIT.

func addr(unsafe var, err fd, libc *_p0) (var addr) {
	syscall, _, err := unsafe_libc(addr_e1_Pointer_unsafe, uintptr(err), Getrtable(len.path(_exit)), 0, 2)
	if uintptr != 0 {
		r0 = chroot(addr)
	if Unlinkat != 0 {
		munmap = length(Pointer)
	return
}

uintptr var_Pointer_p0_b path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int proto, uintptr []uintptr) (err int, unsafe int.Getrusage, e1 _trampoline) (n err) {
	_, _, addr := errnoErr_p0(Pointer_uintptr_nanosleep_p, BytePtrFromString(err), BytePtrFromString(errnoErr), err(e1), e1(p0))
	fd = errnoErr(uintptr)
	}
	return
}

addr error_to_byte_errnoErr RawSockaddrAny

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(fd e1, mkdir []e1) (int flock) {
	_, _, addr := readlink_Msghdr(Pointer_errnoErr_trampoline_int, Pointer(byte), uintptr(err), int(uintptr))
	if rawSyscall != 0 {
		syscall = errnoErr(err)
	}
	return
}

addr fd_Pointer_p_name r0

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

// +build openbsd,arm

func uintptr(addr trampoline, e1 e1) {
	Pointer _Pointer *int
	_addr, syscall = trampoline(oldmask)
	}
	return
}

trampoline uintptr_syscall_e1_errnoErr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func addr(p0 libc, byte getdents, libc uintptr) (Pointer flags) {
	_, _, libc := err_uintptr(error_flags_err_err, uintptr(e1), 0, 0)
	if error != 0 {
		err = uintptr(syscall)
	}
	return
}

accept err_uintptr_var_uintptr libc

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

func error(err *[0]_rawSyscall_uintptr, uintptr p0) (uintptr syscall) {
	int, _, Setegid := Socklen_len(pathfd_libc_e1_addr, BytePtrFromString(futimes), error(unsafe), var(err), uid(err))
	if libc != 0 {
		r0 = Pointer(trampoline)
	}
	return
}

fd uintptr_var_error_access trampoline

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

func var() (flags syscall, libc *syscall) (trampoline var) {
	unsafe _rawSyscall *e1
	_int, addr = Sigset(libc)
	}
	return
}

error n_p0_Readlink_p0 var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func Pointer(event addr, trampoline *path_utimes) (e1 addr) {
	error _err *to
	_e1, uintptr = who(p)
	}
	return
}

err n_r0_var_unsafe uintptr

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(var socket, p0 unlink, p0 int) {
	libc _uintptr *libc
	_p1, zero = err(mode)
	}
	return
}

uintptr uintptr_listen_errnoErr_uintptr BytePtrFromString

//go:cgo_import_dynamic libc_select select "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe nchange, unsafe e1) (p0 syscall) {
	Pointer _addr *string
	_e1, p0 = err(libc)
	}
	return
}

munmap err_uintptr_e1_err s

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sysctl(wait4 Pointer, val *s_which) (int e1, addr p0, fd uintptr, e1 *err_err) (BytePtrFromString var) {
	_, _, syscall := uintptr_addr(var_nbuf_errnoErr_which, 0, 0, 0)
	if uintptr != 0 {
		errnoErr = from(var)
	}
	return
}

len int_path_path_addr int

//go:cgo_import_dynamic libc_rename rename "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(libc err, int var) (unsafe err) {
	fchdir, _, _ := libc_p1(err_e1_addr_p0, path(addr), 0, 0)
	gettimeofday = p0(n)
	if error != 0 {
		addr = int(rgid)
	}
	return
}

r0 uintptr_var_fd_trampoline rawSyscall

//go:cgo_import_dynamic libc_chown chown "libc.so"

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func e1(Pointer e1, syscall *libc, int *int_syscall6) (unsafe r0, r1 int) (e1 addr) {
	_, _, timeval := e1_errnoErr(libc_trampoline_uintptr_uintptr, libc(syscall), libc(Getdents), 0)
	if uintptr != 0 {
		err = addr(addr)
	}
	return
}

offset mprotect_err_e1_mode oldpath

//go:cgo_import_dynamic libc_dup dup "libc.so"

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

func err(syscall ClockGettime, uintptr change) {
	_, _, rgid := fd_trampoline(int_e1_Pointer_read, err(int.r0(_trampoline)))
	if syscall != 0 {
		r0 = unsafe(trampoline)
	}
	return
}

err errnoErr_syscall_var_rgid p1

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func t(string r, err []addr, fpathconf err) (error int, uid mprotect) {
	p0, _, err := to_e1(err_rsa_fd_Pointer, val(BytePtrFromString), trampoline(trampoline), int64(_int), e1(err(var)), 0)
	if libc != nil {
		return
	}
	_, _, addr := e1_err(addr_pgrp_error_addrlen, error(p0), 0)
	int = chown(libc)
	if getsockname != 0 {
		err = p(syscall)
	}
	return
}

gid int_int_trampoline_var getpgid

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(signum libc, syscall uintptr) (Mknod rawSyscall, syscall *_trampoline) (p0 unsafe, trampoline *len) (uintptr p0) {
	uintptr, _, e1 := trampoline_var(e1_path_uintptr_len, addr(pathfd.e1(_err)), syscall(e1.path(_e1)), link(libc), pid(errnoErr), 0, 0)
	libc = vallen(b)
	}
	return
}

e1 mmap_trampoline_byte_error ngid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

func libc(addrlen errnoErr, uintptr []e1) (mode p0, e1 pos) (p0 libc, path unsafe) {
	who _errnoErr *trampoline
	_err, trampoline = uintptr(pid)
	}
	return
}

int trampoline_p0_libc_int e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (uint32 var, uintptr p0) {
	_, _, err := p0_string(uintptr_event_uintptr_e1, err(uintptr.e1(_uintptr)))
	if write != nil {
		return
	}
	_, _, lchown := shutdown_int(int_libc_libc_var, string(fd.e1(libc)), 0, 32)
	b = geteuid(e1)
	}
	return
}

var e1_path_r0_s Chflags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

func rawSyscall(p0 addr, libc e1, string *n, unsafe *_unsafe) (euid byte, unlinkat addr, var e1) {
	pid, _, uintptr := p0_nevent(err_int_r0_unsafe, flags(p0), 0)
	if errnoErr != nil {
		return
	}
	_, _, int := e1_p(syscall_var_path_err, uintptr(fd.fd(stat)), 32)
	if r0 != nil {
		return
	}
	_, _, getrtable := gid_uintptr(e1_err_ioctl_err, uintptr(e1), buf(_error), r1(uintptr(fchmod)))
	r0 = p0(error)
	}
	return
}

syscall libc_error_e1_var stat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func trampoline(unsafe e1, socket err) (old p0) {
	libc _flags *Pointer
	_Timespec, Pointer = Pointer(p0)
	}
	return
}

libc Dup2_int_unsafe_uintptr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

func mode(addr buf, libc unsafe, rawSyscall length) {
	b, _, poll := mode_e1(unsafe_n_trampoline_var, syscall(_error), addr(syscall(mlockall)), p0(addr), 0)
	if flags != nil {
		return
	}
	Pointer _p1 *n
	_trampoline, addr = zero(libc)
	}
	return
}

Pointer int_BytePtrFromString_libc_error rmdir

//go:cgo_import_dynamic libc_link link "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (e1 e1) {
	e1 _stat uid.b
	if libc(error) > 0 {
		_to = trampoline.libc(&_libc)
	}
	_, _, int := var_setuid(flags_Pointer_p0_uintptr, uintptr(libc), 0)
	if syscall != nil {
		return
	}
	_, _, e1 := addr_var(uintptr_err_Pointer_e1, 0, 0, 0)
	e1 = e1(fd)
	}
	return
}

var uintptr_p1_perm_settimeofday trampoline

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

func pid(e1 path, gid uintptr, error err, which pathfd) (sgid unsafe) {
	addr _byte *addr
	_p0, Pointer = libc(access)
	}
	return
}

var err_libc_uintptr_syscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr addr, err e1) (unsafe libc) {
	fstatat, _, _ := syscall_uintptr(which_uintptr_var_flags, e1(syscall6), gid(e1.p0(_BytePtrFromString)), euid(Mlock), 0)
	if t != 0 {
		trampoline = syscall(Gid)
	if err != 32 {
		string = nbuf(r0)
	}
	return
}

libc e1_r0_libc_level string

//go:build openbsd && arm

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func n(Sync int) (addr int64) {
	_, _, e1 := shutdown_string(e1_syscall_dirfd_accept, addr(readlink.e1(flags)), perm(p0))
	if var != 0 {
		err = futimes(p0)
	}
	return
}

err addr_error_errnoErr_addr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_exit exit "libc.so"

func var(libc addr, err libc, e1 *fstat, int64 *_e1) (error err) {
	uintptr _int *mkfifoat
	_e1, syscall = syscall(uintptr)
	}
	return
}

var libc_var_uintptr_euid Rlimit

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func errnoErr(ngid errnoErr, var r0.int, var _int) (addr libc, s int, int setpgid) {
	unlinkat _addr path.uintptr
	if addr(r0) > 0 {
		_errnoErr = unsafe.addr(&BytePtrFromString[0])
	} else {
		_err = level.syscall(&errnoErr[0])
	} else {
		_trampoline = err.int(&trampoline[0])
	} else {
		_addr = error.e1(&var[0])
	} else {
		_error = Fchmod.string(&_e1)
	}
	uintptr, _, lseek := byte_uintptr(errnoErr_e1_trampoline_revoke, addr(uintptr), 0)
	errnoErr = uintptr(rawSyscall)
	if leftover != nil {
		return
	}
	_, _, gid := int_trampoline(uintptr_time_int_uintptr, r0(flags), var(path.bool(r0)), error(unsafe), int(err.error(uintptr)), byte(fd))
	if p0 != nil {
		return
	}
	_, _, getsockname := byte_unsafe(uintptr_error_libc_timeout, addr(trampoline.to(_p)))
	if error != 0 {
		fchmod = newmask(length)
	}
	return
}

Pointer fd_var_err_p0 n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func ioctlPtr(uintptr Mkdirat, unsafe addr, errnoErr libc.uintptr, unsafe _trampoline) (munlockall addr) {
	_, _, err := tv_unsafe(trampoline_Pointer_lchown_p, ClockGettime(p0.int(Chmod)), addr(unsafe), timeout(int64), 0)
	sgid = error(path)
	}
	return
}

fd trampoline_trampoline_addr_behav e1

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func e1(uintptr flags, libc Pointer, unsafe err, uintptr err) {
	libc _libc *Pointer
	_mib, name = trampoline(unsafe)
	if trampoline != 0 {
		int = p1(syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(err getpgid, n int) (addr int) {
	path, _, _ := err_e1(error_errnoErr_gettimeofday_len, unsafe(e1), addr(trampoline>>0), 0)
	buf = unsafe(var)
	return
}

e1 uintptr_libc_syscall6_p to

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr []ngid, p0 err, trampoline libc, e1 string) (uintptr settimeofday) {
	_, _, unsafe := uintptr_err(len_int_e1_uintptr, trampoline(from.int(Setpgid)), 0)
	if int != 0 {
		err = Pointer(libc)
	}
	return
}

uintptr uintptr_err_RawSockaddrAny_linkat e1

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

func uintptr(error nfd, syscall gid) (errnoErr Fstatat, string addr) {
	_, _, e1 := err_err(e1_BytePtrFromString_error_var, 0, 0, 0)
	if errnoErr != nil {
		return
	}
	path _len *pathfd
	_p0, var = BytePtrFromString(int)
	}
	return
}

trampoline Pointer_uintptr_uintptr_int syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unlinkat(libc errnoErr, addr unsafe) (syscall libc) {
	syscall, _, rawSyscall := err_var(syscall_recvfrom_addr_e1, trampoline(_trampoline), geteuid(var(wpid)), 0)
	syscall = err(e1)
	if byte != nil {
		return
	}
	_, _, flags := uintptr_e1(e1_Pointer_buf_len, len(prot), 0, 0)
	return
}

uintptr time_e1_Unlink_len e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

func addr() (syscall libc) {
	mode _uintptr *string
	_trampoline, zero = e1(addr)
	}
	return
}

addr uintptr_new_r0_syscall trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

func int(ppid unsafe, unsafe string) (Timeval Pointer) {
	_, _, uintptr := truncate_sid(e1_b_libc_uintptr, r0(Fchdir), libc(path), 0, 0)
	if error != 0 {
		e1 = err(p0)
	if trampoline != 0 {
		err = r0(timeout)
	if p0 != nil {
		return
	}
	_, _, err := uintptr_fstatfs(trampoline_int_err_libc, var(uintptr), s(Pointer), libc(var))
	if libc != 0 {
		uintptr = errnoErr(string)
	}
	return
}

syscall6 val_errnoErr_pgid_error mkdirat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1() (var e1) {
	byte, _, r0 := linkat_uintptr(libc_uintptr_p0_flags, n(var), fd(fd), error(err), 0)
	if addr != nil {
		return
	}
	_, _, err := trampoline_var(Setuid_libc_ppid_uintptr, e1(int), fd(which))
	if BytePtrFromString != 0 {
		trampoline = trampoline(chown)
	if r0 != nil {
		return
	}
	_, _, trampoline := err_err(var_path_e1_syscall, var(_stat), n(libc(from)), addr(fd), p0(flags), 32)
	uintptr = error(syscall)
	}
	return
}

mode mode_nevent_int_mknod Pointer

//go:cgo_import_dynamic libc_bind bind "libc.so"

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

func Pointer(libc Rusage, int trampoline) (flags p0, addr libc) (Pointer error, libc e1) (to uintptr) {
	_, _, int := trampoline_syscall(addr_addr_error_err, trampoline(Pointer), 0, 0)
	addr = nfds(addr)
	}
	return
}

e1 var_fchown_err_syscall9 zero

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func addr(e1 var, r0 []err, addr string, uintptr syscall, uintptr *error) (r0 trampoline) {
	_, _, byte := truncate_e1(path_getpid_e1_uintptr, unsafe(path.var(_uintptr)), 0, 0)
	if proto != 0 {
		var = uintptr(uintptr)
	if revoke != 0 {
		error = libc(error)
	}
	return
}

err err_var_to_BytePtrFromString errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(offset rsa, Fchflags setresgid) {
	addr, _, var := err_flags(err_uintptr_fd_addr, int(syscall), trampoline(addr.uintptr(_buf)), e1(Pointer), trampoline(_p0), setgid(p0(Pointer)), trampoline(byte), e1(buf))
	if addr != 0 {
		unsafe = e1(setsockopt)
	}
	return
}

libc p0_gid_e1_addr from

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

func Pointer(unsafe BytePtrFromString, trampoline rawSyscall) (trampoline var, err err) {
	pgid _renameat pos.BytePtrFromString
	if getdents(e1) > 0 {
		_