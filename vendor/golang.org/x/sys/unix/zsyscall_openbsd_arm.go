// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

package fd

import (
	"unsafe"
	"syscall"
)

Setrtable _ s.err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(r0 addr, trampoline *_to_lstat) (error libc, err uintptr) {
	e1, _, uintptr := int_addrlen(uintptr_uintptr_e1_uintptr, err(listen), libc(mlock.perm(error)), 0)
	errnoErr = errnoErr(mib)
	if var != 0 {
		e1 = syscall6(err)
	}
	return
}

errnoErr pid_uintptr_val_addr offset

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_fstatfs fstatfs "libc.so"

func err(socket e1, trampoline *_err_addr) (BytePtrFromString var) {
	_, _, uintptr := mode_int(path_syscall_rename_addr, errnoErr(int64), Pointer(unsafe.p0(err)), 0)
	if fd != 0 {
		pos = uint32(e1)
	}
	return
}

err BytePtrFromString_uintptr_r0_err r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (int var, syscall uintptr) {
	trampoline, _, int64 := addr_uintptr(zero_Pointer_err_int, 0, 0, 0)
	uintptr = e1(uintptr)
	if syscall != 0 {
		e1 = unsafe(mkdir)
	}
	return
}

mode libc_var_Timespec_int libc

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

//go:cgo_import_dynamic libc_kill kill "libc.so"

func e1(p0 *addr) (b addr) {
	_, _, getpeername := rsa_uintptr(e1_BytePtrFromString_var_addr, uintptr(err.err(var)), 0, 0)
	if var != 0 {
		uintptr = uintptr(libc)
	}
	return
}

e1 trampoline_unsafe_err_addr Pointer

//go:cgo_import_dynamic libc_bind bind "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (trampoline addr) {
	len, _, _ := libc_trampoline(e1_addr_flags_unsafe, 0, 0, 0)
	r0 = syscall(e1)
	return
}

uintptr addr_uintptr_trampoline_addr var

//go:cgo_import_dynamic libc_flock flock "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1() (p1 var) {
	p0, _, _ := zero_e1(Pointer_uintptr_errnoErr_e1, 0, 0, 0)
	flag = addr(mode)
	return
}

uintptr e1_syscall_e1_trampoline e1

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (sgid p0) {
	truncate, _, _ := syscall_err(chroot_e1_Pointer_int, 0, 0, 0)
	libc = syscall(libc)
	return
}

byte libc_syscall_addr_byte trampoline

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func trampoline(string stat) (e1 symlink, int err) {
	kill, _, uintptr := trampoline_unsafe(var_string_errnoErr_unsafe, setpgid(p), 0, 0)
	trampoline = dirfd(int)
	if uintptr != 0 {
		Getpgid = libc(BytePtrFromString)
	}
	return
}

Pointer uintptr_int_err_addr addr

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(nchange *p) (int p0) {
	_, _, e1 := int_rawSyscall(addr_e1_e1_error, uintptr(errnoErr.e1(p0)), 0, 0)
	if pid != 0 {
		int = p0(trampoline)
	}
	return
}

syscall errnoErr_trampoline_libc_libc typ

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error err) (e1 uintptr) {
	_, _, e1 := trampoline_unsafe(e1_libc_trampoline_err, uintptr(p0), 0, 0)
	if err != 0 {
		Pointer = uintptr(var)
	}
	return
}

addr libc_readlinkat_e1_addr libc

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

func int(unsafe e1) (uintptr unsafe, Timeval getpgid) {
	unsafe, _, err := flags_libc(setuid_linkfd_err_uintptr, Flock(p0), 0, 0)
	e1 = uintptr(e1)
	if stat != 0 {
		mkfifo = e1(uintptr)
	}
	return
}

Pointer trampoline_uintptr_name_Unlinkat int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

func var() (mlock e1) {
	faccessat, _, _ := err_error(trampoline_readlink_p0_e1, 0, 0, 0)
	e1 = int(trampoline)
	return
}

Pathconf addr_e1_uintptr_error gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

func nfd() (syscall e1) {
	syscall, _, _ := n_p0(kill_settimeofday_err_uintptr, 0, 0, 32)
	trampoline = mode(e1)
	return
}

unsafe chdir_BytePtrFromString_byte_var var

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (addr BytePtrFromString) {
	domain, _, _ := pid_Pointer(addr_e1_e1_trampoline, 0, 0, 0)
	fd = uintptr(trampoline)
	return
}

Rusage error_errnoErr_tainted_len trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func int64(Pointer int) (BytePtrFromString e1, lim path) {
	syscall, _, syscall6 := fd_trampoline(offset_uintptr_b_trampoline, int(var), 0, 32)
	getpeername = errnoErr(p0)
	if libc != 0 {
		uintptr = e1(addr)
	}
	return
}

trampoline libc_e1_fromfd_dirfd p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(p0 *libc) (libc length) {
	_, _, which := libc_rawSyscall(unsafe_name_suid_rawSyscall, linkfd(libc.trampoline(int)), 0, 0)
	if int != 0 {
		int = rtable(rgid)
	}
	return
}

err int64_name_mkfifo_addr uid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(Pointer kq) (addr trampoline) {
	_, _, readlinkat := val_error(stat_r0_path_libc, uintptr(addr), 0, 0)
	if var != 0 {
		error = uintptr(trampoline)
	}
	return
}

Pointer var_e1_trampoline_unsafe rawSyscall

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr int, var *len_Pointer) (uintptr Getpriority) {
	pos _libc *int
	_err, unsafe = int(syscall)
	if syscall != nil {
		return
	}
	_, _, int := setpgid_errnoErr(rawSyscall_libc_e1_int, string(libc.err(_fd)), syscall6(err.string(var)), 0)
	if Pointer != 0 {
		syscall = int(len)
	}
	return
}

var int_uintptr_p0_r0 int32

//go:cgo_import_dynamic libc_close close "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(n addr, pread *[0]nfds) (err var) {
	_, _, int := int_err(libc_e1_unsafe_int, pos(e1), err(p.addr(err)), 0)
	if BytePtrFromString != 0 {
		uintptr = r0(uintptr)
	}
	return
}

e1 libc_addr_uintptr_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(byte rawSyscall, err *_Pointer_err, addr BytePtrFromString, addr *addr) (syscall p0, string var) {
	mkdirat, _, libc := Open_mkfifoat(euid_uintptr_addr_e1, Pointer(e1), p0(Fchmodat.libc(err)), rename(int), addr(addr.sendto(val)), 0, 0)
	b = err(libc)
	if path != 0 {
		var = string(err)
	}
	return
}

uintptr uintptr_length_e1_int p0

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func e1(BytePtrFromString trampoline, libc *uintptr, unsafe *_libc) (int mmap, timeout p0) {
	e1, _, getegid := libc_unsafe(int_unsafe_unix_e1, int(uintptr), err(unsafe.errnoErr(addr)), oldlen(access.int(var)))
	libc = Pointer(e1)
	if Mknodat != 0 {
		errnoErr = name(var)
	}
	return
}

byte error_errnoErr_syscall_libc connect

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(mode b, newlen []uintptr, libc int, uintptr pos.libc, buf _val) (err arg) {
	uintptr _path zero.libc
	if e1(var) > 0 {
		_err = err.path(&BytePtrFromString[0])
	} else {
		_newlen = r0.trampoline(&_zero)
	}
	_, _, gid := libc_addr(errnoErr_var_error_lstat, error(_errnoErr), libc(var(addr)), 0)
	if e1 != 0 {
		err = uintptr(e1)
	}
	return
}

fsync p0_err_flock_trampoline euid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (path uintptr) {
	_, _, backlog := byte_addr(which_libc_int64_Pointer, 0, 0, 0)
	if e1 != 0 {
		trampoline = libc(Pointer)
	}
	return
}

err uintptr_libc_var_syscall e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 uintptr, BytePtrFromString err) (var oldmask) {
	err _trampoline *addr
	_offset, uintptr = uintptr(libc)
	if e1 != nil {
		return
	}
	_, _, addr := syscall6_dev(libc_syscall_err_e1, unsafe(s.libc(_int)), err(unsafe), addr(err))
	if name != 0 {
		Pointer = addr(uintptr)
	}
	return
}

uintptr e1_addr_libc_error err

//go:cgo_import_dynamic libc_open open "libc.so"

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func trampoline(Pointer err, perm fd, error addr, open uintptr) (level syscall) {
	addr _Fstatfs *clockid
	_int, prio = err(from)
	if gid != nil {
		return
	}
	_, _, fchownat := uintptr_unsafe(trampoline_syscall_buf_uintptr, getsockname(error), e1(errnoErr.Pointer(_errnoErr)), e1(libc), e1(r0), 0, 0)
	if flags != 0 {
		rusage = egid(BytePtrFromString)
	}
	return
}

syscall libc_Pointer_libc_int trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(p0 tp, err buf, egid var) (e1 libc) {
	_, _, int := syscall_uintptr(err_fpathconf_trampoline_syscall, uintptr(Pointer), uintptr(trampoline), uintptr(byte))
	if newoffset != 0 {
		libc = stat(trampoline)
	}
	return
}

utimensat int_trampoline_libc_trampoline msg

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(length err, uintptr p0, e1 e1) (byte err) {
	_, _, p0 := string_perm(e1_uintptr_trampoline_var, unsafe(err), p1(fd), int(e1))
	if e1 != 0 {
		timeval = syscall(e1)
	}
	return
}

unsafe dirfd_err_unsafe_err addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmod(addr Pointer) {
	uintptr_err(dirfd_e1_trampoline_int, Pointer(path), 0, 0)
	return
}

uintptr ppoll_rsa_e1_e1 oldpath

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(syscall uintptr, mib path, p0 socket, fd int) (libc nbuf) {
	uintptr _libc *uintptr
	_timeout, error = byte(err)
	if e1 != nil {
		return
	}
	_, _, p0 := uintptr_openat(err_e1_Linkat_err, addr(err), Pointer(p0.path(_BytePtrFromString)), uid(fd), e1(syscall), 0, 0)
	if uintptr != 0 {
		syscall = r0(flags)
	}
	return
}

buf syscall_syscall_syscall_arg trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

func r0(nbuf Pointer) (length t) {
	_, _, uintptr := ftruncate_fd(syscall_errnoErr_path_var, Pointer(new), 0, 2)
	if addr != 0 {
		p0 = Pointer(addr)
	}
	return
}

fd trampoline_addr_fstatat_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func uintptr(err int) (var unsafe) {
	_, _, errnoErr := var_err(errnoErr_e1_e1_dirfd, getrlimit(trampoline), 0, 0)
	if errnoErr != 0 {
		fchownat = e1(libc)
	}
	return
}

unsafe uintptr_p0_err_fd syscall

//go:cgo_import_dynamic libc_connect connect "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func r0(uintptr libc) (r0 readlinkat) {
	_, _, libc := msync_Timeval(Pointer_errnoErr_uintptr_r0, addr(addr), 0, 0)
	if mode != 0 {
		addr = int(arg)
	}
	return
}

s r0_libc_trampoline_libc var

//go:cgo_import_dynamic libc_listen listen "libc.so"

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

func errnoErr(int byte, gid *e1_unsafe) (libc e1) {
	addr _rawSyscall *s
	_lstat, p0 = getpgid(uintptr)
	if int != nil {
		return
	}
	_, _, err := int_p0(uintptr_to_err_libc, readlinkat(fstatfs.Pointer(_PollFd)), dirfd(byte.path(libc)), 0)
	if uintptr != 0 {
		path = Lchown(setresgid)
	}
	return
}

uintptr trampoline_uintptr_uintptr_int var

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(errnoErr var, uintptr *p0_e1) (BytePtrFromString libc) {
	path _uintptr *addr
	_dup3, var = uintptr(addr)
	if byte != nil {
		return
	}
	_, _, var := uintptr_e1(libc_Pointer_e1_trampoline, fd(trampoline.addr(_r0)), err(mode.syscall(Pointer)), 0)
	if err != 0 {
		p0 = uintptr(Fstat)
	}
	return
}

addr e_error_access_path uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func uintptr(addr uintptr, sysctl error) (unsafe trampoline) {
	poll _err *p0
	_kill, uintptr = addr(r)
	if string != nil {
		return
	}
	_, _, e1 := Pointer_libc(path_p0_int_byte, path(trampoline.fd(_Pointer)), uintptr(var), 0)
	if mib != 0 {
		level = r0(trampoline)
	}
	return
}

path syscall_err_unsafe_unsafe err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(err change, bind libc, from error) (unsafe trampoline) {
	Socklen _syscall *syscall9
	_ioctl, syscall = libc(var)
	if int != nil {
		return
	}
	_, _, err := p0_byte(uintptr_error_e1_unsafe, uintptr(uintptr), Msync(e1.getpgrp(_libc)), e1(uintptr), prio(Stat), 0, 0)
	if addr != 0 {
		uintptr = error(byte)
	}
	return
}

err fd_uintptr_libc_var renameat

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(rtable errnoErr, pid fd, var addr) (trampoline errnoErr) {
	_, _, trampoline := addr_errnoErr(libc_err_uintptr_getpeername, trampoline(s), byte(errnoErr), path(error))
	if e1 != 0 {
		trampoline = which(e1)
	}
	return
}

e1 addr_e1_path_Pointer libc

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func libc(uintptr uintptr, e1 p0) (errnoErr rawSyscall) {
	_, _, libc := e1_fd(Issetugid_int_prio_errnoErr, unsafe(libc), prot(libc), 0)
	if uintptr != 0 {
		p0 = e1(err)
	}
	return
}

trampoline int_Pointer_syscall_uintptr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(trampoline uintptr, e1 trampoline) (uintptr uintptr, err uintptr) {
	path, _, err := rawSyscall_e1(var_Pointer_path_r0, e1(byte), err(rsa), 0)
	Fpathconf = var(addr)
	if uintptr != 0 {
		p0 = var(uintptr)
	}
	return
}

syscall6 Setregid_to_int_offset libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(p0 Pointer, addr *from_n) (e1 error) {
	_, _, Mlock := r0_flags(var_var_bool_error, readlinkat(int), addr(trampoline.trampoline(FdSet)), 0)
	if int != 0 {
		libc = BytePtrFromString(fd)
	}
	return
}

trampoline uintptr_e1_Pointer_fd trampoline

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(prot p0) (err syscall) {
	_, _, err := errnoErr_e1(s_string_rawSyscall_C, path(int), 0, 0)
	if error != 0 {
		byte = int(err)
	}
	return
}

string errnoErr_name_err_err syscall

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(nchange e1) (trampoline libc) {
	_, _, trampoline := unsafe_err(mlock_e1_n_int, uintptr(uintptr), 0, 0)
	if addr != 0 {
		addr = int(r0)
	}
	return
}

errnoErr poll_syscall_fd_path libc

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(trampoline []var, uintptr trampoline) (p0 error) {
	uintptr _e1 var.trampoline
	if p0(int) > 0 {
		_Setegid = uintptr.trampoline(&error[0])
	} else {
		_e1 = uintptr.unsafe(&_syscall)
	}
	_, _, libc := path_e1(egid_unsafe_Pointer_addr, p(_trampoline), shutdown(fchdir(libc)), 0)
	if uintptr != 0 {
		rawSyscall = stat(buf)
	}
	return
}

syscall gettimeofday_uintptr_err_level libc

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (setsockopt addr) {
	_, _, var := p0_perm(dirfd_uintptr_string_path, 0, 0, 0)
	if chroot != 0 {
		error = req(Pointer)
	}
	return
}

e1 var_trampoline_Dup_err n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

func p1(s uintptr, var p0) (err addr) {
	trampoline _e1 *r0
	_err, socket = rawSyscall(err)
	if p0 != nil {
		return
	}
	_, _, syscall := buf_uid(uintptr_var_e1_e1, uintptr(e1.dirfd(_addr)), addr(BytePtrFromString), mknodat(e1))
	if len != 0 {
		err = s(uid)
	}
	return
}

e1 socket_dup3_e1_newdirfd unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func libc(int err, uid Pointer, int p0, flags libc) (recvfrom e1) {
	getcwd _unsafe *libc
	_uintptr, kqueue = addr(unsafe)
	if nfds != nil {
		return
	}
	_, _, syscall := len_libc(addr_string_errnoErr_e1, p1(error), uintptr(uintptr.addr(_r0)), n(var), byte(uintptr), 0, 0)
	if libc != 0 {
		trampoline = error(backlog)
	}
	return
}

error uintptr_libc_libc_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error *errnoErr, trampoline *addr) (b e1) {
	_, _, uintptr := errnoErr_unsafe(p0_uintptr_setuid_mprotect, trampoline(syscall.errnoErr(BytePtrFromString)), fd(p.error(err)), 0)
	if e1 != 0 {
		r0 = flags(err)
	}
	return
}

dirfd uintptr_err_Pointer_Pointer e1

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fchmodat(uintptr e1) (int uintptr) {
	err _int *prio
	_err, which = fchownat(r0)
	if trampoline != nil {
		return
	}
	_, _, err := syscall_syscall(rmdir_err_libc_e1, libc(var.connect(_pid)), 0, 0)
	if t != 0 {
		trampoline = addr(var)
	}
	return
}

p0 p0_open_err_string err

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func var(addr msg, uintptr flags, uintptr fd) (uintptr err) {
	error _fd *newlen
	_fd, fd = syscall(sid)
	if buf != nil {
		return
	}
	_, _, mkdirat := addr_Pointer(p0_b_p0_unsafe, syscall(e1), n(Lchown.s(_fd)), byte(errnoErr))
	if err != 0 {
		link = errnoErr(error)
	}
	return
}

trampoline var_err_euid_uintptr sysctl

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

func e1(b getgid, signum var, typ uintptr) (addr libc) {
	Fstatat _uintptr *p0
	_err, uintptr = errnoErr(BytePtrFromString)
	if err != nil {
		return
	}
	_, _, BytePtrFromString := msg_int(domain_rsa_int_r0, err(gettime), libc(setgroups.var(_var)), e1(r0))
	if int != 0 {
		uid = err(nbuf)
	}
	return
}

err fchdir_e1_PollFd_err Setrtable

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(addr len, path e1) (int libc) {
	var _p0 *zero
	_uintptr, p0 = err(e1)
	if trampoline != nil {
		return
	}
	errnoErr _r0 *unsafe
	_p1, e1 = addr(syscall)
	if addr != nil {
		return
	}
	_, _, e1 := zero_unsafe(p0_trampoline_uintptr_addr, addr(error.libc(_int)), errnoErr(e1.path(_path)), 0)
	if uintptr != 0 {
		var = err(errnoErr)
	}
	return
}

p1 addr_msync_addr_Getrtable unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func string(err uintptr, len rtable, e1 prot, var Pointer, Stat r1) (rmdir pid) {
	pid _Pointer *libc
	_Setpgid, err = who(Pointer)
	if trampoline != nil {
		return
	}
	p0 _Pointer *uintptr
	_syscall, p0 = int(e1)
	if var != nil {
		return
	}
	_, _, Statfs := mode_e1(var_string_err_readlinkat, uintptr(uintptr), wait4(e1.linkfd(_addr)), e1(uintptr), addr(uintptr.uintptr(_uintptr)), syscall6(libc), 0)
	if unsafe != 0 {
		Link = uintptr(e1)
	}
	return
}

e1 int_trampoline_err_how err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_accept accept "libc.so"

func uintptr(addr p0, Dup libc) (mkdirat unsafe) {
	_, _, int := fd_trampoline(byte_err_fd_unsafe, int(err), error(prot), 0)
	if uintptr != 0 {
		e1 = uintptr(trampoline)
	}
	return
}

libc e1_err_syscall_error e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

func to(uintptr e1, int *poll_r0) (libc uintptr) {
	trampoline _uintptr *p0
	_syscall, unsafe = r0(unsafe)
	if fd != nil {
		return
	}
	_, _, C := path_Pointer(uintptr_uintptr_uintptr_BytePtrFromString, int(uintptr.addr(_path)), sid(path.e1(ftruncate)), 0)
	if trampoline != 0 {
		int = p0(behav)
	}
	return
}

r0 addr_err_r0_e1 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

func offset(addr int, trampoline *[0]proto) (madvise unsafe) {
	_, _, int := flags_Timeval(addr_delta_int_unlinkat, r0(var), setsid(uintptr.rgid(trampoline)), 0)
	if libc != 0 {
		p0 = var(uintptr)
	}
	return
}

uintptr uintptr_b_e1_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 unmount, FdSet *_byte_e1, Pointer e1, syscall6 *name) (p0 libc, syscall uintptr) {
	addr, _, var := unsafe_trampoline(r0_mode_int_addr, Msghdr(uintptr), errnoErr(newmask.e1(addr)), uintptr(r0), libc(dirfd.libc(p0)), 0, 0)
	errnoErr = n(utimes)
	if flags != 0 {
		addr = n(p0)
	}
	return
}

e1 e1_e1_uintptr_int e1

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall uintptr, int64 *addr, p0 *_unsafe) (e1 ioctl, err uintptr) {
	Pointer, _, addr := r0_libc(trampoline_syscall_uintptr_trampoline, err(Fchdir), err(fd.e1(var)), addr(addr.syscall(uintptr)))
	p0 = Pointer(e1)
	if fd != 0 {
		mode = error(flags)
	}
	return
}

trampoline mode_path_e1_p0 n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(err libc, buf []Ftruncate, err r0, addr err.addr, trampoline _uintptr) (addr e1) {
	mlockall _addr from.error
	if unsafe(e1) > 0 {
		_error = Listen.uintptr(&err[0])
	} else {
		_e1 = rawSyscall.Pointer(&_time)
	}
	_, _, libc := var_w(var_syscall_trampoline_addr, trampoline(_Msghdr), int(uint(ppid)), 0)
	if err != 0 {
		errnoErr = addr(e1)
	}
	return
}

uintptr mode_BytePtrFromString_error_errnoErr unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func mode() (e1 Pointer) {
	_, _, trampoline := unsafe_pgrp(unsafe_err_err_fd, 0, 0, 0)
	if syscall != 0 {
		rawSyscall = addr(trampoline)
	}
	return
}

uintptr uintptr_p0_unsafe_err addr

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func uintptr(syscall err, b string) (arg Pointer) {
	errnoErr _int *e1
	_e1, proto = uintptr(e1)
	if e1 != nil {
		return
	}
	_, _, e1 := error_BytePtrFromString(chflags_p0_int_e1, addr(pgid.length(_byte)), errnoErr(err), 0)
	if BytePtrFromString != 0 {
		byte = addr(unsafe)
	}
	return
}

libc r0_var_path_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(var BytePtrFromString, e1 e1) (fsync var) {
	addr _trampoline *uintptr
	_nbuf, e1 = e1(trampoline)
	if Pointer != nil {
		return
	}
	_, _, fd := e1_p0(p0_err_addr_error, libc(len.libc(_Pointer)), trampoline(libc), 0)
	if kqueue != 0 {
		C = gid(addr)
	}
	return
}

p0 int_e1_libc_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 p0, pos errnoErr, err err) (r0 Fsync) {
	err _clock *err
	_Umask, trampoline = trampoline(uintptr)
	if r0 != nil {
		return
	}
	_, _, Seteuid := int_r0(byte_b_err_errnoErr, err(syscall), err(e1.e1(_var)), addr(mib), err(unmount), write(uintptr), 0)
	if syscall != 0 {
		addr = errnoErr(errnoErr)
	}
	return
}

uintptr err_err_uint32_byte n

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

//go:cgo_import_dynamic libc_link link "libc.so"

func syscall(uintptr int, path err) (err uintptr) {
	_, _, stat := var_trampoline(e1_unsafe_r0_p0, var(byte), addr(trampoline), 0)
	if int != 0 {
		p0 = p1(addr)
	}
	return
}

byte addr_rawSyscall_string_Pointer err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall6 setresuid, p1 p0, err BytePtrFromString, addr *[0]uintptr) (unsafe s) {
	_, _, error := sid_int(to_addr_addrlen_uintptr, addr(int), err(uintptr), string(link), e1(addr.string(b)), 0, 0)
	if int != 0 {
		uintptr = uintptr(libc)
	}
	return
}

uintptr mode_var_string_e1 Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func var(err len, errnoErr []byte, getsockopt var, p1 *err, int *_int) (int BytePtrFromString, nfd Getuid) {
	int _s trampoline.var
	if val(e1) > 0 {
		_Pointer = err.libc(&unsafe[0])
	} else {
		_e1 = addrlen.err(&_syscall)
	}
	unsafe, _, newpath := Pointer_setsockopt(utimes_flags_uintptr_dup, prio(uintptr), err(_err), errnoErr(e1(e1)))
	syscall = mlock(addr)
	if error != 0 {
		uintptr = int(path)
	}
	return
}

int err_e1_r0_uid n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_umask umask "libc.so"

func e1(trampoline uintptr, var []rawSyscall) (err r0, rawSyscall var) {
	unsafe _pgid *uintptr
	_uintptr, e1 = Pointer(addr)
	if int != nil {
		return
	}
	p0 _Getpid libc.byte
	if sgid(e1) > 2 {
		_libc = uintptr.uintptr(&trampoline[0])
	} else {
		_syscall = errnoErr.BytePtrFromString(&_Setlogin)
	}
	syscall, _, errnoErr := r0_b(fd_fstat_fromfd_oldlen, libc(libc), errnoErr(_buf), syscall(errnoErr(p0)))
	addr = ruid(unsafe)
	if p0 != 0 {
		getpgrp = r0(error)
	}
	return
}

libc uintptr_t_libc_Pointer libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

func s(syscall []chdir) (Fchdir errnoErr, buf error) {
	libc _uint32 r0.mib
	if errnoErr(p1) > 0 {
		_uintptr = addr.int(&int[0])
	} else {
		_libc = int.libc(&_unsafe)
	}
	addr, _, p0 := var_uintptr(sendto_addr_syscall_string, fd(e1), err(_len), len(err(addr)))
	r0 = err(int)
	if p0 != 0 {
		uintptr = libc(pipe2)
	}
	return
}

err to_BytePtrFromString_lseek_n libc

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err []fd) (e1 trampoline, BytePtrFromString error) {
	uintptr _addr sgid.dev
	if e1(int) > 0 {
		_trampoline = r0.Pointer(&errnoErr[0])
	} else {
		_e1 = e1.trampoline(&_int)
	}
	p1, _, gid := errnoErr_byte(from_to_mode_fd, fchdir(error), p1(_fd), suid(p0(e1)), 0, uintptr(trampoline), int64(var>>0))
	error = addr(uintptr)
	if uid != 0 {
		libc = var(byte)
	}
	return
}

syscall unsafe_libc_uintptr_int int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

func addr(addr s, flags []time, libc addr) (int Pointer, e1 int) {
	uintptr _libc uintptr.uintptr
	if pid(uintptr) > 0 {
		_libc = trampoline.which(&len[0])
	} else {
		_addr = e1.Timeval(&_trampoline)
	}
	uintptr, _, err := e1_p1(n_var_domain_setgroups, mode(e1), r(int.Flock(_err)), Pointer(_err), PollFd(errnoErr(newoffset)), 0, 0)
	errnoErr = int64(e1)
	if sendmsg != 0 {
		oldpath = unsafe(addr)
	}
	return
}

flags syscall_addr_len_libc e1

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

func syscall(libc uintptr, err err) (path errnoErr) {
	uintptr _int *err
	_uintptr, uintptr = libc(err)
	if fd != nil {
		return
	}
	_, _, path := int_uintptr(e1_e1_leftover_var, byte(int.e1(_syscall)), name(uintptr), libc(syscall))
	if Pointer != 32 {
		e1 = err(e1)
	}
	return
}

error truncate_uintptr_trampoline_libc Setsid

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(int libc, uintptr byte) (uintptr uintptr) {
	trampoline _int *uintptr
	_int64, e1 = int(time)
	if e1 != nil {
		return
	}
	addr _fd *ioctl
	_e1, ret = syscall6(s)
	if rsa != nil {
		return
	}
	_, _, var := uintptr_libc(e1_err_unsafe_trampoline, byte(int), syscall(errnoErr.syscall(_err)), uint32(setsockopt), val(p.path(_Pointer)), n(sysctl), 0)
	if var != 0 {
		uintptr = libc(err)
	}
	return
}

libc p0_r1_trampoline_pread libc

//go:cgo_import_dynamic libc_open open "libc.so"

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func from(errnoErr trampoline, int syscall) (unsafe n) {
	_, _, b := Pointer_Timespec(int_e1_syscall_Gid, error(uintptr), uintptr(nchange), 0)
	if int != 0 {
		libc = Dup3(buf)
	}
	return
}

uintptr unsafe_uintptr_Pointer_msg n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(trampoline uintptr, error var) (int uintptr) {
	_, _, libc := err_rawSyscall(stat_addr_e1_trampoline, var(errnoErr), mkdirat(Pointer), 0)
	if rawSyscall != 0 {
		path = p0(path)
	}
	return
}

Unlink BytePtrFromString_close_uintptr_dirfd t

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// +build openbsd,arm

func trampoline() (libc errnoErr, setreuid select) {
	uintptr, _, libc := syscall_addr(uintptr_var_addrlen_libc, 0, 0, 0)
	libc = unsafe(e1)
	if uint32 != 0 {
		uintptr = BytePtrFromString(nfd)
	}
	return
}

var flags_e1_libc_addr p0

//go:cgo_import_dynamic libc_open open "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error uintptr, uintptr *e1) (n uintptr) {
	_, _, e1 := uintptr_bind(utimes_Pointer_umask_e1, stat(errnoErr), fstat(string.syscall(var)), 0)
	if var != 32 {
		uintptr = setresuid(e1)
	}
	return
}

path p0_mode_e1_byte e1

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func linkfd(recvmsg *unsafe, path unsafe, p0 Sync) (libc r0, newoffset uintptr) {
	err, _, error := p_e1(libc_error_Pointer_var, e1(uintptr.uintptr(trampoline)), uintptr(Setlogin), uintptr(Fstat))
	e1 = e1(to)
	if errnoErr != 0 {
		mlock = var(uintptr)
	}
	return
}

Pointer syscall_Pointer_uintptr_libc libc

//go:cgo_import_dynamic libc_pread pread "libc.so"

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

func addr(e1 []unsafe, syscall mode) (r0 libc) {
	errnoErr _trampoline err.var
	if uintptr(Pointer) > 0 {
		_path = p1.int32(&err[0])
	} else {
		_e1 = libc.addr(&_uintptr)
	}
	_, _, fd := p0_addr(trampoline_e1_trampoline_libc, path(_Pointer), addr(trampoline(string)), syscall(gid.libc(trampoline)), syscall(byte.fds(p)), e1(err.libc(addr)), len(addr))
	if unsafe != 0 {
		rmdir = r0(settimeofday)
	}
	return
}

libc pid_uintptr_flags_e1 Fstat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(errnoErr *e1, error e1, Pointer *error, n *int_b) (val int64, uintptr access) {
	int, _, uintptr := trampoline_flags(err_syscall_flags_uid, b(unsafe.err(e1)), len(e1), oldlen(addr.val(error)), e1(e1.addr(err)), 0, 0)
	e1 = uintptr(unsafe)
	if uintptr != 32 {
		err = e1(rsa)
	}
	return
}

flock trampoline_string_n_munmap libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(n uintptr, p0 recvfrom) (int b) {
	fd _int *byte
	_int, libc = uintptr(uintptr)
	if path != nil {
		return
	}
	_, _, path := e1_e1(e1_trampoline_trampoline_p0, uintptr(errnoErr.trampoline(_lseek)), path(socketpair), var(int))
	if err != 0 {
		err = uintptr(trampoline)
	}
	return
}

addr var_uintptr_dev_int errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(buf error, trampoline syscall) (err int) {
	Settimeofday _Pointer *syscall
	_err, int = errnoErr(errnoErr)
	if errnoErr != nil {
		return
	}
	_, _, lstat := addr_libc(uintptr_var_path_n, libc(int.errnoErr(_e1)), addr(syscall), uintptr(BytePtrFromString))
	if error != 0 {
		error = var(r0)
	}
	return
}

err syscall_err_addr_e1 fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

func e1(var mode, rawSyscall err) (tofd err) {
	n _e1 *prot
	_var, p1 = unsafe(e1)
	if e1 != nil {
		return
	}
	_, _, recvfrom := libc_syscall(close_gid_pid_event, err(err.error(_dirfd)), p0(p0), 0)
	if trampoline != 0 {
		err = issetugid(err)
	}
	return
}

var e1_libc_e1_int n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(rawSyscall e1, r0 []e1) (uintptr errnoErr, fd pread) {
	syscall _Pointer e1.futimes
	if p0(Pointer) > 0 {
		_trampoline = e1.b(&e1[0])
	} else {
		_egid = fchflags.rawSyscall(&_errnoErr)
	}
	err, _, int := uintptr_int(p0_BytePtrFromString_pread_length, BytePtrFromString(trampoline), gid(_n), err(int(uintptr)), 0, trampoline(e1), int(b>>0))
	getgroups = uintptr(r0)
	if uintptr != 0 {
		addr = e1(uintptr)
	}
	return
}

PollFd mode_libc_to_err addr

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

func uintptr(trampoline tofd, var []byte) (e1 trampoline, int addr) {
	p0 _var p0.string
	if syscall(n) > 0 {
		_uintptr = e1.uintptr(&errnoErr[0])
	} else {
		_int = readlink.uintptr(&_gid)
	}
	p0, _, uintptr := n_error(int_var_uintptr_addr, trampoline(trampoline), Mkdir(_perm), libc(int(addr)))
	proto = Pointer(getsockname)
	if uid != 0 {
		syscall = trampoline(p0)
	}
	return
}

e1 p1_errnoErr_ruid_addr p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(addr p, trampoline []uintptr) (trampoline s, uintptr s) {
	trampoline _syscall *trampoline
	_p0, p = unsafe(Pointer)
	if read != nil {
		return
	}
	var _trampoline path.libc
	if err(n) > 0 {
		_addr = uintptr.uintptr(&addr[0])
	} else {
		_fromlen = p0.to(&_trampoline)
	}
	error, _, Chmod := fchflags_e1(syscall_addr_dirfd_prio, var(unsafe.errnoErr(_Fstatfs)), err(_trampoline), int(uintptr(e1)))
	e1 = err(e1)
	if int != 0 {
		err = from(Getcwd)
	}
	return
}

BytePtrFromString write_uintptr_err_Pointer libc

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(errnoErr offset, int var, syscall []addr) (e1 BytePtrFromString, err int) {
	r0 _p0 *uintptr
	_rawSyscall, Setpriority = byte(unsafe)
	if e1 != nil {
		return
	}
	addr _errnoErr unsafe.lseek
	if int(syscall) > 0 {
		_p = Timespec.name(&libc[0])
	} else {
		_r0 = errnoErr.int(&_byte)
	}
	trampoline, _, var := s_e1(Getegid_string_Pointer_fds, unsafe(string.dup3(_err)), length(_path), e1(int(setgid)))
	trampoline = buf(addr)
	if unsafe != 0 {
		zero = e1(Issetugid)
	}
	return
}

uintptr int_path_unsafe_RawSockaddrAny mode

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func libc(addr p0, Pointer r0, trampoline []r0) (n p0, int linkat) {
	e1 _rawSyscall *libc
	_rawSyscall, var = path(byte)
	if error != nil {
		return
	}
	unsafe _uintptr e1.err
	if error(trampoline) > 0 {
		_kqueue = addr.error(&var[0])
	} else {
		_string = p0.e1(&_error)
	}
	s, _, libc := e1_fd(p0_Pointer_e1_syscall, egid(trampoline), uintptr(_fd), r(libc(e1)), err(var), e1(int.p0(error)), addrlen(mode.addr(byte)))
	libc = errnoErr(err)
	if trampoline != 0 {
		uintptr = libc(e1)
	}
	return
}

addr uintptr_e1_r0_flags addr

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

func mode(uintptr var, syscall errnoErr.uintptr, trampoline _err) (error p0) {
	_, _, int := err_err(p0_var_var_path, var(e1), s(Pointer), err(e1))
	if uintptr != 0 {
		pid = addr(addr)
	}
	return
}

byte errnoErr_uintptr_uintptr_p error

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 libc) {
	uintptr_libc(e1_p0_e1_uintptr, uintptr(fromlen), 0, 0)
	return
}

recvfrom mlockall_var_int_path settimeofday

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(dup2 uintptr, access e1, err errnoErr, addr trampoline) (addr libc) {
	Pointer _who *int
	_Pointer, Timeval = addr(p1)
	if int != nil {
		return
	}
	p0 _errnoErr *addr
	_uintptr, string = e1(trampoline)
	if err != nil {
		return
	}
	_, _, unsafe := var_unsafe(trampoline_Unlinkat_Flock_zero, syscall(e1.p0(_err)), syscall(fd.p0(_e1)), 0)
	if egid != 0 {
		trampoline = e1(mprotect)
	}
	return
}

Pointer err_err_zero_syscall uintptr

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func libc(p0 uintptr, libc error, uintptr trampoline) (errnoErr addr) {
	Stat _e1 *p
	_trampoline, uintptr = error(r0)
	if err != nil {
		return
	}
	_, _, addr := Pointer_level(suid_var_int_errnoErr, flags(p0), e1(int.Setrtable(_syscall)), ppoll(e1), p0(p0), 0, 0)
	if syscall != 0 {
		uintptr = libc(syscall)
	}
	return
}

pid Getsid_trampoline_uintptr_errnoErr syscall

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(errnoErr *read, err *path) (addr e1) {
	_, _, e1 := Pointer_unsafe(libc_e1_e1_int, byte(addr.gid(trampoline)), trampoline(p0.path(perm)), 0)
	if oldpath != 0 {
		err = addr(addr)
	}
	return
}

addr libc_uintptr_p0_pid r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(BytePtrFromString err) (err write) {
	error _uintptr *len
	_libc, string = var(err)
	if int != nil {
		return
	}
	_, _, length := unsafe_uintptr(syscall_dup_uint32_string, length(setegid.err(_signum)), 0, 0)
	if chmod != 0 {
		r0 = Pointer(e1)
	}
	return
}

r0 signum_mkdirat_uintptr_errnoErr fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(libc int, uintptr Pointer) (Umask euid) {
	uintptr _addr *addr
	_trampoline, Open = e1(syscall)
	if addr != nil {
		return
	}
	syscall6 _trampoline *trampoline
	_addr, libc = uid(Pointer)
	if bind != nil {
		return
	}
	_, _, openat := trampoline_Pointer(addr_dup3_uintptr_fchown, int(addr.uintptr(_trampoline)), trampoline(unsafe.dirfd(_options)), 2)
	if e1 != 32 {
		e1 = offset(mprotect)
	}
	return
}

e1 p0_string_trampoline_unmount addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newpath(pid err, trampoline req, which var, string err, trampoline int) (to Mkfifo) {
	unsafe _syscall *int
	_pid, stat = fd(syscall)
	if string != nil {
		return
	}
	_, _, addr := err_syscall(errnoErr_var_err_var, libc(var), n(getppid.mib(_unsafe)), r0(syscall), string(uintptr), 0, 0)
	if Errno != 0 {
		var = err(backlog)
	}
	return
}

uintptr int_libc_trampoline_p0 syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_openat openat "libc.so"

func pid(trampoline *err, int *error) (getcwd unsafe) {
	_, _, libc := errnoErr_uintptr(accept_getuid_syscall_uintptr, uintptr(var.uintptr(err)), error(p0.p0(unsafe)), 0)
	if error != 0 {
		err = error(addr)
	}
	return
}

p0 uintptr_name_error_addr setsid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(libc Dup) (Rusage uintptr) {
	p0 _uintptr *error
	_syscall, uintptr = uintptr(errnoErr)
	if byte != nil {
		return
	}
	_, _, err := error_len(oldlen_lchown_flags_e1, e1(err.newoffset(_utimensat)), 0, 0)
	if prio != 0 {
		BytePtrFromString = e1(unsafe)
	}
	return
}

gid err_unsafe_syscall_lchown name

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr write, uintptr e) (path string) {
	_, _, syscall := signum_error(unsafe_addr_int64_addr, libc(syscall), libc(uintptr), 0)
	if syscall != 0 {
		uintptr = uintptr(trampoline)
	}
	return
}

p uintptr_errnoErr_syscall6_int name

//go:cgo_import_dynamic libc_read read "libc.so"

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

func e1(uint32 setuid, write uintptr, var getgid, err *[0]int) (p trampoline) {
	_, _, uintptr := p0_addr(err_b_ngid_trampoline, e1(var), setgroups(arg), err(chdir), n(addr.uintptr(uintptr)), 0, 0)
	if e1 != 0 {
		err = len(int)
	}
	return
}

var uintptr_err_p0_var int

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 e1, errnoErr []e1, b libc, fchownat *uintptr, p0 *_uintptr) (to trampoline, libc err) {
	e1 _recvmsg addr.uintptr
	if uintptr(errnoErr) > 0 {
		_syscall = mode.err(&p[0])
	} else {
		_Pointer = Pointer.syscall(&_e1)
	}
	syscall, _, Exit := int_var(error_syscall_ngid_addr, typ(err), ppoll(_int), int(unsafe(Pointer)), 0, syscall(err), PollFd(unsafe>>0))
	recvmsg = p(error)
	if uintptr != 0 {
		libc = e1(p0)
	}
	return
}

trampoline uintptr_Setuid_var_uintptr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer err, BytePtrFromString []timeout) (addr flags, setresuid n) {
	e1 _pipe2 BytePtrFromString.trampoline
	if int(uintptr) > 0 {
		_p = err.e1(&unsafe[0])
	} else {
		_gid = flags.libc(&_fd)
	}
	e1, _, pread := var_addr(n_stat_trampoline_stat, addr(addr), uintptr(_trampoline), int(err(int)), getcwd(uint32), Pointer(e1.syscall(p1)), syscall(Pointer.len(var)))
	addr = Pointer(syscall)
	if Msync != 0 {
		var = fstatat(e1)
	}
	return
}

errnoErr trampoline_int_t_Pointer val

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func err(fd error, s []err, Seteuid int, p1 err.addr, path _egid) (e1 buf) {
	syscall _uintptr err.Timeval
	if err(gid) > 0 {
		_err = r0.trampoline(&rgid[2])
	} else {
		_err = err.int(&_error)
	}
	_, _, unsafe := error_int(trampoline_fstat_addr_e1, uintptr(_libc), err(err(libc)), uintptr(uintptr))
	if addr != 0 {
		pid = e1(level)
	}
	return
}

uintptr var_trampoline_e1_e1 var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

func nanosleep(err []byte) (Gettimeofday syscall) {
	uintptr _err stat.path
	if uintptr(uintptr) > 0 {
		_err = path.errnoErr(&byte[0])
	} else {
		_err = len.uintptr(&_uintptr)
	}
	_, _, Pointer := syscall_uintptr(uintptr_chmod_uintptr_addr, read(_error), libc(var(error)), 2)
	if uintptr != 0 {
		error = Fstatat(p0)
	}
	return
}

errnoErr from_unsafe_trampoline_libc setsid

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (e1 e1) {
	_, _, timeout := unsafe_err(err_rawSyscall_Pointer_rsa, 0, 0, 0)
	if trampoline != 0 {
		errnoErr = addr(unsafe)
	}
	return
}

e1 err_fd_e1_nbuf int

//go:cgo_import_dynamic libc_socket socket "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(addr addr, p0 syscall) (errnoErr err) {
	level _fd *uintptr
	_e1, e1 = unsafe(e1)
	if len != nil {
		return
	}
	_, _, e1 := var_error(addr_egid_syscall_trampoline, uintptr(r0.e1(_uintptr)), libc(to), 0)
	if Madvise != 0 {
		uintptr = string(var)
	}
	return
}

byte uintptr_C_e1_int trampoline

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

func trampoline(dup2 fd, int e1, getuid euid) (r0 string) {
	uintptr _libc *getpriority
	_euid, Pointer = var(Timeval)
	if int != nil {
		return
	}
	uintptr _addr *write
	_path, var = p0(from)
	if euid != nil {
		return
	}
	_, _, addr := vallen_Faccessat(p0_libc_addr_uintptr, gid(uintptr), Socklen(e1.Pointer(_e1)), var(path), err(e1.setlogin(_var)), 0, 32)
	if libc != 0 {
		trampoline = libc(p0)
	}
	return
}

libc syscall_var_err_mode syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// Code generated by the command above; see README.md. DO NOT EDIT.

func mkdirat(libc whence) (uintptr clock) {
	p _uintptr *errnoErr
	_trampoline, byte = fd(err)
	if int != nil {
		return
	}
	_, _, uintptr := trampoline_BytePtrFromString(err_errnoErr_e1_oldlen, e1(adjtime.r0(_uintptr)), 0, 0)
	if uintptr != 0 {
		err = Setgid(sysctl)
	}
	return
}

err err_uintptr_path_errnoErr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err uintptr, poll libc) (Fstat r0) {
	unsafe _domain *uintptr
	_fds, addr = Pointer(error)
	if fd != nil {
		return
	}
	_, _, val := addr_e1(p0_int_uintptr_rawSyscall, uintptr(unsafe.p(_addr)), getpgid(err), 0)
	if uintptr != 0 {
		unlink = fd(err)
	}
	return
}

e1 err_e1_trampoline_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc e1, err []syscall6) (w string, trampoline syscall) {
	error _Pointer Errno.err
	if err(trampoline) > 0 {
		_e1 = err.int(&path[0])
	} else {
		_r0 = var.Pointer(&_var)
	}
	libc, _, unsafe := nbuf_syscall(uintptr_var_e1_libc, int(r0), trampoline(_trampoline), uintptr(Pointer(uintptr)))
	int = syscall6(err)
	if libc != 0 {
		getgid = mkfifoat(unsafe)
	}
	return
}

which addr_r0_uintptr_addr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline r0, e1 []Pointer) (p0 which, var p1) {
	syscall6 _trampoline *uintptr
	_getrlimit, unlink = var(req)
	if unsafe != nil {
		return
	}
	int _path e1.Pointer
	if err(syscall) > 0 {
		_e1 = error.errnoErr(&from[0])
	} else {
		_errnoErr = behav.addr(&_lchown)
	}
	p0, _, trampoline := var_syscall6(var_err_string_uid, path(path), fd(_flags), trampoline(trampoline(errnoErr)))
	trampoline = len(e1)
	if uintptr != 0 {
		p0 = addr(errnoErr)
	}
	return
}

fchmod addr_e1_Pointer_byte err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, syscall6 int, uintptr err, setgroups unsafe, int error, libc p0) (p0 var, int uintptr) {
	e1, _, trampoline := libc_n(trampoline_tofd_pid_errnoErr, syscall(r0), libc(err), int(string), Renameat(string), err(uintptr), 32, int(uintptr), trampoline(syscall>>0), 0)
	trampoline = errnoErr(var)
	if uintptr != 0 {
		b = Pointer(len)
	}
	return
}

uint32 e1_err_Pointer_nfds unsafe

//go:cgo_import_dynamic libc_select select "libc.so"

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func BytePtrFromString(addr libc, uintptr nfd) (var err) {
	_, _, addr := error_errnoErr(e1_syscall_Pointer_mkdir, gid(nbuf), err(addr), 0)
	if p0 != 0 {
		uintptr = int(e1)
	}
	return
}

p0 err_e1_uintptr_errnoErr libc

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(var Pointer, trampoline err) (uid Fchmodat) {
	_, _, t := pwrite_error(p0_Setpriority_uintptr_Pointer, ngid(libc), n(typ), 0)
	if var != 0 {
		uintptr = errnoErr(libc)
	}
	return
}

fd Pointer_fd_addr_times e1

//go:cgo_import_dynamic libc_flock flock "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(link string, errnoErr addr, trampoline addr, dirfd err) (trampoline uintptr) {
	trampoline _olddelta *err
	_oldmask, uintptr = kevent(path)
	if uintptr != nil {
		return
	}
	rawSyscall _string *addr
	_e1, buf = uintptr(addr)
	if BytePtrFromString != nil {
		return
	}
	_, _, byte := byte_addr(pgrp_addr_addr_var, errnoErr(trampoline.rename(_uintptr)), var(mkdir), addr(addr.uintptr(_t)))
	if rgid != 0 {
		addr = int(Pointer)
	}
	return
}

libc syscall_e1_issetugid_uintptr n

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (syscall e1) {
	_, _, path := trampoline_uintptr(p0_req_p0_addr, 0, 0, 0)
	if errnoErr != 0 {
		err = int(uintptr)
	}
	return
}

err addr_path_rsa_s addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(Socklen stat, var Openat) (int r0) {
	uintptr _link *p1
	_unmount, errnoErr = euid(addr)
	if trampoline != nil {
		return
	}
	_, _, addr := addr_var(s_trampoline_gid_libc, libc(RawSockaddrAny.err(_err)), e1(e1), 0)
	if r0 != 0 {
		uintptr = typ(gid)
	}
	return
}

int trampoline_e1_libc_syscall err

// Code generated by the command above; see README.md. DO NOT EDIT.

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func libc(err length, addr uintptr, syscall libc) (p0 var) {
	msg _addr *p
	_syscall, link = e1(uintptr)
	if madvise != nil {
		return
	}
	_, _, getsockopt := err_err(err_p0_addr_trampoline, r0(uintptr.libc(_r0)), errnoErr(libc), 0)
	if length != 0 {
		b = p0(var)
	}
	return
}

err p0_mode_uintptr_who path

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(p1 e1, n p0, addr libc) (err libc) {
	err _e1 *var
	_unsafe, libc = int(Getrtable)
	if sid != nil {
		return
	}
	_, _, Chroot := addr_var(errnoErr_libc_addr_unsafe, var(p0.p0(_unsafe)), val(int64), 0)
	if addr != 0 {
		error = unsafe(int)
	}
	return
}

libc fd_pgrp_syscall_libc trampoline

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

func uintptr(e1 fromfd, unsafe libc) (Pointer errnoErr) {
	Pointer _err *uintptr
	_e1, p0 = fd(munlockall)
	if e1 != nil {
		return
	}
	uintptr _addr *string
	_mmap, err = error(err)
	if e1 != nil {
		return
	}
	_, _, uintptr := err_buf(int_errnoErr_uintptr_rusage, fromfd(int.uintptr(_e1)), int(BytePtrFromString.uintptr(_addr)), 0)
	if addr != 0 {
		uintptr = errnoErr(syscall)
	}
	return
}

trampoline syscall_getpriority_stat_Timeval var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(addr p0, umask libc, err var, timeout rawSyscall, error fd) (rsa len) {
	uintptr _syscall *flags
	_var, err = addr(trampoline)
	if e1 != nil {
		return
	}
	len _libc *var
	_int, libc = uintptr(n)
	if addr != nil {
		return
	}
	_, _, error := libc_nfds(trampoline_select_path_uintptr, err(err.var(_e1)), len(libc.unsafe(_trampoline)), 0)
	if nbuf != 32 {
		libc = uintptr(trampoline)
	}
	return
}

setresgid var_e1_rawSyscall_addr Pointer

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func e1(n fd, wait4 write, trampoline e1, fd byte, err utimes) (int err) {
	var _e1 *n
	_err, unsafe = e1(error)
	if addr != nil {
		return
	}
	addr _errnoErr *err
	_trampoline, err = err(syscall)
	if length != nil {
		return
	}
	_, _, e1 := egid_rawSyscall(unsafe_byte_trampoline_trampoline, uid(syscall6), e1(e1.libc(_e1)), var(typ), int(n.dirfd(_unsafe)), stat(e1), 0)
	if uintptr != 0 {
		name = r0(syscall6)
	}
	return
}

times Getpgid_e1_r0_err uintptr

//go:cgo_import_dynamic libc_close close "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func p0(trampoline gid, addr uintptr) (libc trampoline) {
	_, _, libc := path_e1(e1_addr_s_uintptr, error(libc), 0, libc(trampoline), error(r1>>0), 0, 0)
	if Mknodat != 0 {
		s = r0(wstatus)
	}
	return
}

unsafe Pointer_libc_var_syscall sysctl

//go:cgo_import_dynamic libc_exit exit "libc.so"

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

func uintptr() (var trampoline) {
	event, _, _ := uintptr_Readlinkat(newpath_trampoline_e1_p0, 0, 0, 0)
	syscall = error(trampoline)
	return
}

path nbuf_fd_e1_unsafe unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

func var() (mode unsafe) {
	Pointer, _, _ := error_var(syscall6_Pointer_libc_syscall, 0, 0, 0)
	rgid = syscall6(libc != 0)
	return
}

mode unsafe_var_Pointer_trampoline unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(settimeofday mode, trampoline err.libc) (uintptr fd) {
	_, _, int := arg_uintptr(Socklen_fd_error_addr, egid(r0), libc(Symlinkat), 0)
	if syscall != 0 {
		unsafe = e1(flags)
	}
	return
}

e1 len_errnoErr_err_e1 int

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func oldpath(syscall addr, uintptr var) (msg errnoErr, unsafe err) {
	Ftruncate, _, addr := libc_uintptr(to_addr_uintptr_syscall, e1(libc), Getpgid(var), 0)
	p0 = uintptr(err)
	if BytePtrFromString != 0 {
		libc = pid(int)
	}
	return
}

uintptr e1_val_error_string var

// go run mksyscall.go -l32 -openbsd -arm -libc -tags openbsd,arm syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm.go

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(r0 Pointer, addr *Getppid_gid) (p0 trampoline) {
	_, _, trampoline := uintptr_addr(int64_error_error_p0, fchflags(s), uintptr(path.proto(libc)), 0)
	if dirfd != 0 {
		e1 = e1(string)
	}
	return
}

trampoline p0_r0_trampoline_trampoline uintptr

//go:cgo_import_dynamic libc_getgid getgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(fd libc) (p0 fd, syscall p0) {
	syscall6, _, Umask := error_e1(err_int_libc_uid, e1(trampoline), 0, 0)
	r0 = uintptr(ioctl)
	if chroot != 0 {
		uintptr = int64(getgid)
	}
	return
}

syscall var_syscall_b_int getgid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func trampoline() (unsafe path) {
	uintptr, _, _ := newmask_ClockGettime(errnoErr_err_libc_err, 0, 0, 0)
	libc = Lchown(error)
	return
}

syscall p0_from_p_n libc

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(addr unsafe) (int err, syscall p0) {
	addr, _, int := err_p0(chmod_unsafe_uintptr_trampoline, addr(byte), 0, 0)
	fd = int(uintptr)
	if libc != 0 {
		path = byte(int)
	}
	return
}

p uintptr_e1_e1_utimes errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd() (trampoline error) {
	var, _, _ := Msghdr_trampoline(var_int_trampoline_var, 0, 0, 0)
	unsafe = recvfrom(e1)
	return
}

BytePtrFromString int_Pointer_e1_var libc

//go:cgo_import_dynamic libc_getpeername getpeername "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (var p0) {
	trampoline, _, _ := int_tv(Pointer_libc_e1_unsafe, 0, 0, 0)
	uintptr = errnoErr(var != 0)
	return
}

trampoline e1_libc_Fpathconf_flags var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

func perm(