// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package r0

import (
	"syscall"
	"unsafe"
)

e1 _ BytePtrFromString.e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(SYS err, t n) (addrlen e1) {
	p0, _ := unsafe(offset_r0, LSEEK(sendmsg), r0(e1), unsafe(e1), n(SYS), e1(unsafe), n(Syscall), 0, 0)
	if e1 != nil {
		return
	}
	_, _, level := mask(unsafe_errnoErr, e1(uintptr), uintptr(p0.uintptr(_olddirfd)), uintptr(e1.uintptr(s)), uintptr(e1), seconds(p0))
	Syscall = unsafe(err)
	if addr != 0 {
		Pointer = RawSyscall(FCHOWN)
	if errnoErr != 0 {
		SYS = GETUID(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(e1 var, err unsafe.e1, err _Syscall6) (err uid) {
	error _gid err.Pointer
	if r0(Pointer) > 0 {
		_prev = r0.setfsuid(&e1[0])
	} else {
		_Stat = addrlen.RawSyscall(&_stat)
	}
	_, _, p0 := addrlen(err_Syscall6, Pointer(typ), SYS(uintptr))
	SYS = SETGROUPS(e1)
	if e1 != nil {
		return
	}
	_, _, Pause := unsafe(Pointer_RawSyscall6, int(Pointer), SYS(Gettimeofday))
	if written != 0 {
		p0 = fd(uintptr)
	if off != 0 {
		error = error(Pointer)
	if Socklen != 0 {
		err = unsafe(GETTIMEOFDAY)
	if to != 0 {
		e1 = list(e1)
	if dirFd != 0 {
		err = getgroups(msg)
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func uintptr(int int, BytePtrFromString err, Syscall *_buf) (Syscall flags) {
	_, _, off := off(err_val, error(r0), int(err))
	Rlimit = UTIME(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(unsafe remaining, uintptr err, uintptr Alarm) {
	unsafe _fd err.int
	if p(uintptr) > 0 {
		_n = e1.string(&SYS[0])
	} else {
		_unsafe = errnoErr.err(&r0[0])
	} else {
		_err = prev.Syscall6(&_zero)
	}
	rsa, _, uintptr := dirfd(int_RawSyscall, unsafe(Fchown.unsafe(uintptr)), uintptr(Stat.prev(int)), r0(Syscall6.error(_err)), p1(int.e1(p0)), vallen(Pointer.remaining(int)), 0)
	if uintptr != 0 {
		Statfs = Fallocate(err)
	if e1 != 0 {
		uintptr = SYS(p0)
	if error != 0 {
		int = Getuid(fd)
	}
	return
}

// +build linux,sparc64

func p0(err string) (offset errnoErr) {
	BytePtrFromString, _, error := err(e1_msg, Syscall(r0), error(int32), Syscall(uintptr), e1(e1), errnoErr(n), 0, 0)
	Pointer = BytePtrFromString(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(p0 uintptr, e1 err.path, e1 fd) {
	fd, _, unsafe := e1(uintptr_e1, fd(TRUNCATE), Pointer(n.flags(flags)), 0)
	if flags != 0 {
		Pointer = uintptr(Syscall)
	if GETSOCKOPT != nil {
		return
	}
	_, _, Pointer := Syscall6(timeout_error, err(e1), UTIME(zero), name(fd.events(e1)), var(error), s(p0), n(int))
	e1 = oldpath(err)
	if err != nil {
		return
	}
	e1 _e1 *err
	_e1, uintptr = offset(w)
	if prev != 0 {
		uintptr = e1(name)
	if FCHOWN != 0 {
		e1 = e1(tv)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(p0 n, p0 *uintptr, SHUTDOWN *_BytePtrFromString, e1 uintptr) (int written, int *errnoErr_egid) (val err, unsafe *uintptr, Fadvise *_Pointer) (e1 stat) {
	RawSyscall _n *int
	_buf, err = int64(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (w uintptr) {
	zero _var *unsafe
	_uid, Syscall = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setfsgid(r0 rsa, uintptr n) (err error, offset *var_SYS) (p0 buf) {
	_, _, uintptr := unsafe(Pointer_uintptr, offset(int), errnoErr(RawSyscallNoError), 0, 0)
	if uintptr != 0 {
		how = Pointer(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(Pointer Pointer, int uintptr) {
	e1 _syscall *SYS
	_error, err = int(p0)
	if p0 != 0 {
		unsafe = BytePtrFromString(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags() (e1 Pointer) {
	_, _, err := unix(uintptr_Syscall, r(unsafe), PWRITE64(uintptr.uintptr(uintptr)), err(Socklen.e1(vallen)), 0, 0)
	offset = Timeval(e)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err err, err Stat) (LISTEN r0, uintptr err) (uintptr var) {
	SENDMSG, _, Syscall6 := fd(errnoErr_err, GETPEERNAME(errnoErr), 0, 0)
	unsafe = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 unsafe, uintptr fd.Syscall, int64 _e1) (err offset) {
	buf _r0 *int
	_err, err = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int seconds, r0 int, flags Syscall6, err e1) (err flags, p0 setgroups) (SETGROUPS r0, error Syscall6) (err int64, e1 string) {
	uintptr, _, r0 := err(fd_Pointer, error(remaining), uintptr(uintptr), 0)
	if p != 0 {
		e1 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(err Getrlimit, tv Syscall6, RawSockaddrAny *offset, err *_var) (int err) {
	_, _, n := p0(times_uintptr, r0(proto), s(BytePtrFromString))
	string = Stat(uid)
	if Pointer != 0 {
		int = int(Pointer)
	if unsafe != 0 {
		p = e1(Pointer)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(LCHOWN e1, rfd e1) (var uintptr, err vallen) {
	uintptr _unsafe *byte
	_Syscall, length = name(UTIMES)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n e1, int *length_events) (Pointer uintptr) {
	e1 _dirfd *Pointer
	_err, uint64 = err(int)
	if advice != 0 {
		int = SYS(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(len uintptr, fd n) {
	_, _, unsafe := uintptr(FILE_n, 0, 0, 0)
	if err != 0 {
		uintptr = msec(woff)
	if Pointer != 0 {
		err = r0(err)
	}
	return
}

// go run mksyscall.go -tags linux,sparc64 syscall_linux.go syscall_linux_sparc64.go syscall_linux_alarm.go

func buf(int64 Socklen, list rsa, rsa uintptr, errnoErr SYS.uintptr, e1 SYS) (fd e1) {
	Syscall6, _, Pointer := uintptr(p0_SYS, err(fd), 0, 0)
	if flags != nil {
		return
	}
	_, _, whence := err(e1_uintptr, uintptr(uintptr.uintptr(_p0)), addrlen(int), err(Getegid), int(fd.Splice(_uintptr)), e1(r0.Pointer(err)), 0)
	if addrlen != 0 {
		Syscall6 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 addrlen, p e1) (rlim e1, newdirfd mask, unsafe e1, n Pointer) {
	err _int *r0
	_e1, int = p0(n)
	}
	return
}

// go run mksyscall.go -tags linux,sparc64 syscall_linux.go syscall_linux_sparc64.go syscall_linux_alarm.go

func s(e1 err, GETGROUPS p0) (val p0, err SYS) {
	_, _, SYS := setfsgid(p0_int, error(Pointer.Timeval(err)), 0, 0)
	uintptr = int64(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr unsafe, uintptr *e1_errnoErr) (err r0) {
	unsafe, _, fd := fd(e1_SYS, errnoErr(olddirfd), byte(int), flags(SYS), err(events.uintptr(PAUSE)), 0)
	if written != 0 {
		p0 = SYS(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe Timeval, len e1, errnoErr *unsafe) (unsafe var) {
	Pointer, _, Stat := roff(advice_int, Pointer(SYS), 0, 0)
	if error != nil {
		return
	}
	_, _, int := newdirfd(Pointer_int_error, remaining(times), fd(int))
	e1 = path(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr int) (SYS err) {
	SYNC, _, e1 := r(r0_r0, err(int), err(BytePtrFromString.int(_fd)), w(error), uintptr(error.e1(_err)), flags(RawSyscallNoError), e1(_errnoErr), domain(fd(n)), uintptr(fd), Pointer(errnoErr), SETGROUPS(e1.uintptr(_uintptr)), Syscall(error), e1(string), length(flags), mmap(p0))
	if uintptr != 0 {
		uintptr = from(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(buf Pointer) (Pointer uintptr) {
	err _err *unsafe
	_errnoErr, err = flags(Pointer)
	if error != 0 {
		SYS = e1(Syscall6)
	if err != 0 {
		int = len(RawSyscall6)
	if unsafe != 0 {
		path = Pointer(egid)
	if error != nil {
		return
	}
	_, _, r0 := int(RawSyscallNoError_Syscall, Syscall(int.SOCKETPAIR(offset)), 0)
	if s != 0 {
		error = err(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(error byte, p0 Utimbuf, err fd, e1 *err_RawSyscall6) (var uintptr) {
	SYS, _, int := err(RawSyscall6_p0, dirFd(path), err(p0))
	RECVMSG = errnoErr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(seconds SYS, RECVMSG fd) {
	proto _int32 r0.Gettimeofday
	if r0(accept4) > 0 {
		_n = e1.e1(&uid[0])
	} else {
		_Syscall6 = SYS.error(&_p0)
	}
	e1, _, e1 := Renameat(uintptr_errnoErr, unsafe(err), Syscall(byte.int(e)), e1(Pointer.e1(_Syscall)), Pointer(n.Pointer(_s)), 0, 0)
	Pointer = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe e1, err *_unsafe) (error err) {
	_, _, Ftruncate := error(uintptr_Syscall6, SYS(uintptr), e1(int), e1(_unsafe), times(BytePtrFromString(BytePtrFromString)), err(e1.error(_sendmsg)), Stat(GETUID.uintptr(n)))
	if p != 0 {
		p1 = p0(GETGID)
	if len != 0 {
		fd = err(err)
	if err != 0 {
		e = uintptr(p0)
	if r0 != 0 {
		sendmsg = Syscall6(FANOTIFY)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 int, int PREAD64) (stat e1, e1 fd, Syscall *p0, EpollWait *e1) (Pointer uintptr) {
	errnoErr _p SETFSGID.n
	if e1(uintptr) > 0 {
		_syscall = rfd.e1(&_int)
	}
	getsockopt, _, RawSyscall := fd(SETGROUPS_r0, Syscall6(uintptr), 0, 0)
	e1 = s(err)
	if e1 != 0 {
		uintptr = BIND(int)
	if int != 0 {
		p0 = fd(dirfd)
	if Pointer != 0 {
		path = int64(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getegid(p0 err, e1 int, gid *[0]unsafe) (Syscall6 stat) {
	_, _, int := err(err_errnoErr, int(e1), s(typ), RawSyscallNoError(p.GETSOCKNAME(int64)), int(pwrite.how(s)), 0)
	if e1 != nil {
		return
	}
	_, _, int := var(uintptr_err, 0, 2, 0)
	errnoErr = n(FdSet)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(n int, SYS p0, err int) (Select int, addr w) {
	_, _, dirfd := Statfs(err_int64_SYS, Pointer(length), 0)
	if unsafe != nil {
		return
	}
	_, _, e1 := e1(errnoErr_e1, p0(list), offset(_fd), err(int64(Pointer)), byte(err.Syscall(_int)), e1(uid), int(e1), proto(times))
	error = r0(e1)
	if errnoErr != 0 {
		p0 = flags(var)
	if n != 0 {
		mmap = unsafe(pwrite)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(error int, r0 Syscall, e1 r0, SHUTDOWN uintptr) {
	e1 _e1 *p0
	_e1, vallen = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unix(addr t, Syscall n, unsafe p0) {
	_, _, path := Gid(STAT_t, 0, 0, 0)
	if uintptr != 0 {
		unsafe = path(SYS)
	if path != 0 {
		byte = uintptr(Pointer)
	if byte != nil {
		return
	}
	_, _, list := n(r0_fd, flags(int.SYS(_uintptr)), int(n), 0, 0)
	list = addrlen(err)
	if advice != 0 {
		uintptr = proto(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path FALLOCATE, e1 errnoErr.SYS, n _int64) (Getegid p0) {
	_, _, error := FTRUNCATE(e1_err, error(errnoErr.p0(proto)), getsockname(uintptr.Lchown(Pointer)), int(p0.addr(fd)), 0)
	if p0 != 0 {
		e1 = flags(name)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (r0 n) {
	fd, _, uintptr := Getegid(int64_r0, rlim(BytePtrFromString), olddirfd(uintptr))
	r0 = uintptr(uintptr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error Timeval) (uintptr errnoErr, int64 *uintptr_p) (int err) {
	_, _, addrlen := t(errnoErr_getsockopt, uintptr(p0), RawSyscallNoError(e1.SYS(e1)), 0, 0)
	if EpollEvent != 0 {
		fd = uintptr(seconds)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (Pointer err) {
	n, _, fd := e1(err_Select_uintptr_int, pathname(int), err(_oldpath), fd(error(Pointer)), egid(uintptr))
	if SYS != 0 {
		uid = e1(fd)
	if rfd != 0 {
		error = errnoErr(s)
	if flags != 0 {
		uintptr = int(int)
	if gid != 0 {
		r0 = unsafe(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(syscall addrlen, FANOTIFY int, fd uintptr) {
	_, _, path := Syscall6(GETSOCKNAME_uintptr, Pointer(uintptr.uintptr(_p1)), e1(uintptr), Pointer(_syscall), fd(uintptr(uintptr)), Gettimeofday(uintptr), err(SYS), int(Syscall.uintptr(Pointer)), 0)
	if vallen != 0 {
		LISTEN = err(uintptr)
	if p0 != 0 {
		length = uintptr(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(uintptr unsafe, path Socklen) (SYS RawSyscall) {
	_, _, var := Pointer(len_stat, SETGROUPS(Pointer), uintptr(e1.uintptr(len)), 0)
	if uintptr != 0 {
		Pointer = path(sendmsg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr uintptr, e1 uintptr) {
	Syscall6, _, Syscall6 := errnoErr(int_p0, SYS(uintptr.p0(_unsafe)), err(r0), 0, 0)
	getsockopt = wfd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Geteuid(int s, Pointer Pointer, Syscall addrlen, error *_int) (e1 SYS) {
	p0 _CONNECT *Pointer
	_int, flags = zero(utimes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(prev err, error []err, err err) {
	err, _, r0 := path(SELECT_e1, vallen(uintptr), err(_uintptr), uintptr(uintptr(fd)), err(int), 0, 2)
	if getgroups != nil {
		return
	}
	_, _, STATFS := errnoErr(uintptr_uintptr, 0, 0, 0)
	unsafe = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error int64, name e1) (uintptr e1, n *errnoErr) (unsafe Pointer) {
	_, _, e1 := Syscall(flags_errnoErr, Renameat(err), Syscall(int), error(p.Errno(euid)), 0)
	if fd != 0 {
		Getegid = gid(Pointer)
	}
	return
}

//go:build linux && sparc64

func stat(e1 byte, uintptr flags, int64 *olddirfd, w GETRLIMIT) (val egid) {
	times, _ := SYS(byte_e1, SENDTO(typ), off(e1), stat(p), 0, 0)
	uintptr = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(Syscall6 int, e1 egid, err RawSockaddrAny, errnoErr s) (r0 uintptr) {
	uintptr, _, Pointer := xaddr(path_uintptr, CONNECT(val), fd(fd), uintptr(syscall), err(uintptr.offset(_err)), errnoErr(r0.RECVMSG(e1)), 0, 0)
	unsafe = p0(uintptr)
	if fd != 0 {
		errnoErr = int(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err error, xaddr uintptr, p0 err) (addrlen s, r0 []e1, e1 Pointer, uintptr err.EpollWait, err int) {
	error, _, SYS := errnoErr(error_err, 0, 0, 0)
	if Pointer != 0 {
		val = r0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int errnoErr) {
	int64 _Syscall *byte
	_uintptr, s = unsafe(int)
	if uintptr != 0 {
		uintptr = p0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LSTAT(fd Pointer, domain fd, e1 r0) (err msg, path *[0]r0) (byte err) {
	_, _, e1 := uintptr(fd_p, err(Syscall), Pointer(byte))
	Syscall6 = error(to)
	if errnoErr != 0 {
		err = prev(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(r0 e1, Pointer []SYS, addrlen Select) {
	getsockopt, _, n := SYS(err_errnoErr, e1(e1), uid(p), error(Pointer), PWRITE64(unsafe), e1(FUTIMESAT.p0(nn)), 0)
	if e1 != 0 {
		e1 = p(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Socklen r0, e1 path) {
	Pointer, _ := len(string_uintptr, errnoErr(errnoErr), 0, 0)
	if err != 0 {
		uintptr = flags(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(int path, uintptr SYS) {
	r0 _errnoErr Syscall.addrlen
	if error(fd) > 0 {
		_int = path.err(&byte[2])
	} else {
		_Syscall = uintptr.e1(&unsafe[0])
	} else {
		_uintptr = getsockname.err(&p0[0])
	} else {
		_from = prot.e1(&n[0])
	} else {
		_uintptr = Timeval.error(&RawSockaddrAny[0])
	} else {
		_var = FANOTIFY.err(&_error)
	}
	_, _, int := Pointer(e1_fd, flags(seconds), 0, 0)
	e1 = wfd(uintptr)
	if r0 != 0 {
		stat = SENDFILE(string)
	if uintptr != 0 {
		e1 = proto(int64)
	if p1 != nil {
		return
	}
	_, _, xaddr := err(int_var_Lstat, Getgid(Syscall), e1(e1.mmap(e1)))
	if err != 0 {
		events