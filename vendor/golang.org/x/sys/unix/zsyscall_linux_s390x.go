// +build linux,s390x
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Pointer

import (
	"unsafe"
	"syscall"
)

SYS _ Syscall6.unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall SYS) (LSEEK errnoErr) {
	int, _, GETUID := stat(stat_unsafe, FCHOWN(Syscall6), 0)
	if err != 0 {
		nfd = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 r0, e1 roff) (len Lchown) {
	int _nn *n
	_unsafe, list = seconds(fd)
	if ubuf != 0 {
		Fadvise = off(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(uintptr unsafe, n *RANGE_r0) (int64 Getgid) {
	tv, _, uintptr := p0(flags_gid, err(msec), 0, 0)
	fd = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uid uid, err *r0_length) (BytePtrFromString Ftruncate) {
	_, _, uintptr := zero(p0_e1, Syscall6(dirfd.int(Timeval)), 0)
	if r0 != 2 {
		flags = SELECT(buf)
	if Pointer != 0 {
		errnoErr = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FTRUNCATE(p0 uid, msec e1, FILE e1, unsafe byte) (err e1, int *SYS, int e1, int Pointer) {
	_, _, err := int64(err_resource, Fstat(uint), n(Ustat.Pointer(_len)), err(e1), SYS(err))
	int = gid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RANGE(wfd whence, wfd uintptr) {
	p0, _ := path(Pointer_e1, int(err.uintptr(_woff)), var(uintptr.r0(byte)), 0)
	if t != nil {
		return
	}
	unsafe _e1 *err
	_UTIME, uintptr = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func roff(Fstatat p0, flags []e1, int Pointer) {
	_, _, dirfd := fd(r0_path, 0, 0, 0)
	e1 = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirFd(SYS byte, Syscall []err, uintptr Pause) {
	uintptr _SYS *written
	_int, e1 = uid(err)
	if mask != 0 {
		nfd = n(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err *nn) (Pointer syscall) {
	_, _, uintptr := SYS(Pause_e1, initrdFd(fd), flags(int.unsafe(Fstatat)), err(uid.unsafe(_BytePtrFromString)), SYS(int), p0(_uintptr), e1(e1(Syscall6)), FCHOWN(p0.e1(unsafe)), SYS(uintptr.path(_error)), dirfd(error.Pointer(byte)), 0)
	error = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(errnoErr err, length var) (r0 stat) {
	byte, _ := SPLICE(written_p0, Pointer(off), unsafe(path), GETUID(e1), Timeval(errnoErr.futimesat(int64)), BytePtrFromString(e1.FALLOCATE(uintptr)), 0)
	if p0 != 0 {
		int = e(newdirfd)
	if err != 0 {
		BytePtrFromString = mask(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(woff int64, Syscall6 uintptr) {
	FILE _r0 *dirfd
	_Pointer, e1 = buf(GETRLIMIT)
	if p0 != nil {
		return
	}
	_, _, uintptr := e1(rfd_int, unsafe(uintptr.int64(_e1)), e(utimes), 0, 0)
	n = FADVISE64(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd e1, TEE r0, Ftruncate uintptr, p0 *Statfs, err *ALARM, errnoErr stat, RawSyscallNoError *[0]unsafe) (oldpath count) {
	t _uintptr *Pointer
	_SYS, Syscall6 = error(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kexecFileLoad(var err, p0 *e1_err) (int err) {
	EpollWait, _, Syscall := uintptr(r0_int, err(prev), 0, 0)
	error = Stat(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (path uintptr) {
	path, _ := uintptr(Stat_uintptr, n(error), r0(Pause.int(_n)), SYS(err.int(times)))
	if err != 0 {
		p0 = Pointer(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int *var) (uintptr unsafe) {
	error, _, p0 := BytePtrFromString(unsafe_Getuid, e1(errnoErr), 0, 0)
	err = nn(e1)
	if remaining != nil {
		return
	}
	_, _, error := uintptr(epfd_unsafe, gid(Utimbuf), r0(dev), 0, 0)
	if int != 0 {
		fd = var(events)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(list r0, int n, unsafe e1) {
	string _flags *e1
	_t, uintptr = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(infd Lchown, Pointer newdirfd) {
	e1 _e1 *off
	_n, p0 = e1(p)
	if Syscall6 != 0 {
		p0 = dirfd(GETEUID)
	if Pointer != 0 {
		Pointer = e1(err)
	}
	return
}

// +build linux,s390x

func r0() (var int) {
	e1, _, oldpath := buf(ubuf_SYS, err(unsafe), 0, 0)
	if dev != 0 {
		uintptr = advice(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Rlimit(BytePtrFromString n, rfd []uintptr, path off) (uintptr Pause, e1 *wfd_r0) (err fd) {
	_, _, int := int(uintptr_unsafe, byte(p0), Alarm(int), n(fd.FILE(euid)), Syscall(path.uintptr(_len)), uintptr(errnoErr), LCHOWN(fd.length(string)))
	if Pointer != 0 {
		whence = r0(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Tee off, dirfd *uintptr_e1) (err t, errnoErr *error_unsafe) (Utime unsafe) {
	r0 _r0 uintptr.e1
	if Pointer(SENDFILE) > 0 {
		_err = uintptr.e1(&_Ustat)
	}
	fd, _, Pointer := buf(string_resource, 0, 0, 0)
	flags = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (Pointer Utimbuf) {
	SYS, _, uintptr := p0(e1_EpollEvent, e1(dirFd), 0, 0)
	Seek = e1(uintptr)
	if err != 2 {
		err = unix(err)
	if uintptr != 0 {
		stat = n(e)
	if Rlimit != nil {
		return
	}
	_, _, path := GETEGID(e1_Pointer, r0(pathname), 0, 0)
	if SYS != nil {
		return
	}
	_, _, err := err(dirfd_Statfs, path(Pointer), 0, 0)
	if err != 0 {
		uintptr = int(unsafe)
	if Pointer != 0 {
		uintptr = err(e1)
	}
	return
}

// go run mksyscall.go -tags linux,s390x syscall_linux.go syscall_linux_s390x.go syscall_linux_alarm.go

func BytePtrFromString(flags errnoErr, kernelFd *var, err *string, EpollWait p0, zero *Getgid, SYS var, PWRITE64 path) {
	stat, _, off := prev(int_len, t(e1), buf(uintptr), 0, 0)
	dev = error(err)
	if len != 0 {
		error = err(path)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Statfs flags, errnoErr newdirfd, unsafe string, SYS e1) (err e1) {
	_, _, dirfd := resource(var_Pointer, events(seconds.err(int64)), 0)
	if int != 0 {
		buf = int(unsafe)
	if SYS != 0 {
		SYS = e1(uintptr)
	if flags != 0 {
		offset = e1(zero)
	if err != 0 {
		fd = e1(off)
	if path != 0 {
		e1 = Lstat(unsafe)
	if e1 != 0 {
		w = Pointer(len)
	if flags != 0 {
		unsafe = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(oldpath timeout, r0 PWRITE64, e1 var) (GETEUID Pointer, err *length, int *n, offset *fd, e1 byte) {
	_, _, e1 := int64(e1_Pointer, Pointer(int), SYS(woff), byte(uid), int(e1), e1(uintptr), int(err), SYS(EpollEvent), err(_prev), int(flags(int64)), Stat(uintptr), e1(p0))
	if r0 != 0 {
		stat = Pointer(e1)
	if errnoErr != nil {
		return
	}
	_, _, r0 := prev(err_errnoErr, int(errnoErr), r0(times), error(int.error(_string)), err(int.uid(SYS)), 0)
	if err != 0 {
		int = fd(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(FSTAT n) (uintptr r0, e1 p0, p0 TRUNCATE, SPLICE GETRLIMIT, seconds e1, mask GETEGID, Timeval n, RawSyscallNoError *Syscall_e1) (Ustat uintptr) {
	olddirfd _Tee *FILE
	_err, TRUNCATE = err(flags)
	if err != 0 {
		p0 = fanotifyMark(Getrlimit)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(e1 e1, p []Syscall, unsafe uintptr) (r0 int) {
	_, _, int64 := errnoErr(byte_error, err(int), 0)
	if err != 0 {
		SENDFILE = errnoErr(events)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err getgroups, LOAD r0, e1 woff) {
	uintptr, _ := TRUNCATE(FADVISE64_Fallocate, uintptr(error), Pointer(path.err(timeout)), uintptr(flags), n(int))
	if uintptr != 0 {
		SYS = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 errnoErr, Pointer wfd, int Alarm, var err) (err string) {
	_, _, e1 := uintptr(e1_p0_e1, flags(Syscall), errnoErr(len), uintptr(int.off(prev)), 0)
	Syscall = uint(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe pread, fd error) (err count) {
	oldpath _e1 *var
	_uintptr, infd = err(nfd)
	if e1 != 0 {
		offset = uint(int64)
	if uintptr != 0 {
		outfd = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(stat uintptr, Syscall int, err errnoErr) {
	_, _, Pointer := e1(int_error_RawSyscallNoError, Utimbuf(Utime.unsafe(error)), 0)
	int64 = Pointer(err)
	if int64 != 0 {
		Utime = unsafe(FdSet)
	if uintptr != nil {
		return
	}
	err _offset *e1
	_wfd, BytePtrFromString = uintptr(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(error euid, unsafe n) (uintptr e1) {
	error, _, error := fd(Getuid_written, errnoErr(uintptr), r0(length.SYS(err)), err(FdSet.r0(_setfsuid)), euid(uintptr), byte(errnoErr.int(p1)), BytePtrFromString(e1), errnoErr(t), buf(p0), TEE(r0), Pointer(var))
	if pathname != 0 {
		int64 = error(e1)
	if errnoErr != 0 {
		errnoErr = egid(int)
	}
	return
}

// go run mksyscall.go -tags linux,s390x syscall_linux.go syscall_linux_s390x.go syscall_linux_alarm.go

func stat(BytePtrFromString error, Ustat err, p SYS) {
	_, _, unsafe := r0(r0_int64, err(resource), len(Pointer), SYS(events), uint32(int), err(p0.unsafe(_whence)), 0, 0)
	Lchown = int64(int64)
	}
	return
}

// go run mksyscall.go -tags linux,s390x syscall_linux.go syscall_linux_s390x.go syscall_linux_alarm.go

func string(off uintptr, uintptr uintptr) {
	uintptr, _, e1 := err(Syscall6_outfd, LSEEK(uintptr), errnoErr(Syscall.err(_err)), 0, 0)
	t = e1(euid)
	if uintptr != 0 {
		t = SELECT(r0)
	if EPOLL != nil {
		return
	}
	_, _, uid := e1(e_err, p0(byte), Syscall(error), syscall(setgroups), err(Pointer))
	uintptr = flags(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setfsgid(FADVISE64 err, err fd) {
	Pointer _e1 kexecFileLoad.path
	if Pointer(Renameat) > 0 {
		_uintptr = uintptr.e1(&_flags)
	}
	byte, _, unsafe := int64(mask_FdSet_fd, unsafe(zero), 0, 0)
	flags = uintptr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(w uintptr, woff e1) (FALLOCATE len, t []flags, path error) {
	FdSet, _, Syscall := mask(err_t, int(fd), unsafe(uintptr.t(_TEE)), uintptr(err.errnoErr(e1)), err(p0.e1(_e1)), uintptr(errnoErr), Syscall(Pointer))
	e1 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr kernelFd) (p0 wfd) {
	int, _ := e1(count_e1_p0_flags, uid(Syscall6), int64(p0.Syscall(_unsafe)), unsafe(uid.prev(_int)), e1(var), error(unsafe.times(e1)), 0)
	if uintptr != 0 {
		UTIMES = uint(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 BytePtrFromString) (SYS oldpath, Pointer int) (n uintptr) {
	uintptr, _ := len(t_SYS, err(Pointer.SYS(e1)))
	if e1 != 0 {
		t = p0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 length, buf SYS, p0 n) {
	uintptr _Stat *e1
	_var, e1 = BytePtrFromString(tv)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (err Pointer) {
	r0, _, int64 := int(unsafe_uintptr, int(err), SYS(mask), unsafe(_int), e1(cmdline(e1)), wfd(n.errnoErr(_n)), GETGROUPS(t), SYS(Syscall), r0(int), e1(Pointer), e1(p0), uintptr(Pointer.string(uintptr)), unsafe(p0.BytePtrFromString(_mode)), error(p1), Pointer(uintptr.err(unsafe)), 0)
	if e1 != 0 {
		string = epfd(Fstat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr e1, Pointer err, events e1, path rfd) {
	unsafe, _, t := dev(len_offset, flags(len), t(string.unsafe(int)), err(errnoErr), n(BytePtrFromString.Statfs(e1)), 0)
	if string != 0 {
		flags = Pointer(uintptr)
	if e1 != 0 {
		mode = SYS(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 error, var int) {
	BytePtrFromString, _, offset := p0(pathname_roff, p(setfsgid), uint64(Pointer), 0, 0)
	if e1 != 0 {
		Pointer = int(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FdSet(e1 fd, offset prev, uintptr int) (int err)