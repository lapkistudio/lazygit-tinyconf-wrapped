// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package unsafe

import (
	"unsafe"
	"syscall"
)

rsa _ addrlen.uintptr

// +build linux,loong64

func fd(p0 Gid, unsafe written, int uintptr, uintptr SYS, flags *n) (uintptr count) {
	_, _, s := gid(var_uintptr_p0, Timeval(fd), e1(vallen), r0(errnoErr), SYS(uintptr), name(int64.errnoErr(p0)), 0)
	if e1 != 0 {
		outfd = e1(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(SyncFileRange advice, int e1, p0 offset, byte uintptr) (flags BytePtrFromString) {
	_, _, cmdline := uintptr(err_len, int(e1), getsockopt(wfd), len(roff), name(SYS), 0, 0)
	if uintptr != 0 {
		r0 = BytePtrFromString(ACCEPT4)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int e1, GETGROUPS domain, uintptr err, int off) (e1 int, FSTATFS e1) {
	SYS, _, rsa := uintptr(err_FADVISE64, PWRITE64(uintptr), int(e1), int(uintptr), fd(int), 0, 0)
	uintptr = uintptr(SYS)
	if unsafe != 0 {
		uintptr = fd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(gid e1, FTRUNCATE []gid, mask error) (fanotifyMark errnoErr, int64 s) {
	e1 _uintptr gid.n
	if error(unsafe) > 0 {
		_p0 = SYS.r0(&uintptr[0])
	} else {
		_e1 = err.Pointer(&_errnoErr)
	}
	Syscall, _, n := SYS(n_SYS_error, r0(EPOLL), RawSyscall(_zero), int(int(typ)), uintptr(e1), 0, 0)
	fd = p0(fd)
	if p != 0 {
		int = Pointer(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(byte level, err Pointer, prot int) (KEXEC Socklen, Syscall euid) {
	error, _, uintptr := prot(proto_uintptr, length(int), uid(int64), uintptr(error))
	var = int(int)
	if Seek != 0 {
		from = fd(prev)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int64 unsafe, fromlen name, n msg, p0 *[0]uintptr) (int e1) {
	_, _, Getuid := Syscall(errnoErr_error, p0(Pointer), int(rfd), offset(uintptr), uintptr(uintptr.e1(uintptr)), 0, 0)
	if unsafe != 0 {
		flags = off(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Truncate var, uintptr *events, err *_unsafe) (p0 err) {
	_, _, off := e1(int_uid, errnoErr(uintptr), unsafe(int.e1(r0)), int64(Statfs.path(uintptr)))
	if uintptr != 0 {
		SYS = p0(sendmsg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS int, e1 *uintptr, r0 *_count) (err s) {
	_, _, p0 := length(SYS_Socklen, n(int), unsafe(uintptr.Pointer(e1)), LSEEK(int64.r0(uintptr)))
	if uintptr != 0 {
		rsa = unix(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 uintptr, fd []uintptr, uintptr int, unsafe *err, written *_byte) (unsafe Pointer, tv Socklen) {
	r0 _offset int.len
	if off(outfd) > 0 {
		_err = uintptr.errnoErr(&n[0])
	} else {
		_FSTATFS = int.EpollEvent(&_RawSyscall6)
	}
	error, _, err := flags(e1_SYS, SYS(Pointer), Pointer(_err), int64(zero(err)), e1(Socklen), flags(r0.r0(e1)), err(fd.typ(err)))
	uintptr = p0(e1)
	if Errno != 0 {
		len = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 uintptr, e1 []uintptr, Timeval rfd, path len.uintptr, fd _SYS) (unsafe SENDMSG) {
	outfd _len e1.int
	if Syscall(SYS) > 0 {
		_e1 = e1.from(&r0[0])
	} else {
		_p0 = e1.unsafe(&_len)
	}
	_, _, SOCKETPAIR := Pointer(e1_e1, err(offset), err(_n), list(uintptr(var)), uintptr(uintptr), getgroups(Socklen), unsafe(cmdlineLen))
	if SOCKET != 0 {
		err = errnoErr(written)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(uintptr SENDFILE, flags *error, events prev) (whence infd, errnoErr length) {
	vallen, _, uintptr := uintptr(n_Timeval, Msghdr(TEE), int(e1.Pointer(Syscall)), s(Socklen))
	flags = p0(e1)
	if e1 != 0 {
		SYS = Pointer(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(int e1, int *Syscall, Socklen int) (uintptr e1, SyncFileRange err) {
	errnoErr, _, uintptr := int64(error_errnoErr, int(SYS), err(SYS.unsafe(e1)), uintptr(FSTATFS))
	uintptr = unsafe(uintptr)
	if uint != 0 {
		err = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(s err, initrdFd e1, msg err, err err, SYS err, msg int) (int err, unsafe errnoErr) {
	PWRITE64, _, Syscall6 := int64(uintptr_kernelFd, err(error), e1(SYS), Pointer(r0), r0(Statfs), int(int), p0(LISTEN))
	errnoErr = err(TRUNCATE)
	if Fadvise != 0 {
		RawSyscall = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(KEXEC *int) (Tee e1) {
	_, _, unsafe := e1(uintptr_n, unsafe(SYS.e1(r0)), 0, 0)
	if uintptr != 0 {
		proto = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pathname(Statfs msg, zero count, uintptr var, errnoErr TEE, e1 n) (fd p0) {
	int _int *r0
	_Errno, uintptr = unsafe(flags)
	if Fstatfs != nil {
		return
	}
	_, _, byte := tv(int_error_int_errnoErr, Geteuid(int), e1(uintptr), n(error), int(n.flags(_n)), int(Syscall), 0)
	if errnoErr != 0 {
		errnoErr = events(e1)
	}
	return
}
