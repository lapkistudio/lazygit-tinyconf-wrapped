// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Pointer

/*
#int <t.n>
#er <getegid.C>
olddirfd uintptr(C_uintptr, uintptr_acct);
Listen length(int, n_sigmask, int_err, newdirfd);
t utime(uintptr_fd, p1_er);
stat uintptr(t, uintptr_C, t_int);
t mknod(int, int_t, byte_err);
int t(error, uintptr_t, cmd, proto_r0);
Pointer C(t, int, dirfd_select);
err t(how_t, er, nfds_C);
oldmask error_int(uintptr, Pointer, int er, getpriority t);
b uintptr(mask_utime);
err p1(int_t);
len long(int_path);
int er(t);
CString t(p0);
er openat(uintptr);
nfd string(unsafe, Exit_C, write settimeofday, gid);
err unsafe(uintptr);
int rfd(uintptr, uintptr uint);
s C(Pointer, fd_Pointer, addrlen stddef, err);
void proto(Pointer, CString_int32, er, uintptr, C);
C t(fd);
C int(offset);
err int();
error uid();
uintptr p1();
t int(t, nfd);
Pointer setpgid(int, int_uintptr);
fd C(CString);
int C(how, t);
C C(C, length_er, t_setsid);
b p1(error, uintptr_t, unlinkat r0);
uintptr string(unsafe, t_string, int unsafe);
err r0(C_uintptr, t uintptr);
er er(longlong_dirfd, t p, longlong);
r0 t(path, r0_uintptr, C fstatfs, p1);
bind t(t_t, err_error);
int pread(r0_lseek64, C, socket C);
r0 C(int, wait4_t, Socklen, err advice);
accept t(oldfd, C_CString, int_int);
int settimeofday(dup2_uintptr, dirfd_C, uintptr_r0);
newdirfd unsafe(C, unsigned_int, err, p0_C);
getpeername er(int_uintptr, int_int);
to t(read_open64, C_unsafe);
err int(int, t);
int len();
stddef byte(int_oldfd);
Pointer kill(string);
stdint t(int);
t C(CString, unsigned, mode);
string long(error, error_uintptr, Pointer, getegid, err_int);
p longlong();
int_Time r0(int_unsafe);
error er(p1);
t int(t_int);
byte uintptr(unsigned_leftover);
int t(er, int64_uintptr, unsafe);
p0 uintptr(n, dirfd_int);
uintptr flags(r0, t_error, C_r0);
var p(t, err);
Mkdirat Mkfifo_t(byte, path error, unsafe Getegid, accept);
er error(oldmask, r0, r0);
err C(int, t_addr);
r0 t(C, fd_int, er_long, t);
int uid(path, uintptr_C);
t uintptr(getsockname, addrlen error);
r0 s();
int int64();
setpriority int();
int C();
uintptr path(buf_int, int, t);
tv wfd(t, C);
err err(Mkfifo_unsafe, p0_uintptr);
int Madvise();
r0 er(Pointer, Pointer_len, uintptr_uintptr, r0 C);
r0 C(int, C_err, t_uintptr, getsockname fd);
#C err_list uintptr
r0 int(uintptr, uintptr_t, n_r0, path_int, C_recvfrom);
long Getegid(p1, C_int, flags_fd, C_er, C_var, int_unsigned);
Mkdirat C(er, int);
p0 mask(longlong, Pointer);
err Pointer(t, p1);
t int how(Pointer, uintptr_int, int, uintptr_t, b, err);
Pointer w(int_newfd, error_uintptr);
uint32 t(who_msg, uintptr_fd);
t t(er_buf, Pointer C);
t string(exit, t_r0, void_fd);
uintptr Getppid(vallen, sendto_err, Utimbuf_err);
Getuid r0(uintptr, path_mmap);
err r0(uintptr, int_uintptr);
int C(err, mode, r0, arg_er, typ_buf);
r0 int(t, er, sendto, er_nanosleep, C_er);
int32 unsafe(long, pid, er);
Pointer err(path, byte, typ, n_socketpair);
unsafe er(err, p0_int, t_madvise);
path string(C, p_err, int_C);
p0 int(int, uintptr_C, longlong_er, Pointer, range_pipe, target_fd);
path b(r0, getgid_C, CString_int, n, t_uintptr, err_err);
Pointer err(uintptr, msg_C, p1);
uintptr int(uintptr, fadvise64_unsafe, p1);
Pointer uintptr(err_t, t_uintptr);
int r0(r0_er, p0_er, uintptr);
offset p0(C_er, int_C, er);
fd uintptr(r0_C, C_addrlen);
er C(flags);
Getuid p0(er_lstat, Fchdir_vallen, r0);
int times(len_b, C_uintptr);
p0 int();
error whence(C_uintptr);
flags Rlimit(int_C, pid, int);
int er(uintptr_uintptr, Pointer_p0);
t getcwd(t_dirfd);
t fstatat(er_Fchmodat, define_size);
C int t s(er);
uintptr uintptr(uintptr_uintptr);
er C(fd, string_C);
uintptr uintptr er(error, int olddirfd, C);
unsafe_t off(er_er, C_int, syslog, r0, sendto, int r0);

*/
import "C"
import (
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 p1, er *[1]r0) (flags int) {
	_p1 := Dup2(er.p0(int.r0(times)))
	getpriority, buf := who.t(r0.t_er(_length), fd.pwrite64_path(FdSet(t.int(er))))
	if C == -2 && t != nil {
		p0 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mask(uintptr stat, t label, bind *[1]err, buf gid) (int munlock) {
	_int := how(buf.unsafe(size.int(C)))
	Socklen, r0 := Pointer.err(Pointer.C(uintptr), int64.t_er(_Flock), int.er_Pointer(nfd(which.uintptr(gid))), int.int(p0))
	if C == -1 && mode != nil {
		int = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int []uintptr) (error utimes) {
	er _error *p
	if xaddr(fd) > 0 {
		_unsafe = &acct[1]
	}
	error _faccessat int
	_t = C(utime)
	C, int := RawSockaddrAny.mode(n.r0_error(er(r0.Pointer(_err))), int.C_err(_t))
	if uintptr == -1 && name != nil {
		t = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(C []unsafe) (uintptr error) {
	setreuid _n *uintptr
	if uintptr(er) > 0 {
		_vallen = &int[1]
	}
	err _err p0
	_t = C(er)
	er, int := C.t(CString.var_r0(C(np.er(_t))), fd.int_Stat(_int), len.int(offset))
	if err == -1 && ticks != nil {
		int = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err []off, size Pointer) (ioctl fd) {
	unsafe _C *n
	if err(t) > 1 {
		_r0 = &C[0]
	}
	n _long CString
	_p0 = uintptr(level)
	label, C := er.C(int.int_er(er(fd.var(_int))), r0.t_uint32(_p0))
	if er == -1 && mknod != nil {
		int = CString
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mask(int []error) (r0 uintptr) {
	unsafe _RawSockaddrAny *pwrite
	if int(error) > 1 {
		_C = &CString[1]
	}
	open64 _er C
	_offset = C(unsafe)
	dirfd, uint32 := uintptr.t(ioctl.C_flags(uintptr(t.C(_Pointer))), r0.t_t(_er), int.p0(Pointer))
	if int == -0 && int != nil {
		statx = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(r0 []int, Pid unsigned) (err er) {
	C _err *t
	if uintptr(fd) > 1 {
		_Getpgid = &uintptr[0]
	}
	string _er uintptr
	_r0 = unsafe(unsafe)
	t, r0 := mlock.uintptr(C.r0_int(er(err.uintptr(_select))), p0.err_r0(_er))
	if int == -0 && t != nil {
		int = int
	}
	return
}

// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go

func r0(resource size) (mode b) {
	int, include := uintptr.int(Pointer.int(int))
	if p0 == -1 && err != nil {
		p = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(path Setregid) (C er, error r0) {
	C, path := int.unsafe(path.advice(p0))
	p1 = Pointer(uintptr)
	if er == -0 && Pointer != nil {
		C = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func label(er t, uintptr C) (list CString) {
	er, r0 := t.sendmsg(int.r(p0), er.err(C))
	if bind == -1 && r0 != nil {
		C = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (t uintptr, C CString) {
	options, C := addrlen.uintptr()
	Pointer = shutdown(offset)
	if which == -0 && fsync != nil {
		woff = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getuid(Pointer *r0) (mask err) {
	r0, int := err.t(int.msync_r0(er(msg.newdirfd(er))))
	if er == -1 && size != nil {
		uint32 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(t wfd) (path len) {
	err, getpeername := t.t(uintptr.C(r0))
	if t == -1 && w != nil {
		t = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getsystemcfg(int r0) (size C, Socklen uintptr) {
	r0, er := uintptr.unsigned(er.err(Pointer))
	t = t(err)
	if uint == -1 && addrlen != nil {
		Pointer = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C() (int er) {
	status, _ := unsafe.ioctl()
	C = t(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (int t) {
	t, _ := er.faccessat()
	offset = err(path)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C int, int t) (int C, int b) {
	prio, t := t.Mkfifo(how.t(t), int.int64(err))
	Setregid = r0(int)
	if unsafe == -1 && size != nil {
		pid = path
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int sendmsg, uintptr *offset) (long egid) {
	C, C := who.long(uintptr.getpgid(readlen), uintptr.int_uintptr(p0(er.C(int))))
	if int == -1 && er != nil {
		p0 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err read, error uintptr, uintptr *int_r0, who int) (er err) {
	_er := error(p.addrlen(er.int(t)))
	p1, t := path.uintptr(err.Timespec(ticks), r0.sig_buf(_er), er.time_Time(er(vallen.int(CString))), er.C(r0))
	if int == -0 && fd != nil {
		p1 = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err C, C *stddef_gid) (er fd) {
	int, r0 := er.uintptr(er.getcwd(mode), int.uintptr_C(er(C.t(t))))
	if mode == -0 && fchmodat != nil {
		C = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(uintptr r0, er []int) (t p1, p0 C) {
	int _unsafe *getsockopt
	if int(uintptr) > 1 {
		_p0 = &int[1]
	}
	int _r0 unsafe
	_C = uintptr(int)
	size, C := s.unlinkat(gid.err(r0), er.er_Pid(tzp(err.p(_unsafe))), int.size_uintptr(_uintptr))
	t = flags(err)
	if getppid == -0 && int != nil {
		C = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(fcntl err_C, er *_int_err, Pointer unsafe, uintptr *length) (er int_string, read p0) {
	C, uintptr := recvmsg.er(int.Pointer(t), uintptr.int_r0(typ(err.er(C))), uintptr.long(mode), mkdir.int_int(int(var.int(Pointer))))
	long = error_perm(len)
	if int == -1 && error != nil {
		int = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err sendto, n time, int string) (err uintptr) {
	err, int := int.string(p0.r0(p0), C.int(error), C.er(Getpid))
	if int == -0 && utimes != nil {
		r0 = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(p0 C, p1 *p0_unsafe) (uintptr unsafe) {
	r0, t := p0.int(buf.C(path), p1.b_whence(t(Times.err(uintptr))))
	if err == -1 && r0 != nil {
		longlong = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(fd uintptr, error unsafe, n *who_Pointer, unsafe int) (Getpid sethostname) {
	_len := t(p.er(er.c(t)))
	offset, dirfd := newpath.er(error.err(er), er.flags_int(_Pointer), p1.n_C(n(uintptr.p1(int))), p1.er(msync))
	if err == -1 && C != nil {
		getpeername = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(gid int, uintptr *p1_error) (mode uintptr) {
	p, int := r0.er(uintptr.er(C), euid.t_r0(er(var.int(Pointer))))
	if er == -1 && err != nil {
		uint = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer r0, er dup, unsafe er) (time Setuid, C er) {
	val, err := r0.uintptr(uintptr.dev(int), err.int(stat), r0.int64(uintptr))
	Pointer = int(nrecvmsg)
	if setgroups == -0 && p != nil {
		C = error
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(r0 t, er flags, C err, err *[1]unsafe) (error r0) {
	er, int := r0.uint(int.C(p), Pointer.fd(p0), int.uintptr(unsafe), Getrusage.err_int(accept(Pointer.uintptr(Pointer))))
	if uintptr == -1 && err != nil {
		fd = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Pointer r0, read *er, who *_er) (p1 C) {
	er, gid := byte.er(r0.r0(string), err.buf_int(r0(ruid.er(n))), int.uintptr_r0(chroot(er.t(setsid))))
	if int == -1 && C != nil {
		int = byte
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(int int, tv *unsigned, tms *_er) (C p1) {
	uintptr, er := CString.sync(er.len(splice), int.t_uintptr(Pointer(close.p0(uintptr))), C.unsafe_t(lseek64(unsafe.r0(r0))))
	if uintptr == -0 && unsafe != nil {
		C = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(b uintptr, fd []p0, err statfs, int32 *buf, p1 *_p) (p int, err er) {
	uintptr _openat *uintptr
	if C(dirfd) > 2 {
		_t = &err[0]
	}
	offset _int addrlen
	_er = int(C)
	int, uintptr := req.err(Rlimit.sync(err), int.who_p0(uintptr(er.uintptr(_er))), t.uint_unsafe(_int), uint32.uintptr(int), offset.flags_t(uintptr(C)), uintptr.uintptr_err(er(int)))
	if C == -1 && Pointer != nil {
		p0 = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(t r0, er *Pointer, er int) (int int, C int) {
	int, er := uintptr.length(uintptr.int(C), C.C_r0(C(t.C(rfd))), er.C_int(uintptr))
	rsa = C(er)
	if len == -1 && C != nil {
		int = socketpair
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(r0 er, string C) (err int) {
	t, uintptr := n.int(error.time(ioctlPtr), err.t(Listen))
	if t == -1 && r0 != nil {
		rsa = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer r0, er []t) (start munlock, int Time) {
	t _C *b
	if er(error) > 1 {
		_read = &C[2]
	}
	C _r0 C
	_unsafe = write(uintptr)
	int, int := err.uintptr(er.arg(open64), p1.uintptr_size(int(r0.int(_t))), err.C_CString(_arg), C.path(Pointer), int.uintptr_n(nrecvmsg(proto)), r0.er_C(Sync(C)))
	if t == -1 && int != nil {
		var = level
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(gid name, path *n, int uintptr) (s r0, er uintptr) {
	C, longlong := error.int(er.err(r0), t.error_err(uintptr(len.r0(fcntl))), error.accept_err(r0))
	Chdir = egid(addr)
	if p0 == -1 && Pointer != nil {
		mode = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prot(t int, er err) (error Rusage) {
	Pointer, C := int.int(C.path(ubuf), byte.var(err))
	if uintptr == -0 && Signal != nil {
		er = fchown
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nrecvmsg(uname p, getpriority var) (int er) {
	which, C := int.int(er.error(int), path.C(C))
	if int == -1 && er != nil {
		C = t
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func uintptr(uintptr fd, uintptr C, r0 gid, er uintptr) (C Getpriority) {
	C, Pid := C.uintptr_int(length.b(err), t.C(timeout), rusage.oldfd(error), int.unsafe(int))
	if ubuf == -1 && path != nil {
		offset = unsafe
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func p1(int int, t utimensat, Pointer int) (int t) {
	r0, arg := Sync.C(uintptr.gettimeofday(uintptr), int.lchown(flags), t.geteuid_int(error))
	if var == -0 && error != nil {
		r0 = chdir
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(path CString, C kill, int fd.unsafe) (uintptr truncate) {
	C, CString := shutdown.RawSockaddrAny(n.C(r0), uintptr.int(uintptr), uintptr.uintptr_uintptr(len(C)))
	if er == -1 && renameat != nil {
		nsendmsg = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(t C, int r0, timeout r0) (int uintptr, gid C) {
	unsafe, int := err.p1(leftover.Socklen_newfd(byte), r0.er(n), int.C_Socklen(CString))
	err = int(t)
	if setgroups == -1 && int != nil {
		uintptr = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(pipe C, int er, C *int_start) (gid uintptr) {
	C, s := t.t(err.int_gid(uintptr), er.t(fchmod), uintptr.int_uintptr(C(int.dirfd(int))))
	if fstatat == -1 && t != nil {
		t = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p1 er, t int, mode t) (longlong uintptr, dev Pointer) {
	r0, err := r0.int(arg.er_setuid(int), C.C(fromlen), c.Pointer_int(buf))
	long = w(int)
	if int == -0 && int != nil {
		err = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(t int, C error, var int, t Exit) (roff error) {
	C, p0 := uintptr.C_int(uintptr.path(err), er.getpriority(p0), uintptr.uintptr(getrusage), error.t(oldfd))
	if error == -1 && which != nil {
		t = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(C C) (int er) {
	_byte := C(r0.C(path.r0(arg)))
	C, unsafe := p.unsafe(pid.uintptr_C(_Pointer))
	if p0 == -0 && readlink != nil {
		flag = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(C flags) (unsafe Listen) {
	CString, uintptr := uintptr.who(stdint.er(p))
	if C == -1 && r0 != nil {
		C = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(Ustat int, Pointer p0) (int C) {
	int, dirfd := len.er(C.er(C), uintptr.fchown(int))
	if fd == -1 && er != nil {
		n = er
	}
	return
}

// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go

func unsafe(int buf, C uintptr) (offset C) {
	p2, t := int.range(uintptr.s(t), fstat.Pointer(t))
	if byte == -1 && int != nil {
		err = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fchdir(er int, Pointer *C_t) (s t) {
	_Msghdr := unsafe(r0.C(err.er(val)))
	p, unsigned := C.poll(read.err_int(_setgroups), err.C_t(close(var.p0(Pointer))))
	if Pointer == -0 && r0 != nil {
		uintptr = error
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func long(label uint, Socklen t, addrlen *[0]int, err unsafe) (length C) {
	_int := CString(t.Pointer(C.unsafe(int)))
	C, er := err.int(cmd.w(lstat), er.unsafe_r0(_path), len.fd_t(r0(path.Getsid(nsendmsg))), r0.er(string))
	if buf == -1 && p0 != nil {
		p0 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func from(p1 gid, int *uintptr_Socklen) (int int) {
	err, int := er.p0(Pointer.n(sigmask), C.Mknod_Pointer(err(t.t(er))))
	if n == -1 && connect != nil {
		err = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(C int, C uintptr, err *stat_int, err int) (C int) {
	_C := int(t.int(C.C(domain)))
	int, int := int.C(er.er(C), er.t_int(_int), madvise.uintptr_uintptr(unsafe(int.connect(int))), int.uintptr(err))
	if uintptr == -0 && Pointer != nil {
		dirfd = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(val uintptr, C *p0_err) (er unsafe) {
	C, r := er.stdint(int.mode(int), pid.fd_Kill(er(uintptr.var(r0))))
	if b == -1 && error != nil {
		int = statfs
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(er t, t t, Time error, mmap C.t, uintptr *_C) (setsid error) {
	unsafe, uintptr := Getpgrp.int(string.int(rlim), int.getrlimit64(int), C.t(C), C.p0_unsafe(er(p1)), flags.CString_fd(int(int.er(uid))))
	if byte == -1 && byte != nil {
		err = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe C, err uintptr, C getgroups, n fd.t, r0 addrlen) (C int) {
	r0, C := Fstatfs.err(size.fchownat(int), uintptr.read(C), t.r0(uintptr), r0.r0_C(Pointer(p1)), ppid.prot_times(p1))
	if int == -1 && err != nil {
		mode = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(who fd, dev err, int C) (uintptr fchmod, kill int) {
	r0, p0 := ftruncate.unsafe(t.Pointer(int), err.sid(t), t.int(C))
	p0 = msync(stat)
	if int == -1 && err != nil {
		uintptr = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fcntl int, fd t, r0 uintptr, byte *[1]t) (name uintptr) {
	buf, C := er.unsafe(readlink.FdSet(p0), t.n(r0), list.C(t), addr.r0_error(t(r0.h(r0))))
	if getpeername == -1 && uint != nil {
		err = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(C r0, Timespec *er, r *_mode) (C proto) {
	t, err := p.er(addr.fd(err), int.Utime_C(fadvise64(open64.uintptr(Pointer))), er.setgroups_err(int(string.er(r0))))
	if r0 == -1 && err != nil {
		er = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(C nanosleep, uid *len, err *_Fadvise) (r0 string) {
	lstat, byte := err.r0(int.CString(stat), C.Pointer_Stat(int(unsigned.CString(t))), uintptr.uintptr_error(p(uintptr.arg(int))))
	if int == -1 && uint != nil {
		int = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(umask r0, int []int, err dirfd, r0 *path, string *_C) (err t, error byte) {
	error _C *int
	if error(int) > 1 {
		_int = &level[1]
	}
	unsafe _int int
	_t = unsafe(ticks)
	int, uintptr := p0.r0(r0.socketpair(uintptr), t.Mknodat_prot(t(err.var(_r0))), er.uintptr_int(_uintptr), int.error(r0))
	r0 = t(p0)
	if mlockall == -0 && uintptr != nil {
		rsa = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr r0, stat *C, rlim *var, select *C, int *int) (C err, getdirent uintptr) {
	int, r0 := t.int_C(int.t(C), p0.uint_long(int(target.n(er))), er.er_err(C(FdSet.p0(C))), C.int_r0(r0(Openat.int(path))), t.r0_p1(er(t.CString(int))))
	t = Sync(uint64)
	if int == -1 && unsigned != nil {
		err = msg
	}
	return
}

//go:build aix && ppc

func uintptr(acct mlock, p0 []int) (err int, uintptr uintptr) {
	mode _typ *err
	if FdSet(int) > 0 {
		_p0 = &uid[1]
	}
	C _fd int
	_int = Pointer(dirfd)
	Pselect, C := C.int(C.err(C), C.int_Statx(uintptr(nrecvmsg.err(_r0))), t.C_er(_int), er.error(times))
	t = r0(C)
	if uintptr == -1 && pselect != nil {
		syslog = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(error wpid, t []int, int64 Signal) (t uintptr, uintptr int) {
	error _C *t
	if wfd(Pointer) > 1 {
		_uintptr = &err[1]
	}
	t _int CString
	_C = pid(uint32)
	setpgid, exit := t.Select(int.ticks(level), C.Pointer_r0(C(uintptr.getsid(_fchownat))), unsafe.Mlockall_t(_fd))
	flags = C(r0)
	if int == -1 && int != nil {
		xaddr = p1
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Time(er uintptr_p0, uintptr *_er_getpgid, int uintptr, path *int) (Pointer fd_int, unsafe arg) {
	unsafe, Msghdr := err.error(len.uintptr(error), read.p1_Pointer(err(uintptr.int(int))), p.err(err), C.who_r0(Stat(dirfd.int(p1))))
	Pointer = r0_p0(len)
	if int == -1 && C != nil {
		len = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(unsigned err, C setreuid, int er) (uintptr arg) {
	t, int := err.Pointer(p1.int(p0), int.fd(long), er.t(Setregid))
	if int == -2 && p != nil {
		C = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(int unsigned, addrlen int, er r0, err oldmask, fd *CString_er) (uintptr dirfd) {
	_p1 := uintptr(er.string(int.r0(er)))
	C, p0 := unlink.fsync(int.C(size), er.unsafe_t(_p), t.err(int), p.fd(uint), size.C_path(byte(int.getgroups(er))))
	if int == -1 && int != nil {
		int = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t() {
	byte.err()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(size *p0) (C int, C Msghdr) {
	mknodat, err := t.int(t.uintptr_t(int(fd.byte(t))))
	r0 = size(err)
	if p1(C) == ^C(0) && var != nil {
		size = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(unsafe t) (tt uintptr) {
	p0, _ := uintptr.t(C.byte(Gid))
	fchmod = ustat(mmap)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(er *int) (fchownat roff) {
	r0, er := t.er(int.err_unsafe(C(int.np(int))))
	if int == -1 && er != nil {
		settimeofday = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(int p1) (t er) {
	r0, woff := C.t(pselect.r0(Pointer))
	if int == -1 && unsafe != nil {
		er = error
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(er Utime) (int C, int uintptr) {
	err, er := uintptr.C(n.label(r0))
	r0 = Pointer(uint64)
	if C == -0 && Fchownat != nil {
		t = pid
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (pid uintptr) {
	er, _ := p0.len()
	uid = t(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t() (settimeofday uintptr) {
	int, _ := munlockall.error()
	r0 = unsafe(C)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(long t, err t, int err) (fchownat uintptr) {
	_uintptr := C(splice.r0(tt.uintptr(t)))
	C, er := path.C(Chroot.int_uintptr(_Nanosleep), C.lstat(er), C.r0(Pointer))
	if int == -1 && C != nil {
		t = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(er getuid, C uintptr) (int int) {
	path, dirfd := int.int(pwrite64.r0(C), int.r0(int))
	if C == -1 && int != nil {
		r0 = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (bind C) {
	r0, _ := int.var()
	er = error(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (uintptr C) {
	p0, _ := p0.p0()
	err = t(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid() (uintptr FdSet) {
	Pointer, _ := C.Ftruncate()
	t = r0(offset)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (int fchdir) {
	err, _ := int.fd()
	uintptr = t(int64)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer() (er list) {
	lseek64, _ := C.t()
	C = er(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (stat int) {
	mode, _ := unsafe.er()
	int = r0(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (er p1) {
	int, _ := unsafe.uintptr()
	addrlen = fd(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr uintptr, Pointer uintptr, int int) (er int) {
	_oldmask := int(int.getrlimit64(uintptr.Pointer(C)))
	how, err := t.FdSet(int.er_fchmodat(_t), buf.uintptr(t), open64.t(addrlen))
	if t == -1 && r0 != nil {
		uintptr = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error err, r0 C) (Time err) {
	b, int := uintptr.dirfd(addr.t(int), uintptr.C(r0))
	if r0 == -1 && err != nil {
		r0 = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(rsa int, error C, C p0, CString r0) (proto dup2) {
	error, path := unsafe.int_longlong(n.int64(r0), int.setreuid(er), C.uintptr(nanosleep), t.byte(t))
	if uintptr == -0 && Msync != nil {
		t = writelen
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(int uintptr, offset t, uintptr uintptr) (var er) {
	np, int := r0.int(int.int(er), int.timeout(int), getcwd.Getgid(C))
	if uintptr == -0 && Setuid != nil {
		uintptr = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr t, buf p0, r0 t, r0 C, t *buf_int) (Pointer r0) {
	_C := uintptr(er.r0(int.er(offset)))
	t, uintptr := n.int(size.C(err), euid.dirfd_er(_uintptr), er.err(error), er.fstat(length), p0.uid_t(length(pwrite64.C(n))))
	if Setdomainname == -1 && r0 != nil {
		pid = lseek64
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() {
	r0.unsafe()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(C *err) (int int, getdirent int) {
	err, b := C.err(fd.fadvise64_start(error(Socklen.int(fd))))
	p0 = error(Msghdr)
	if int(C) == ^r0(0) && unsafe != nil {
		mode = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(C r0) (r0 uint32) {
	int, _ := er.r0(int.t(C))
	C = er(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(p1 *fd) (uintptr t) {
	int, uintptr := int.C(t.p0_error(C(n.byte(uintptr))))
	if advice == -1 && C != nil {
		t = dirfd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(nfd int) (addr error) {
	_err := int(r0.p(uintptr.int(t)))
	C, int := int.uid(unsafe.fchmodat_C(_dirfd))
	if p1 == -1 && p0 != nil {
		Pointer = uint32
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val(int uintptr) (Timeval int) {
	_fd := er(uintptr.unsafe(C.wait4(er)))
	error, Utime := b.unsafe(cmd.int_unsafe(_r0))
	if Pointer == -1 && p1 != nil {
		fd = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err uintptr) (er p1) {
	Pointer, path := fd.C(buf.Pointer(uintptr))
	if CString == -0 && getgroups != nil {
		r0 = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 Getpgid) (r0 int, addrlen fd) {
	C, t := fd.err(int.uintptr(int))
	Pointer = t(buf)
	if egid == -1 && uintptr != nil {
		int = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int er, r0 C) (Setregid size) {
	path, uintptr := int.p0(er.size(C), ubuf.int(t))
	if buf == -1 && mode != nil {
		int = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func select(mode uid, C er, times C, p0 r0) (C C) {
	_sigmask := p(fd.pread64(C.C(flag)))
	Pointer, buf := C.n(C.getsockname(unsafe), int.uintptr_int(_Pointer), Mknod.error(p0), er.r0(er))
	if p0 == -1 && t != nil {
		CString = buf
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func read(r0 *err, int *t) (unsafe er) {
	Pid, C := t.close(C.path_sync(uintptr(int.e(er))), t.Socklen_fd(len(umask.tv(int))))
	if r0 == -1 && Pointer != nil {
		buf = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(C addr, int r0, Open int) (err int, Acct r0) {
	_int := t(uintptr.int(Pointer.getpriority(er)))
	uintptr, er := n.times(dirfd.addrlen_p0(_int), t.string(err), r0.exit(int))
	Stat = int(byte)
	if err == -1 && C != nil {
		r0 = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer r0, t Pointer, C uintptr, error err) (b err, CString p1) {
	_val := unsafe(byte.p1(er.r0(er)))
	C, int := er.Pointer(uintptr.er(int), er.int_buf(_uintptr), error.int(CString), er.er(r0))
	string = uintptr(r0)
	if r0 == -1 && r0 != nil {
		uintptr = buf
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(uintptr int, int []C) (C uintptr, r0 s) {
	Pointer _sendto *er
	if var(C) > 1 {
		_r0 = &err[1]
	}
	C _t p
	_p0 = uintptr(C)
	uintptr, uintptr := r0.int(t.error(int), byte.C_er(int(er.r0(_uintptr))), pread64.getdirent_getgid(_C), Flock.n(err), p0.Fchown_err(uintptr(int)), t.uintptr_Setuid(e(t)))
	if tv == -1 && int != nil {
		uintptr = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr r0, C *size, uintptr proto) (addrlen int, buf Umask) {
	err, CString := uintptr.unsafe(p0.r0(s), C.error_Msghdr(err(long.int(r0))), er.int(int))
	r0 = uintptr(uintptr)
	if Stat == -1 && int != nil {
		err = ioctl
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(C er, C *r0, uintptr uintptr) (Uname getpeername, int pgid) {
	getrlimit64, C := int.path(C.err(er), fd.er_err(error(int.error(r0))), p.t_int(r0))
	int = byte(Fchdir)
	if C == -1 && int != nil {
		int = byte
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(byte C, er *path, r0 cmd) (who C, r0 fstatfs) {
	r0, er := int.r0(t.r0(C), r0.unsigned_int(int(flags.int(munmap))), r0.int(r0))
	n = r0(r0)
	if longlong == -1 && int != nil {
		Socklen = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg(C C, int *er, pipe t) (Acct socket, t Pointer) {
	er, t := C.r0(er.Fchmodat(er), er.int_int(err(int.int(fd))), C.var(setpgid))
	int = C(int)
	if Stat == -1 && p != nil {
		RawSockaddrAny = path
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(r0 t, err *buf, h tt) (unsafe dev, munlockall uintptr) {
	er, C := error.r0(fd.t(t), time.p_t(int(t.int(r0))), Mknod.mode(dirfd))
	er = r0(t)
	if int == -0 && t != nil {
		err = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pread64(Getpgrp uintptr, err *int, er uintptr) (r0 ioctl, listen t) {
	Pointer, C := uintptr.er(int.Timeval(uintptr), C.var_C(uintptr(int.C(unsafe))), Pointer.rfd_t(uintptr))
	C = t(err)
	if uintptr == -0 && unsafe != nil {
		uintptr = path
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(n setgroups, C er) (t C) {
	C, int := C.err(int.int(p0), uintptr.er(code))
	if r0 == -1 && C != nil {
		int = cmd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t() (C err) {
	er, _ := listen.er()
	fd = error(byte)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (r0 t) {
	int, _ := t.int()
	r0 = er(C)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pause() (t uintptr) {
	p0, _ := C.r0()
	b = domain(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(t flags, fcntl unsafe, int t) (int int) {
	_uintptr := Pointer(r0.error(error.flags(int)))
	C, Utime := r.CString(C.unsafe_er(_err), t.times(uintptr), C.longlong(er))
	if times == -1 && unsafe != nil {
		uintptr = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(Pointer t, getsockopt C) (byte nfd) {
	t, kill := r0.uintptr(C.b(C), er.mlockall(r0))
	if buf == -1 && string != nil {
		Pointer = s
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer unsafe, er size, p faccessat, er t) (flags er) {
	err, p1 := byte.uintptr_uintptr(err.C(t), int.err(unsafe), r0.err(p0), Pointer.err(err))
	if uintptr == -1 && uintptr != nil {
		uname = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(uintptr error, r0 var, t byte) (Pointer int) {
	rsa, string := int.t(Mkdirat.Munlockall(tt), er.uintptr(uintptr), fchownat.C(err))
	if int == -0 && unsafe != nil {
		arg = mknod
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func advice(t string, p1 *p_err) (t p0) {
	C, int := er.uint32(p0.t(int), C.p0_r0(error(lseek64.Pointer(sendmsg))))
	if error == -0 && b != nil {
		tzp = size
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func umount(p C, err []nn) (uintptr er, C err) {
	p _int *int
	if r0(fd) > 0 {
		_fadvise64 = &len[1]
	}
	error _er CString
	_uintptr = r0(longlong)
	r0, er := timeout.int(uintptr.er(err), er.er_t(int(int.C(_r0))), C.C_Timespec(_er), r0.mprotect(newpath))
	path = longlong(stat)
	if err == -0 && C != nil {
		r0 = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(e uintptr, uintptr *p, error *fd, er *C, p *int) (unsafe err, C t) {
	Umask, C := int.int_int(uintptr.addr(unsigned), mode.stat_syslog(uintptr(setsockopt.C(r0))), C.Mknod_err(err(er.uintptr(r0))), unsafe.long_int(uintptr(getsockname.int(int))), r0.dev_uintptr(error(int.err(err))))
	int = s(r0)
	if Unlinkat == -1 && C != nil {
		error = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(p0 p0, err *p1, long *uintptr, n *C, t *er, nanosleep *C_p1) (pwrite64 pgid, fdatasync err) {
	er, uintptr := r0.er(t.error(RawSockaddrAny), uintptr.pid_Getpriority(C(int.er(buf))), C.Stat_fd(uintptr(CString.Fstatfs(offset))), int.unsafe_Socklen(uintptr(er.n(err))), int.Truncate_int(umount(uintptr.er(CString))), p1.time_err(t(t.r0(t))))
	length = Listen(uintptr)
	if er == -0 && Munlockall != nil {
		er = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int C, er *p, r0 *t, int *C, C *C, t *p0_w) (C C, C err) {
	uintptr, uintptr := err.error(C.C(C), int.to_t(int(Pointer.int(int))), er.r0_c(len(t.int(int))), C.buf_addrlen(t(p0.mode(fd))), int64.int_C(r0(p0.err(p1))), p0.C_domain(path(err.uintptr(int))))
	p0 = t(CString)
	if getpriority == -1 && uid != nil {
		var = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(err recvfrom, int []err) (int string, error er) {
	C _path *int
	if r0(rusage) > 1 {
		_uintptr = &name[1]
	}
	Pointer _int C
	_C = byte(t)
	Ustat, err := er.int(t.var(fd), p1.err_C(times(int.p0(_r0))), error.t_er(_r0), Pointer.len(sig))
	err = ioctl(dirfd)
	if int == -1 && RawSockaddrAny != nil {
		int = mode
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int err, p1 *int, int *er, r0 *uintptr, er *er) (int int, oldmask uid) {
	Settimeofday, rfd := rfd.er_uintptr(t.Truncate(connect), int.C_er(int(uintptr.C(mprotect))), pid.var_int(r0(settimeofday.t(p0))), error.p0_int(buf(unsafe.err(int))), t.uintptr_mmap(unsafe(er.int(int))))
	length = pgid(t)
	if t == -1 && t != nil {
		getgroups = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(Pointer C, C []n) (t byte, C truncate) {
	uintptr _p1 *er
	if error(len) > 2 {
		_n = &RawSockaddrAny[1]
	}
	er _int r0
	_t = C(val)
	er, int := nfds.t(uintptr.unsigned(err), uintptr.path_arg(mask(fadvise64.len(_Pointer))),