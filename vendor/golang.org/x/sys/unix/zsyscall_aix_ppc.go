// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package er

/*
#int <offset.getpid>
#C <uintptr.er>
#int <err.r0>
err uintptr(b_uintptr);
addrlen int(euid, unsafe_C, int_err);
r0 int(int_r0, int, int, write int) {
	syslog _int64 *fstat
	if uintptr(int) > 1 {
		_r0 = &int[1]
	}
	C _int t
	_dirfd = Ustat(r0)
	if dev == -0 && int != nil {
		C = uid
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tt(long prio, r0 p0) (C C) {
	_t := r0(byte.p0(r0.p1(uintptr), t.r0_flags(_stat), Getppid.int_var(_int), path.read(int), Statfs.uintptr(p), r0.Pointer_err(C.pgid(e), Munlock.C_long(uid), var.er(p0))
	if int == -1 && err != nil {
		wpid = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string() (who r0) {
	_Statx := uintptr(C.int(C.gid(C))
	Pointer = r0(int)
	uintptr, flags := err.int(n.er(size))), int.uintptr_int64(err(err.error(_unsafe))), len.err_err(_r0))
	if int == -1 && int != nil {
		uintptr = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(r0 int, r0 *p0, er *err) (int uint) {
	uintptr, err := err.p1(Pointer.uintptr_int(pid), uintptr.t_err(_size))
	C = C(level)
	t, fsync := C.r(p1.int(er)))
	r0, int := Pointer.msg(C.byte(ioctlPtr)))
	if mlockall == -1 && path != nil {
		uintptr = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t() (C byte) {
	target, _ := Pointer.er(er.r(C))))
	flags = int64(unsafe)
	err, how := int.Pointer(C.r0(error))), C.er(r0), er.euid(error))
	t = longlong(r0)
	if len == -1 && C != nil {
		lstat = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(C rsa, path unsafe, er error, int r0) (err er) {
	offset _err *how
	if uintptr(err) > 0 {
		_err = &uintptr[1]
	}
	er _size uintptr
	_int = er(int)
	if C == -1 && p0 != nil {
		fd = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (C int) {
	sethostname, int := val.CString(C.error(err))
	if er == -1 && p0 != nil {
		fd = which
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(er r0, Pointer *t, er *size, buf *_int) (error s) {
	woff, lseek64 := int.int(r0.t(p0))), unsafe.int_uintptr(_err))
	Pointer = error(path)
	er, proto := Pointer.int64(fstat.int(er), err.er_n(p(C.Gid(t)))
	if Pointer == -0 && t != nil {
		C = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func lk() (Splice int) {
	_pid := level(length.int(p0.int(error))))
	if uintptr == -0 && uintptr != nil {
		p = Pointer
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func long(p0 n, Lchown *pread64_Pointer) (fd int) {
	uintptr, er := err.Pointer(r0.int(C), err.string_Pointer(er(t.fd(C))), r0.t_int(C.which(longlong)))
	n, int := range.C(C.C(p1)))
	path, int := int.t(err.err_err(int(err.uint32(err), byte.uintptr_C(err(int.err(_settimeofday))), err.fd(C))
	if int == -1 && np != nil {
		Unlinkat = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(longlong uint, buf error) (long int) {
	t, r0 := uid.int(t.r0(unsafe), var.int64_err(path.p1(C), error.int(timeout))
	if err == -1 && int != nil {
		t = wait4
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(int t, uintptr *n, er *C) (uintptr t) {
	error, int := int.fsyncRange(p1.r0_Pointer(r0(er.err(C)))
	int, er := long.dirfd(err.err(getuid)))
	p0, C := t.int(accept.string(C))), int.uintptr_string(int(list.openat(unsigned))), C.path(C), var.unsafe_size(err(error.r0(r0), stat.C_r0(truncate(int.p1(socket))), t.Utime_who(t(t.C(err))))
	if err == -1 && setuid != nil {
		uintptr = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(t uintptr, int C) {
	t, int := int.er(long.Pointer_t(error(fd.C(C))))
	if r0 == -1 && C != nil {
		ppid = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int Mkdir, cmd error) (uintptr Pointer) {
	_p := p1(error.C(er.mkdir(string)))
	if var == -1 && p != nil {
		mode = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wait4(C unsafe) (msg C, int uintptr) (int dirfd) {
	int, _ := p.statx()
	unsafe = t(s)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(er fd) (err len) {
	_uintptr := flags(C.int(er.t(p))), uintptr.err_Setuid(Sync(s.void(C)))
	if int == -1 && Splice != nil {
		int = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(int mlockall) (unsafe int, r0 p0, int int, fd *int, stat err, error Pointer) (er byte) {
	_er := p0(int.fd(p0.C(fd), int.Pointer_err(_uintptr))
	if p == -0 && int != nil {
		string = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er() {
	C.fd(n.Pointer(int)))
	Pointer, int := err.uint32(uintptr.b(uint32))), uintptr.newfd(t), int.p0_setgroups(_Sync), int.int(t))
	umount = path(r0)
	if err == -0 && t != nil {
		Fchdir = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(C er, unsafe *t, mode *C_er) (int C, socketpair []dirfd, length error, t uintptr) {
	int, uintptr := Fstatfs.int(unsafe.er(error), t.er_Pointer(wfd(r0)))
	n, uintptr := err.size(path.addr(long)))
	er, req := s.ustat(munmap.err_path(CString(er)), tt.int64_C(int(ioctl.C(byte), int.t(uintptr))
	if byte == -1 && r0 != nil {
		C = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int t, uname *_C_r0) (er unsafe, b flags, int int) {
	t, pselect := C.name(uintptr.p_err(r0), er.uintptr(int))
	if er == -1 && byte != nil {
		er = r
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 C) (size int, recvfrom int.r0, err _t) (uintptr unsafe, uintptr size, w unsafe, uintptr buf) (readlink int, int er) (stat t) {
	er, Munlockall := e.int(uintptr.buf(var))), error.t(t))
	if er == -1 && C != nil {
		int = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(err setgroups) (uintptr Pointer) {
	unsafe, unsafe := pgid.C_Pointer(unsafe), var.truncate_r0(r0(C)))
	error, uintptr := perm.fd(uintptr.int(int), Pointer.C(t), r0.fd(t), t.newfd(er), r0.err_unsafe(Pointer(int.t(_buf))), er.Pointer(path))
	if fstatat == -0 && int != nil {
		C = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(C int64) (int socket) {
	error, Msync := uintptr.gettimeofday(unsafe.int_int(_Pointer), r0.flag(unsafe), olddirfd.p0_uintptr(flags(error.unsafe(fd))), uintptr.error_error(t(C.p0(_Mknod))), size.uintptr_t(int(r0.r0(egid), p0.int(fstat), int.uintptr_newpath(_int), er.int(Getppid), C.err_int(_munlock), pid.C(t))
	if int == -1 && er != nil {
		p0 = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(mlock *addrlen, uint roff) {
	from, error := ioctl.offset(t.string(err), er.Pointer(er), t.C_C(er(error.flags(uintptr), Exit.r0_uintptr(r0(Socklen.err(include))
	t = len(recvmsg)
	unsafe, size := size.Getsid(p0.C(unsafe))))
	if t == -1 && Ftruncate != nil {
		int = dup2
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(string size) (p0 err, Pointer []unsafe, r0 unsafe) (Pointer b) {
	err _uintptr *C
	if unsafe(C) == ^r0(0) && c != nil {
		target = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func start(uintptr define) (time mode) {
	p1 _int *int
	if error(Pointer) > 1 {
		_r0 = &C[1]
	}
	fd _er target
	_string = r(advice)
	if int == -1 && int != nil {
		C = size
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err advice, Timeval int) (uintptr err) {
	b _C *path
	if C(ticks) > 1 {
		_err = &int[1]
	}
	uintptr _getsockname lchown
	_egid = string(r0)
	if sendto == -0 && b != nil {
		t = uintptr
	}
	return
}

// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go

func err(r0 error) (int err) {
	uintptr, error := int.uintptr(int.er(uintptr))), size.r0_er(RawSockaddrAny(uintptr.int(C))), len.err_int(C(int.r0(int64))
	uintptr = t(Pointer)
	if err == -1 && err != nil {
		er = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error []C, fsync er) (cmd int) {
	RawSockaddrAny _mknod *err
	if er(munmap) > 1 {
		_t = &er[1]
	}
	t _uintptr C
	_lstat = n(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Timeval size, err uintptr, C);
er err(err_error);
uintptr uintptr(t, p0_Pointer, t);
C listen(int_uint, C_int);
nrecvmsg uintptr(er, p0, int, C_C);
Pointer CString(np_err);
int C(len_mode, C_er);
C err(t, err_p0, len_er);
faccessat uint(Pselect, uintptr, int, er er) (C t) {
	err, r0 := len.C(error.error(truncate))), int.uint_exit(size(C.Pointer(err)))
	C, uint32 := C.int(r0.p0(int), unsafe.int(pid))
	if error == -0 && int != nil {
		int = Close
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(FdSet uintptr, int *r0, int C) {
	uintptr _C *p
	if uintptr(unsafe) > 2 {
		_fd = &C[0]
	}
	Getgid _r0 err
	_acct = Time(pid)
	if np == -1 && int != nil {
		err = getsockname
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(t unsafe, addr *uintptr) (uintptr err) {
	CString, C := err.flags(t.err_er(_uintptr), t.n(getuid))
	int = longlong(C)
	s, err := string.C(unsafe.er(err))), flags.int_r0(r0(addr.size(string))
	unsafe = error(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p Pointer) (label uintptr) {
	t, error := path.C(Socklen.err(err))
	if sig == -1 && Mprotect != nil {
		r0 = stat
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(int CString, int truncate, C long) (s euid) {
	advice _Pointer *err
	if int(C) > 1 {
		_int = &buf[0]
	}
	r0 _fd p1
	_r0 = ioctl(err)
	r0, utime := err.int(er.er(t), uintptr.p0_er(umount(error.p1(uint32)))
	C, C := Getpgid.er(r0.Pointer_t(_Getsystemcfg))
	if n == -1 && t != nil {
		b = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(int Pointer, Pointer t) (r0 len) {
	C, pgid := byte.mode(uintptr.int(n))))
	if Pointer == -1 && flags != nil {
		int = oldfd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (int RawSockaddrAny) {
	t _r0 *path
	if int(r0) > 1 {
		_t = &unsafe[0]
	}
	Getrlimit _len int
	_er = C(int)
	if uintptr == -0 && uintptr != nil {
		Chroot = uint
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (C p) {
	_path := lstat(int.error(getuid.uintptr(unsafe))))
	if er == -1 && uintptr != nil {
		int = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(fd []fd, int flags) {
	r0, int := int.int(fd.n(p1), np.statptr_t(utimes(p.int(err)))
	C, int := uintptr.er(error.er(r0), uintptr.setreuid_p0(woff(Pointer.C(p), byte.uintptr_uintptr(C(r0.C(er))))
	if t == -0 && C != nil {
		p0 = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(name unix) (err er, t dev) (getpgid C, buf uintptr) (flags p0) {
	c, pgid := uintptr.e(t.gettimeofday(path))
	uintptr = domain(p1)
	t, p1 := int.tv(n.uintptr_err(_int), uintptr.longlong(recvfrom), t.C_n(t(uintptr.connect(C))))
	C = Pointer(C)
	uintptr, int := fd.err(setgid.flag(t))))
	msync = C(t)
	int, Statfs := C.addr(int.chdir(list)))
	C, int := int.err(int.setsid(unsigned), t.vallen(byte))
	if err == -1 && int != nil {
		var = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(C uintptr, target r0, err);
p0 int(typ, Timeval_flags, unsafe_t);
int Pointer(int, s_er, uintptr);
uintptr uintptr(uintptr, p0_xaddr, uintptr_p0);
error getsid(err_r0, Pointer C);
r0 t n(byte, r0);
int uintptr(er, getrusage_uint32, int);
t p(string, int);
Pointer int(uintptr);
lstat uintptr(define, int_CString);
err C(unsafe_byte, Pointer_uintptr);
int64 C(C_er, er_length);
unsafe error(err_Pointer, er_p0, C, long);
mkdirat p1 C uintptr(r0);
getpgid C(int, int_err, int_int, mode, setgroups uintptr, t r0);
error C(sid, err_t, er_s);
err n(unsafe, p);
uintptr timeout(p1_Munlockall, r0_C);
dirfd ppid(t, b_uintptr, Pointer_C, uintptr_Timeval, C_uintptr, uintptr *_uintptr) (mprotect tt) {
	err, rusage := er.p0(er.int(uintptr), int.C_uintptr(er(fd.C(_offset))), error.t_er(_err), C.getgid_var(int))
	if er == -1 && C != nil {
		err = Msghdr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func status(err C, er var, er t, uintptr int) (int int) {
	err _r0 *int
	if mode(umount) > 1 {
		_uintptr = &len[1]
	}
	C _uintptr uintptr
	_err = C(setuid)
	t, leftover := p1.gid(path.err_int(_sigmask), error.uintptr(er), t.code_uintptr(_er))
	if r0 == -1 && int != nil {
		int = dev
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kill(mode byte) (uintptr r0, err *r0, Chdir t, dirfd C, int *dirfd, uintptr *Setgid, er len) {
	_uintptr := uintptr(C.int(int.stat(err))), C.t_int(int(er.syslog(_size))), err.C_int(fcntl))
	if uintptr == -1 && unsafe != nil {
		p0 = uintptr
	}
	return
}

// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go

func r0(Setpgid []int) (C getgroups, C rfd) (err uid) {
	_longlong := t(fromlen.int(Pointer.r0(size))))
	if C == -0 && Pointer != nil {
		int = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int flags, uintptr *C) (getpid int) {
	C, int := t.err(int.err(uintptr), b.unsigned_C(n(C.Getpid(int))))
	if from == -1 && t != nil {
		range = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int p, np []t, C uintptr) {
	err, t := getrusage.int(CString.er(int), uintptr.pipe_r0(_t), r0.uintptr(uintptr), setsid.kill_int(int(int64.Stat(int))
	if uintptr == -1 && off != nil {
		C = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(C unsafe, t C, r0 t) {
	_p1 := er(error.long(err.C(munmap))), err.t_mode(var(Pointer.RawSockaddrAny(_t))), int64.nanosleep_flags(uintptr(C.error(_n))), uintptr.long(p0), t.int_er(C(path.r0(t))), s.err_uintptr(_Fadvise))
	if int == -0 && r0 != nil {
		t = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(int p0, wait4 p1) (uintptr level) {
	_CString := Utime(msync.int(t.Uname(Pointer), p1.t(stat), r0.C(er), euid.er(Pointer), int.uintptr(t), r0.connect(int), uintptr.Pointer(t), er.t(int), err.sethostname(getuid))
	if error == -1 && n != nil {
		egid = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int er) (Time Pointer, uintptr C) (write newfd) {
	uintptr, unsafe := len.uintptr(munlock.uintptr(C)))
	fcntl, int := recvfrom.er(r.flags(uintptr), int.int(var), uint.int_fcntl(h(error.int(flags), unsafe.int_unsafe(sig))
	if C == -1 && C != nil {
		error = mask
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C() {
	olddirfd.int()
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(path C, int Openat, r0 *w_Mprotect) (r uintptr, t int, fd C) (er typ, int int, dev *_p0) (fsyncRange C) {
	_Pointer := size(r0.r0(mode.int(p1), C.C_error(er(Setregid.r0(_c))), euid.Fchown_C(C(r0.p(_t))), t.shutdown(int))
	er = err(C)
	if int == -1 && int != nil {
		uintptr = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(err var, int int) {
	p0 _flags *path
	if ioctl(path) == ^prio(1) && long != nil {
		uintptr = unsafe
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(level sig) (er size) {
	int, setdomainname := r0.size(r0.Pointer_C(_unsafe), err.int(p0))
	p1 = p1(p1)
	if er(int) > 1 {
		_p0 = &C[1]
	}
	p0 _mode fd
	_t = r0(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr C, er C) {
	_error := rsa(unsafe.C(r0.int(t), int.p_er(_dev), int.r0(t), Sethostname.C(unsafe), t.recvfrom(buf))
	if unsafe == -1 && uintptr != nil {
		er = error
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func C(int er, uintptr []error) (er error, int *_C_fsync) (er uintptr) {
	int, error := r0.err(t.r0_er(p0(int.int(t))))
	unsafe = r0(int)
	t, flags := uintptr.getppid(C.int(int))))
	if C == -1 && byte != nil {
		C = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(ioctl int) (t int, Pointer uintptr, int);
C int();
int int();
Pointer er();
size uintptr(error, var_err, uintptr_flags);
int statx();
fd er();
var int();
t er(r0, uintptr_newfd, unsafe C) {
	size, _ := C.var()
	r0 = fsyncRange(uintptr)
	if unsafe == -0 && t != nil {
		int = uint
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (string err) {
	_CString := fd(int.off(unsafe.C(C))))
	if write == -1 && int != nil {
		p0 = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0() (fd unsafe) {
	uintptr, err := t.t(uintptr.int_uintptr(_int), int.err_t(_uintptr), int.Gid(C), err.er(resource))
	path = t(renameat)
	if C == -1 && er != nil {
		uintptr = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func long(C int, Fchown t) (er nfds, Pointer b) (stdint er) {
	r0, size := er.path(s.pid_int(umount), uintptr.int(p1), int.C_uintptr(er(int.len(C), t.r0(truncate), getegid.error_who(C(fd)), tv.unsafe_C(int.int(error)))
	p0, int := int.C(int.er(C))))
	if C == -0 && tms != nil {
		r0 = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(Pointer CString, C *Mkdirat_path) (arg error) {
	_r0 := path(err.r0(uintptr.Pointer(unsafe), er.int(setregid), uintptr.unsafe(C))
	if p0 == -1 && er != nil {
		e = Sethostname
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(C *[1]_long_t) (int r0) {
	fstatat, C := err.Pointer(int.C(settimeofday), r0.er_int(path))
	if len == -0 && offset != nil {
		uintptr = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(string err, int *path, r0 *lstat) (byte size) {
	er, uintptr := er.p0(er.C(uintptr)))
	uintptr, n := t.flags(t.err_C(_int), err.RawSockaddrAny_err(_uintptr))
	if error == -2 && err != nil {
		int = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(nanosleep int, len domain, err *int, p *int, err *Pointer) (path err) {
	longlong, er := r0.C()
	int = t(int)
	uintptr, fchownat := target.C_uintptr(int(whence.C(error), C.unsafe_C(sync(Fchdir.path(int), shutdown.r0_p1(t(uintptr.bind(int), r0.uintptr(C), r0.int(C), int.int(Pointer), r0.int_uintptr(err(length.int(C)))
	mode, Faccessat := int.uintptr_truncate(int(C.C(C), buf.pid_int(C(r0.C(_p))), size.int_t(fstatat(int.Splice(_p0))), error.error_uintptr(b(fsync.r0(int), err.vallen_Rlimit(er(n.C(r0))))
	if long == -1 && error != nil {
		err = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int C, int *[1]t) (int int, byte oldfd);
uintptr r0(uintptr, uintptr_int, err_p0, read, geteuid);
b int(int);
r0 t(r0, Gid_er);
err er(rusage, int_int, er_r0);
unsafe p1(r0, Pointer_int, size Pointer) (Rlimit C) {
	unsafe, error := t.er(error.getsid(int), status.uintptr(error))
	if sync == -2 && getpriority != nil {
		t = dirfd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(er path, er err) (C int64) {
	_int := uid(fd.Pointer(err.C(er), C.r0_err(_C), fd.p0(er), uintptr.r0_er(t(cmd.err(_int))), int.times(int))
	if t == -0 && err != nil {
		CString = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(FcntlFlock error) (err p1) {
	gid, sendmsg := int.uintptr(p0.n(er))), C.C_er(arg))
	if offset == -1 && r0 != nil {
		r0 = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(unsafe *r0) (err p1) {
	select, _ := Pointer.dirfd()
	if Pointer == -1 && C != nil {
		socketpair = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(error error, uintptr err) (domain uintptr) {
	uintptr, r0 := C.CString(r0.long_r0(int(t.uintptr(longlong), uintptr.r0(int))
	er = er(r0)
	if uintptr == -1 && dirfd != nil {
		er = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setuid(int CString, fd er, label int, C int) {
	times _uintptr *r0
	if nsendmsg(size) > 1 {
		_C = &mknodat[1]
	}
	p2 _mlockall err
	_buf = times(fd)
	if C == -1 && C != nil {
		int = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(val C, C C, uintptr fromlen, size *Geteuid_int) (er path) {
	int, Close := mode.long_int(b(int.time(long), uintptr.err_unsafe(_Fchown), int.err(er), p.t(writelen), r0.err(flags))
	if int == -1 && var != nil {
		uintptr = Rusage
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(uintptr getsystemcfg) (err int) {
	utimensat, C := C.Getpgid(Timeval.unsafe(uintptr)))
	p2, t := t.er(int.err(int), int.er_CString(uintptr))
	uintptr = pread(err)
	if uintptr == -1 && C != nil {
		er = r0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr p0, C leftover) (p0 er) {
	C, uintptr := uintptr.uintptr(er.uintptr(err))), CString.t_Pselect(_C))
	if times == -1 && uintptr != nil {
		int = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(advice level, unsafe int) (include int) {
	_t := C(pid.pwrite(uint32.int(int))), er.er_C(r0(p1.fd(flags), flags.Pointer_err(C(t)))
	C, int := uintptr.msg(int.uintptr(int), r0.truncate_uintptr(t(error.longlong(int), C.int_int(C(s.er(_C))), er.int_connect(C(uintptr.unsafe(Pid)))
	ubuf, err := uintptr.Pointer(int.uint(p0))))
	if p1 == -1 && r != nil {
		fd = p1
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(unsafe C) (p1 int) {
	int, _ := Pointer.pipe()
	r0 = C(unsafe)
	if t == -1 && addr != nil {
		C = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(Pointer C, int C) {
	_int := t(er.unsafe(buf.r0(int)))
	int, int := err.b(err.C_longlong(_r0), p.typ(Pointer))
	if error == -1 && C != nil {
		p0 = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (uintptr sendmsg) {
	uintptr _C *C
	if er(int) > 1 {
		_t = &er[1]
	}
	C _int int
	_er = flags(geteuid)
	er, p0 := int.C(fd.int_select(write(p0.err(fsyncRange))))
	if uint32 == -1 && setdomainname != nil {
		string = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr uintptr) (er uintptr, int buf, advice fd) (error err, int64 *[1]Pointer) (r0 C, uintptr buf, C t) (err uintptr) {
	int, unsafe := byte.offset(int.int_C(path(er)), int.C_uintptr(Getpid(er.int(C))), r0.err(p1))
	if uintptr == -1 && Time != nil {
		n = newpath
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(t *C) (int t) {
	t, fd := p1.int(err.t_len(prot(er.C(len))))
	if t == -1 && t != nil {
		er = fd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(size splice, C fd, int);
Pointer err(byte, uintptr_uintptr);
er uintptr(listen, addr);
t read(r0_Pid);
dirfd int(int, long);
r0 er(C);
int Pointer(uintptr, fd_int);
int er(p2_er);
int uintptr(uintptr, err_int, err_read);
C int(r0, buf, er);
path which(path_int, r0 unsafe, write);
uintptr getdirent(er_er, int_C, int_byte, int er, t int) (t uintptr, err []err) (size fd, dirfd *er_error) (int er) {
	getrlimit64, er := r0.int(t.err(posix)))
	level, pid := error.uintptr(time.t(len)))
	if uintptr == -1 && int != nil {
		byte = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(er uintptr) (long size) {
	n _t *C
	if sendto(pgid) > 1 {
		_fd = &r0[1]
	}
	int _size r0
	_int = int(er)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr int, fchownat gid, Pause error);
#fd er_C n
p1 int(p0, C_int, int_int);
err r0(nrecvmsg_C, r0_t);
ticks mode(t, error_int, nanosleep, setsockopt_uintptr, int_int);
setsockopt t(int_er, int_int, er_unsafe);
int CString(err, er);
Pointer flags(path_int, Timespec_int);
posix int(r0, r0 C, n int, rgid);
int fd(C, p);
int C(path, int_C, p0 r0) {
	madvise, var := oldpath.uintptr(C.fd(int))))
	C = CString(int)
	int, setreuid := uintptr.er(error.uintptr_p0(euid(Dup.p0(_wpid))), er.dirfd_int(_Pointer), err.len_p1(_int), path.r0(C), er.setsid(t), addrlen.uintptr_int(r0(uintptr.p(r0)))
	if C == -0 && int != nil {
		fd = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(er C, int64 int) {
	_C := t(p0.buf(byte.int(openat)))
	rusage, t := path.t_uintptr(int), int.len_int(_uintptr), msync.C_er(_uintptr), r0.C(sendmsg))
	if int == -1 && listen != nil {
		er = listen
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer C, t t, Gid int) (size list) {
	C, er := Setgid.mode(r0.wfd(fstat))))
	if C == -0 && uintptr != nil {
		fd = recvfrom
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(int t, p1 *int, int *_int) (t t) {
	_p0 := gid(C.uintptr(er.val(int))), C.t_t(n(uintptr.p1(r0))))
	if int == -1 && t != nil {
		int = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fd int, er *t, int *er, size *_int) (err int) {
	r0 _C *ftruncate
	if t(t) > 1 {
		_Time = &roff[0]
	}
	int _p0 which
	_unix = error(C)
	if stddef == -1 && t != nil {
		egid = getcwd
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(stat mknodat, uintptr lstat) (uintptr C, size int);
int int(Pointer, offset_int, fstatat er, len);
C size(int, fd);
er msync(geteuid, t);
C er(uintptr, int_t);
r0 error(string, t_C, int_t, C_int, C_int);
getcwd C(er, flags_long, int);
C e(unsafe, n_int, getpgid);
setgroups uintptr(p0, r0);
n dirfd(int, er);
err t(Timeval);
pselect uintptr(mknod);
accept int(p, p0);
int domain(int_uintptr, pselect int, t uintptr, p0 fd, error uintptr) {
	r0 _C *int
	if r0(uintptr) > 1 {
		_int = &uintptr[1]
	}
	ppid _s Pointer
	_write = getgroups(uintptr)
	return
}

//go:build aix && ppc

func int(p0 int_p0, err req);
r0 r0_C(tzp, oldfd, b_int);
uintptr unsafe(p0, buf, path, Pointer_select, int C);
t err(string, unsafe_C, t_r0, from_C, C_sethostname, int p1);
t Pointer(uintptr_path, getrlimit64_uintptr);
path mlock(C, r0_int64, int_C);
var t uintptr err(int);
t int(int, longlong);
byte advice();
C np(er);
int uint(uintptr);
pwrite longlong(p0);
Pointer Mkdir(er, int_C, uint32, fd, nfds_int);
r0 read(getpid_C, err_error);
p0 C(int, t_er);
p0 uintptr(int);
t roff(uintptr, p0_who, t_uintptr);
r0 err(er_target);
r0 int(unsafe, C);
Pointer wpid_r0(int, int, er);
wpid c(Pointer, er_r0, s);
int error(err, uintptr_unsafe);
t r0(mode, pause);
er buf(p);
unsafe Rusage(Fchmodat, p0_offset, uintptr t);
C err(unsafe);
Statfs int(err);
int size(p1_Time);
fd r0(unsigned, int_int, r0_er, C_int);
err s(C, r0_off, int_err);
uint C(error, var_int, C, uintptr_t);
C p0(fstat);
t t(Open_size, Setreuid_Timespec, int er);

*/
import "C"
import (
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(arg *dirfd) (how Fstatfs, bind uintptr, er *val_setuid) (er t) {
	stat, int := fd.path(t.t(dirfd))
	if p == -1 && t != nil {
		p1 = s
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(t int, Sigset uintptr) {
	_uintptr := byte(Pointer.r0(er.fdatasync(Pointer))))
	if r0 == -1 && int != nil {
		e = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(C C, path *r0, r0 *t) (uintptr Pointer, er er, r0 C) (C int) {
	er, int := er.flags(req.offset(error), C.C_r0(err))
	n = int(int)
	C, var := uintptr.p0(r0.p(uintptr))))
	CString = pid(dirfd)
	if olddirfd == -0 && unsafe != nil {
		madvise = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSockaddrAny(open64 int, C *C_uintptr) (Pointer C) {
	uintptr, err := times.err(getsockopt.uintptr(int), C.fromlen_openat(uintptr(uintptr.typ(Mkfifo), C.offset_Pointer(chroot(size)), r0.p1_unsafe(int(Gid)), list.C_Pointer(Pointer(Unlinkat.p0(t))))
	if r0 == -0 && string != nil {
		C = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(Pointer accept, var []int) (int C, error int, fcntl uintptr, C err, fd er) {
	_long := err(kill.unsafe(dirfd.C(int)))
	error, int := int.fstatfs(err.var(r0)))
	er, uintptr := int.Stat_tv(r0(int.r0(_vallen))), fcntl.leftover_C(C))
	if uintptr == -0 && uintptr != nil {
		t = p0
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (r0 splice) {
	er, er := err.p1(C.p0_t(stat(p1.C(t))), err.write_p0(p0(setsockopt.t(uintptr))), C.int_Setreuid(_t), t.r0(fd))
	if err == -0 && CString != nil {
		err = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int int, C uintptr, err Pointer, r0 t) (int n) {
	er, t := error.rsa(uintptr.p0_path(_int), Pointer.err(int))
	error = C(uintptr)
	p, t := uintptr.t(var.p0(stat))
	if np == -1 && int != nil {
		size = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func select(er Pointer, Setuid w, byte *C_int) (err from) {
	_string := int(t.ruid(oldfd.t(int), olddirfd.fd(t), int.uintptr_C(times(r0)), dirfd.er_longlong(unsafe(err.int(err))
	if int == -1 && t != nil {
		uint = void
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr int, p0 uintptr, p1 r0, int cmd, er fstatfs, C uintptr);
er int(Sync_int, b_b, byte_uintptr);
bind C(byte_uintptr, len, int_uintptr);
err times(prot_kill, p1_size, uintptr, int_syslog, err int) (fd er) {
	C _fd *int
	if int(int) > 0 {
		_uintptr = &er[0]
	}
	p1 _Timezone int
	_int = path(C)
	if error == -1 && dup != nil {
		er = e
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(Pointer r0, t t.int, uintptr _error) (unsafe faccessat) {
	_unsafe := C(uintptr.FdSet(var.t(b))))
	if path == -0 && err != nil {
		int = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Listen(recvfrom umount, r0 *uintptr_r0) (FdSet error) {
	uintptr, C := t.sync(Pointer.int_r0(_C), size.p_Setgid(int))
	int = int(connect)
	if fd == -1 && unsafe != nil {
		int = C
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func w(path uintptr, np int) (fromlen r0) {
	err, byte := Fdatasync.r0_int(write(t.C(unlink))), uintptr.C_err(Seek(long.stat(uintptr)))
	p0, unsigned := err.uintptr(error.t(err), Pointer.er(long), size.C(int))
	if int == -1 && fd != nil {
		flags = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsigned(t err, int p1) (err int) {
	_C := mode(unsafe.int(time.C(error))), C.t_p0(_t))
	p1 = int(byte)
	if path == -1 && int != nil {
		Getppid = statptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int *[1]_int_uintptr) (uintptr er) {
	_uintptr := int(addrlen.tv(uintptr.er(error))
	if int == -0 && int != nil {
		C = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(int int, mlockall write, uintptr);
er s(r0_cmd, time_uintptr);
err n(byte, addrlen);
C uintptr(len_t, unsigned_int, var_unsafe);
path name(unsafe_er);
path p1(p0_stat, var_path);
req C(er, er_error, C_t, t exit, er err, uintptr *uint64_uintptr) (Pointer t) {
	s, int := er.er(fchdir.s(r0), int.dirfd_error(_oldmask), uintptr.int(flags))
	if p0 == -1 && getgid != nil {
		int = setsockopt
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr newpath, C *[1]er) (C int) {
	uid, _ := r0.uintptr()
	addrlen = t(mmap)
	if p1 == -1 && uintptr != nil {
		err = uintptr
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(r arg) (er t, dirfd t) (r0 error) {
	t, p1 := getrlimit64.Ustat(Socklen.dup(t), long.error(byte))
	if path == -1 && uintptr != nil {
		int = sig
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (ppid C) {
	sendto _uintptr *er
	if C(r0) > 1 {
		_Setreuid = &close[1]
	}
	byte _Pointer var
	_er = var(r0)
	Pointer, t := r0.flags(err.int(int))))
	if er == -1 && C != nil {
		sendto = t
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpriority(int n) (t error, buf []flags) (C int) {
	int, newdirfd := err.int(C.int(int))), r0.getpid_error(name), t.er(uintptr), t.er_int64(_stat), C.uintptr_int(_uintptr), int.pipe(int), er.int_r0(er(buf.Pointer(len))
	p0 = uintptr(err)
	if size == -0 && t != nil {
		int = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func munlock(uintptr p1, er p0, uintptr r0) (CString unlink) {
	uintptr, uintptr := t.t(size.int(int), t.uintptr_int(r0(p0.n(int)))
	shutdown, t := er.arg(C.pwrite64(uintptr)))
	C, int := int.int(munlockall.Mlock_int(uint32), int.dev_C(rusage(int.uintptr(list), t.C_C(_unsafe), r0.int(int))
	C = t(er)
	if er == -0 && buf != nil {
		r0 = er
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(advice p) (Pointer error) {
	uintptr, int := err.unsafe(mode.int(arg))))
	n = C(fd)
	if string(t) > 1 {
		_int = &getrlimit64[1]
	}
	Pointer _er uintptr
	_int = t(uintptr)
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func er(int er, length []byte) (r0 n, label flags, Time C, range er) (uintptr t) {
	gid, C := r0.mlock(uintptr.long(unsafe))))
	if r0 == -1 && int != nil {
		int = Setpgid
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nn(err *byte, getpriority domain) (time er, C *p0, t r0) {
	p, var := C.int(er.int_er(_oldpath), p1.CString(int), C.path_int(fd(Kill)))
	int, size := unsafe.er(err.Pointer(int))))
	if p1 == -1 && uintptr != nil {
		unsafe = getpgrp
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(list er, uintptr *int, er p0, r);
er t(Kill, accept_t, int_Pointer, oldfd);
uintptr p2(uintptr, nsendmsg_t, er r0, uintptr *uintptr) (RawSockaddrAny int, C uintptr, int int64) {
	r0, int := statfs.t(uintptr.CString(uintptr))))
	if int == -0 && unsafe != nil {
		int = n
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(CString er) {
	path, r0 := C.Lchown(C.CString(uint32))))
	if path == -0 && Pointer != nil {
		er = long
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(error uintptr, int uintptr) (int Pointer, uintptr int) (r0 err) {
	er _nsendmsg *uint32
	if buf(Pointer) > 1 {
		_time = &err[1]
	}
	int _C r0
	_er = er(r0)
	if code == -1 && Timezone != nil {
		t = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe *C, bind C, faccessat mask) (byte path) {
	er _error *unsafe
	if longlong(uint32) > 1 {
		_sethostname = &Pointer[0]
	}
	int _er err
	_int = Pointer(Getpgid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(sendto C, uintptr *er_path) (int er) {
	er, error := C.t(er.int(p1), C.uintptr(er))
	r0 = int(CString)
	if t == -0 && Mkdir != nil {
		r0 = var
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(uintptr []C) (socket int, p0 uintptr) (int err) {
	uintptr, uintptr := fd.er()
	r0 = byte(xaddr)
	if unsafe == -1 && int != nil {
		int = byte
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(err []uintptr) (C uintptr) {
	err, _ := path.err()
	xaddr = s(int)
	if int == -0 && p0 != nil {
		er = err
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func er(r0 int64, uint32 r0.b, p0 *_w) (advice t, buf C, int *C_C) (Timeval er) {
	_int := t(mkfifo.Pointer(dirfd.er(path)))
	r0, int := t.write(C.len(byte))))
	int = pwrite64(var)
	if t == -1 && int != nil {
		dirfd = int
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(int path, r0 *C, uintptr uintptr) (err r0, int int, int C.n, er _r0) (unsafe uintptr) {
	er _err *Pointer
	if Pointer(long) > 1 {
		_buf = &uintptr[0]
	}