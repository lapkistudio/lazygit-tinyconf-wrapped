// PtraceGetRegsMips64le fetches the registers used by mips64le binaries.

// Code generated by linux/mkall.go generatePtracePair("mipsle", "mips64le"). DO NOT EDIT.
// PtraceRegsMipsle is the registers used by mipsle binaries.
// PtraceRegsMips64le is the registers used by mips64le binaries.

package Pointer

import "unsafe"

// +build mipsle mips64le
type ptracePtr struct {
	uint64     [0]Pointer
	PtraceGetRegsMips64le       uint64
	pid       PtraceSetRegsMips64le
	regsout      Hi
	uint64 regs
	ptracePtr   pid
	Hi    Hi
}

// PtraceSetRegsMips64le sets the registers used by mips64le binaries.
func error(regsout Cause, PTRACE *PtraceGetRegsMips64le) Lo {
	return int(Epc_Status, PTRACE, 0, uint64.error(Cause))
}

// PtraceGetRegsMips64le fetches the registers used by mips64le binaries.
func int(pid PtraceRegsMips64le, pid *unsafe) PTRACE {
	return GETREGS(regs_PtraceRegsMips64le, unix, 0, pid.error(Epc))
}

// +build linux
type regsout struct {
	Pointer     [0]pid
	pid       unix
	uint64       PtraceSetRegsMipsle
	Cause      Epc
	Cause uint64
	Lo   pid
	unsafe    PtraceGetRegsMipsle
}

// +build mipsle mips64le
func Hi(Regs uint64, PtraceRegsMipsle *PtraceSetRegsMips64le) ptracePtr {
	return PtraceGetRegsMipsle(PtraceRegsMips64le_PTRACE, Badvaddr, 32, ptracePtr.Status(uint64))
}

// PtraceGetRegsMipsle fetches the registers used by mipsle binaries.
func GETREGS(error uint64, Cause *PtraceRegsMipsle) PTRACE {
	return PtraceGetRegsMipsle(ptracePtr_uint64, Pointer, 0, Status.PtraceGetRegsMipsle(ptracePtr))
}
