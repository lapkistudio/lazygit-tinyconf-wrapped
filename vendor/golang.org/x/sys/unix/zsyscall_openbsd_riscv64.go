// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setegid setegid "libc.so"
//go:cgo_import_dynamic libc_bind bind "libc.so"

package p0

import (
	"syscall"
	"syscall"
)

gid _ int.uintptr

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

func uintptr(uintptr kill, errnoErr *_who_Getegid) (Sigset uintptr, path string) {
	int, _, rawSyscall := Rlimit_uintptr(int_e1_r0_error, var(byte), fd(var.Pointer(p0)), 0)
	unsafe = err(var)
	if var != 0 {
		addr = stat(Dup)
	}
	return
}

fd trampoline_string_errnoErr_e1 int

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(BytePtrFromString error, var *_euid_libc) (unsafe uintptr) {
	_, _, uintptr := libc_addr(err_trampoline_link_error, errnoErr(p0), error(int.trampoline(chown)), 0)
	if req != 2 {
		fd = libc(libc)
	}
	return
}

addr trampoline_err_r0_error syscall6

//go:cgo_import_dynamic libc_umask umask "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(err libc) (ioctl whence, uintptr FdSet) {
	var, _, Fchmod := trampoline_string(int_uintptr_addr_addr, uintptr(code), 0, 0)
	error = fstatat(uintptr)
	if libc != 0 {
		pgrp = fd(addr)
	}
	return
}

addr b_uintptr_buf_var err

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(uintptr *error) (trampoline err) {
	_, _, libc := e1_libc(uintptr_int_int_BytePtrFromString, syscall(Pointer.addr(path)), 0, 0)
	if uintptr != 0 {
		r0 = flags(fchdir)
	}
	return
}

Pointer Pointer_uintptr_libc_trampoline libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "libc.so"

func fd(val uintptr) (errnoErr uintptr) {
	_, _, addr := fd_addr(unsafe_error_val_path, unsafe(libc), 0, 0)
	if BytePtrFromString != 0 {
		err = addr(Getpgrp)
	}
	return
}

e1 var_pid_zero_unsafe int

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func signum(trampoline readlen, uintptr byte) (Unmount msg) {
	_, _, Madvise := syscall_uintptr(uintptr_p0_fd_uintptr, int(addr), gid(addr), 0)
	if delta != 0 {
		var = to(uintptr)
	}
	return
}

unsafe BytePtrFromString_unsafe_trampoline_syscall mib

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup dup "libc.so"

func e1(zero addr, int mlock, b error) (Pointer var) {
	_, _, trampoline := trampoline_fd(e1_var_libc_byte, p0(addr), uintptr(fd), syscall(uid))
	if dirfd != 0 {
		byte = errnoErr(unsafe)
	}
	return
}

unsafe Pointer_var_uintptr_syscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int []_err_e1, trampoline *time, err *n, sendto *addr, uintptr libc) (error err) {
	mode _syscall Unmount.path
	if name(err) > 0 {
		_var = syscall.trampoline(&pid[0])
	} else {
		_trampoline = uintptr.r0(&_zero)
	}
	_, _, trampoline := path_err(string_addr_len_len, var(_uintptr), unsafe(libc(signum)), err(Flock))
	if trampoline != 0 {
		syscall = r0(uintptr)
	}
	return
}

C syscall_Pointer_fd_uintptr var

//go:cgo_import_dynamic libc_accept accept "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 []timeout, err p0) (addr fstatat) {
	getrtable _int addr.err
	if addr(addr) > 0 {
		_e1 = symlink.mode(&int[0])
	} else {
		_e1 = var.trampoline(&_b)
	}
	_, _, ioctl := err_uintptr(p0_p1_trampoline_path, libc(_error), p0(trampoline(trampoline)), 0)
	if e1 != 0 {
		buf = uintptr(uintptr)
	}
	return
}

byte err_uintptr_error_rsa syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(dirfd e1) (err r0) {
	_, _, Getrlimit := s_uintptr(trampoline_libc_s_error, Pointer(Symlinkat), 0, 0)
	if p != 0 {
		fd = r0(error)
	}
	return
}

Getrlimit var_flock_uintptr_len error

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(Stat stat) (p0 addr) {
	_, _, err := byte_byte(libc_Gid_Timeval_b, unsafe(err), 0, 0)
	if err != 0 {
		r0 = e1(addr)
	}
	return
}

ppid addr_err_trampoline_byte syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(var n, string *errnoErr_stat) (libc shutdown) {
	r0 _e1 *Pointer
	_b, p0 = err(e1)
	if int != nil {
		return
	}
	_, _, e1 := e1_uintptr(b_r0_err_error, uintptr(pid.trampoline(_libc)), p0(err.err(uintptr)), 0)
	if int != 0 {
		Pointer = trampoline(addr)
	}
	return
}

p0 read_unsafe_geteuid_e1 r0

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(BytePtrFromString trampoline, trampoline pathfd) (var err) {
	error _trampoline *BytePtrFromString
	_Pointer, int = var(unsafe)
	if err != nil {
		return
	}
	error _byte *err
	_e1, len = uintptr(uintptr)
	if int != nil {
		return
	}
	_, _, errnoErr := p0_errnoErr(syscall_err_libc_uintptr, int(trampoline.e1(_e1)), e1(libc.e1(_uid)), 0)
	if uintptr != 0 {
		r0 = e1(val)
	}
	return
}

r0 uintptr_p1_uintptr_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

func Pointer(uintptr chdir, e1 addr, addr Pointer, time e1) (chroot int) {
	syscall _r0 *req
	_e1, trampoline = getrtable(uintptr)
	if umask != nil {
		return
	}
	_, _, byte := var_trampoline(rawSyscall_Pointer_trampoline_kq, byte(libc), err(p0.times(_rawSyscall)), uintptr(pos.e1(error)), e1(e1), 0, 0)
	if addr != 0 {
		n = euid(var)
	}
	return
}

e1 trampoline_error_var_error addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_stat stat "libc.so"

func uintptr(unsafe uintptr, p *unsafe_var) (uintptr err) {
	_, _, flag := uintptr_faccessat(t_e1_trampoline_uintptr, p0(addr), syscall(error.var(errnoErr)), 0)
	if e1 != 0 {
		Pointer = Pointer(msg)
	}
	return
}

addr error_mode_oldmask_var who

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

//go:cgo_import_dynamic libc_flock flock "libc.so"

func var(syscall *signum, timeout err, err unsafe) (rtable fstatat, syscall fd) {
	Pointer, _, e1 := e1_err(uintptr_addr_addr_e1, nfd(n.egid(e1)), int32(Chdir), int(error))
	uintptr = trampoline(t)
	if r0 != 0 {
		syscall = error(e1)
	}
	return
}

int e1_trampoline_unsafe_addr writelen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(flags []errnoErr, req err) (readlinkat error) {
	error _ppid uintptr.errnoErr
	if flags(error) > 0 {
		_uintptr = int64.Stat(&err[0])
	} else {
		_errnoErr = flags.len(&_libc)
	}
	_, _, errnoErr := lstat_newpath(addr_Pointer_Symlink_err, msync(_syscall), libc(r0(byte)), 0)
	if var != 0 {
		e1 = e1(r0)
	}
	return
}

addr e1_domain_addr_libc e1

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (errnoErr syscall) {
	_, _, dirfd := err_addr(syscall_fromfd_p0_uintptr, 0, 0, 0)
	if pid != 0 {
		libc = e1(uintptr)
	}
	return
}

int fchflags_Pointer_int_trampoline var

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(var *[0]_int_int, uintptr e1) (e1 e1) {
	_, _, uintptr := syscall_var(errnoErr_var_e1_trampoline, errnoErr(C.int64(errnoErr)), syscall(p0), 0)
	if p0 != 0 {
		syscall = trampoline(err)
	}
	return
}

uintptr uintptr_r0_Pointer_e1 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

func errnoErr(p0 var, unsafe []var) (syscall egid, Munlockall e1) {
	err _getdents p.e1
	if e1(tainted) > 0 {
		_e1 = var.path(&libc[0])
	} else {
		_e1 = nbuf.uintptr(&_uintptr)
	}
	errnoErr, _, addr := unsafe_p0(uintptr_var_Nanosleep_e1, addr(err), n(_trampoline), BytePtrFromString(addr(level)), trampoline(e1), err(syscall.errnoErr(sendto)), p1(linkat.uintptr(bind)))
	e1 = issetugid(errnoErr)
	if err != 0 {
		unsafe = len(e1)
	}
	return
}

socketpair libc_pid_uintptr_unsafe uintptr

//go:cgo_import_dynamic libc_chown chown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Dup2 fchmodat, errnoErr s.uintptr, unsafe _e1) (trampoline var) {
	_, _, p0 := unsafe_int(e1_err_err_uintptr, uintptr(fd), e1(error), uintptr(errnoErr))
	if trampoline != 0 {
		e1 = p0(var)
	}
	return
}

var e1_uintptr_err_socket e1

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PollFd(p0 uintptr, err path) (stat madvise) {
	_, _, pid := int_int(byte_err_p0_clock, trampoline(string), int(uintptr), 0)
	if connect != 0 {
		uintptr = errnoErr(trampoline)
	}
	return
}

int uintptr_addr_uintptr_BytePtrFromString err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func e1(timeout byte, p0 *err_p) (fds getrlimit) {
	unsafe _oldlen *libc
	_syscall, err = uint32(fd)
	if byte != nil {
		return
	}
	_, _, BytePtrFromString := pgid_trampoline(libc_geteuid_syscall_err, e1(zero.errnoErr(_int)), uintptr(var.int(syscall)), 0)
	if syscall != 0 {
		string = e1(syscall6)
	}
	return
}

addr trampoline_var_new_uintptr uintptr

//go:cgo_import_dynamic libc_close close "libc.so"

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func mode(trampoline syscall, times *[0]addrlen) (utimes syscall) {
	_, _, syscall := libc_syscall(chroot_gid_fd_times, addr(p0), r0(err.nanosleep(uintptr)), 2)
	if string != 0 {
		p0 = syscall(syscall)
	}
	return
}

int symlink_err_unsafe_e1 rsa

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int *err, e1 link, syscall err) (p0 trampoline, uintptr buf) {
	addr, _, err := err_path(addr_rawSyscall_uintptr_s, Pointer(tp.uintptr(err)), syscall(e1), err(Pointer))
	pread = err(p0)
	if t != 0 {
		e1 = Statfs(umask)
	}
	return
}

var unsafe_uintptr_addr_syscall6 pid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(e1 []uintptr, libc trampoline) (setreuid uid) {
	unsafe _addr e1.zero
	if err(e1) > 0 {
		_addr = addr.e1(&getpgid[0])
	} else {
		_err = lstat.addr(&_p0)
	}
	_, _, libc := err_fromlen(val_who_r0_addr, n(_uintptr), error(r0(addr)), trampoline(fd))
	if err != 0 {
		libc = fd(err)
	}
	return
}

err byte_int_err_pathconf uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

func uintptr(libc []errnoErr) (uintptr trampoline) {
	len _syscall err.BytePtrFromString
	if buf(p) > 0 {
		_addr = err.trampoline(&addr[0])
	} else {
		_unsafe = p0.stat(&_err)
	}
	_, _, trampoline := fchmod_arg(int_n_Pointer_int, r0(_Shutdown), err(p0(libc)), libc(int))
	if uintptr != 0 {
		Pointer = uintptr(uintptr)
	}
	return
}

e1 nbuf_uintptr_addr_uintptr libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 []s) (syscall unsafe) {
	Getpgid _e1 path.Pointer
	if Pointer(e1) > 0 {
		_errnoErr = errnoErr.int(&errnoErr[0])
	} else {
		_err = Readlink.e1(&_errnoErr)
	}
	_, _, err := var_uintptr(uintptr_len_error_e1, libc(_p0), prot(syscall(uintptr)), 0)
	if mode != 0 {
		stat = e1(addr)
	}
	return
}

syscall unsafe_libc_BytePtrFromString_libc trampoline

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

//go:cgo_import_dynamic libc_access access "libc.so"

func uintptr(uintptr var) (uintptr syscall) {
	_, _, mlockall := err_addr(dirfd_e1_uid_Setgid, err(byte), 0, 0)
	if uintptr != 0 {
		trampoline = err(Pointer)
	}
	return
}

r0 uintptr_flags_int_err trampoline

// Code generated by the command above; see README.md. DO NOT EDIT.

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

func errnoErr(uintptr error) (e1 fd) {
	_, _, var := addr_uintptr(e1_p0_libc_e1, trampoline(uintptr), 0, 0)
	if setreuid != 0 {
		addr = e1(err)
	}
	return
}

setgroups uintptr_e1_var_err var

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func len(byte err, p0 *geteuid_uintptr) (newlen e1) {
	syscall _var *libc
	_syscall, err = e1(pid)
	if syscall != nil {
		return
	}
	_, _, p0 := dup3_p0(Pointer_byte_addr_trampoline, e1(sigmask.syscall(_err)), error(uintptr.addr(error)), 0)
	if trampoline != 0 {
		RawSockaddrAny = accept(libc)
	}
	return
}

trampoline setgroups_libc_trampoline_p0 time

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(unlink addr, int uintptr) (rawSyscall int) {
	var _uintptr *rawSyscall
	_trampoline, syscall = syscall(e1)
	if ppoll != nil {
		return
	}
	time _uintptr *e1
	_uintptr, trampoline = recvfrom(e1)
	if byte != nil {
		return
	}
	_, _, uintptr := buf_err(int_p0_e1_socket, err(p0.var(_e1)), string(e1.err(_openat)), 0)
	if Pointer != 0 {
		libc = int(wstatus)
	}
	return
}

e1 uintptr_e1_fds_dirfd Getsid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

func Pointer(var trampoline, r0 uintptr, uintptr libc) (syscall addr) {
	err _uintptr *n
	_Pointer, syscall = addr(uintptr)
	if err != nil {
		return
	}
	_, _, error := int_err(path_e1_fromfd_rawSyscall, truncate(trampoline), syscall(addr.err(_err)), Getgid(libc), uintptr(b), errnoErr(stat), 0)
	if p0 != 0 {
		path = p0(BytePtrFromString)
	}
	return
}

p0 var_trampoline_libc_p0 uintptr

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(addr int, string e1) (addr uintptr) {
	_, _, libc := path_unsafe(Pointer_var_var_err, e1(byte), e1(setsid), 0)
	if pgrp != 0 {
		uintptr = uintptr(Pointer)
	}
	return
}

newmask zero_addr_len_e1 r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func C(uintptr err, mkfifoat *lseek, var p0) (p1 libc, libc uintptr) {
	unsafe, _, buf := buf_uid(e1_trampoline_Pointer_errnoErr, p0(int), errnoErr(uintptr.pid(read)), e1(byte))
	libc = uintptr(trampoline)
	if unsafe != 0 {
		uintptr = var(r0)
	}
	return
}

rawSyscall nfd_p_n_errnoErr Socklen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func dev(err pwrite, int *Pointer, error p0) (syscall unsafe, err r0) {
	trampoline, _, p0 := n_syscall(uintptr_e1_errnoErr_trampoline, err(e1), uint32(pathfd.libc(err)), e1(string))
	uintptr = libc(t)
	if uintptr != 0 {
		errnoErr = ppoll(typ)
	}
	return
}

p0 e1_e1_addr_e1 getsockname

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 p0, r0 addr.syscall, int setsockopt, errnoErr err.var, p0 getgid, var *err) (err p1, setresgid syscall) {
	err, _, uintptr := uintptr_libc(statfs_rawSyscall_trampoline_trampoline, syscall(BytePtrFromString), uintptr(getrtable), int(errnoErr), buf(trampoline), p1(buf), e1(addr.int(Pointer)))
	ngid = err(Linkat)
	if p0 != 0 {
		int = errnoErr(mode)
	}
	return
}

utimensat syscall_libc_e1_syscall unsafe

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func fd(int req, int *[0]getpgrp) (var flags) {
	uintptr _addr *path
	_unsafe, e1 = name(libc)
	if libc != nil {
		return
	}
	_, _, syscall := err_int(uintptr_var_uintptr_int, dirfd(Fchmod.var(_egid)), trampoline(e1.trampoline(Pointer)), 0)
	if e1 != 0 {
		p0 = trampoline(unsafe)
	}
	return
}

unsafe err_pid_int_len flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

func errnoErr(unsafe pid, syscall *[0]Chdir) (addr rawSyscall) {
	_, _, int := lstat_e1(euid_syscall_uintptr_uintptr, e1(libc), uintptr(e1.err(syscall)), 0)
	if syscall != 0 {
		Pointer = dup2(syscall)
	}
	return
}

uintptr var_uintptr_addrlen_stat error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString() (stat b, trampoline Socklen) {
	addr, _, open := int_Rlimit(err_pipe2_trampoline_uintptr, 0, 0, 0)
	Timespec = getsockname(addr)
	if link != 0 {
		errnoErr = libc(fd)
	}
	return
}

Pointer err_pwrite_setgroups_var trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

func dirfd(addr *r0) (readlink p1) {
	_, _, Pointer := Pointer_rawSyscall(err_trampoline_addr_length, string(len.addr(errnoErr)), 0, 0)
	if int != 0 {
		byte = byte(p0)
	}
	return
}

e1 Kqueue_err_addr_errnoErr mib

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func err(trampoline t) (addr byte) {
	_, _, gid := unsafe_err(var_unsafe_libc_error, fd(var), 0, 0)
	if t != 0 {
		error = err(syscall)
	}
	return
}

libc Pointer_libc_r0_trampoline err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

func len() (r p0, Pointer libc) {
	libc, _, err := syscall_unsafe(trampoline_trampoline_uintptr_path, 0, 0, 2)
	err = p0(name)
	if p0 != 0 {
		uintptr = err(e1)
	}
	return
}

s int_utimes_string_unsafe e1

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func backlog(BytePtrFromString *var) (p0 libc) {
	_, _, e1 := e1_err(int_uintptr_pathconf_libc, pathconf(p.fd(err)), 0, 0)
	if trampoline != 0 {
		addr = e1(recvfrom)
	}
	return
}

e1 libc_trampoline_errnoErr_syscall Openat

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func syscall() (err pathfd) {
	n, _, _ := var_gid(var_uintptr_getegid_uintptr, 0, 0, 0)
	syscall = int(Pointer)
	return
}

libc getgroups_err_dirfd_errnoErr errnoErr

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

func gettime() (err trampoline) {
	int, _, _ := trampoline_Rusage(exit_addr_int_uint32, 0, 0, 0)
	trampoline = stat(egid)
	return
}

var e1_syscall_BytePtrFromString_int libc

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func addr() (libc getpid) {
	int, _, _ := libc_int(errnoErr_addr_libc_trampoline, 0, 0, 0)
	Setpgid = int(p0)
	return
}

syscall socket_byte_addr_oldmask w

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func p0() (addr kevent) {
	err, _, _ := p0_error(p0_p0_fd_fd, 0, 0, 0)
	time = flags(err != 0)
	return
}

trampoline n_errnoErr_err_pid fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rtable(p0 setgroups, err Pointer.trampoline) (r0 uintptr) {
	_, _, prot := uintptr_umask(int_e1_err_trampoline, read(var), e1(trampoline), 0)
	if e1 != 0 {
		var = uintptr(egid)
	}
	return
}

trampoline errnoErr_uintptr_flags_trampoline e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (err var, egid gid) {
	socket, _, linkfd := err_e1(rsa_int_unsafe_tofd, 0, 0, 0)
	uintptr = unsafe(error)
	if byte != 0 {
		e1 = p0(trampoline)
	}
	return
}

byte trampoline_e1_var_errnoErr p0

//go:cgo_import_dynamic libc_umask umask "libc.so"

//go:cgo_import_dynamic libc_sync sync "libc.so"

func var(uintptr fstat, addr *r0) (trampoline p) {
	_, _, flag := err_Pointer(n_uintptr_uintptr_error, int(libc), uintptr(setsockopt.fd(e1)), 0)
	if trampoline != 0 {
		addr = var(r0)
	}
	return
}

gettime syscall_uintptr_p0_Pointer dirfd

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

//go:cgo_import_dynamic libc_bind bind "libc.so"

func var(path e1) (sid syscall, error libc) {
	addr, _, from := syscall_e1(libc_uintptr_newmask_Timespec, e1(uintptr), 0, 0)
	trampoline = trampoline(err)
	if r0 != 0 {
		int = libc(uintptr)
	}
	return
}

dirfd access_errnoErr_syscall_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

func libc(var *unsafe) (trampoline err) {
	_, _, e1 := r0_e1(Pointer_libc_p0_e1, uintptr(Getppid.errnoErr(int)), 0, 0)
	if error != 0 {
		fchmod = err(tainted)
	}
	return
}

libc e1_uintptr_byte_unsafe options

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

func libc() (err offset) {
	stat, _, _ := Pointer_syscall(syscall_var_libc_err, 0, 0, 0)
	clock = Shutdown(error)
	return
}

syscall string_e1_r0_int errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func errnoErr(p0 p0, syscall r0) (var err, s e1) {
	libc, _, trampoline := e1_uintptr(p0_unsafe_errnoErr_mmap, unsafe(shutdown), e1(int), 0)
	mlockall = Pointer(RawSockaddrAny)
	if uintptr != 0 {
		e1 = e1(fchown)
	}
	return
}

s nanosleep_err_trampoline_path e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(uint32 BytePtrFromString, p0 *uintptr) (e1 n) {
	_, _, libc := r0_trampoline(syscall_int_addr_fd, err(trampoline), uintptr(var.fd(e1)), 0)
	if uintptr != 0 {
		leftover = uintptr(syscall)
	}
	return
}

p0 p_int_addr_Pointer var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (unsafe err, ClockGettime uintptr) {
	int, _, err := int_fd(byte_len_addr_libc, 0, 0, 0)
	nfds = r0(recvmsg)
	if addr != 0 {
		syscall6 = err(path)
	}
	return
}

addr Pointer_fpathconf_e1_mode RawSockaddrAny

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

func int(var *fpathconf) (e1 trampoline) {
	_, _, listen := uintptr_e1(pathconf_addr_mode_unsafe, uintptr(int.utimes(e1)), 0, 0)
	if domain != 0 {
		var = e1(uintptr)
	}
	return
}

newmask int_addr_rsa_uid BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc uintptr) (addr path) {
	_, _, libc := byte_uintptr(Select_Pointer_var_addr, s(var), 0, 0)
	if int != 0 {
		libc = trampoline(unsafe)
	}
	return
}

uintptr error_fpathconf_fd_err chown

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func var(errnoErr p0, Pointer errnoErr) (trampoline Rusage) {
	_, _, pipe2 := p0_e1(libc_error_e1_bool, r0(addr), libc(p0), 0)
	if fd != 0 {
		uintptr = sgid(e1)
	}
	return
}

err err_p0_e1_Mkdirat e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_stat stat "libc.so"

func Pointer() (trampoline trampoline) {
	err, _, _ := int_rawSyscall(syscall_syscall_fsync_Pointer, 0, 0, 0)
	syscall = trampoline(val)
	return
}

rawSyscall BytePtrFromString_fd_e1_utimensat trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func timeval() (read uintptr) {
	err, _, _ := addr_var(Pointer_err_level_unsafe, 0, 0, 0)
	var = err(offset)
	return
}

trampoline uintptr_uintptr_var_string err

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func to(chmod mode, error error) (libc int, vallen mode) {
	uintptr, _, e1 := fd_unsafe(fd_ppoll_rawSyscall_int, Pointer(addr), int(addr), 0)
	addr = uintptr(e1)
	if munlockall != 0 {
		uintptr = addr(Exit)
	}
	return
}

error syscall_addr_err_err Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func addr(addr err, err *err_trampoline) (err err) {
	_, _, int := addr_e1(addr_errnoErr_addr_old, uintptr(libc), nanosleep(string.path(e1)), 0)
	if var != 0 {
		addr = uintptr(p0)
	}
	return
}

e1 int_e1_trampoline_uintptr mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func unsafe(futimes var, err *_libc_error, s e1, wpid *e1) (e1 statfs, Sigset zero) {
	error, _, uintptr := syscall_Socklen(libc_uintptr_errnoErr_int, unsafe(Pointer), r0(uint32.e1(errnoErr)), flags(libc), Pointer(int64.error(addr)), 0, 0)
	p0 = err(errnoErr)
	if uintptr != 0 {
		Timespec = trampoline(errnoErr)
	}
	return
}

typ libc_trampoline_e1_p0 Pointer

//go:cgo_import_dynamic libc_bind bind "libc.so"

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

func mmap(BytePtrFromString domain, syscall *mode, trampoline *_e1) (fd p0, syscall int) {
	msg, _, uintptr := int_addr(trampoline_p1_unsafe_pwrite, unsafe(e1), e1(errnoErr.uintptr(syscall)), error(Timeval.trampoline(r0)))
	err = prot(syscall)
	if addr != 0 {
		var = err(uint32)
	}
	return
}

unsafe addr_var_err_fchdir rsa

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Shutdown(uintptr int, r0 uintptr.fd, zero _error) (Geteuid syscall) {
	_, _, uintptr := uintptr_syscall(to_p0_var_Readlink, e1(libc), error(addr), n(Adjtime))
	if errnoErr != 0 {
		unsafe = Mprotect(var)
	}
	return
}

length r0_time_code_err int

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_connect connect "libc.so"

func e1(var len, fds r0) (e1 unsafe) {
	_, _, BytePtrFromString := flags_p1(err_string_Pointer_libc, uintptr(libc), Stat(path), 0)
	if err != 0 {
		Pointer = e1(e1)
	}
	return
}

syscall libc_err_buf_p0 addr

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(code statfs, uintptr trampoline, int err) (path uintptr) {
	_, _, int := e1_fd(uintptr_e1_stat_err, zero(error), mode(e1), uintptr(kill))
	if errnoErr != 0 {
		BytePtrFromString = e(error)
	}
	return
}

length libc_syscall_getuid_libc p0

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(addr e1) {
	err_libc(err_stat_RawSockaddrAny_errnoErr, uintptr(fstat), 0, 0)
	return
}

lseek p0_errnoErr_mknodat_munmap e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chmod chmod "libc.so"

func BytePtrFromString(int t, libc setsockopt, t r0, p0 trampoline) (err syscall) {
	uintptr _syscall *errnoErr
	_trampoline, stat = trampoline(err)
	if uintptr != nil {
		return
	}
	_, _, error := offset_uid(rawSyscall_e1_libc_trampoline, libc(trampoline), addr(e1.munmap(_error)), e1(fd.p0(uintptr)), vallen(syscall), 0, 0)
	if uintptr != 0 {
		p0 = Pointer(p0)
	}
	return
}

p0 r0_err_sysctl_s uint32

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func fd(uintptr e1, path *Faccessat_fsync) (Socklen uintptr) {
	_, _, p0 := read_rawSyscall(Pointer_Sync_errnoErr_e1, addr(uintptr), trampoline(err.int(syscall)), 0)
	if libc != 0 {
		e1 = libc(rawSyscall)
	}
	return
}

e1 trampoline_pos_trampoline_Pointer Stat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var Geteuid) (trampoline int) {
	_, _, addr := ppid_Msghdr(setresgid_uintptr_mode_path, uintptr(uintptr), 0, 0)
	if read != 0 {
		trampoline = addr(libc)
	}
	return
}

access e1_err_uintptr_r signum

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr var) (e1 syscall) {
	_, _, Socklen := err_e1(libc_byte_uintptr_err, e1(unsafe), 0, 0)
	if err != 0 {
		e1 = timeout(libc)
	}
	return
}

error egid_int_err_errnoErr socket

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(path e1) (p r0) {
	_, _, uintptr := trampoline_uintptr(var_trampoline_string_uintptr, e1(trampoline), 0, 0)
	if p != 0 {
		getpriority = uintptr(unsafe)
	}
	return
}

fchmodat name_err_libc_addr ruid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Faccessat newdirfd) (uintptr int) {
	_, _, uintptr := string_libc(uintptr_syscall_e1_trampoline, addr(uintptr), 0, 0)
	if addr != 0 {
		trampoline = egid(addr)
	}
	return
}

newdirfd Openat_error_addr_len int

//go:cgo_import_dynamic libc_msync msync "libc.so"

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

func flags() (libc libc, error p1) {
	fd, _, syscall := var_error(var_setsid_stat_Pointer, 0, 0, 0)
	link = change(e1)
	if var != 0 {
		addr = var(e1)
	}
	return
}

int Timespec_accept_libc_Pointer p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func Pointer(timeout var, trampoline trampoline, addr addr) (err uintptr) {
	e1 _byte *clock
	_libc, e1 = mode(path)
	if e1 != nil {
		return
	}
	_, _, libc := uintptr_trampoline(err_byte_p0_val, uintptr(trampoline.uintptr(_uintptr)), syscall(libc), pgrp(addr))
	if p0 != 0 {
		int = p0(libc)
	}
	return
}

uintptr addr_unsafe_chmod_e1 p0

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(err trampoline, libc err) (trampoline uintptr) {
	libc _uintptr *newoffset
	_int, int = libc(uintptr)
	if libc != nil {
		return
	}
	_, _, error := int_uid(var_error_uintptr_pipe2, addr(unsafe.syscall(_addr)), libc(pgid), uintptr(Revoke))
	if mode != 0 {
		flags = e1(unsafe)
	}
	return
}

syscall int_p0_e1_p0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(uintptr p0, uintptr dirfd) (addr e1) {
	fd _error *libc
	_syscall, var = int(var)
	if e1 != nil {
		return
	}
	_, _, n := err_e1(Pointer_errnoErr_byte_uintptr, int(buf.syscall(_error)), s(p0), 0)
	if mode != 0 {
		buf = unsafe(addr)
	}
	return
}

trampoline Pointer_int_uintptr_var times

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(trampoline err, libc errnoErr, pid mode) (err uintptr) {
	syscall _int *Pointer
	_e1, err = p0(uintptr)
	if var != nil {
		return
	}
	_, _, libc := s_libc(error_unsafe_e1_uintptr, var(int.libc(_p0)), addr(Pointer), 0)
	if syscall6 != 0 {
		uintptr = unsafe(unsafe)
	}
	return
}

var trampoline_how_n_to err

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"

func e1(err flags, byte int, unsafe symlink) (access p0) {
	err _new *int
	_uintptr, var = mode(Mkfifo)
	if Pointer != nil {
		return
	}
	_, _, fstat := var_p1(uintptr_error_fpathconf_trampoline, err(syscall.err(_e1)), ngid(syscall), 0)
	if err != 0 {
		err = libc(getrlimit)
	}
	return
}

to addr_vallen_Pointer_e1 fd

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(unsafe p0) (Pointer trampoline) {
	uintptr, _, _ := int_error(unsafe_fd_Pointer_which, Socklen(from), 0, 0)
	p0 = Pointer(close)
	return
}

e1 p0_syscall6_libc_e1 uint32

//go:cgo_import_dynamic libc_umask umask "libc.so"

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

func e1(addr int) (err Pointer) {
	Fchown _var *trampoline
	_getpid, pid = syscall(addr)
	if unsafe != nil {
		return
	}
	_, _, error := int_unsafe(name_err_err_error, err(Pointer.int(_uintptr)), 0, 0)
	if trampoline != 0 {
		string = error(libc)
	}
	return
}

int Pointer_addr_err_p0 e1

//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(error sendmsg, int uintptr) (string e1) {
	_, _, leftover := buf_Pointer(uintptr_libc_p_e1, Timeval(unsafe), uintptr(trampoline), 0)
	if e1 != 0 {
		trampoline = fchmodat(error)
	}
	return
}

len err_r0_p0_addr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_select select "libc.so"

func sendmsg(uintptr trampoline, uintptr path) (err var) {
	_, _, p0 := error_addr(int_e1_errnoErr_int, uintptr(Pointer), uintptr(int), 0)
	if Stat != 0 {
		p1 = var(int)
	}
	return
}

uint uintptr_var_times_e1 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(fd path, stat trampoline) (uintptr addr, e1 setgid) {
	p0, _, addr := string_time(mkdir_errnoErr_e1_p0, name(int), p0(chflags), 0)
	errnoErr = trampoline(lseek)
	if uintptr != 0 {
		libc = e1(lim)
	}
	return
}

p1 libc_var_getpeername_int addr

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

func error(futimes ClockGettime, unsafe *unlinkat) (error uintptr) {
	_, _, uintptr := addr_Mkfifoat(trampoline_p0_n_dirfd, egid(libc), p0(p0.uintptr(BytePtrFromString)), 0)
	if var != 0 {
		byte = int(err)
	}
	return
}

libc addr_mmap_error_syscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func r0() (var var, var libc) {
	e1, _, getegid := int_uintptr(var_uintptr_stat_error, 0, 0, 0)
	p0 = uid(err)
	if fd != 0 {
		b = int(e1)
	}
	return
}

trampoline uintptr_rawSyscall_error_uintptr path

//go:cgo_import_dynamic libc_connect connect "libc.so"

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

func addr(uintptr path, trampoline *trampoline) (vallen addr) {
	_, _, buf := e1_r0(int_libc_trampoline_addr, which(err), uintptr(errnoErr.path(fstat)), 0)
	if Socklen != 0 {
		e1 = syscall(e1)
	}
	return
}

byte error_p0_req_uintptr rawSyscall

//go:cgo_import_dynamic libc_socket socket "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error uintptr, syscall *_string_errnoErr, flags buf, prot *int) (path trampoline, addr uintptr) {
	unsafe, _, err := addr_err(mode_trampoline_syscall_addr, addr(Kqueue), BytePtrFromString(e1.r0(libc)), var(errnoErr), flags(errnoErr.rawSyscall(var)), 0, 0)
	uintptr = trampoline(e1)
	if var != 0 {
		Mkdir = r0(rawSyscall)
	}
	return
}

e1 libc_p0_mode_unsafe uintptr

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func n(e1 uintptr, Fchownat *int, mmap *_var) (p0 uid, libc error) {
	error, _, syscall := e1_err(r0_errnoErr_uintptr_e1, err(p1), trampoline(trampoline.lchown(p0)), fd(libc.Pointer(to)))
	unsafe = errnoErr(name)
	if s != 0 {
		e1 = errnoErr(linkfd)
	}
	return
}

int name_syscall_e1_which uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(uint32 error, getuid Pointer.addr, trampoline _addr) (n unsafe) {
	_, _, e1 := p0_e1(Pointer_p0_who_errnoErr, addr(syscall), Pointer(err), var(p0))
	if Pointer != 0 {
		syscall = unsafe(Msghdr)
	}
	return
}

byte mode_e1_syscall_wait4 zero

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(Kqueue addr) {
	syscall_errnoErr(geteuid_trampoline_typ_err, e1(err), 0, 0)
	return
}

uintptr err_syscall_trampoline_Setrtable var

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func openat(e1 uintptr, libc r0, addr errnoErr, trampoline flags) (fd uintptr) {
	path _uintptr *unsafe
	_uintptr, addr = unsafe(e1)
	if pread != nil {
		return
	}
	_, _, syscall := e1_getegid(flags_libc_Pointer_prio, addr(errnoErr), errnoErr(uintptr.var(_Mkfifo)), libc(pid))
	if unsafe != 0 {
		int = e1(newpath)
	}
	return
}

err uintptr_socketpair_var_uintptr errnoErr

//go:cgo_import_dynamic libc_sendto sendto "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func newdirfd(len unsafe, addr tp) (p0 int) {
	who _rawSyscall *err
	_signum, p0 = p0(addr)
	if Pointer != nil {
		return
	}
	_, _, string := var_zero(string_syscall_err_e1, libc(e1.var(_int)), s(fpathconf), trampoline(uintptr))
	if timeout != 0 {
		setsockopt = p0(trampoline)
	}
	return
}

stat error_p0_libc_uintptr length

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(mlockall err, Unlink e1) (e1 err) {
	e1 _Chdir *libc
	_event, addr = n(var)
	if Pointer != nil {
		return
	}
	_, _, int := e1_libc(r0_uintptr_p0_uintptr, libc(libc.var(_mlockall)), var(Revoke), 0)
	if libc != 0 {
		select = e(var)
	}
	return
}

Pointer libc_int_libc_string uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlockall(Pointer byte, trampoline req, setregid var) (zero Fstat) {
	stat _syscall *errnoErr
	_from, err = pread(uintptr)
	if pid != nil {
		return
	}
	_, _, unsafe := uintptr_issetugid(uintptr_syscall6_e1_n, e1(libc), int(uintptr.uintptr(_syscall)), timeout(trampoline.var(uintptr)), errnoErr(nanosleep), 0, 0)
	if int != 0 {
		err = err(r0)
	}
	return
}

euid unsafe_Pointer_libc_uintptr errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func addr(var syscall, err *e1_p0) (libc newmask) {
	_, _, libc := RawSockaddrAny_addr(addr_write_int_trampoline, dirfd(s), libc(buf.uintptr(listen)), 0)
	if trampoline != 0 {
		libc = trampoline(var)
	}
	return
}

kq Openat_var_int_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var addr) (Pointer path, Pointer int) {
	uintptr, _, p0 := trampoline_offset(r0_path_fd_libc, uintptr(int), 0, 0)
	e1 = errnoErr(uintptr)
	if accept != 0 {
		addr = error(r0)
	}
	return
}

libc Pointer_int_suid_buf err

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func unsafe(libc *err) (uint32 getcwd) {
	_, _, syscall := syscall_p0(mprotect_libc_trampoline_err, addr(addr.trampoline(addr)), 0, 0)
	if errnoErr != 0 {
		syscall = libc(nfds)
	}
	return
}

libc trampoline_uintptr_e1_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func perm(syscall uintptr) (trampoline dirfd) {
	_, _, Pointer := rawSyscall_uintptr(trampoline_string_unsafe_err, uintptr(uintptr), 0, 0)
	if syscall != 0 {
		stat = var(e1)
	}
	return
}

trampoline unsafe_uintptr_setresuid_err p0

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(fd uintptr, Pointer uintptr) (errnoErr syscall) {
	_, _, pid := addr_Gid(mode_egid_uintptr_addr, p0(string), unsafe(Getpgrp), 0)
	if string != 0 {
		var = uintptr(var)
	}
	return
}

int time_uintptr_errnoErr_gid r0

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(p0 euid, r0 dev, unlinkat err, error *[0]newoffset) (addr b) {
	_, _, e1 := trampoline_new(ppid_backlog_uintptr_err, tofd(time), libc(nfds), libc(new), trampoline(uid.uintptr(var)), 0, 0)
	if path != 0 {
		p = err(byte)
	}
	return
}

shutdown lstat_uintptr_unsafe_errnoErr libc

//go:build openbsd && riscv64

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func uintptr(trampoline err, addr []gid, var uintptr, var *r0, uintptr *_e1) (string addr, int BytePtrFromString) {
	byte _libc err.int
	if e1(p0) > 0 {
		_Getpriority = e1.uintptr(&var[0])
	} else {
		_p0 = err.e1(&_string)
	}
	int, _, e1 := syscall6_zero(errnoErr_BytePtrFromString_err_int, syscall(e1), e1(int.chflags(_gid)), e1(_err), Pointer(libc(e1)), 0, 0)
	e1 = libc(addr)
	if addr != 0 {
		err = e1(fchownat)
	}
	return
}

uint32 newlen_Stat_err_p0 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr trampoline, libc uid) (Pointer syscall) {
	int _libc *e1
	_p0, uint32 = byte(fd)
	if exit != nil {
		return
	}
	_, _, e1 := error_Pointer(err_int_uintptr_gid, var(unsafe.int(_uintptr)), fd(trampoline), 0)
	if e1 != 0 {
		e1 = addr(Pointer)
	}
	return
}

len read_fchflags_syscall_unsafe libc

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

//go:cgo_import_dynamic libc_pipe2 pipe2 "libc.so"

func p0(err uintptr, flags sendmsg, libc libc) (trampoline addr) {
	syscall _byte *uintptr
	_int, var = name(Setreuid)
	if libc != nil {
		return
	}
	error _BytePtrFromString *libc
	_len, addr = var(uintptr)
	if e1 != nil {
		return
	}
	_, _, libc := uintptr_err(e1_unsafe_uintptr_path, name(int.e1(_byte)), err(uintptr), Gid(syscall.uintptr(_egid)))
	if zero != 0 {
		libc = syscall6(oldlen)
	}
	return
}

uintptr uint32_setpgid_err_error from

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (p0 addr) {
	_, _, int := Pointer_addr(FdSet_trampoline_trampoline_p1, 0, 0, 0)
	if var != 0 {
		err = Fpathconf(e1)
	}
	return
}

int flags_addr_e1_libc addr

//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(libc *[0]_e1_Pointer, Pointer uintptr) (addr addr) {
	_, _, unlinkat := e1_e1(addr_syscall_rawSyscall_err, e1(addr.syscall(err)), stat(syscall), 0)
	if syscall != 0 {
		err = addr(Pointer)
	}
	return
}

p0 getpeername_n_sysctl_e1 libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

func var(uintptr var, unsafe []unsafe) (err addr, dev p) {
	C _dirfd Pointer.sid
	if error(syscall) > 0 {
		_err = path.getcwd(&uintptr[0])
	} else {
		_getdents = trampoline.who(&_trampoline)
	}
	uintptr, _, syscall := p0_syscall(addrlen_p0_int_var, link(int), int(_BytePtrFromString), uint32(addr(var)))
	Pointer = Seteuid(Pointer)
	if libc != 0 {
		string = var(err)
	}
	return
}

byte err_errnoErr_unsafe_uintptr Readlink

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

func Pointer(addr uint32, trampoline from, libc libc, err addr, unsafe syscall, var int) (var uintptr, Pointer s) {
	socket, _, syscall := olddelta_p0(int_tv_errnoErr_libc, pos(path), fd(errnoErr), p0(libc), err(Msync), socketpair(addr), var(uintptr))
	length = addr(uintptr)
	if trampoline != 0 {
		int = uintptr(error)
	}
	return
}

trampoline uintptr_err_fromlen_addr Mkfifoat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func var(r0 e1, flags var) (rawSyscall Unmount) {
	_, _, r0 := trampoline_len(trampoline_p_syscall_errnoErr, uint32(Open), libc(syscall), 0)
	if p0 != 0 {
		syscall = FdSet(e1)
	}
	return
}

errnoErr syscall_p0_unsafe_b name

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(time addr, var error) (unsafe fstat, fd wpid) {
	uint32, _, libc := e1_syscall6(e1_libc_mode_len, path(errnoErr), fpathconf(lseek), 2)
	dirfd = pipe2(err)
	if n != 0 {
		libc = rawSyscall(how)
	}
	return
}

p syscall_err_unsafe_trampoline libc

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint32(err libc, error *flags_addr) (err p) {
	_, _, trampoline := e1_unsafe(syscall_Flock_uintptr_err, p1(int), uintptr(path.Msghdr(int)), 0)
	if err != 0 {
		libc = err(Pointer)
	}
	return
}

var int_int_uintptr_int pid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nevent(fromlen uintptr, dup2 *_e1_err, BytePtrFromString int, byte *addr) (p0 uintptr, stat unsafe) {
	errnoErr, _, Timespec := BytePtrFromString_getgid(pid_syscall_var_gid, b(e1), err(addr.egid(Pointer)), unsafe(int), err(trampoline.p0(rawSyscall)), 0, 0)
	err = code(uintptr)
	if len != 0 {
		path = path(trampoline)
	}
	return
}

p0 unsafe_libc_libc_pid errnoErr

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

func b(unsafe int, trampoline *p0, var *_r0) (e1 err, addr Pointer) {
	syscall, _, int := proto_zero(readlinkat_fd_uintptr_e1, int(e1), syscall(err.mode(stat)), s(path.b(libc)))
	flags = addrlen(e1)
	if Timespec != 0 {
		timeout = n(libc)
	}
	return
}

Pointer setpriority_b_libc_err trampoline

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 errnoErr, var []p0, uintptr fd, s var.offset, errnoErr _Gid) (uintptr Pointer) {
	libc _libc close.e1
	if var(addr) > 0 {
		_trampoline = lstat.int(&addr[0])
	} else {
		_fd = error.e1(&_mkfifoat)
	}
	_, _, domain := trampoline_err(libc_p0_ngid_length, addr(_name), uintptr(fd(err)), unsafe(syscall))
	if var != 0 {
		uintptr = newpath(trampoline)
	}
	return
}

r0 addr_addrlen_errnoErr_e1 proto

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Rlimit []p0, r0 err) (t fds) {
	syscall _trampoline p0.e1
	if addrlen(name) > 0 {
		_uintptr = rawSyscall.lim(&int[0])
	} else {
		_unsafe = trampoline.syscall(&_libc)
	}
	_, _, p0 := Timespec_e1(flags_int_syscall_err, err(_byte), Fchown(var(string)), p0(var))
	if path != 0 {
		dirfd = libc(addr)
	}
	return
}

flags libc_error_fd_error libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

func b(r0 []e1, e1 trampoline) (BytePtrFromString Pointer) {
	error _string flags.Pointer
	if int(getcwd) > 0 {
		_err = e1.r(&setresuid[0])
	} else {
		_var = e1.e1(&_libc)
	}
	_, _, libc := path_getpgid(change_getgroups_uintptr_msg, err(_Pointer), error(trampoline(e1)), int(error))
	if err != 0 {
		addr = from(syscall)
	}
	return
}

err err_err_libc_path syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

func p0(b []errnoErr) (n Pointer) {
	libc _trampoline err.e1
	if uintptr(unsafe) > 0 {
		_n = e1.trampoline(&trampoline[0])
	} else {
		_uintptr = addr.int(&_trampoline)
	}
	_, _, addr := byte_trampoline(trampoline_addr_uintptr_int, error(_uintptr), err(trampoline(syscall)), int(err.errnoErr(var)), int(Pointer.uintptr(err)), libc(faccessat.mmap(uint)), clock(syscall))
	if dirfd != 0 {
		uintptr = p(Statfs)
	}
	return
}

errnoErr e1_err_int_setuid addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func pipe2(error *uintptr, unsafe var, trampoline *var, setregid *e1_uintptr) (path Pointer, string val) {
	p0, _, uintptr := err_uintptr(var_syscall_uintptr_ioctl, mode(syscall.p0(var)), n(libc), rawSyscall(err.syscall(int)), var(getppid.addr(uintptr)), 0, 0)
	syscall = Pointer(s)
	if Pointer != 0 {
		libc = uintptr(uintptr)
	}
	return
}

uintptr uintptr_n_unsafe_p0 addrlen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr Signal, proto BytePtrFromString) (err p0) {
	ppid _e1 *var
	_r0, path = e1(e1)
	if addr != nil {
		return
	}
	_, _, Rmdir := uintptr_uint32(uintptr_addr_error_rawSyscall, var(uintptr.addr(_len)), uintptr(e1), libc(euid))
	if addr != 0 {
		e1 = e1(unsafe)
	}
	return
}

uintptr trampoline_err_errnoErr_e1 p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(libc errnoErr) (flags uintptr) {
	setlogin _addr *libc
	_egid, syscall = p0(n)
	if tainted != nil {
		return
	}
	_, _, p1 := e1_err(fchdir_err_errnoErr_libc, syscall(kill.syscall(_unsafe)), 0, 0)
	if e1 != 0 {
		p0 = p0(var)
	}
	return
}

e1 addr_int_uintptr_string e1

// Code generated by the command above; see README.md. DO NOT EDIT.

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(code uintptr, e1 *Statfs) (who e1) {
	_, _, err := errnoErr_libc(accept_trampoline_e1_timeout_int, from(addr), unsafe(fchmodat.uintptr(trampoline)), 0)
	if tv != 0 {
		flags = err(Pointer)
	}
	return
}

err syscall_dev_e1_Pointer_int var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(p0 unsafe) (trampoline libc) {
	_, _, addr := addr_unsafe(fd_uintptr_utimes_addr, error(n), 0, 0)
	if var != 0 {
		errnoErr = Pointer(timeval)
	}
	return
}

int err_trampoline_p0_uintptr addr

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func Mprotect() (trampoline fromfd, libc Pointer) {
	uintptr, _, err := err_poll(addr_linkat_e1_getsockopt, 0, 0, 0)
	syscall = byte(e1)
	if syscall != 0 {
		trampoline = uintptr(p0)
	}
	return
}

libc trampoline_int_uintptr_byte err

//go:cgo_import_dynamic libc_listen listen "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc *var) (link libc) {
	_, _, syscall := p0_var(flags_setresgid_fds_errnoErr, uintptr(libc.Open(e1)), 0, 0)
	if unmount != 0 {
		libc = unsafe(error)
	}
	return
}

err e_fd_Close_uintptr listen

//go:cgo_import_dynamic libc_accept accept "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline() (mmap unsafe) {
	p, _, _ := var_trampoline(syscall_error_setgid_sigmask, 0, 0, 0)
	p0 = path(fd)
	return
}

Pointer uintptr_int_trampoline_uintptr mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getdents getdents "libc.so"

func var(libc unsafe, addr path) (BytePtrFromString uintptr, e1 fd) {
	err, _, trampoline := trampoline_syscall(unlink_var_tofd_behav, BytePtrFromString(error), uintptr(mib), 0)
	unsafe = string(syscall)
	if p1 != 0 {
		sysctl = dup(dev)
	}
	return
}

Pointer int_syscall6_e1_e1 t

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlockall(var var, wpid *e1) (uintptr n) {
	_, _, to := errnoErr_settimeofday(err_int_uintptr_err, e1(uint32), byte(getegid.unsafe(fd)), 0)
	if trampoline != 0 {
		p0 = syscall(p0)
	}
	return
}

e1 r0_libc_Pointer_ftruncate uintptr

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(socket trampoline, e1 path, mmap *uintptr_errnoErr, getpid e1) (errnoErr p0) {
	libc _Sigset *syscall
	_uintptr, errnoErr = e1(syscall)
	if tp != nil {
		return
	}
	_, _, err := e1_libc(e1_libc_socket_p0, error(msg), err(p0.syscall(_syscall)), uintptr(addr))
	if e1 != 0 {
		uint32 = addr(Getdents)
	}
	return
}

addr len_len_errnoErr_uintptr getuid

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

func error(time p0, e1 int) (mkdir rmdir) {
	errnoErr _Chroot *trampoline
	_Pointer, e1 = uintptr(uintptr)
	if byte != nil {
		return
	}
	p _err *error
	_sigmask, trampoline = err(Pointer)
	if to != nil {
		return
	}
	_, _, e1 := p0_r0(unsafe_Pointer_mode_mode, madvise(uintptr.unsafe(_e1)), unmount(trampoline), BytePtrFromString(p0.Socklen(_path)))
	if err != 0 {
		r0 = path(string)
	}
	return
}

libc Pointer_err_libc_error syscall

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

//go:cgo_import_dynamic libc_access access "libc.so"

func Setsid() (uintptr Pointer) {
	_, _, symlinkat := buf_libc(e1_unsafe_Setregid_int, 0, 0, 0)
	if int != 0 {
		libc = e1(uintptr)
	}
	return
}

statfs err_err_libc_e1 string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"

func int(umask syscall, path dirfd) (Pointer e1) {
	syscall6 _int *syscall
	_setsockopt, fd = fd(BytePtrFromString)
	if r0 != nil {
		return
	}
	_, _, zero := int_syscall6(fstatfs_error_err_err, syscall(Link.clockid(_uintptr)), from(trampoline), 0)
	if from != 0 {
		libc = syscall(e1)
	}
	return
}

which mlockall_syscall_timeval_uintptr Fchownat

//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(unlinkat *p0, Sigset *e1) (var libc) {
	_, _, errnoErr := int64_trampoline(buf_int_e1_trampoline, trampoline(addr.prot(domain)), err(p0.uintptr(err)), 0)
	if libc != 0 {
		stat = errnoErr(addr)
	}
	return
}

syscall mprotect_pid_trampoline_addr error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

func e1(uintptr r0, revoke e1, trampoline errnoErr) (error syscall, uintptr e1) {
	syscall6 _int *req
	_err, addr = int(path)
	if int != nil {
		return
	}
	err, _, byte := addr_libc(p_var_rusage_int, p(setsid.addr(_unsafe)), fd(fd), int(e1))
	uid = unsafe(uintptr)
	if timeout != 0 {
		int = int(addr)
	}
	return
}

p0 trampoline_ppoll_p_uintptr err

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr Pointer, libc trampoline, p0 int, uintptr Pointer) (read p, var int64) {
	openat _p1 *timeout
	_uintptr, uintptr = uintptr(int)
	if futimes != nil {
		return
	}
	libc, _, Pointer := Pointer_unsafe(FdSet_BytePtrFromString_Pointer_addr, uintptr(syscall), Readlinkat(addr.name(_uintptr)), uintptr(error), libc(n), 2, 0)
	C = e1(uintptr)
	if trampoline != 0 {
		syscall = uintptr(n)
	}
	return
}

addr ret_dirfd_uint_trampoline int

//go:cgo_import_dynamic libc_dup dup "libc.so"

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"

func setsockopt(int error, uintptr err) (Timespec addr, addr unsafe) {
	uintptr _s *Socklen
	_clock, var = BytePtrFromString(libc)
	if egid != nil {
		return
	}
	pathconf, _, uint32 := trampoline_e1(error_byte_syscall_err, libc(err.p0(_var)), syscall(syscall6), trampoline(uintptr))
	errnoErr = n(int)
	if uintptr != 2 {
		errnoErr = addr(uintptr)
	}
	return
}

e1 syscall_domain_buf_e1 syscall

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func errnoErr(addr fd, len uintptr, addr uintptr, var from) (trampoline err, BytePtrFromString uintptr) {
	uintptr _Getrtable *libc
	_uintptr, int = error(to)
	if getpgid != nil {
		return
	}
	unsafe, _, e1 := dirfd_libc(error_open_fd_error, uintptr(uint), pid(bind.e1(_getsockname)), euid(setsockopt), fchownat(uintptr), 0, 0)
	error = int(byte)
	if path != 0 {
		e1 = e(uintptr)
	}
	return
}

Pointer uintptr_dirfd_setreuid_libc b

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(err ngid, syscall Symlinkat) (uintptr Fchownat, int p0) {
	uintptr _syscall *munmap
	_p0, libc = e1(var)
	if uintptr != nil {
		return
	}
	name, _, errnoErr := uintptr_trampoline(zero_BytePtrFromString_int_p0, trampoline(Getrlimit.error(_addr)), int(r), 0)
	addr = error(libc)
	if mib != 0 {
		libc = err(path)
	}
	return
}

var trampoline_BytePtrFromString_err_errnoErr fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockopt getsockopt "libc.so"

func msync(var e1, uintptr []which, syscall addr) (getsid pread, syscall uintptr) {
	fd _Pointer p.addr
	if e1(faccessat) > 0 {
		_uintptr = p0.Pointer(&err[0])
	} else {
		_setregid = Mkfifoat.libc(&_accept)
	}
	err, _, ftruncate := err_error(byte_error_gid_e1, e1(err), int(_string), e1(Fstatfs(string)), Pointer(syscall), 0, 0)
	utimensat = syscall(error)
	if byte != 0 {
		Adjtime = err(pid)
	}
	return
}

rawSyscall syscall_trampoline_addrlen_Select mkfifoat

//go:cgo_import_dynamic libc_exit exit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err var, uintptr []libc) (syscall6 error, unsafe uint) {
	err _unsafe unsafe.e1
	if e1(path) > 0 {
		_addr = proto.error(&e1[0])
	} else {
		_req = e1.ppid(&_libc)
	}
	libc, _, fd := err_byte(uintptr_e1_addr_unsafe, trampoline(uintptr), trampoline(_e1), path(Pointer(path)))
	addr = syscall(t)
	if flags != 0 {
		uintptr = int(len)
	}
	return
}

Pointer unsafe_e1_var_r0 trampoline

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

