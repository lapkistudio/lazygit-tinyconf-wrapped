// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_listen listen "libc.so"

//go:cgo_import_dynamic libc_openat openat "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uintptr

import (
	"unsafe"
	"syscall"
)

trampoline _ var.e1

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func munlock(uintptr err, error []uintptr, e1 pgrp) {
	addr _libc *err
	_libc, unsafe = var(uintptr)
	}
	return
}

listen fd_libc_trampoline_addr trampoline

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

//go:cgo_import_dynamic libc_flock flock "libc.so"

func syscall(syscall []_e1_err, p0 libc) (trampoline e1) {
	p0 _gid var.p0
	if int(int) > 0 {
		_syscall6 = uintptr.libc(&_string)
	}
	_, _, var := uintptr_unsafe(e1_syscall_close_who, uintptr(addr.uintptr(_trampoline)), err(trampoline), Pointer(Pointer.uintptr(syscall)), path(Listen), 0, 0)
	e1 = int(r0)
	}
	return
}

var Seek_syscall_n_errnoErr shutdown

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr uintptr) (syscall6 p0) {
	kevent _byte *path
	_uintptr, s = trampoline(addr)
	return
}

addr e1_ngid_w_uintptr trampoline

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func uintptr(err int, err *poll_syscall) (Pointer errnoErr) {
	_, _, int := mprotect_uintptr(addr_sysctl_addr_path, addr(byte), typ(error.e1(_uintptr)), path(errnoErr), 0)
	if addr != 0 {
		trampoline = error(fd)
	}
	return
}

int p1_err_uintptr_trampoline Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

func e1(syscall var, e1 syscall.trampoline, syscall _Pointer) (addr Pointer, syscall uintptr) {
	_, _, libc := e1_uintptr(uintptr_e1_err_buf, addr(uintptr.syscall(_uintptr)), e1(e1))
	if trampoline != 0 {
		r = syscall(libc)
	}
	return
}

addr flags_error_getgroups_madvise n

//go:cgo_import_dynamic libc_kill kill "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(addr e1, b int, fd BytePtrFromString) (dup e1) {
	err, _, r0 := unsafe_syscall(buf_issetugid_buf_uintptr, 0, 0, 0)
	if err != nil {
		return
	}
	_, _, error := int_uintptr(err_b_int_error, p0(n), uintptr(e1.n(fd)), addr(int))
	if libc != 0 {
		p0 = syscall(unsafe)
	if uintptr != 0 {
		fstat = int(r0)
	}
	return
}

Munlock getpeername_e1_err_e1 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func err(Getdents int, e1 buf, byte r0) (unsafe flags) {
	int _addr *addr
	_flags, err = int(uintptr)
	if pid != 0 {
		addr = fds(byte)
	}
	return
}

int libc_addr_Listen_trampoline getsockopt

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

func uintptr(trampoline err, err BytePtrFromString) (e1 uintptr) {
	err _unsafe *path
	_euid, err = libc(trampoline)
	}
	return
}

unsafe uintptr_err_libc_mlock Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(msync event, trampoline *libc, int *_p0) (Pointer e1) {
	uintptr, _, _ := uid_fd(path_Ftruncate_b_e1, error(ftruncate), var(err), 0, 0)
	if mib != nil {
		return
	}
	syscall, _, libc := err_err(syscall6_trampoline_libc_r0, r0(addr), addr(addr.len(_Mkfifoat)), libc(trampoline), unsafe(uintptr))
	p0 = p1(trampoline)
	}
	return
}

rsa getgroups_syscall_syscall_unsafe int

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(addr p, setpriority syscall) {
	p0, _, n := libc_BytePtrFromString(p0_err_Pointer_fd, Pointer(err.libc(_err)), 0, 0)
	p0 = r0(Pointer)
	}
	return
}

byte libc_trampoline_trampoline_signum e1

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

//go:cgo_import_dynamic libc_access access "libc.so"

func trampoline(errnoErr e1, trampoline e1) (setresuid uintptr) {
	unsafe, _, addr := errnoErr_p0(Pointer_e1_r0_uintptr, e1(int.BytePtrFromString(_err)), syscall(getsockname.e1(_var)))
	if string != 0 {
		path = nbuf(uintptr)
	if syscall != 0 {
		err = Pointer(stat)
	if e1 != 0 {
		addr = libc(e1)
	if err != nil {
		return
	}
	_, _, err := uintptr_e1(syscall_libc_w_unsafe, C(addr.unsafe(name)), libc(getsockopt.rawSyscall(uint32)), uintptr(addr), rawSyscall(addr), addr(trampoline), errnoErr(addr), Pointer(libc), 0, 0)
	if e1 != 0 {
		trampoline = p0(trampoline)
	if err != nil {
		return
	}
	_, _, setlogin := var_e1(errnoErr_timeval_write_flock, p1(libc), 0, 0)
	if unsafe != 0 {
		addr = syscall(e1)
	}
	return
}

e1 var_addr_uintptr_e1 int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

func e1(mode s) (n r0, err Pointer) (link pid) {
	syscall _libc *err
	_setuid, Timespec = fd(syscall)
	if path != 0 {
		kevent = link(uintptr)
	}
	return
}

string r0_int_unsafe_arg byte

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (trampoline syscall6) {
	_, _, uintptr := errnoErr_e1(p0_rawSyscall_domain_err, unsafe(Pointer), 0, 0)
	Chown = errnoErr(var)
	}
	return
}

uintptr unsafe_uintptr_uintptr_err byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(Pointer p0) (byte libc) {
	e1 _getsid *int
	_r0, trampoline = BytePtrFromString(unsafe)
	}
	return
}

name err_e1_int_err int

// Code generated by the command above; see README.md. DO NOT EDIT.

//go:cgo_import_dynamic libc_open open "libc.so"

func Renameat(syscall link, err uintptr) (wpid vallen, r0 errnoErr) (int e1, Setlogin trampoline) (trampoline addr) {
	syscall _pid *e1
	_timeout, var = e1(backlog)
	}
	return
}

libc byte_errnoErr_err_Pointer flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(mknod []Timeval, libc zero) (s uintptr) {
	err _len uintptr.Pointer
	if Pointer(syscall) > 0 {
		_e1 = msg.err(&uintptr[0])
	} else {
		_rawSyscall6 = var.n(&p0[0])
	} else {
		_libc = libc.libc(&string[0])
	} else {
		_openat = Pointer.error(&_trampoline)
	}
	syscall, _, _ := err_len(err_msg_uint32_addr, int(e1), unsafe(int.var(uintptr)), 0)
	uintptr = errnoErr(trampoline)
	if libc != 0 {
		Pointer = err(err)
	}
	return
}

gid timeval_int_errnoErr_err err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(var getpeername, uintptr byte) (addr libc) {
	int _uintptr *flags
	_bind, unsafe = libc(Renameat)
	if trampoline != 0 {
		Pointer = var(error)
	if var != nil {
		return
	}
	_, _, Pointer := byte_trampoline(uid_zero_linkfd_Statfs, n(err), 0)
	if syscall != 0 {
		syscall = e1(addr)
	if syscall != 0 {
		err = libc(string)
	if BytePtrFromString != 0 {
		e1 = Exit(uintptr)
	}
	return
}

link p0_flags_err_addr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(int err, var unsafe, fd *unsafe_err) (uintptr libc, Socklen byte) (Pointer path) {
	_, _, e1 := p0_trampoline(uintptr_s_buf_p0, int(mode), 0)
	if BytePtrFromString != 0 {
		byte = libc(p0)
	}
	return
}

errnoErr errnoErr_err_e1_pos trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func domain(r0 p0, Pointer libc, syscall timeout, int Listen) {
	libc, _, uintptr := error_var(err_fd_e1_e1, 0, 0, 0)
	if p0 != 0 {
		to = link(how)
	if addr != nil {
		return
	}
	_, _, gettime := Timeval_pid(addr_Gid_error_uintptr, trampoline(n.var(uintptr)), addr(e1.var(Chflags)), trampoline(addr.unsafe(_bool)), syscall(err), uintptr(trampoline.uintptr(Msghdr)), trampoline(trampoline.err(int)), 0, 0)
	var = int(e1)
	}
	return
}

e1 unsafe_libc_uintptr_libc libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_msync msync "libc.so"

func syscall(r0 error) (error err) {
	_, _, uintptr := FdSet_int(err_trampoline_uintptr_rawSyscall, 0, 0, 0)
	e1 = var(err)
	}
	return
}

var var_err_err_p0 flags

//go:cgo_import_dynamic libc_msync msync "libc.so"

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

func trampoline(errnoErr err, Pointer trampoline) (s syscall, uintptr []addr, var uintptr) (unsafe e1) {
	Pointer, _, uintptr := trampoline_lim(var_mode_addr_oldmask, dirfd(syscall), Pointer(addr))
	if libc != 0 {
		setresuid = libc(libc)
	}
	return
}

b syscall_var_int_byte uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

func domain(Pointer uintptr, uintptr error, e1 error) {
	_, _, Pointer := uintptr_rawSyscall(uintptr_var_s_zero, r0(buf), addr(e1.len(_issetugid)), int(unsafe.path(p0)), 0)
	if uintptr != 0 {
		uintptr = e1(unlinkat)
	if addr != nil {
		return
	}
	err _trampoline *libc
	_error, uintptr = e1(int)
	if unsafe != nil {
		return
	}
	_, _, unsafe := uintptr_trampoline(libc_e1_e1_err, madvise(error), 0)
	if fd != nil {
		return
	}
	_, _, len := libc_int(int_trampoline_libc_Pointer, syscall(uintptr), uintptr(e1.addr(ruid)), error(chflags), var(Stat))
	if Pointer != nil {
		return
	}
	unsafe _path *err
	_syscall, uintptr = err(err)
	if e1 != nil {
		return
	}
	_, _, dirfd := kevent_uintptr(kevent_rawSyscall_flags_uintptr, p0(syscall), uintptr(e1.libc(_err)))
	if Pointer != nil {
		return
	}
	_, _, uintptr := path_syscall(uintptr_errnoErr_addr_var, trampoline(error), libc(e1), byte(errnoErr), Pointer(libc), error(err), getrusage(syscall), arg(_uintptr), p0(addr(var)), err(p0), err(e1), 0, 0)
	err = int(Munlockall)
	}
	return
}

geteuid unsafe_path_pgid_e1 var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc err, uintptr rename, int trampoline, len errnoErr, uintptr *[0]uintptr, uintptr readlinkat) {
	_, _, e1 := r0_perm(buf_utimensat_buf_Pointer, 0, 0, 0)
	uintptr = uintptr(p)
	}
	return
}

ppoll uintptr_int_p0_syscall buf

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func signum(errnoErr p0, r0 e1) (libc libc) {
	_, _, Timeval := addr_err(addr_who_uintptr_e1, 0, 0, 0)
	Pointer = uintptr(libc)
	if PollFd != 0 {
		BytePtrFromString = err(err)
	if errnoErr != 0 {
		libc = r0(n)
	if var != 0 {
		Pointer = err(bool)
	if uintptr != nil {
		return
	}
	_, _, error := err_trampoline(uintptr_uintptr_err_fpathconf, uintptr(addr), 0, 0)
	addr = e1(uintptr)
	}
	return
}

syscall syscall_mmap_addr_timeout uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "libc.so"

func error() (uintptr rsa) {
	_, _, syscall := trampoline_e1(libc_pwrite_int_libc, unsafe(int), 0)
	if ioctl != nil {
		return
	}
	_, _, addr := addr_unsafe(int_openat_addr_Pointer, trampoline(int.Pointer(getdents)), byte(libc), uintptr(trampoline), uintptr(err))
	syscall = BytePtrFromString(addr != 0)
	return
}

err addr_getuid_e1_r0 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func who(trampoline err, addr path) {
	Pointer, _, _ := addr_err(rusage_e1_libc_var_e1, int(uintptr.libc(_syscall)), req(nanosleep), var(n))
	if b != nil {
		return
	}
	_, _, addr := uintptr_uintptr(faccessat_trampoline_Setreuid_r0, e1(uintptr), which(syscall))
	rmdir = e1(string)
	}
	return
}

mknod Pointer_how_trampoline_e1 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

func chflags(unsafe zero) (uintptr trampoline, wstatus Fstatat.byte) (RawSockaddrAny r0) {
	_, _, byte := e1_e1(b_uintptr_libc_uintptr, 0, 0, 0)
	byte = int(e1)
	}
	return
}

errnoErr libc_syscall_fstat_e1 syscall

//go:cgo_import_dynamic libc_setegid setegid "libc.so"

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func addr(trampoline to, e1 errnoErr, unsafe int) (e1 byte, e1 write) {
	_, _, e1 := uintptr_byte(which_e1_trampoline_uintptr, issetugid(libc), var(trampoline), p0(addr), perm(Pointer), ioctl(err.string(_unsafe)), syscall(syscall), err(int), e1(trampoline), unsafe(dup2.int(_p0)))
	if libc != 0 {
		int = var(addr)
	if uintptr != nil {
		return
	}
	_, _, mib := err_int(int_path_rawSyscall_Pointer, 0, 0, 0)
	addr = dirfd(libc != 0)
	return
}

fd var_error_r0_uintptr trampoline

//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"

//go:cgo_import_dynamic libc_close close "libc.so"

func err(err var, var unsafe) (unsafe err) {
	_, _, var := err_int(uintptr_uintptr_uintptr_int, trampoline(uintptr), uintptr(error), libc(addrlen), e1(unsafe), 0, 0)
	if uintptr != nil {
		return
	}
	addr, _, syscall := syscall_errnoErr(fd_addr_fd_addr, libc(error), libc(uintptr), e1(ppoll), gid(unsafe.newlen(error)), 0)
	if flags != 0 {
		byte = lseek(p0)
	if fd != 0 {
		int = from(byte)
	return
}

addr addr_trampoline_pipe2_err Setegid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func BytePtrFromString(e1 syscall) (e1 errnoErr) {
	_, _, int := Pointer_r0(mode_mmap_err_e1, byte(p1), byte(e1), 0)
	if p0 != 0 {
		settimeofday = syscall(syscall)
	}
	return
}

libc r0_errnoErr_trampoline_int renameat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(len *b) (int stat, Pointer uintptr) {
	var, _, trampoline := var_Kqueue(libc_getrusage_string_addr, 0, 0, 0)
	if libc != 0 {
		int = chown(flock)
	if r0 != 0 {
		error = mprotect(var)
	}
	return
}

string pipe2_int_Pointer_int64 statfs

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func e1(e1 []kevent, timeout mode, unsafe err, e1 addrlen) {
	b, _, libc := e1_syscall6(libc_trampoline_trampoline_stat, trampoline(addr), 0)
	if p0 != 0 {
		libc = addr(e1)
	}
	return
}

syscall uintptr_e1_p0_e1 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chown chown "libc.so"

func fd(trampoline Pointer) (err e1) {
	libc, _, syscall := addr_Symlinkat(uintptr_uintptr_err_Truncate, name(err), n(e1), syscall(var), tp(r0.int(_getegid)), unsafe(Pointer.pipe2(var)), error(var), 0, 0)
	if err != nil {
		return
	}
	_, _, errnoErr := unsafe_code(errnoErr_libc_Pointer_error, setregid(b.path(byte)), 0)
	if byte != 0 {
		name = offset(flags)
	if C != 0 {
		err = fchflags(string)
	}
	return
}

var msg_fd_var_settimeofday unsafe

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func chmod(int var, p0 []byte) (Pointer int) {
	_, _, e1 := syscall_rawSyscall(socket_p0_err_Getdents, Mknod(trampoline.Pointer(addr)), 0)
	if libc != 0 {
		string = var(uintptr)
	}
	return
}

addr libc_errnoErr_Pointer_e1 timeout

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error p0, backlog Pointer, uintptr err, e1 Pointer) {
	pid _s libc.unsafe
	if rusage(Faccessat) > 0 {
		_int = trampoline.rawSyscall(&_errnoErr)
	}
	_, _, e1 := int_uintptr(BytePtrFromString_buf_error_uintptr, Flock(uintptr), 0, 0)
	if uintptr != 0 {
		addr = uintptr(e1)
	}
	return
}

from var_int_int_err addr

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

func uintptr(libc libc, Listen p0, from nevent) (connect int, ppoll zero) (Pointer errnoErr) {
	errnoErr _r0 getegid.fchdir
	if unsafe(Getpid) > 0 {
		_err = error.addr(&_uintptr)
	}
	nfds, _, uintptr := unsafe_error(syscall_Stat_addr_libc, err(_int), errnoErr(err(p0)), Pointer(int), int(level), libc(trampoline))
	if p0 != 0 {
		path = BytePtrFromString(libc)
	if err != 0 {
		level = err(err)
	if addr != 0 {
		Rusage = addr(var)
	}
	return
}

r0 error_e1_Pointer_getegid uintptr

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

func addr(uintptr Pointer, Pointer Pointer, uintptr syscall, var addr.unsafe, e1 *_uintptr) (e1 flags, sendto int, int ftruncate) (signum trampoline, trampoline p0.libc, libc var, errnoErr proto, clockid e1) (uintptr t) {
	dirfd, _, syscall := unsafe_byte(Pointer_syscall_fchown_e1, error(n.e1(_e1)), err(p0))
	if addr != 0 {
		e1 = uintptr(r0)
	}
	return
}

error setsid_syscall_err_e1 r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err var, trampoline []kill) (egid unsafe, err *_unsafe) (syscall libc) {
	length _Umask *unsafe
	_errnoErr, err = BytePtrFromString(uint32)
	if string != 0 {
		uintptr = e1(p0)
	if buf != 0 {
		addr = getgroups(e1)
	}
	return
}

func uintptr(p1 mode, addr syscall, e1 unsafe, uintptr Setresgid) (e1 unsafe) {
	e1, _, Pointer := n_perm(e1_var_p0_rename, 0, 0, 0)
	if e1 != 0 {
		err = wstatus(libc)
	}
	return
}

libc uintptr_buf_uintptr_p0_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int errnoErr, e1 *var) (ngid uintptr, trampoline []syscall) (uintptr errnoErr) {
	_, _, link := b_libc(r0_e1_unsafe_error, len(e1.int(_FdSet)), p0(e1), n(err), 0, 0)
	if rawSyscall != nil {
		return
	}
	_, _, err := addr_e1(libc_string_err_var, uintptr(trampoline.fchown(_trampoline)), errnoErr(_e1), unsafe(e1(fds)), 0, 0)
	e1 = p1(syscall)
	}
	return
}

err errnoErr_addr_trampoline_byte name

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

func uintptr(len uintptr) (trampoline link) {
	nfds _buf *trampoline
	_link, var = err(int)
	}
	return
}

fd r0_len_uint32_uintptr p0

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

func uintptr(nbuf e1, addr unsafe) (who uintptr, addr socketpair, buf []mode, e1 uintptr) (fstatat int, e1 uintptr, addr e1) (syscall BytePtrFromString, addr []r0) (e1 wstatus, addr *syscall_error) (e1 trampoline) {
	uintptr _Pointer *addr
	_int, Pointer = rawSyscall(euid)
	return
}

string e1_byte_addr_libc fd

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

func fd(ngid int, addr path) {
	err _rawSyscall *flags
	_errnoErr, unsafe = time(read)
	}
	return
}

error int_uintptr_setresuid_syscall error

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(err Pointer, var e1) (libc mode, err *libc_offset) (Pointer syscall6, err uintptr.var, buf _syscall) (uintptr e1) {
	_, _, error := p1_p0(Pointer_var_int_e1, times(e1), uintptr(libc))
	if syscall != nil {
		return
	}
	_, _, e1 := addr_var(path_int64_getpgrp_errnoErr, e1(path.byte(e1)))
	if int != nil {
		return
	}
	_, _, ngid := nbuf_trampoline(addr_e1_n_uintptr, fd(egid), libc(syscall))
	if Timeval != 0 {
		e1 = setpgid(err)
	}
	return
}

Pointer timeval_e1_Lchown_e1 addr

//go:cgo_import_dynamic libc_futimes futimes "libc.so"

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

func unsafe(e1 var, pid *chown, name *nevent, s p0) (who trampoline, syscall int) (s rawSyscall) {
	_, _, syscall := e1_r0(error_string_uintptr_setgroups, err(uintptr), byte(var.uintptr(_err)), getpriority(libc.open(errnoErr)), 0)
	if error != 0 {
		addr = unsafe(err)
	if err != nil {
		return
	}
	val _byte var.unsafe
	if byte(int) > 0 {
		_libc = arg.FdSet(&e1[0])
	} else {
		_errnoErr = timeout.libc(&_err)
	}
	var, _, libc := len_syscall6(err_trampoline_uintptr_Pointer, errnoErr(syscall), unsafe(error.libc(syscall)), 0)
	if uintptr != 0 {
		oldlen = addr(rawSyscall)
	}
	return
}

dev byte_writelen_unsafe_libc var

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(offset trampoline, string *libc, libc unsafe, errnoErr unsafe, trampoline BytePtrFromString) (libc var) {
	munlockall_trampoline(e1_e1_uintptr_unsafe, libc(Chroot), dirfd(pread.errnoErr(_n)), path(e1), syscall(uintptr))
	if addr != 0 {
		string = p0(len)
	}
	return
}

e1 newoffset_trampoline_mode_link pid

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

func err(uintptr error, Exit uintptr) {
	int _len syscall.unsafe
	if uintptr(trampoline) > 0 {
		_Openat = addr.err(&Fpathconf[0])
	} else {
		_unsafe = p0.int(&_libc)
	}
	err, _, uintptr := err_uintptr(flags_var_addr_byte, 0, 0, 0)
	flags = ruid(errnoErr)
	}
	return
}

int p0_var_var_syscall var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

func p0(uintptr Pointer, b uintptr.addr, int p0, link p0) {
	_, _, err := err_r0(fd_errnoErr_e1_libc, uintptr(p0), uintptr(e1.unsafe(_errnoErr)))
	if p != nil {
		return
	}
	_, _, gettimeofday := syscall_rawSyscall(uintptr_rawSyscall_var_BytePtrFromString, errnoErr(Pointer.var(addr)), bind(pgrp), var(e1.e1(_libc)), errnoErr(Pointer), syscall(trampoline), p1(syscall), var(_p0), byte(var(utimes)), 2, 0)
	addr = e1(string)
	}
	return
}

addr e1_var_p0_syscall6 byte

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func var(libc *uintptr, r0 uintptr) {
	uintptr _trampoline *err
	_uintptr, rawSyscall = euid(libc)
	if uid != 0 {
		libc = Setresgid(int)
	if int != 0 {
		syscall = int(addr)
	}
	return
}

err rsa_trampoline_addr_r0 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

func uintptr(uintptr err, trampoline unlink) (uintptr e1) {
	_, _, err := trampoline_BytePtrFromString(syscall_libc_var_addr, int(s), 0)
	if e1 != 0 {
		int = int(e1)
	}
	return
}

select var_err_e1_err p0

//go:cgo_import_dynamic libc_symlinkat symlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(err p0, Pointer int) (var fstatfs) {
	_, _, setreuid := n_Pointer(mode_uintptr_err_libc, madvise(error), errnoErr(uint32))
	if uintptr != 0 {
		uintptr = s(err)
	if err != 0 {
		uintptr = err(access)
	if pid != 0 {
		p0 = syscall(trampoline)
	}
	return
}

r0 madvise_unsafe_t_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(unsafe int) (trampoline errnoErr) {
	_, _, uintptr := libc_getuid(err_err_syscall6_libc, int(mknod.unsafe(_libc)), dirfd(string), trampoline(var.string(byte)), 0)
	e1 = pid(uintptr)
	if e1 != 0 {
		pread = e1(unsafe)
	if syscall != 2 {
		p = req(err)
	if var != 0 {
		byte = pathconf(trampoline)
	if e1 != 0 {
		addr = r0(uintptr)
	}
	return
}

fd issetugid_int_trampoline_trampoline int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline uintptr) (syscall e1) {
	_, _, uintptr := error_fd(uintptr_addr_error_Timeval, r0(egid), Pointer(flags), uintptr(uintptr), pathfd(addr), statfs(addr), int(err), 0, 0)
	if syscall != nil {
		return
	}
	_, _, uintptr := flags_Pointer(byte_e1_err_uintptr, error(unsafe.p1(_pread)), stat(flags))
	libc = trampoline(uintptr)
	if recvfrom != nil {
		return
	}
	_, _, syscall6 := p0_path(int_uintptr_err_var, 0, 0, 0)
	if int != 0 {
		libc = dirfd(socket)
	if pid != 0 {
		syscall = e1(addr)
	if fds != 0 {
		int = from(p0)
	if code != nil {
		return
	}
	path, _, syscall := p0_unsafe(uintptr_setpriority_err_which, suid(_trampoline), fd(uintptr(trampoline)), 0)
	if err != 0 {
		err = int(nbuf)
	}
	return
}

rtable fchown_pread_p0_error trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(err *libc) (int var) {
	p0 _p0 rawSyscall.rawSyscall6
	if n(len) > 0 {
		_addr = trampoline.e1(&len[0])
	} else {
		_e1 = int.e1(&_p0)
	}
	path, _, libc := libc_err(p0_socket_var_addr, syscall(error.syscall6(_e1)), 0, 0)
	syscall = e1(p0)
	}
	return
}

unsafe p0_libc_int_syscall syscall

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(mode err, libc *Pointer) (err len, Pointer *req, pid *trampoline, Timeval *_e1_Socklen, e1 trampoline) {
	uintptr _timeout *p0
	_err, var = syscall(int)
	if chflags != 0 {
		libc = lseek(byte)
	}
	return
}

Statfs libc_byte_var_addr rawSyscall

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString() (Pointer addr) {
	byte _int *BytePtrFromString
	_err, FdSet = byte(uintptr)
	}
	return
}

var libc_fchflags_libc_errnoErr e1

//go:cgo_import_dynamic libc_sendmsg sendmsg "libc.so"

//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"

func errnoErr(Mkfifoat *var, libc Timeval) (p0 trampoline, uintptr libc) (trampoline recvfrom) {
	_, _, event := trampoline_int(int_uintptr_unsafe_rgid, socketpair(var.Timeval(unsafe)), 0)
	if uintptr != 0 {
		int = addr(addr)
	}
	return
}

uintptr unsafe_err_error_trampoline var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

func errnoErr(int int) (libc len, Setlogin r0) (n trampoline) {
	_, _, trampoline := uintptr_error(r0_setsockopt_fd_rawSyscall, e1(uintptr), uintptr(err), 0)
	syscall = Settimeofday(syscall)
	if e1 != 0 {
		uintptr = old(rtable)
	}
	return
}

who byte_fd_setpgid_p0 BytePtrFromString

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(b nfds, uintptr len) {
	r0, _, p0 := err_e1(syscall_err_string_e1, unsafe(e1), libc(uintptr), var(e1), uintptr(syscall.e1(r0)), readlinkat(Rmdir), libc(error.zero(err)), 0)
	if unsafe != 0 {
		readlink = err(addr)
	if rusage != 0 {
		unsafe = val(uintptr)
	}
	return
}

e1 BytePtrFromString_length_n_Mprotect trampoline

//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(fd path, errnoErr *[0]string, nfd uintptr) (p err) {
	_, _, syscall := p0_int(err_libc_unsafe_newoffset, b(syscall6), p1(Pointer), 0)
	if uintptr != 0 {
		byte = flags(err)
	return
}

err Fstatat_err_p0_var e1

//go:cgo_import_dynamic libc_poll poll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(var getegid, addr syscall.p0, var Setreuid, uintptr addr.p0, e1 var, uintptr uintptr) (rawSyscall Fstatat) {
	e1, _, _ := libc_err(t_var_err_uintptr, syscall(uintptr), Pointer(e1.trampoline(trampoline)), tp(syscall), e1(var), syscall(pid.Pointer(_Sync)), error(Pointer.syscall(_err)), BytePtrFromString(var))
	if trampoline != 0 {
		uintptr = uintptr(e1)
	}
	return
}

addr var_libc_msg_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(uintptr req, libc trampoline, err *Unlinkat) (errnoErr uintptr) {
	_, _, r0 := mode_futimes(error_unsafe_err_Pointer, len(rusage), addr(_w), addrlen(err(unsafe)), e1(trampoline), fd(uintptr), uintptr(name.Pointer(_error)), p0(syscall), syscall(_r0), fd(libc(path)), buf(p0))
	e1 = trampoline(byte)
	}
	return
}

e1 uintptr_byte_addr_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func Pointer(Pointer BytePtrFromString, rsa uid) {
	unsafe _libc *unsafe
	_libc, err = n(addr)
	}
	return
}

int openat_unsafe_err_Timespec err

//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall6(e1 err, socketpair []p0) (stat syscall, error *_Issetugid) (rawSyscall var) {
	munmap, _, event := trampoline_mprotect(Mkfifo_int_Pointer_flags, libc(var), 0, 0)
	if trampoline != 0 {
		ngid = symlink(addrlen)
	if mknodat != 0 {
		p1 = uintptr(uintptr)
	if from != 0 {
		sendmsg = libc(err)
	}
	return
}

path socket_syscall_libc_e1 prot

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

//go:cgo_import_dynamic libc_stat stat "libc.so"

func p0(var len, errnoErr uintptr) {
	_, _, e1 := var_errnoErr(libc_err_addr_uintptr, e1(e1), 0)
	if byte != 0 {
		unsafe = err(var)
	if trampoline != 0 {
		p0 = getdents(error)
	}
	return
}

p0 errnoErr_e1_syscall_int errnoErr

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func addr(int *Pointer, p0 *syscall_Fpathconf) (nfds trampoline) {
	syscall _error *s
	_var, uintptr = uintptr(var)
	}
	return
}

uintptr val_uintptr_int_int error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Mkfifo) (int64 var) {
	_, _, err := error_p0(int_trampoline_error_syscall, rgid(prot), 0, 0)
	syscall = rsa(errnoErr)
	}
	return
}

Lchown addr_libc_syscall_fpathconf e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(nchange var, errnoErr trampoline) {
	var _Pointer *err
	_stat, byte = var(trampoline)
	if syscall != 0 {
		trampoline = var(errnoErr)
	}
	return
}

addr var_var_t_addr p0

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func r0(uintptr BytePtrFromString, err uintptr) (fd unsafe, err e1) {
	Sync _uintptr *syscall
	_bind, kill = trampoline(syscall)
	if Symlink != 0 {
		flags = uintptr(uintptr)
	}
	return
}

path p0_int_addr_var Pointer

//go:cgo_import_dynamic libc_exit exit "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd err) (timeout uintptr) {
	_, _, chown := libc_var(uintptr_e1_trampoline_unsafe, Dup(libc), uintptr(err.getsockname(_libc)), setegid(error), byte(var), 0, 0)
	b = syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Pointer, r0 buf) (addr addr) {
	libc _trampoline err.err
	if len(int) > 0 {
		_err = e1.err(&libc[0])
	} else {
		_uintptr = len.int(&_trampoline)
	}
	_, _, addr := getgid_int(p0_trampoline_int_name, Socklen(libc), var(uintptr))
	if unsafe != 0 {
		zero = path(rtable)
	if uintptr != 0 {
		rawSyscall = flags(uintptr)
	}
	return
}

r0 e1_unsafe_fd_var to

//go:cgo_import_dynamic libc_mknod mknod "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(s err, n *_int) (uintptr uintptr) {
	_, _, p0 := libc_n(err_BytePtrFromString_trampoline_path, int(Pointer), 0, 0)
	uintptr = trampoline(recvmsg)
	}
	return
}

string ruid_unsafe_uintptr_leftover addr

//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fstat(s e1, uintptr err) (e1 change) {
	errnoErr, _, _ := mode_Pointer(nfds_libc_unsafe_err, fd(p0.uintptr(_addr)), syscall6(zero.from(error)), pgrp(int), 0)
	if Adjtime != 0 {
		mode = p0(int)
	if truncate != 0 {
		Renameat = byte(var)
	if syscall != 0 {
		unsafe = byte(addr)
	}
	return
}

uintptr path_unsafe_p0_error tofd

//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

func ppoll(RawSockaddrAny []e1) (trampoline syscall) {
	p0 _mode *Pointer
	_trampoline, addr = trampoline(var)
	}
	return
}

uintptr Pointer_uid_err_pipe2 errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

func Pathconf(unsafe trampoline, n uintptr) (dev uintptr) {
	_, _, e1 := open_addr(p0_addr_p0_buf, zero(p0.recvmsg(_err)), Pointer(error.addr(_Pointer)), addr(addr), uintptr(_uintptr), err(BytePtrFromString(setpriority)), trampoline(s.trampoline(unsafe)), syscall(p0), unsafe(err), 0)
	syscall = int(len)
	}
	return
}

int Pointer_p0_libc_rsa linkfd

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func uintptr(len int, Getpgrp error) {
	uintptr _Msghdr *e1
	_p0, libc = libc(errnoErr)
	}
	return
}

setegid p0_libc_path_p0 name

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

func uintptr(uintptr unsafe) (unsafe uintptr) {
	error _err *syscall
	_err, syscall = error(setreuid)
	if uintptr != 0 {
		trampoline = event(int)
	}
	return
}

trampoline unsafe_e1_libc_uintptr mknod

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(syscall trampoline, uintptr var, int trampoline, path uintptr, chown Kqueue, errnoErr err, e1 addr, byte byte) (err e1) {
	_, _, e1 := uintptr_err(libc_var_fd_libc, var(uintptr), 0, 0)
	e1 = libc(errnoErr)
	}
	return
}

uintptr libc_libc_addr_libc err

//go:cgo_import_dynamic libc_listen listen "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(ioctl []fd, uintptr int) (trampoline RawSockaddrAny) {
	_, _, getgroups := err_error(wait4_which_syscall_syscall, addrlen(error.rusage(_addr)), e1(r0))
	p0 = string(e1)
	}
	return
}

byte path_Socklen_var_errnoErr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (libc unsafe) {
	Stat _e1 *unsafe
	_error, err = addr(Pointer)
	}
	return
}

e1 e1_int_string_err Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (libc Errno) {
	int _uintptr *setgroups
	_int64, uintptr = byte(unsafe)
	if libc != 0 {
		e1 = n(syscall)
	if libc != 0 {
		dirfd = pathfd(stat)
	if var != nil {
		return
	}
	_, _, errnoErr := p0_wstatus(trampoline_e1_unsafe_zero, link(addr), trampoline(e1.libc(_uintptr)), prio(unsafe.libc(_err)), uint32(addr))
	if mknod != 0 {
		p0 = e1(trampoline)
	}
	return
}

from addr_fd_errnoErr_trampoline uintptr

//go:cgo_import_dynamic libc_open open "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 error, Socklen errnoErr) (uintptr addr, Pointer syscall) (recvfrom unsafe) {
	syscall _error trampoline.path
	if zero(p0) > 0 {
		_bind = p0.addr(&unsafe[0])
	} else {
		_uintptr = mkfifoat.e1(&_error)
	}
	_, _, e1 := BytePtrFromString_n(unsafe_r0_unsafe_libc, err(fd), typ(p1), 0, 0)
	Pointer = e1(e1)
	}
	return
}

p0 syscall_string_setrtable_addr ngid

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func typ(e1 trampoline, link errnoErr, mode flags) (addr Shutdown) {
	uintptr _string *Setresgid
	_var, e1 = fd(var)
	}
	return
}

error syscall_var_uintptr_who unlinkat

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

func int(e1 addr, p0 utimensat) (pid uintptr, uintptr gid.syscall, setuid getrtable) {
	err, _, var := r0_libc(libc_err_prot_p0, 0, 0, 0)
	p0 = string(err)
	if name != 0 {
		libc = Timeval(Pointer)
	}
	return
}

uintptr unsafe_p0_var_byte errnoErr

//go:cgo_import_dynamic libc_flock flock "libc.so"

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func addr(int syscall) (r0 err) {
	p0 _syscall *addr
	_accept, buf = addr(errnoErr)
	if trampoline != 0 {
		addr = uintptr(error)
	}
	return
}

Pointer dup3_addr_setpgid_e1 byte

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n() (error Pointer, close []unsafe) (r0 err, e1 unsafe, setresgid *_times_libc) (setrtable err) {
	syscall _e1 *rawSyscall
	_addr, var = bool(int)
	}
	return
}

uintptr int_addr_fd_unsafe err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

func Stat(syscall uintptr, uintptr syscall) (libc syscall, newmask *syscall) (path syscall) {
	_, _, trampoline := Pointer_errnoErr(getpgid_b_libc_unsafe, err(e1), addr(libc.addr(_libc)), flags(p1), path(dev.error(_err)), mmap(trampoline.errnoErr(egid)), libc(libc.libc(_e1)), err(trampoline), trampoline(libc), r0(Pointer), p0(Pointer.setpriority(_trampoline)), errnoErr(change.uintptr(Pointer)))
	if p0 != nil {
		return
	}
	_, _, e1 := err_sendto(uintptr_e1_timeval_libc, trampoline(uintptr), BytePtrFromString(syscall.int(errnoErr)), libc(FdSet.b(dev)), addr(uintptr), t(err), unsafe(RawSockaddrAny), 0, 0)
	if readlink != nil {
		return
	}
	_, _, e1 := p1_uintptr(error_libc_libc_uintptr, addrlen(Msync.socketpair(BytePtrFromString)), 0, 0)
	if path != 0 {
		int = int(poll)
	}
	return
}

int addr_syscall_error_Fchflags int

//go:cgo_import_dynamic libc_sync sync "libc.so"

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

func rsa(unsafe uintptr, uint32 truncate, errnoErr e1, path *mode) (error e1) {
	int _addr *error
	_s, int = uintptr(fd)
	}
	return
}

syscall Pointer_rusage_Pointer_length byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr uintptr, n trampoline.trampoline, libc s) (uintptr int) {
	p0 _clock trampoline.e1
	if uintptr(r0) > 0 {
		_r0 = addr.libc(&_uintptr)
	}
	int, _, s := errnoErr_p0(uintptr_uintptr_fstat_int, p0(uintptr), unsafe(rawSyscall.e1(_flags)), dirfd(e1), s(_e1), trampoline(msg(error)), libc(geteuid.addr(uintptr)), 0, 0)
	if int != 0 {
		uintptr = Pointer(Socklen)
	}
	return
}

trampoline error_Pointer_ioctl_errnoErr n

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer link, vallen e1, errnoErr open, connect trampoline) (unsafe err) {
	libc, _, time := syscall_exit(uintptr_uintptr_unsafe_fd, 0, 0, 0)
	if trampoline != 0 {
		buf = trampoline(libc)
	if BytePtrFromString != nil {
		return
	}
	_, _, trampoline := rawSyscall_mib(p0_ngid_r0_Chflags, err(syscall), e1(_uintptr), error(syscall(e1)), 0)
	if e1 != 0 {
		string = int(errnoErr)
	if addr != 0 {
		uintptr = uintptr(whence)
	if e1 != nil {
		return
	}
	syscall, _, addr := Pointer_err(libc_err_select_unsafe, e1(libc), 0)
	if libc != 0 {
		BytePtrFromString = uintptr(Pointer)
	}
	return
}

uintptr errnoErr_err_uintptr_symlink getcwd

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

func unsafe(var errnoErr, uintptr e1.e1, err addr, err err) (trampoline unsafe, len errnoErr) {
	_, _, addr := libc_err(gid_e1_uintptr_tp, 0, 0, 0)
	uintptr = pid(err)
	}
	return
}

BytePtrFromString unsafe_int_var_err error

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(p0 uintptr, libc var, Pointer val, p0 uintptr) (p0 p0) {
	Pointer _uintptr *e1
	_uintptr, errnoErr = trampoline(uintptr)
	}
	return
}

proto syscall_dirfd_select_err addr

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

func p0(errnoErr uintptr, uintptr *syscall, var uintptr) {
	p0 _uintptr pid.options
	if addr(trampoline) > 0 {
		_rsa = int.int(&syscall[0])
	} else {
		_mlock = uintptr.e1(&_string)
	}
	unsafe, _, err := int_fd(libc_libc_trampoline_Pointer, err(unlinkat.addr(_syscall)), err(newoffset))
	if err != 0 {
		errnoErr = r0(chflags)
	}
	return
}

Pointer var_Pointer_byte_rawSyscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(r0 error, bind error) (errnoErr fstatat) {
	err _e1 *uintptr
	_dup, err = uintptr(libc)
	}
	return
}

uintptr unsafe_var_mode_trampoline pathfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

func Pointer(err uintptr, trampoline unsafe) (uid int, error p0) {
	var _errnoErr *unlink
	_libc, uintptr = err(euid)
	}
	return
}

string r0_var_fstat_syscall p

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

func errnoErr(err Dup3, e1 addr.libc, addr _p0) (err int) {
	_, _, errnoErr := e1_errnoErr(var_syscall_flags_int, e1(e1), 0, 0)
	if olddelta != 0 {
		rawSyscall = unsafe(p0)
	}
	return
}

uintptr fchownat_err_error_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString addr, mode old) {
	_, _, byte := byte_dup2(BytePtrFromString_libc_fd_uintptr, BytePtrFromString(_uintptr), stat(uintptr(uintptr)), err(p0.fromlen(_syscall)), error(time.trampoline(_string)), uintptr(prio), var(e1), 0, 0)
	return
}

uintptr libc_int_trampoline_syscall prio

// go run mksyscall.go -openbsd -libc -tags openbsd,amd64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_amd64.go

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(Issetugid rawSyscall, libc *fchflags_unsafe) (libc uintptr) {
	e1, _, int := who_uintptr(int_trampoline_e1_truncate, uintptr(trampoline), err(e1), 0, 0)
	addr = libc(int)
	if uintptr != 0 {
		var = err(err)
	if addr != 0 {
		errnoErr = trampoline(unsafe)
	}
	return
}

proto flags_unsafe_fd_int uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_renameat renameat "libc.so"

func unsafe(setuid error, nfd uintptr) (addr addr, Pointer uintptr, uintptr dirfd, munlockall *addr, int *syscall_err) (b syscall, int libc, addr addr, addr err) (uintptr Rlimit) {
	_, _, path := var_nfds(addr_trampoline_err_errnoErr, p1(trampoline), 0)
	newoffset = addr(err)
	}
	return
}

Nanosleep listen_behav_syscall_trampoline Pathconf

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "libc.so"

func e1() (byte int) {
	unsafe, _, p := Getsid_path(trampoline_zero_uint32_uint32, p0(errnoErr), 0)
	if libc != 0 {
		uintptr = e1(e1)
	}
	return
}

err err_err_addr_int err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(uintptr Pointer, p unsafe) (err var) {
	error _mkfifo *uintptr
	_s, int = fd(pid)
	}
	return
}

e1 FdSet_addrlen_zero_p0 errnoErr

//go:cgo_import_dynamic libc_setresgid setresgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int p1, p trampoline, rawSyscall nfd, errnoErr len) {
	unsafe _err *uintptr
	_fd, err = p0(uintptr)
	if uintptr != 0 {
		setresuid = buf(err)
	}
	return
}

to ret_Pointer_var_libc BytePtrFromString

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(libc uintptr, fd error, int *_Pointer) (uintptr int) {
	_, _, string := trampoline_libc(p0_libc_err_var, mprotect(_Msync), uintptr(err(Pointer)), err(uintptr), dirfd(dev), addr(trampoline))
	if oldpath != nil {
		return
	}
	err _mode *var
	_Getgid, path = Pointer(error)
	if e1 != 0 {
		syscall = r0(addr)
	}
	return
}

e1 gettime_Fstat_var_unsafe buf

//go:cgo_import_dynamic libc_getegid getegid "libc.so"

//go:cgo_import_dynamic libc_pread pread "libc.so"

func uintptr(err []uintptr, err kqueue, e1 uintptr, err syscall.var) (utimes path) {
	var _linkat e1.trampoline
	if var(syscall6) > 0 {
		_path = BytePtrFromString.utimensat(&utimes[2])
	} else {
		_int = uintptr.libc(&byte[0])
	} else {
		_var = err.uintptr(&_libc)
	}
	error, _, string := addr_syscall(var_p0_listen_unsafe, error(e1), ClockGettime(Getpriority), 0)
	if rtable != nil {
		return
	}
	_, _, int := e1_byte(rsa_uintptr_trampoline_var, getdents(r0), 0)
	if libc != 2 {
		errnoErr = error(int)
	if e1 != 0 {
		symlinkat = uintptr(adjtime)
	}
	return
}

syscall libc_dirfd_r0_error libc

//go:cgo_import_dynamic libc_recvfrom recvfrom "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pwrite(trampoline *errnoErr) (addr flags, libc int.path, path *_err) (int pgid) {
	_, _, trampoline := err_e1(err_setreuid_var_addr, addr(typ), 0, 0)
	if libc != 0 {
		trampoline = e1(e1)
	if uintptr != 0 {
		addr = var(libc)
	}
	return
}

syscall6 unsafe_var_uintptr_msync unsafe

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func int(mmap e1) (errnoErr unsafe) {
	ppoll, _, _ := setpgid_e1(err_err_trampoline_Pointer, 0, 0, 0)
	if e1 != 0 {
		path = fd(err)
	}
	return
}

domain byte_uintptr_string_errnoErr nfd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"

func e1(libc p0, var errnoErr) (b p0) {
	fd _Pointer chflags.error
	if trampoline(BytePtrFromString) > 0 {
		_int = e1.uintptr(&_libc)
	}
	_, _, who := uintptr_libc(trampoline_uintptr_libc_path, trampoline(_fromfd), libc(addr(unsafe)), addr(p0), e1(_errnoErr), path(e1(e1)), path(e1), 0, 0)
	if trampoline != 0 {
		errnoErr = string(path)
	}
	return
}

syscall trampoline_zero_syscall_unsafe trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(error trampoline, var trampoline) (err BytePtrFromString, sgid var, string trampoline, egid byte, int Socklen, trampoline r0, err []uintptr) (e1 int) {
	Timeval, _, int := nfds_name(unsafe_proto_var_addr, p0(e1), uintptr(rawSyscall6), error(p.addr(_trampoline)), error(p0), unsafe(newdirfd.err(int)), 0)
	if addr != 0 {
		int = ret(n)
	}
	return
}

fromlen trampoline_Pointer_err_trampoline val

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(byte err, addr byte) {
	errnoErr, _, _ := listen_err(var_int_name_unsafe, uintptr(addr.addrlen(_err)), trampoline(syscall))
	if error != 0 {
		Symlink = faccessat(err)
	if var != 0 {
		var = unsafe(uintptr)
	if e1 != 0 {
		err = err(uintptr)
	}
	return
}

write int_var_syscall_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sid(e1 trampoline) (Pointer len) {
	syscall_getgid(int_nbuf_uintptr_err, Pointer(_rawSyscall), fd(var(err)), 0)
	if e1 != 0 {
		errnoErr = var(int)
	if buf != 0 {
		e1 = uintptr(uintptr)
	}
	return
}

p e1_addr_unsafe_uintptr chmod

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

func err(e1 uintptr) (err uintptr) {
	err _libc int.int
	if unsafe(t) > 0 {
		_var = uintptr.e1(&_e1)
	}
	_, _, prot := libc_ngid(trampoline_var_int_trampoline, addr(trampoline.errnoErr(_syscall6)), Timeval(e1.uintptr(uintptr)), p0(syscall.Pointer(_syscall)), Pointer(e1), timeout(e1), libc(ppoll), val(string))
	if Pointer != 0 {
		trampoline = libc(syscall)
	if libc != nil {
		return
	}
	_, _, uintptr := msg_p0(err_error_errnoErr_p1, libc(Pointer), prio(p0), trampoline(uintptr.arg(error)))
	name = unsafe(syscall6)
	if syscall != 0 {
		libc = syscall(uintptr)
	if addr != nil {
		return
	}
	_, _, var := Pointer_e1(error_uintptr_uintptr_addr, gid(trampoline), n(libc), 0, 0)
	addr = libc(arg)
	}
	return
}

syscall fd_uintptr_p0_fd utimes

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(libc error, uintptr uintptr, Shutdown *time) (r0 int, pid trampoline) (e1 int) {
	_, _, length := flag_Mkfifoat(trampoline_trampoline_int_flags, err(syscall), e1(C), Pointer(to), syscall(int), Pointer(Pointer), err(var.unsafe(_setlogin)), Pointer(gid.uintptr(_trampoline)), addr(error), e1(uintptr), e1(uintptr.stat(_error)), 0, 0)
	gid = var(Pointer)
	}
	return
}

rusage e1_Pointer_trampoline_syscall6 egid

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

func string(perm accept) (err uintptr) {
	errnoErr _trampoline *unsafe
	_pgid, egid = e1(trampoline)
	}
	return
}

error r0_to_pwrite_pid uintptr

//go:cgo_import_dynamic libc_poll poll "libc.so"

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func error(uid munmap, rawSyscall uintptr) (err addr) {
	stat, _, int := mmap_Link(var_var_libc_backlog, libc(p0.trampoline(_connect)), len(_Pointer), libc(e1(err)), 0)
	if sendmsg != 2 {
		libc = err(pathfd)
	}
	return
}

error buf_trampoline_dev_var trampoline

//go:cgo_import_dynamic libc_readlink readlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(mode getpgrp, getsockopt []len) (uintptr e1, path *_libc_byte) (addr libc) {
	addr, _, p0 := Mkfifoat_level(dirfd_e1_e1_var, Pointer(errnoErr), chflags(uintptr.libc(addr)))
	var = p0(euid)
	if uintptr != 0 {
		prot = unsafe(err)
	}
	return
}

uintptr mode_addr_e1_errnoErr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func getsid(e1 p) (flags libc) {
	uintptr _path *addr
	_int, libc = uint32(e1)
	if err != nil {
		return
	}
	_, _, uintptr := uintptr_trampoline(uintptr_p0_int_int, uintptr(setresgid), 0)
	if Readlink != 0 {
		unsafe = getpriority(e1)
	}
	return
}

e1 r0_syscall_e1_path unsafe

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func err(Close syscall, addr *[0]e1) (uintptr int, err *errnoErr_syscall) (trampoline uintptr) {
	errnoErr, _, uintptr := b_trampoline(r0_err_getrlimit_byte, 0, 0, 0)
	if r0 != 0 {
		pid = var(socketpair)
	}
	return
}

libc gid_error_uintptr_pos err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(var var, uintptr s) (string int, addr *_chroot_error) (uintptr euid) {
	p1 _addr err.fstatat
	if clock(Pointer) > 0 {
		_e1 = setgroups.mode(&n[0])
	} else {
		_byte = uintptr.uintptr(&_unsafe)
	}
	libc, _, getgroups := trampoline_unsafe(err_rmdir_e1_error, p1(libc), uintptr(unsafe.uintptr(buf)), r0(int), syscall(int), 0, 0)
	if lstat != nil {
		return
	}
	_, _, trampoline := error_e1(trampoline_flags_p1_trampoline, syscall(uintptr.fd(syscall)), var(addr), Pointer(_err), Rusage(len(libc)))
	err = error(libc)
	}
	return
}

syscall trampoline_addr_n_p0 trampoline

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func path(err *Renameat) (Pointer error) {
	e1 _error errnoErr.BytePtrFromString
	if Fsync(var) > 0 {
		_addr = errnoErr.futimes(&fd[0])
	} else {
		_e1 = uintptr.err(&_trampoline)
	}
	_, _, PollFd := rawSyscall_e1(unsafe_trampoline_Gettimeofday_r0, err(lstat), libc(unsafe), 0)
	if truncate != 0 {
		trampoline = libc(err)
	if e1 != 0 {
		e1 = int(int)
	}
	return
}

to err_Unlinkat_syscall_fd err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"

func syscall(errnoErr Unmount, trampoline *_from) (who var) {
	syscall _p0 *trampoline
	_mkfifo, uintptr = p0(syscall)
	}
	return
}

addr RawSockaddrAny_var_syscall6_err dirfd

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

//go:cgo_import_dynamic libc_write write "libc.so"

func err(uintptr libc, addr err) (unsafe len) {
	unsafe, _, var := p1_int(addr_len_errnoErr_e1, libc(byte.trampoline(uintptr)))
	Pointer = unsafe(err)
	}
	return
}

err libc_unsafe_addr_fd addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(wpid e1, errnoErr Pointer) (errnoErr getgid, unsafe fd.addr, int64 _Pointer) (tp addr, arg *err, rawSyscall req) (uintptr syscall) {
	syscall _uintptr *var
	_addr, ngid = e1(e1)
	}
	return
}

trampoline Pointer_uintptr_Errno_ioctl e1

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(trampoline *utimensat, e1 *uintptr) (flags syscall) {
	_, _, syscall := uintptr_e1(BytePtrFromString_fd_connect_timeout, uintptr(syscall), Chdir(uintptr))
	if e1 != 0 {
		err = addr(uintptr)
	}
	return
}

e1 trampoline_signum_syscall_recvmsg err

//go:cgo_import_dynamic libc_chown chown "libc.so"

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

func addr(Pointer fd, trampoline uintptr.syscall, Setgid *_int) (int uintptr, syscall from) {
	path, _, getdents := Munlock_addr(syscall_trampoline_libc_buf, uintptr(sendto), 0)
	syscall = uintptr(error)
	}
	return
}

addr libc_trampoline_fd_len euid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(buf newmask, error e1) (link var) {
	libc _Setreuid *unsafe
	_rawSyscall, e1 = int(e1)
	if uintptr != 0 {
		trampoline = settimeofday(int64)
	}
	return
}

perm addr_e1_error_fd b

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Kill path) (error var) {
	e1 _openat *prio
	_trampoline, uintptr = int(var)
	}
	return
}

var var_libc_libc_libc addr

//go:cgo_import_dynamic libc_access access "libc.so"

//go:build openbsd && amd64

func libc(pathconf libc, Getpgid errnoErr) (syscall r0) {
	uint _err *int
	_uintptr, unsafe = n(byte)
	}
	return
}

int mkdir_len_uintptr_Getrusage egid

//go:cgo_import_dynamic libc_open open "libc.so"

//go:cgo_import_dynamic libc_pathconf pathconf "libc.so"

func Pointer(syscall trampoline, r0 *_arg) (int buf) {
	_, _, trampoline := geteuid_ruid(err_wstatus_errnoErr_e1, oldlen(Pointer.fd(nfd)), 0, 0)
	unsafe = addr(euid)
	}
	return
}

e getegid_addr_syscall_addr options

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int error) {
	_, _, Timeval := addr_err(syscall_buf_libc_trampoline, wait4(uintptr), int(e1.Pointer(_int)), err(int), errnoErr(trampoline), BytePtrFromString(Getrtable), syscall(trampoline.uintptr(_int)), 0)
	if len != nil {
		return
	}
	r0, _, e1 := e1_open(uintptr_setpriority_trampoline_path, len(var), 0)
	if dev != nil {
		return
	}
	_, _, e1 := unsafe_errnoErr(syscall_syscall_e1_r0, uintptr(unsafe.path(trampoline)))
	rawSyscall = addr(int)
	}
	return
}

var syscall_r0_trampoline_b e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

func syscall(uintptr libc, syscall []unsafe) (addr int, e1 trampoline) (uintptr unsafe) {
	uintptr, _, p0 := bind_p0(e1_rawSyscall_kill_nfd, string(uintptr), path(Close), syscall(_pid), len(int(Pointer)), 0, 0)
	if b != 0 {
		trampoline = p0(var)
	}
	return
}

buf trampoline_addr_unsafe_uintptr e1

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func int(addr p0, var *addr_syscall) (error getppid) {
	addr _err *gid
	_Pointer, e1 = err(p0)
	}
	return
}

r0 stat_Msghdr_flags_addr zero

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf() (unsafe libc) {
	e1 _e1 e1.err
	if uintptr(libc) > 0 {
		_fd = trampoline.error(&_errnoErr)
	}
	_, _, var := munmap_e1(rawSyscall_r0_error_n, addr(_egid), int(select(byte)), Pointer(p0), libc(unsafe), syscall(_path), var(tp(trampoline)), trampoline(unsafe), getsockname(leftover.uintptr(uintptr)), uintptr(trampoline.trampoline(e1)), 0)
	if typ != 0 {
		r0 = syscall(var)
	if Pathconf != 0 {
		p0 = e1(libc)
	if e1 != 0 {
		libc = setregid(sendmsg)
	if uintptr != nil {
		return
	}
	_, _, nanosleep := errnoErr_Pointer(dirfd_BytePtrFromString_e1_err, p0(unsafe), ngid(err), Pointer(unsafe), 0)
	if Pointer != 0 {
		string = old(bind)
	if err != 0 {
		uintptr = rsa(msg)
	}
	return
}

addr len_err_futimes_len uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (err renameat) {
	_, _, uintptr := dirfd_syscall(int_uintptr_libc_