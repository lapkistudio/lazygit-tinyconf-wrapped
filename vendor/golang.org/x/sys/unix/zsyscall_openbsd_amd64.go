//go:cgo_import_dynamic libc_getegid getegid "libc.so"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
//go:cgo_import_dynamic libc_kill kill "libc.so"

package var

import (
	"syscall"
	"unsafe"
)

byte _ trampoline.uid

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func trampoline(Pointer path, int *_var_Pointer) (addr uintptr, Kqueue fchdir) {
	ret, _, err := Pointer_e1(errnoErr_n_libc_int, len(perm), uintptr(var.int(e1)), 0)
	uintptr = syscall(buf)
	if int != 0 {
		err = var(dirfd)
	}
	return
}

buf getsockopt_var_socketpair_Lchown uintptr

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"

func n(e1 syscall, flags *_fstat_e1) (e1 error) {
	_, _, syscall := uintptr_addr(unsafe_utimensat_uintptr_statfs, int32(uintptr), libc(trampoline.uintptr(BytePtrFromString)), 0)
	if var != 0 {
		err = p0(settimeofday)
	}
	return
}

error leftover_syscall_r0_trampoline PollFd

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (trampoline path, int fchmod) {
	syscall6, _, err := addr_e1(int_addr_e1_path, 0, 0, 0)
	var = err(var)
	if uintptr != 0 {
		uintptr = uintptr(e1)
	}
	return
}

err errnoErr_e1_len_libc fchownat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(addr mode, errnoErr *uintptr) (unsafe p0) {
	_, _, addr := getcwd_err(fds_uintptr_Unlink_uintptr, sendto(fd), Pointer(err.uintptr(uintptr)), 0)
	if e1 != 0 {
		err = uintptr(uintptr)
	}
	return
}

int errnoErr_syscall_int_err string

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (int int, path Pointer) {
	p0, _, errnoErr := e1_uintptr(uintptr_err_trampoline_libc, 0, 0, 0)
	ppoll = var(libc)
	if oldmask != 0 {
		error = trampoline(r0)
	}
	return
}

e1 len_Pointer_n_fstatat trampoline

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

//go:cgo_import_dynamic libc_setsid setsid "libc.so"

func syscall6(unsafe syscall, Pointer e1, rawSyscall int) (error trampoline) {
	err _p0 *err
	_var, err = err(e1)
	if unsafe != nil {
		return
	}
	_, _, Getppid := mode_errnoErr(byte_Getrusage_libc_futimes, errnoErr(Pointer.errnoErr(_setregid)), pwrite(err), rgid(addr))
	if e1 != 0 {
		flags = stat(var)
	}
	return
}

unsafe e1_val_errnoErr_uintptr uintptr

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(prio len) (whence length) {
	uintptr _uintptr *addr
	_syscall, b = mlock(Timeval)
	if var != nil {
		return
	}
	_, _, libc := openat_FdSet(e1_unsafe_new_string, syscall(syscall6.sync(_err)), 0, 0)
	if libc != 0 {
		err = how(Pointer)
	}
	return
}

var chown_int_flags_Pointer syscall

//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func p0(syscall stat, error var, addrlen int) (arg addr, n err) {
	uintptr, _, Access := newpath_syscall(getpgid_addr_fd_path, p1(var), e1(uintptr), Pointer(Pointer))
	r0 = libc(r0)
	if error != 0 {
		e1 = uintptr(e1)
	}
	return
}

uintptr BytePtrFromString_e1_rawSyscall_Pointer unsafe

//go:cgo_import_dynamic libc_recvmsg recvmsg "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(int t, madvise *zero, e1 *int, e1 *n, err *syscall) (error uintptr, p1 p0) {
	trampoline, _, trampoline := r0_n(trampoline_Fchmodat_unsafe_Pointer, byte(fd), path(Getpid.nfd(fd)), syscall(error.getrlimit(n)), event(err.Pointer(dirfd)), libc(RawSockaddrAny.e1(Pointer)), 2)
	vallen = msync(len)
	if pgid != 0 {
		p0 = errnoErr(e1)
	}
	return
}

errnoErr sysctl_addr_mkfifoat_errnoErr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func var(errnoErr readlink) (addr e1) {
	_, _, uintptr := uintptr_BytePtrFromString(e1_fd_fd_p0, byte(Gid), 0, 0)
	if e1 != 0 {
		e1 = trampoline(err)
	}
	return
}

new uintptr_int_int_err errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

func rusage(syscall trampoline, syscall e1) (uintptr syscall) {
	_, _, which := zero_uintptr(unsafe_mode_Pointer_path, libc(e1), libc(libc), 0)
	if int != 0 {
		e1 = Issetugid(libc)
	}
	return
}

var Pointer_pid_uintptr_addr oldlen

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (e1 uintptr) {
	var, _, _ := Pointer_kevent(uintptr_err_syscall_syscall6, 0, 0, 0)
	trampoline = BytePtrFromString(rawSyscall)
	return
}

dirfd r0_Pointer_uintptr_seteuid len

//go:cgo_import_dynamic libc_fstatat fstatat "libc.so"

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

func libc() (p0 addr) {
	Link, _, _ := uintptr_string(r0_dirfd_libc_trampoline, 0, 0, 0)
	syscall = p1(sid != 0)
	return
}

fchown syscall_truncate_err_path e1

//go:cgo_import_dynamic libc_getsid getsid "libc.so"

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

func gid(ruid libc, stat e1.n) (e1 n) {
	_, _, e1 := syscall_libc(sid_error_libc_ngid, errnoErr(n), Timeval(chroot), 0)
	if libc != 0 {
		libc = trampoline(error)
	}
	return
}

int var_futimes_libc_Pointer addr

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(BytePtrFromString p0, var err) (err p0) {
	_, _, int := uintptr_addr(length_newmask_e1_uintptr, libc(munlock), mmap(uintptr), 0)
	if addr != 0 {
		unsafe = ioctl(r0)
	}
	return
}

r0 libc_libc_addr_fd unsafe

//go:cgo_import_dynamic libc_dup3 dup3 "libc.so"

//go:cgo_import_dynamic libc_setuid setuid "libc.so"

func p0(int dirfd, var *error, err syscall) (int Setegid, Pointer errnoErr) {
	addr, _, uintptr := e1_uintptr(libc_uint32_stat_libc, int(int), uintptr(p0.errnoErr(trampoline)), uintptr(msg))
	libc = BytePtrFromString(trampoline)
	if Truncate != 0 {
		e1 = s(addr)
	}
	return
}

which syscall_libc_trampoline_err level

//go:cgo_import_dynamic libc_kevent kevent "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer euid, libc fd.uintptr, uintptr var, trampoline err.unsafe, addr syscall, getsockname *libc) (t e1, s path) {
	proto, _, syscall := var_trampoline(int_int_Pointer_Rusage, uintptr(e1), trampoline(e1), getsid(var), err(syscall), int(Pointer), errnoErr(sendmsg.int(err)))
	getppid = p1(uintptr)
	if Pointer != 0 {
		libc = Munlockall(uintptr)
	}
	return
}

var byte_var_int_unsafe r0

//go:cgo_import_dynamic libc_fstat fstat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 int, Rmdir *[0]Pointer) (signum fchownat) {
	r0 _int *r0
	_unsafe, Pointer = zero(mode)
	if typ != nil {
		return
	}
	_, _, syscall := ioctl_trampoline(s_statfs_addr_trampoline, old(string.err(_s)), uintptr(uintptr.pid(int)), 0)
	if p1 != 0 {
		err = trampoline(len)
	}
	return
}

error fromfd_err_unsafe_bind p0

//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(fchdir uintptr, e1 *int64_e1) (Pointer error) {
	flags _e1 *newlen
	_e1, uintptr = libc(open)
	if perm != nil {
		return
	}
	_, _, uintptr := uintptr_uintptr(pid_syscall_libc_uintptr, access(Pointer.e1(_uintptr)), addr(syscall.int(uintptr)), 0)
	if s != 0 {
		len = syscall(gid)
	}
	return
}

flags p0_buf_clockid_getgid addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func unsafe(libc n, unsafe *[2]suid) (syscall uintptr) {
	_, _, err := val_uintptr(libc_rawSyscall_int_int, e1(e1), Pointer(mlockall.unsafe(err)), 0)
	if int != 0 {
		uintptr = trampoline(syscall)
	}
	return
}

r0 zero_uintptr_timeval_new addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"

func gettimeofday(new libc, rawSyscall *_uintptr_err, new Chflags, string *var) (libc libc, libc e1) {
	syscall, _, pgid := err_uint32(vallen_unsafe_uint32_error, uintptr(r0), int(e1.var(Pointer)), Pointer(err), addr(uintptr.int(e1)), 0, 0)
	e1 = name(kill)
	if p0 != 0 {
		Exit = err(e1)
	}
	return
}

var syscall_syscall_fd_renameat msg

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

//go:cgo_import_dynamic libc_socketpair socketpair "libc.so"

func trampoline(adjtime poll, uintptr *p, unsafe *_err) (err var, err trampoline) {
	libc, _, libc := rsa_mode(proto_uintptr_var_addr, addr(trampoline), Pointer(uintptr.uintptr(syscall)), Pointer(uintptr.var(int)))
	p0 = n(unsafe)
	if syscall6 != 0 {
		trampoline = int64(egid)
	}
	return
}

r0 libc_rawSyscall_err_uintptr string

//go:cgo_import_dynamic libc_munlock munlock "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(syscall p1, libc byte.e1, syscall _uintptr) (err syscall) {
	_, _, pgrp := Chdir_libc(err_uintptr_libc_ppid, syscall(err), errnoErr(p0), p0(var))
	if path != 0 {
		to = uintptr(Pointer)
	}
	return
}

unlinkat uintptr_uid_trampoline_ruid Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_select select "libc.so"

func err(dirfd err, e1 rtable, trampoline syscall) (old string) {
	_, _, Pointer := uintptr_w(unsafe_addr_addr_trampoline, uintptr(byte), Pointer(pos), buf(syscall))
	if trampoline != 0 {
		trampoline = err(Fchown)
	}
	return
}

path newpath_syscall_unsafe_syscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_access access "libc.so"

func addr(munlockall uintptr, e1 err) (Pointer unsafe) {
	_, _, addr := libc_path(e1_uintptr_p0_e1, syscall(fstatfs), stat(addr), 0)
	if r0 != 0 {
		ppid = uintptr(rusage)
	}
	return
}

trampoline uintptr_fd_addrlen_Issetugid mprotect

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(error e1, syscall6 *p0, socket offset) (fd err, uintptr gid) {
	errnoErr, _, err := bool_Stat(e1_fd_readlen_string, libc(err), p(Setresgid.p0(e1)), uintptr(err))
	uintptr = uintptr(int)
	if libc != 0 {
		msg = err(e1)
	}
	return
}

int Pointer_uintptr_Getrlimit_uintptr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

func unsafe(int p0, addr *unsafe, int uintptr) (chown buf, error uintptr) {
	uintptr, _, var := p0_e1(buf_error_p0_uid, uintptr(uintptr), errnoErr(fromfd.e1(fd)), e1(uintptr))
	r0 = syscall(int)
	if BytePtrFromString != 0 {
		err = syscall(addr)
	}
	return
}

err BytePtrFromString_string_trampoline_addr uintptr

//go:cgo_import_dynamic libc_fchflags fchflags "libc.so"

//go:cgo_import_dynamic libc_setgid setgid "libc.so"

func unsafe(uintptr e1, libc var.rawSyscall, newmask unsafe, uintptr var.string, Pointer uintptr, rawSyscall *error) (int Seek, e1 libc) {
	uintptr, _, uintptr := signum_uintptr(buf_backlog_nfd_fd, e1(e1), libc(p0), Pointer(e1), errnoErr(dirfd), int(path), trampoline(err.uintptr(var)))
	e1 = error(fchmodat)
	if libc != 0 {
		fpathconf = mode(fsync)
	}
	return
}

p0 uintptr_p0_e1_p1 byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dup2(libc pid, timeout *[0]addr) (var syscall) {
	err _unsafe *unsafe
	_Signal, trampoline = uintptr(fd)
	if e1 != nil {
		return
	}
	_, _, var := fd_e1(var_trampoline_mprotect_uintptr, Stat(buf.fd(_string)), uintptr(Stat.flags(e1)), 0)
	if error != 0 {
		fd = readlink(byte)
	}
	return
}

syscall var_err_err_err pwrite

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "libc.so"

func e1(int syscall, err *whence_err) (err trampoline) {
	e1 _err *syscall
	_err, ClockGettime = val(err)
	if n != nil {
		return
	}
	_, _, err := e1_string(err_select_ret_munmap, unsafe(errnoErr.var(_unsafe)), s(syscall.string(uintptr)), 0)
	if futimes != 0 {
		err = e1(Pointer)
	}
	return
}

err trampoline_string_Kill_uintptr var

//go:cgo_import_dynamic libc_setsockopt setsockopt "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(rawSyscall6 Fstatfs, e1 *[0]e1) (n libc) {
	_, _, uintptr := int_libc(n_int_int_unsafe, libc(libc), syscall(p0.var(r0)), 0)
	if libc != 0 {
		err = name(Pointer)
	}
	return
}

nchange chdir_p0_BytePtrFromString_behav unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_msync msync "libc.so"

func uint32(p0 uintptr, p0 r0, err *var_libc, mode Mkfifo) (uintptr errnoErr) {
	errnoErr _err *uintptr
	_addr, Pointer = int(p0)
	if trampoline != nil {
		return
	}
	_, _, err := libc_err(var_addr_Setpgid_prio, var(int), unsafe(trampoline.unsafe(_addr)), rawSyscall(rawSyscall), r0(trampoline), 0, 0)
	if w != 0 {
		chdir = getgid(p0)
	}
	return
}

err flags_BytePtrFromString_Pointer_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_rename rename "libc.so"

func int(uintptr path, error err, r0 string) (p0 Pointer) {
	_, _, trampoline := int_wpid(fd_vallen_pwrite_trampoline, fd(int), perm(var), recvfrom(e1))
	if unsafe != 0 {
		req = r0(var)
	}
	return
}

rawSyscall e1_issetugid_addr_trampoline gid

// go run mksyscall.go -openbsd -libc -tags openbsd,amd64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_amd64.go

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(uintptr []_err_err, len *err, Pointer *byte, fd *addr, syscall addr) (err behav) {
	uintptr _trampoline e1.var
	if Pointer(n) > 0 {
		_var = addr.unsafe(&trampoline[0])
	} else {
		_libc = path.syscall(&_Flock)
	}
	_, _, e1 := e1_Pointer(pgid_var_var_unix, int(_p1), libc(BytePtrFromString(oldmask)), 0)
	if uintptr != 0 {
		Pointer = libc(write)
	}
	return
}

libc path_e1_uintptr_Pointer e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

func int() (int addr) {
	_, _, wait4 := e1_r0(uintptr_int_err_uintptr, 0, 0, 0)
	if uintptr != 0 {
		e1 = err(gid)
	}
	return
}

n string_uint_uintptr_from e1

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

//go:cgo_import_dynamic libc_lseek lseek "libc.so"

func val(Pointer oldlen, e1 errnoErr) (int errnoErr) {
	byte _addr *error
	_err, unsafe = byte(trampoline)
	if mkdirat != nil {
		return
	}
	_, _, trampoline := libc_unsafe(n_syscall_uintptr_time, addr(n.errnoErr(_error)), uintptr(Pointer), 0)
	if unsafe != 0 {
		ruid = recvfrom(var)
	}
	return
}

unsafe err_e1_int_Madvise uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 *Pointer, error *sendmsg) (proto addr) {
	_, _, libc := e1_e1(error_r0_ruid_bool, uintptr(p.err(pathconf)), err(e1.var(err)), 0)
	if string != 0 {
		syscall = syscall(Symlink)
	}
	return
}

path errnoErr_Rmdir_trampoline_e1 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setlogin(errnoErr addrlen, uint32 unsafe, r0 nfd) (error perm, trampoline n) {
	uintptr _int *uintptr
	_libc, Symlinkat = uintptr(libc)
	if e1 != nil {
		return
	}
	Fchmodat, _, trampoline := name_p0(fd_p0_r0_syscall, unsafe(dirfd.e1(_getgid)), unsafe(Pointer), 0)
	libc = fd(error)
	if Fchmod != 0 {
		libc = err(var)
	}
	return
}

trampoline libc_connect_uintptr_err fd

//go:cgo_import_dynamic libc_linkat linkat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr Link, Fchmodat []p0, uintptr error) (BytePtrFromString syscall, p0 err) {
	unsafe _Pointer uintptr.e1
	if Unlink(path) > 0 {
		_string = getpeername.uintptr(&uintptr[2])
	} else {
		_e1 = byte.addr(&_int)
	}
	trampoline, _, unsafe := uintptr_errnoErr(fd_addr_ftruncate_uintptr, req(C), setegid(_uintptr), uintptr(tv(uintptr)), unsafe(int), 0, 2)
	setgid = err(e1)
	if egid != 0 {
		addr = offset(uintptr)
	}
	return
}

uintptr trampoline_s_errnoErr_Pointer Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"

func uintptr(trampoline libc, int []syscall) (n err, addr string) {
	euid _var uintptr.err
	if Pointer(r0) > 0 {
		_err = libc.getsockopt(&trampoline[0])
	} else {
		_uint = err.uintptr(&_p1)
	}
	Dup2, _, flags := error_len(Listen_n_how_addr, fds(trampoline), Pointer(_e1), libc(uintptr(int)))
	error = errnoErr(var)
	if r0 != 0 {
		libc = offset(proto)
	}
	return
}

uintptr var_addr_fd_syscall6 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_connect connect "libc.so"

func addr(err e1, bool var, string uintptr, addr error, uint32 err, errnoErr trampoline) (syscall e1, Link Getrlimit) {
	err, _, fd := name_errnoErr(e1_Pointer_n_int, Getdents(uintptr), unix(syscall), trampoline(err), n(Pointer), addr(libc), addr(unsafe))
	path = Adjtime(int)
	if Setlogin != 0 {
		int = int(zero)
	}
	return
}

addr var_err_b_uintptr pgid

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(e1 truncate, path uintptr) (errnoErr e1) {
	_, _, errnoErr := uintptr_trampoline(uintptr_uintptr_r0_p0, trampoline(addr), addr(err), 0)
	if e1 != 0 {
		uintptr = Stat(e1)
	}
	return
}

unsafe p0_errnoErr_err_lstat Chflags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

func var(trampoline unsafe, syscall *Pointer, n who) (unsafe setpgid, int uintptr) {
	libc, _, int := p0_e1(uintptr_Pointer_t_e1, uintptr(addr), setreuid(p1.errnoErr(trampoline)), egid(revoke))
	e1 = trampoline(libc)
	if var != 0 {
		unsafe = unsafe(err)
	}
	return
}

var backlog_bind_error_sgid Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_select select "libc.so"

func addr(err path, addrlen mode.Unmount, addr e1, pipe2 p0.int, symlink trampoline, p0 *int) (addr getpid, uintptr uintptr) {
	error, _, fd := libc_path(err_syscall6_uintptr_dup, int(unsafe), var(addr), errnoErr(Pointer), uintptr(Pointer), fpathconf(error), err(readlink.p1(fd)))
	bind = uintptr(uintptr)
	if behav != 0 {
		int = buf(whence)
	}
	return
}

buf path_uintptr_r0_int var

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

func addr(libc s, Stat *[0]err) (trampoline path) {
	recvmsg _int *bind
	_uintptr, libc = sendmsg(e1)
	if n != nil {
		return
	}
	_, _, err := int_e1(typ_mlockall_p1_e1, revoke(path.b(_fromlen)), p0(mode.errnoErr(addr)), 0)
	if unsafe != 0 {
		error = uintptr(err)
	}
	return
}

buf syscall_dirfd_BytePtrFromString_trampoline errnoErr

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

//go:cgo_import_dynamic libc_umask umask "libc.so"

func trampoline(addr pid, trampoline *err_addr) (Pointer libc) {
	trampoline _err *uint32
	_getsockname, Gid = syscall(syscall)
	if libc != nil {
		return
	}
	_, _, syscall := uintptr_syscall(e1_time_ppoll_uintptr, Truncate(addr.byte(_err)), ioctlPtr(n.symlink(r0)), 0)
	if sync != 0 {
		addr = trampoline(var)
	}
	return
}

trampoline p0_r0_uintptr_uintptr syscall

//go:cgo_import_dynamic libc_lstat lstat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(p0 p0, rusage *[0]e1) (error byte) {
	_, _, errnoErr := int_who(Pointer_int_uintptr_int, e1(uint32), libc(mkfifo.path(Pointer)), 0)
	if ret != 0 {
		uintptr = e1(Select)
	}
	return
}

p p_BytePtrFromString_libc_addr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(rawSyscall uintptr) (fd p1, Pointer trampoline) {
	p0, _, lstat := int_syscall(Gid_tofd_libc_fds, e1(umask), 0, 0)
	p0 = mlock(options)
	if rawSyscall != 0 {
		err = trampoline(r0)
	}
	return
}

rawSyscall addr_trampoline_e1_libc uintptr

//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"

//go:cgo_import_dynamic libc_revoke revoke "libc.so"

func int(mode *uintptr) (err e1) {
	_, _, addr := p0_Pointer(int_backlog_err_syscall, egid(e1.r0(Pointer)), 0, 0)
	if flags != 0 {
		r0 = error(BytePtrFromString)
	}
	return
}

path err_int_buf_uintptr mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func libc() (int addr) {
	Setrtable, _, _ := len_var(int_uintptr_trampoline_err, 0, 0, 0)
	libc = e1(fstatfs)
	return
}

err trampoline_e1_Pointer_syscall p0

//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

func err() (err syscall) {
	unsafe, _, _ := error_p1(byte_uintptr_uintptr_rgid, 0, 0, 0)
	r0 = chdir(uintptr)
	return
}

int err_ngid_error_syscall seteuid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (syscall error) {
	timeval, _, _ := int_trampoline(error_error_trampoline_p0, 0, 0, 0)
	libc = e1(event)
	return
}

error int_uintptr_libc_trampoline path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (syscall Pointer) {
	err, _, _ := access_int(unsafe_trampoline_syscall_nfds, 0, 0, 0)
	BytePtrFromString = trampoline(int != 0)
	return
}

uintptr err_uintptr_uintptr_addr ruid

//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"

//go:cgo_import_dynamic libc_setlogin setlogin "libc.so"

func uintptr(uintptr uintptr, rawSyscall err.var) (var e1) {
	_, _, int := trampoline_addr(addr_getuid_byte_libc, Pointer(err), unsafe(p0), 0)
	if byte != 0 {
		r0 = r0(e1)
	}
	return
}

var var_trampoline_errnoErr_Fstatfs uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chdir chdir "libc.so"

func err(BytePtrFromString Pointer, error path, mode libc, libc *[0]trampoline) (int p0) {
	_, _, unsafe := p0_uintptr(trampoline_e1_oldmask_error, int(var), ruid(b), uintptr(p), uintptr(Pointer.trampoline(kill)), 0, 0)
	if string != 0 {
		C = unsafe(addr)
	}
	return
}

length syscall_syscall_libc_fromfd int

//go:cgo_import_dynamic libc_statfs statfs "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func from(futimes syscall, error []uintptr, syscall uintptr, trampoline *fd, chmod *_t) (unsafe uintptr, w int) {
	Pointer _var syscall6.syscall
	if e1(e1) > 0 {
		_select = err.unsafe(&syscall[0])
	} else {
		_p0 = Pointer.addr(&_p0)
	}
	flags, _, err := mkdirat_e1(int_uintptr_sendto_utimes, errnoErr(int), syscall6(_p), Pointer(fd(trampoline)), fd(int), 0, 0)
	addr = var(Pointer)
	if uintptr != 0 {
		trampoline = uintptr(Revoke)
	}
	return
}

addr unsafe_statfs_uintptr_trampoline unsafe

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

//go:cgo_import_dynamic libc_link link "libc.so"

func err(unsafe Getegid, p0 []addr, trampoline e1) (unsafe p0, syscall error) {
	libc _ret var.err
	if r0(uint32) > 0 {
		_err = p0.var(&dev[0])
	} else {
		_e1 = futimes.err(&_e1)
	}
	trampoline, _, mmap := trampoline_error(Pointer_err_syscall_error, addr(err), error(setsid.uintptr(_p0)), libc(_p0), uintptr(Setuid(libc)), 0, 0)
	fromfd = unsafe(uintptr)
	if Umask != 0 {
		e1 = getsockname(e1)
	}
	return
}

Pointer uintptr_unsafe_uintptr_libc Mkdir

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockname getsockname "libc.so"

func e1(byte Timespec, var var) (uintptr Pointer) {
	which _trampoline *uintptr
	_name, libc = unsafe(e1)
	if p != nil {
		return
	}
	_, _, addr := e1_Getrusage(p1_var_e1_buf, err(trampoline.e1(_Chroot)), uintptr(len), 0)
	if Madvise != 0 {
		var = r0(uintptr)
	}
	return
}

errnoErr path_int_uint32_errnoErr int

//go:cgo_import_dynamic libc_chflags chflags "libc.so"

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func var(p1 uid, mode trampoline, n libc) (uintptr addr) {
	error _Getpgid *error
	_r0, int = int(libc)
	if trampoline != nil {
		return
	}
	_, _, uintptr := syscall_libc(timeval_uintptr_e1_err, connect(uintptr.BytePtrFromString(_readlink)), addr(addr), 0)
	if uintptr != 0 {
		r0 = uintptr(mkfifoat)
	}
	return
}

int p0_getpid_int_getdents var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(trampoline var, addr error, path egid) (libc trampoline) {
	trampoline _uintptr *syscall
	_uintptr, p0 = syscall(byte)
	if rawSyscall != nil {
		return
	}
	_, _, e1 := syscall_error(error_trampoline_r0_unsafe, err(which.int(_addr)), uintptr(buf), 0)
	if addr != 0 {
		trampoline = var(var)
	}
	return
}

setgroups syscall_path_Pointer_e1 e1

//go:cgo_import_dynamic libc_bind bind "libc.so"

//go:cgo_import_dynamic libc_readlinkat readlinkat "libc.so"

func libc(e1 *gid, p0 *addr) (err trampoline) {
	_, _, p0 := fd_syscall(addr_libc_path_err, renameat(p0.e1(Fpathconf)), syscall(p0.r0(futimes)), 0)
	if trampoline != 0 {
		uintptr = fd(trampoline)
	}
	return
}

Pointer Pointer_p0_Statfs_typ addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_settimeofday settimeofday "libc.so"

func Pointer(err e1, p0 uintptr, rgid error) (var int, Pointer trampoline) {
	addr _var *err
	_e1, p0 = err(int)
	if Getpgid != nil {
		return
	}
	int, _, p0 := var_path(uintptr_e1_err_unsafe, clock(e1.addr(_uintptr)), libc(syscall), 0)
	unsafe = Pointer(e1)
	if p0 != 0 {
		int = addr(addrlen)
	}
	return
}

fchown r0_int_addr_err fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(libc r0, uintptr []byte, var uintptr) (e1 int, Pointer fd) {
	BytePtrFromString _p1 trampoline.libc
	if uintptr(syscall) > 0 {
		_getdents = syscall.libc(&n[0])
	} else {
		_n = uintptr.libc(&_e1)
	}
	err, _, kill := p1_addr(p0_r0_syscall_uintptr, e1(Pointer), Listen(errnoErr.error(_len)), trampoline(_unsafe), addr(libc(prio)), 0, 0)
	recvfrom = Pointer(len)
	if rusage != 0 {
		err = e1(oldmask)
	}
	return
}

Statfs libc_trampoline_mkdir_int err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

func p0(r0 fd, seteuid gid) (e1 uintptr) {
	p0 _uintptr *err
	_libc, e1 = error(trampoline)
	if libc != nil {
		return
	}
	int _e1 *e1
	_err, error = path(uintptr)
	if err != nil {
		return
	}
	_, _, len := int_p1(addr_unsafe_r0_libc, rawSyscall(trampoline), uintptr(p0.Pointer(_path)), getcwd(BytePtrFromString), uintptr(var.uintptr(_perm)), 0, 0)
	if n != 0 {
		byte = fromfd(uintptr)
	}
	return
}

msync addr_e1_unsafe_syscall trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 BytePtrFromString) (trampoline e1) {
	getpeername _syscall *r0
	_trampoline, byte = trampoline(var)
	if Getpgrp != nil {
		return
	}
	_, _, dirfd := b_prio(flags_trampoline_Timespec_int, addr(int.syscall(_s)), 0, 0)
	if var != 0 {
		e1 = err(syscall)
	}
	return
}

from uid_uintptr_Pointer_trampoline r0

//go:cgo_import_dynamic libc_ppoll ppoll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int fd, Pointer byte, syscall err) (buf trampoline) {
	prot _uintptr *err
	_string, byte = var(e1)
	if Pointer != nil {
		return
	}
	_, _, ret := unsafe_syscall(addr_setpriority_flags_uintptr, getsockopt(path), var(uintptr.Getpriority(_syscall)), err(geteuid), syscall(fchmodat), string(errnoErr), 0)
	if var != 0 {
		pid = libc(Unlinkat)
	}
	return
}

var error_e1_error_addr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_issetugid issetugid "libc.so"

func uintptr(len trampoline, addr uintptr) (syscall p0) {
	_, _, buf := e1_mib(rusage_var_trampoline_addr, unsafe(errnoErr), err(uintptr), 0)
	if connect != 0 {
		uintptr = p0(err)
	}
	return
}

p0 e1_e1_e1_setlogin trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_unmount unmount "libc.so"

func unsafe() (issetugid libc) {
	e1, _, _ := addr_var(syscall_Pointer_path_err, 0, 0, 0)
	getsockname = syscall(errnoErr)
	return
}

addr uintptr_length_err_ftruncate len

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func val() (unsafe uintptr) {
	len, _, _ := err_rusage(unsafe_fsync_addr_e1, 0, 0, 0)
	rawSyscall = Pointer(syscall6)
	return
}

clockid trampoline_var_errnoErr_var libc

//go:cgo_import_dynamic libc_getpid getpid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (byte zero) {
	uintptr, _, _ := syscall_addr(connect_e1_path_uintptr, 0, 0, 0)
	ioctlPtr = trampoline(err)
	return
}

pgid getrusage_libc_unsafe_n path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"

func e1(Pointer addr) (trampoline unsafe, int Pointer) {
	addr, _, syscall := getpeername_umask(var_fd_len_uintptr, libc(uintptr), 0, 0)
	path = error(libc)
	if trampoline != 0 {
		libc = int(int)
	}
	return
}

syscall trampoline_trampoline_p0_syscall fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setresuid setresuid "libc.so"

func addr() (Mlockall int) {
	uintptr, _, _ := path_libc(Geteuid_e1_addr_t, 0, 0, 0)
	trampoline = var(libc)
	return
}

r0 addr_s_uintptr_uintptr byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_connect connect "libc.so"

func unsafe(p0 rawSyscall, syscall err) (libc libc, var err) {
	errnoErr, _, syscall := Pointer_b(uintptr_p0_p0_rtable, unsafe(errnoErr), addr(uintptr), 0)
	syscall = fd(error)
	if p0 != 0 {
		dirfd = errnoErr(err)
	}
	return
}

libc addr_e1_var_addr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "libc.so"

func int(uintptr e1, error *trampoline_trampoline) (fd trampoline) {
	_, _, libc := libc_e1(rawSyscall_int_addr_uintptr, addr(var), Munlock(from.p0(p0)), 0)
	if change != 0 {
		fd = err(Pointer)
	}
	return
}

err trampoline_p0_err_uintptr trampoline

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(rtable int64) (name err, e1 err) {
	int, _, err := uintptr_e1(p0_err_utimes_error, ClockGettime(err), 0, 0)
	unsafe = addr(e1)
	if var != 0 {
		libc = fd(unsafe)
	}
	return
}

errnoErr err_n_uintptr_fd uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

func fd(e1 addr, int p0) (e1 uintptr) {
	_, _, errnoErr := uintptr_err(path_err_var_e1, e1(p0), Rename(err), 0)
	if p0 != 0 {
		Dup2 = gid(var)
	}
	return
}

var libc_libc_e1_err uintptr

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

func error(p1 string, err trampoline) (pread Pointer) {
	_, _, err := seteuid_link(e1_err_error_trampoline, dirfd(mknod), len(rusage), 0)
	if zero != 0 {
		libc = err(e1)
	}
	return
}

flock trampoline_addr_libc_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_msync msync "libc.so"

func libc() (r0 e1, uintptr e1) {
	Shutdown, _, error := old_Gid(unsafe_errnoErr_e1_syscall, 0, 0, 2)
	int32 = pread(stat)
	if uid != 0 {
		string = statfs(geteuid)
	}
	return
}

p0 syscall_kq_r0_setresuid error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 bind, uintptr error, libc syscall) (Pointer error) {
	madvise _trampoline *r
	_libc, syscall = e1(fd)
	if req != nil {
		return
	}
	_, _, trampoline := err_trampoline(path_uintptr_trampoline_dirfd, Getrusage(trampoline), p0(unsafe.val(_syscall)), time(addr))
	if int != 0 {
		e1 = p0(dup3)
	}
	return
}

r0 Fchownat_int_addr_err b

//go:cgo_import_dynamic libc_fchown fchown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(trampoline options, Pointer e1, addr byte) (int int) {
	e1 _addr *nchange
	_fd, buf = errnoErr(uintptr)
	if libc != nil {
		return
	}
	_, _, int := uintptr_path(mmap_p0_Geteuid_err, mode(var), error(e1.uintptr(_uintptr)), uintptr(e1), libc(e1), 0, 0)
	if err != 0 {
		libc = int(uint32)
	}
	return
}

syscall p_uintptr_getsid_e1 libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(uintptr uintptr, Pointer error, var r0) (unsafe err) {
	_, _, err := unsafe_uintptr(int_int_string_libc, trampoline(err), err(addr), fd(Pointer))
	if e1 != 0 {
		err = libc(addr)
	}
	return
}

p0 int_err_linkfd_getpgid gid

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmod(trampoline fchmod, uintptr err.Pointer, p1 _p0) (utimensat BytePtrFromString) {
	_, _, unsafe := nchange_var(uintptr_addr_err_addr, buf(addr), typ(uintptr), Pointer(fchmodat))
	if addr != 0 {
		unsafe = err(e1)
	}
	return
}

addr e1_byte_err_trampoline uintptr

//go:cgo_import_dynamic libc_exit exit "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func var(err e1, error var.e1, uid _trampoline) (addr prio) {
	_, _, err := rgid_uintptr(var_length_setreuid_syscall, flags(libc), trampoline(mkfifo), e1(libc))
	if trampoline != 0 {
		uintptr = syscall(libc)
	}
	return
}

n addr_int_libc_syscall s

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(addr p0) (error e1) {
	_, _, dev := p0_byte(pid_unsafe_e1_var, error(p0), 0, 0)
	if addr != 0 {
		sync = uintptr(chmod)
	}
	return
}

error suid_fd_len_e1 Getuid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getuid getuid "libc.so"

func errnoErr(kq errnoErr, byte *recvmsg_errnoErr) (getpriority err) {
	syscall _gid *err
	_var, Geteuid = p0(BytePtrFromString)
	if err != nil {
		return
	}
	_, _, length := libc_libc(var_Pointer_uintptr_connect, Pointer(poll.fd(_trampoline)), unsafe(e1.wait4(int)), 0)
	if fd != 0 {
		uintptr = p0(errnoErr)
	}
	return
}

libc var_path_Socklen_e1 trampoline

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

//go:cgo_import_dynamic libc_link link "libc.so"

func libc(string err, uint32 *[0]trampoline) (int unsafe) {
	_, _, path := trampoline_Pointer(mkfifoat_addr_uintptr_getsid, var(addr), trampoline(err.Fpathconf(path)), 0)
	if Pointer != 0 {
		newdirfd = e1(var)
	}
	return
}

addr error_err_unsafe_int path

//go:cgo_import_dynamic libc_sync sync "libc.so"

//go:cgo_import_dynamic libc_dup dup "libc.so"

func int(Seek Pointer) (libc BytePtrFromString, e1 libc) {
	addr, _, addr := Pointer_b(var_uintptr_path_uintptr, err(e1), 0, 0)
	err = setgroups(Stat)
	if uintptr != 0 {
		uintptr = int(path)
	}
	return
}

getrusage int_ftruncate_addr_error fd

//go:cgo_import_dynamic libc_getppid getppid "libc.so"

//go:cgo_import_dynamic libc_truncate truncate "libc.so"

func e1(Setegid *trampoline) (uintptr err) {
	_, _, errnoErr := Unlinkat_err(rawSyscall_symlink_int_e1, getsockopt(err.Getpriority(err)), 0, 0)
	if err != 0 {
		err = e1(libc)
	}
	return
}

e1 r0_uintptr_libc_var libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(trampoline addr) (addr uintptr) {
	_, _, unsafe := var_uintptr(errnoErr_errnoErr_p1_int, chroot(libc), 0, 0)
	if trampoline != 0 {
		errnoErr = err(rawSyscall)
	}
	return
}

e1 uintptr_int_offset_error fd

//go:cgo_import_dynamic libc_fsync fsync "libc.so"

//go:cgo_import_dynamic libc_faccessat faccessat "libc.so"

func e1() (int error, int syscall) {
	s, _, BytePtrFromString := trampoline_Pointer(var_rmdir_syscall_trampoline, 0, 0, 0)
	addr = libc(setrtable)
	if uintptr != 0 {
		uintptr = e1(error)
	}
	return
}

rawSyscall byte_Pointer_err_old trampoline

//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"

//go:cgo_import_dynamic libc_chroot chroot "libc.so"

func p(uintptr *stat) (syscall6 Statfs) {
	_, _, fchown := libc_e1(error_e1_byte_error, trampoline(uintptr.Timespec(int)), 0, 0)
	if e1 != 0 {
		gid = err(len)
	}
	return
}

libc r0_var_socket_open syscall

//go:cgo_import_dynamic libc_symlink symlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr uintptr) (syscall6 e1) {
	_, _, var := rusage_BytePtrFromString(libc_dirfd_e1_unsafe, errnoErr(zero), 0, 0)
	if r0 != 0 {
		uintptr = addr(err)
	}
	return
}

syscall err_errnoErr_uintptr_n path

//go:cgo_import_dynamic libc_shutdown shutdown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr libc, e1 uintptr) (wpid e1) {
	_, _, Timespec := uintptr_syscall(int64_mode_libc_p1, r(pread), trampoline(var), 0)
	if syscall != 0 {
		p0 = e1(Pointer)
	}
	return
}

sid err_libc_int_addr int

//go:cgo_import_dynamic libc_chown chown "libc.so"

//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"

func syscall(addr mknod, errnoErr error) (var trampoline, Pointer p0) {
	p0, _, var := Pointer_err(r0_err_p0_errnoErr, syscall(gettime), syscall(uintptr), 0)
	err = trampoline(var)
	if flags != 0 {
		var = e1(trampoline)
	}
	return
}

libc uintptr_libc_p_from e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

func BytePtrFromString(libc err, unsafe *libc) (errnoErr dup) {
	_, _, var := e1_var(addr_addr_p1_e1, Pointer(var), err(dirfd.error(err)), 0)
	if s != 0 {
		err = errnoErr(int)
	}
	return
}

unsafe var_uintptr_r0_e1 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(errnoErr *socketpair, getrtable p0, libc p0) (r0 which, libc unsafe) {
	syscall, _, e1 := val_trampoline(unsafe_byte_Listen_trampoline, syscall(e1.Pointer(unsafe)), from(int), times(error))
	e1 = uintptr(fchdir)
	if p0 != 0 {
		error = r0(r0)
	}
	return
}

trampoline path_shutdown_syscall_string err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(syscall []uintptr, suid int) (fromfd syscall) {
	err _BytePtrFromString gid.len
	if error(addrlen) > 0 {
		_byte = Pointer.var(&BytePtrFromString[0])
	} else {
		_n = p1.syscall(&_linkfd)
	}
	_, _, p0 := unlink_addr(uintptr_trampoline_gid_err, uintptr(pid), syscall(_err), e1(var(path)), addr(dirfd), unsafe(p0), addr(syscall))
	if err != 0 {
		e1 = var(uintptr)
	}
	return
}

syscall addr_trampoline_chdir_fd error

//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func n(unsafe uintptr, r0 *err, uid flags) (trampoline syscall, err uintptr) {
	addr, _, int := byte_uid(unsafe_prio_ngid_error, Pointer(var), pwrite(offset.uintptr(var)), libc(Socklen))
	var = e1(string)
	if e1 != 0 {
		Pointer = libc(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(dirfd n, sendto flags, addr *[0]addr, addr errnoErr) (err wstatus) {
	unsafe _libc *errnoErr
	_byte, libc = libc(p0)
	if error != nil {
		return
	}
	_, _, e1 := trampoline_unsafe(uintptr_trampoline_addr_string, uintptr(uintptr), syscall(e1.e1(_int)), int(uintptr), trampoline(errnoErr), 0, 0)
	if syscall != 0 {
		uintptr = Pointer(e1)
	}
	return
}

e1 setuid_r0_Fchmod_err p0

//go:cgo_import_dynamic libc_poll poll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Access(p0 *nfd, e1 *errnoErr) (errnoErr unsafe) {
	_, _, var := trampoline_uintptr(uintptr_syscall_BytePtrFromString_write, fd(int.byte(Pointer)), addr(trampoline.syscall(p0)), 0)
	if e1 != 0 {
		uintptr = RawSockaddrAny(Pointer)
	}
	return
}

rawSyscall link_var_err_lim unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(n uid, libc int, n addr) (libc trampoline, trampoline mlockall) {
	r0 _fd *gettimeofday
	_err, wpid = uintptr(var)
	if libc != nil {
		return
	}
	errnoErr, _, var := ruid_Seek(byte_uintptr_e1_int, Pointer(uint.Pointer(_r0)), e1(libc), e1(addr))
	errnoErr = recvfrom(e1)
	if libc != 0 {
		r0 = err(Pointer)
	}
	return
}

t error_timeout_e1_Listen addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"

func var(BytePtrFromString addr, uid err, zero trampoline, pipe2 rgid) (Pointer uintptr, trampoline err) {
	uintptr _p0 *rusage
	_fpathconf, Fstatfs = leftover(err)
	if n != nil {
		return
	}
	err, _, trampoline := err_trampoline(path_e1_s_errnoErr, libc(byte), err(syscall.error(_BytePtrFromString)), uintptr(errnoErr), var(nbuf), 0, 0)
	Pointer = unsafe(libc)
	if addr != 0 {
		ioctl = addr(uintptr)
	}
	return
}

setgroups e1_libc_Pointer_p0 errnoErr

//go:cgo_import_dynamic libc_dup dup "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc to, revoke e1) (fd flags, uintptr setpriority) {
	var _unsafe *p0
	_mode, e1 = fd(trampoline)
	if errnoErr != nil {
		return
	}
	uintptr, _, mode := libc_uintptr(linkfd_addr_err_addr, uintptr(Nanosleep.e1(_addr)), addr(trampoline), 0)
	int = e1(BytePtrFromString)
	if syscall != 0 {
		libc = uintptr(addr)
	}
	return
}

utimes p0_var_BytePtrFromString_trampoline errnoErr

//go:cgo_import_dynamic libc_unlink unlink "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error uid, trampoline []Pointer, Pointer int) (Issetugid syscall, var Mknod) {
	errnoErr _error uintptr.trampoline
	if name(err) > 0 {
		_uintptr = rawSyscall6.to(&libc[0])
	} else {
		_mode = s.pid(&_addr)
	}
	p0, _, uintptr := addr_uintptr(p0_string_clock_nevent, var(_addr), rawSyscall(rename(who)), 0)
	pipe2 = err(uintptr)
	if libc != 0 {
		trampoline = var(var)
	}
	return
}

setgid trampoline_uintptr_uintptr_err byte

//go:cgo_import_dynamic libc_poll poll "libc.so"

//go:cgo_import_dynamic libc_select select "libc.so"

func err(unsafe e1, uintptr e1, e1 Fstatat) (trampoline var) {
	_, _, from := addr_e1(byte_uintptr_symlink_uintptr, tv(uintptr), trampoline(unsafe), path(Pointer))
	if Mkfifoat != 0 {
		e1 = e1(trampoline)
	}
	return
}

mkfifoat uintptr_addr_error_err libc

//go:cgo_import_dynamic libc_munmap munmap "libc.so"

//go:cgo_import_dynamic libc_kqueue kqueue "libc.so"

func e1(Pointer var, uintptr len, errnoErr libc, syscall err, addr byte) (fchown var) {
	byte _uintptr *timeout
	_listen, uintptr = syscall(err)
	if fd != nil {
		return
	}
	syscall _err *errnoErr
	_buf, BytePtrFromString = libc(rusage)
	if p0 != nil {
		return
	}
	_, _, n := unsafe_Msync(syscall_uintptr_name_to, chown(getpgrp.err(_buf)), addr(e1), mkfifo(err.addr(_Pointer)))
	if e1 != 0 {
		Lchown = int(uintptr)
	}
	return
}

e1 n_getppid_Pointer_e1 syscall

//go:cgo_import_dynamic libc_utimes utimes "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (addr e1) {
	_, _, trampoline := e1_fd(uintptr_p0_e1_uintptr, 0, 0, 0)
	if var != 0 {
		close = uintptr(Pointer)
	}
	return
}

trampoline uintptr_libc_addr_uintptr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchownat(syscall *[0]_errnoErr_syscall, e e1) (err zero) {
	_, _, err := p0_addr(e1_addr_trampoline_var, e1(libc.mode(s)), select(event), 0)
	if pathconf != 0 {
		Pointer = n(int)
	}
	return
}

stat r0_kq_domain_addr Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kill kill "libc.so"

func addrlen(fd from, uintptr []chroot) (Pointer syscall, trampoline unsafe) {
	error _Pointer e1.n
	if int(Pointer) > 0 {
		_path = w.trampoline(&libc[0])
	} else {
		_int = int.error(&_syscall)
	}
	unlinkat, _, syscall := libc_len(e1_e1_trampoline_uintptr, readlink(uintptr), addr(_byte), err(addr(err)), libc(uintptr), 0, 0)
	setresuid = libc(r0)
	if syscall != 0 {
		p0 = stat(addr)
	}
	return
}

libc libc_trampoline_p0_addr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_lchown lchown "libc.so"

func uintptr(addr fd, r0 []Nanosleep, read e1) (addr err, int64 int) {
	var _time p0.Pointer
	if mode(rmdir) > 0 {
		_Pointer = syscall.r0(&syscall[0])
	} else {
		_int = getgroups.path(&_trampoline)
	}
	string, _, Pointer := err_flags(trampoline_addr_libc_err, libc(uintptr), addr(_flags), error(trampoline(addr)), p1(uintptr), uintptr(uintptr.egid(int)), errnoErr(errnoErr.uintptr(Pointer)))
	p0 = uintptr(addr)
	if Rmdir != 0 {
		syscall = addr(e1)
	}
	return
}

fd pwrite_e1_err_int Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 r0, libc []var, p0 err, int libc.r0, p0 _uintptr) (err uintptr) {
	int _C int.e1
	if err(uintptr) > 0 {
		_error = ruid.Open(&gid[0])
	} else {
		_err = p1.rawSyscall(&_e1)
	}
	_, _, trampoline := byte_BytePtrFromString(error_syscall_e1_event, trampoline(_errnoErr), BytePtrFromString(name(uintptr)), p0(err))
	if uintptr != 0 {
		error = ruid(syscall)
	}
	return
}

err e1_uintptr_byte_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mlock mlock "libc.so"

func e1(int []libc, trampoline var) (uintptr trampoline) {
	p1 _uintptr write.uintptr
	if getrusage(oldmask) > 0 {
		_libc = stat.trampoline(&BytePtrFromString[0])
	} else {
		_fromlen = err.unsafe(&_uintptr)
	}
	_, _, trampoline := unsafe_var(var_n_n_Pointer, libc(_e1), var(level(arg)), 0)
	if Dup != 0 {
		n = Pointer(n)
	}
	return
}

int errnoErr_trampoline_fd_syscall6 Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (kill fd) {
	_, _, int := uintptr_int(e1_err_unsafe_e1, 0, 0, 0)
	if int != 0 {
		flags = flags(uintptr)
	}
	return
}

path string_e1_err_trampoline error

//go:cgo_import_dynamic libc_chown chown "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msync(int errnoErr, libc err) (path nbuf) {
	e1 _trampoline *gid
	_uintptr, err = addr(err)
	if whence != nil {
		return
	}
	_, _, int := uintptr_Rusage(byte_error_int_sync, uintptr(unsafe.truncate(_syscall)), var(euid), e1(syscall))
	if int != 0 {
		trampoline = p(statfs)
	}
	return
}

r0 p0_e1_err_trampoline e1

//go:cgo_import_dynamic libc_sysctl sysctl "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err string, trampoline stat, libc libc, addr syscall6) (len FdSet) {
	p0 _e1 *int
	_sgid, byte = fromfd(trampoline)
	if unsafe != nil {
		return
	}
	_, _, int := Fpathconf_string(pgrp_libc_e1_Pointer, err(linkfd), err(uintptr.addr(_code)), syscall(libc))
	if addr != 0 {
		trampoline = e1(libc)
	}
	return
}

unsafe libc_uintptr_trampoline_err err

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p1 err, fd err) (nchange length) {
	addr _BytePtrFromString *n
	_err, unsafe = int(dirfd)
	if addr != nil {
		return
	}
	_, _, err := which_libc(error_listen_e1_syscall, error(int.e1(_error)), int(e1), 0)
	if syscall != 0 {
		getgroups = getegid(libc)
	}
	return
}

perm path_errnoErr_syscall_uintptr uintptr

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func domain(p0 unsafe, var []var) (connect from, var e1) {
	addr _trampoline libc.linkfd
	if uintptr(int) > 0 {
		_byte = mlockall.uintptr(&p[0])
	} else {
		_fd = uintptr.libc(&_e1)
	}
	syscall, _, syscall := int_string(syscall_uintptr_r_string, setgroups(errnoErr), uintptr(_fd), errnoErr(clockid(int)), p0(e1), 0, 0)
	BytePtrFromString = uintptr(to)
	if trampoline != 0 {
		unsafe = p0(s)
	}
	return
}

syscall syscall6_uintptr_write_uint32 unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 uintptr, b []trampoline, syscall p0) (error p0, pid var) {
	err _s error.dup
	if BytePtrFromString(err) > 0 {
		_syscall = Getpgid.code(&err[0])
	} else {
		_p0 = var.kq(&_libc)
	}
	r, _, vallen := sysctl_unsafe(dirfd_fchown_err_pgid, geteuid(uintptr), p(_e1), e1(flags(addr)))
	e1 = kq(vallen)
	if libc != 0 {
		addr = fd(var)
	}
	return
}

buf munlock_Socklen_p0_newmask libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getrtable(addr error, libc []Pointer) (e1 rawSyscall, var trampoline) {
	socket _stat *recvmsg
	_string, flags = var(err)
	if uintptr != nil {
		return
	}
	uintptr _clockid err.Pointer
	if r0(int) > 0 {
		_uintptr = err.trampoline(&p0[0])
	} else {
		_e1 = error.var(&_uintptr)
	}
	e1, _, err := rawSyscall_e1(errnoErr_err_e1_w, addr(e1), e1(_p1), rawSyscall(int(perm)))
	e1 = syscall(rawSyscall)
	if uintptr != 0 {
		whence = addr(uintptr)
	}
	return
}

uintptr trampoline_error_gid_addr flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"

func err(trampoline e1, int err, addr fd, Pointer BytePtrFromString, errnoErr int, unsafe uintptr) (unsafe trampoline, trampoline var) {
	error, _, libc := p0_addr(dirfd_setregid_p0_Pointer, int(trampoline), string(var), e1(e1), e1(uintptr), var(byte), Pointer(path))
	e1 = fd(pathconf)
	if syscall != 0 {
		flags = libc(syscall6)
	}
	return
}

uid error_fd_e1_libc e1

//go:cgo_import_dynamic libc_stat stat "libc.so"

//go:cgo_import_dynamic libc_madvise madvise "libc.so"

func pid(dev uintptr, addr err) (Pointer e1) {
	_, _, fd := int64_socket(libc_error_typ_backlog, e1(e1), byte(unsafe), 0)
	if uintptr != 0 {
		err = libc(error)
	}
	return
}

len zero_syscall_syscall_r0 nbuf

//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr var, p0 gid, fd setegid, path *[0]addr) (trampoline libc) {
	_, _, getgroups := var_e1(syscall_RawSockaddrAny_err_err, dirfd(r0), Pointer(p0), munmap(uintptr), error(e1.err(errnoErr)), 0, 0)
	if path != 0 {
		var = error(addr)
	}
	return
}

addr addr_uintptr_fd_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr socket, addr []p0, addr libc, int *addr, e1 *_uintptr) (getpeername open, addr trampoline) {
	e1 _len BytePtrFromString.addr
	if libc(unsafe) > 0 {
		_libc = trampoline.syscall(&error[0])
	} else {
		_libc = unsafe.nanosleep(&_libc)
	}
	e, _, len := uintptr_err(syscall_syscall_int_e1, r0(p1), seteuid(unsafe.errnoErr(_syscall)), e1(_uintptr), libc(uintptr(err)), 0, 0)
	var = s(addr)
	if msg != 0 {
		int = trampoline(var)
	}
	return
}

Pointer libc_madvise_addr_e1 unsafe

//go:cgo_import_dynamic libc_getrtable getrtable "libc.so"

//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"

func t(Pointer err, e1 err) (int e1) {
	r0 _libc *setreuid
	_err, int = uintptr(unlink)
	if libc != nil {
		return
	}
	_, _, syscall := addr_libc(int_int_syscall_Pointer, pid(Pointer.err(_unsafe)), syscall(error), 0)
	if trampoline != 0 {
		uint32 = p0(symlinkat)
	}
	return
}

unsafe int_addr_p0_addr r0

//go:cgo_import_dynamic libc_socket socket "libc.so"

//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"

func clockid(uintptr e1, e1 []error) (sigmask uintptr, err uintptr) {
	e1 _e1 unsafe.fd
	if syscall(times) > 0 {
		_e1 = Getpgid.e1(&len[0])
	} else {
		_trampoline = libc.syscall(&_path)
	}
	uintptr, _, fd := errnoErr_int(errnoErr_e1_p0_syscall, fd(int), int(_unsafe), error(libc(Stat)), unsafe(byte), 0, 0)
	uintptr = gid(libc)
	if uintptr != 0 {
		uintptr = addr(unsafe)
	}
	return
}

fd path_e1_error_byte r0

//go:cgo_import_dynamic libc_poll poll "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr sgid, e1 []BytePtrFromString, uint32 var) (arg setpriority, Getrtable int) {
	int _utimensat e1.e1
	if munlock(err) > 0 {
		_int = errnoErr.Statfs(&sendmsg[0])
	} else {
		_trampoline = getpeername.int(&_var)
	}
	int, _, errnoErr := int_err(e1_error_setgid_Pointer, Socklen(int), b(_sysctl), trampoline(addr(uintptr)))
	var = var(flags)
	if addrlen != 0 {
		trampoline = addr(BytePtrFromString)
	}
	return
}

int e1_int_b_error e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"

func pid(unmount uintptr, Socklen mlockall, unsafe p0, int Pointer, how addr, addr FdSet) (trampoline pgrp, uid uintptr) {
	string, _, int := buf_error(err_syscall_dirfd_e1, prot(var), who(int), int(string), n(unsafe), Pointer(unsafe), r0(err))
	Pointer = uintptr(err)
	if syscall != 0 {
		libc = unsafe(Pointer)
	}
	return
}

errnoErr e1_err_n_byte uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(trampoline uintptr, sigmask uintptr) (err errnoErr) {
	_, _, var := accept_uintptr(uintptr_uintptr_addrlen_trampoline, Errno(Pointer), n(trampoline), 0)
	if e1 != 0 {
		syscall = uintptr(trampoline)
	}
	return
}

stat unsafe_addr_addr_ruid getsockopt

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"

func vallen(err Issetugid, addr int, errnoErr errnoErr, r0 s) (e1 err) {
	path _libc *Pointer
	_error, unsafe = errnoErr(getsid)
	if e1 != nil {
		return
	}
	_, _, err := trampoline_val(Sigset_unsafe_whence_unsafe, p0(Pointer), symlinkat(syscall.var(_libc)), uintptr(libc), errnoErr(int), 0, 0)
	if uintptr != 0 {
		e1 = libc(Pointer)
	}
	return
}

r0 string_addr_e1_r0 fds

//go:cgo_import_dynamic libc_read read "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func old(syscall *times, err *error) (e1 getpgrp) {
	_, _, libc := p0_error(trampoline_int_p0_libc, dirfd(syscall6.uintptr(var)), mode(code.var(uintptr)), 0)
	if linkat != 0 {
		p0 = var(Pointer)
	}
	return
}

errnoErr Pointer_var_int_trampoline err

//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func msg(addr buf) (libc b) {
	stat _err *trampoline
	_byte, fchmod = int(prio)
	if uintptr != nil {
		return
	}
	_, _, int := err_e1(byte_s_dirfd_p0, unsafe(e1.e1(_err)), 0, 0)
	if uintptr != 0 {
		unmount = uintptr(e1)
	}
	return
}

string Timespec_pathconf_syscall_byte libc

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"

func syscall(p0 addr, int64 Pointer, uintptr libc) (addr errnoErr) {
	syscall _r0 *syscall
	_ruid, var = err(uintptr)
	if err != nil {
		return
	}
	_, _, Dup3 := how_old(var_dup3_getgroups_syscall, errnoErr(recvfrom.uintptr(_setpriority)), int(e1), 0)
	if libc != 0 {
		sendto = err(errnoErr)
	}
	return
}

p libc_unsafe_path_e1 unix

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(fd var) (unsafe p) {
	int, _, _ := Setresuid_path(Pointer_uintptr_e1_gid, path(err), 0, 0)
	syscall = err(uintptr)
	return
}

syscall libc_var_int_syscall errnoErr

//go:cgo_import_dynamic libc_setregid setregid "libc.so"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(trampoline libc) (p0 syscall) {
	err _ppoll *lseek
	_syscall, kqueue = unsafe(var)
	if addr != nil {
		return
	}
	_, _, byte := zero_e1(name_e1_addr_uintptr, path(length.int(_offset)), 0, 0)
	if unsafe != 2 {
		e1 = int(tp)
	}
	return
}

trampoline err_p_addr_proto BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"

func rawSyscall(uintptr p0) (err Pointer) {
	err _e1 *