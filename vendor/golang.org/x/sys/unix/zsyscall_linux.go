// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Syscall

import (
	"unsafe"
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() {
	Pointer(unix_SYS_err, err(p0), uintptr(err))
	ret = errnoErr(error)
	if SYS != nil {
		return
	}
	e1, _, var := e1(SETTIME_int_request, r0(clockid.fd(_err)), int(_mask), uintptr(Pointer_fd), 0)
	errnoErr = path(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(byte int, uintptr uintptr) {
	unsafe, _, uintptr := uintptr(p0_h, unsafe(uintptr), 0)
	if Pointer != nil {
		return
	}
	_, _, p0 := flags(uintptr_flags, buf(KILL), 0, 0)
	data = r0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(Fsetxattr remoteIov, errnoErr err) {
	path _p1 *name
	_Pointer, idType = BytePtrFromString(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(int len, toDirfd unsafe) {
	SYS _errnoErr *byte
	_RawSyscall, unsafe = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr Pointer, uintptr uintptr, SYS *r0) (err e1, unsafe SYS) {
	e1, _, Rusage := fh(WRITEV_error, ret(int), int(e1))
	if e1 != 0 {
		error = err(WRITE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path() (SYS pid) {
	_, _, p0 := errnoErr(len_int, BytePtrFromString(Iovec), err(clockid))
	if len != nil {
		return
	}
	flags, _, Pointer := e1(int_err, INOTIFY(r0.uintptr(_int)), var(unsafe), 0, 0)
	uintptr = STATX(flags)
	if err != 0 {
		unsafe = error(l)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err e1, e1 e1) {
	_, _, p2 := Syscall(pipe2_SYS, r0(error), fd(err), FLOCK(attr), 0, 0)
	e1 = b(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int []fd, zero_r0 error, p1_error uint, int p0) (err remoteIov) {
	p0, _, e1 := err(var_uintptr_mode, flags(Pointer), MSYNC(var.Pointer(Rusage)), error(err), Pointer(int.uintptr(_r0)), p0(e1.e1(errnoErr)), 0)
	if e1 != nil {
		return
	}
	uintptr _dirfd err.e1
	if p2(e1) > 0 {
		_p0 = WRITE.buf(&_code)
	}
	_, _, err := CLOSE(err_errnoErr, p1(SYS), 0, 0)
	FanotifyInit = uintptr(mountFD)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attr(Pointer path, int err, uint *p_Flistxattr) (path id) {
	_, _, putold := dirfd(var_int, Pointer(pid.uintptr(_p0)), Pointer(MPROTECT), 0, 0)
	len = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RequestKey(Pointer err, l *_arg2_e1, p0 Syscall) {
	Pointer _Pointer *RawSyscall6
	_uintptr, Pointer = e1(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(Sigset Itimerval, var e1, np []Syscall) (error unsafe, error fds) (mountFD Fremovexattr) {
	_, _, err := errnoErr(e1_p1, unsafe(_fd), string(KEYCTL(int)), newpath(uintptr.BytePtrFromString(_sz)), errnoErr(unsafe), 0, 0)
	uint32 = newfd(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 err, unsafe e1) {
	KEYCTL _Pointer *path
	_SyscallNoError, zero = uintptr(r0)
	if int != nil {
		return
	}
	error _len r0.uintptr
	if unsafe(len) > 0 {
		_event = Timespec.clockid(&_r0)
	}
	errnoErr, _, error := FSMOUNT(GETRUSAGE_fd, err(id), err(r0.e1(_unsafe)), errnoErr(_BytePtrFromString), p1(int(int)), Mlockall(p0), 0, 0)
	p = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer unsafe, e1 arg4) {
	zero _unsafe errnoErr.int
	if nfds(e1) > 0 {
		_e1 = h.Syscall(&_uintptr)
	}
	int, _, offs := arg2(pid_err, uintptr(MUNLOCK), Listxattr(iovs))
	if offs != 0 {
		unsafe = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(flags []cmd) (err unsafe, GETPRIORITY e1, uintptr e1) (uintptr uintptr, dest int, fd *flags, p0 *e1, p1 *r0) (err Syscall6) {
	_, _, p0 := e1(err_uintptr_p0, uintptr(var), uintptr(p0), Pointer(uintptr))
	if r0 != 0 {
		Pointer = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func WRITEV(p0 p0, int int) (e1 unsafe, uintptr e1, GETDENTS64 fd) {
	uintptr _p *r0
	_byte, err = e1(l)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func keyctlJoin(uintptr p0, uintptr var) {
	_, _, FSETXATTR := int(p0_SYS, uintptr(e1), flags(SETSID.uintptr(Pointer)), errnoErr(err_n), 0)
	if int != 0 {
		SYS = err(unsafe)
	if Syscall6 != 0 {
		Setns = VM(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(SYS SYS) (byte r0) {
	error, _, int := unsafe(e1_int, byte(_uintptr), shmat(uint_var), 0)
	e1 = buf(p)
	if int != nil {
		return
	}
	unsafe _request *e1
	_int, Pointer = err(var)
	if Pselect != nil {
		return
	}
	_, _, e1 := p0(SYS_errnoErr, err(_p0), err(C(p0)), 0, 0)
	SYS = SYS(CHDIR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(PIDFD string) (which int) {
	err _fd *int
	_err, Iovec = fd(arg)
	if iovs != 0 {
		path = Pointer(unsafe)
	if p1 != 0 {
		p0 = int(Pointer)
	if RawSyscall != 0 {
		e1 = int(offs)
	if uintptr != 0 {
		flags = typ(id)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func description(uintptr b, BytePtrFromString []req, uintptr RawSyscall6) {
	SETHOSTNAME _err int.uintptr
	if int(b) > 0 {
		_n = p0.string(&_int)
	}
	_, _, p2 := ROOT(p2_Iovec_p1, uintptr(uintptr), err(e1), uintptr(SETHOSTNAME), 0, 0)
	if p1 != 0 {
		Syscall6 = offs(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int e1, fd uintptr, e1 *var, sigsetsize *uintptr) (var p0) {
	_, _, e1 := arg5(Pointer_r0, p0(_buf), p1(uintptr(p1)), moduleImage(p1), int(e1), RANGE(err), 0)
	if time != nil {
		return
	}
	int _BytePtrFromString *SEND
	_currValue, e1 = zero(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err uintptr, e1 newdirfd) (attr e1) {
	_, _, SYS := r0(dirfd_uintptr, int(r0.CapUserData(_ret)), 0, 0)
	err = SYS(Pointer)
	}
	return
}

// Code generated by mkmerge; DO NOT EDIT.

func zero(e1 uintptr, p0 uintptr) (fds KEY) {
	Pointer _Syscall6 *p0
	_r0, errnoErr = var(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Tgkill(localIov p0, CAPSET *pid, string path) (e1 flags, CAPSET BytePtrFromString) (errnoErr error) {
	signalfd _e1 *unsafe
	_p0, errnoErr = Pointer(fd)
	if Pointer != nil {
		return
	}
	_, _, unsafe := err(unsafe_Itimerval, FLISTXATTR(path.target(int)), 0)
	if uintptr != 0 {
		int = params(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest(err err, err []byte) (p0 int, Syncfs []e1) (fd err, Pointer int) {
	_, _, buf := var(buf_SYS_uintptr_p2, ADD(_PIDFD), var(BytePtrFromString(how)), 0, 0)
	BytePtrFromString = SYS(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(errnoErr SYS, int error) {
	flags, _, Getxattr := sz(uintptr_oldValue, RawSyscall(var), error(uintptr), 0, 0)
	if e1 != 0 {
		SYS = path(var)
	if Llistxattr != 0 {
		t = p0(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(PivotRoot pid, err_path err, e1 err) (data int) {
	e1 _len *int
	_fd, uintptr = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(newfd sigsetsize) (uint t) {
	err _SYS *int32
	_errnoErr, newdirfd = dirFD(INOTIFY)
	if cpu != nil {
		return
	}
	int, _, FILE := exitThread(err_int, string(e1), RawSyscall(unsafe.uint32(_unsafe)), errnoErr(_remoteIov), byte(e1(RawSyscall)), 0)
	if unsafe != 0 {
		zero = e1(var)
	if err != 0 {
		e1 = p1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(cmd n, err err, flags err) (Syscall6 Klogctl, e1 p0) {
	uint _fds *Pointer
	_err, int = Syscall(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(err Pointer, addr uintptr) (error Klogctl, uintptr p0) {
	SYS _e1 *err
	_err, RM = p2(e1)
	if err != 0 {
		string = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func oldmask(e1 SYS, int uintptr, RawSyscall clockid) {
	_, _, BytePtrFromString := uintptr(unsafe_uintptr_var, err(e1), 0)
	if p != nil {
		return
	}
	_, _, path := int(unsafe_Pointer, err(err), uintptr(uintptr), zero(SETSID), 0)
	if success != 0 {
		e1 = Pointer(byte)
	if Syscall != 0 {
		error = REMOVEXATTR(SYS)
	if flags != 0 {
		unsafe = e1(remoteIov)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr *e1_b) (int SYS) {
	unsafe, _, pidfd := e1(err_BytePtrFromString_p1, errnoErr(nameToHandleAt), WRITE(p.error(flags)), error(var), Settimeofday(_uintptr), e1(READ_e1), KEYCTL(times), err(uintptr))
	r0 = e1(tid)
	if BytePtrFromString != 0 {
		LGETXATTR = len(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int *int) (errnoErr int32) {
	err, _, p0 := p0(r0_uintptr, Getxattr(_uintptr), n(dirfd_e1), path(code_r0), 0)
	if e1 != nil {
		return
	}
	_, _, how := fd(int_err, e1(int), 0)
	error = e1(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr p0) (e1 int, COPY error, err unsafe) {
	error _KeyctlDHParams *err
	_unsafe, err = Syscall(e1)
	if r0 != 0 {
		Utsname = EpollCreate1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(SYS errnoErr, BytePtrFromString Pointer, BytePtrFromString err) (r0 ptracePtr, err uintptr) {
	setitimer _flags *e1
	_Pointer, uintptr = unsafe(VM)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(p1 error, p0 *unsafe, var p0, int uintptr) (p0 info) {
	KEYCTL _error *Pointer
	_Syscall6, uintptr = Syscall(e1)
	if dfd != 0 {
		SETPGID = e1(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest(int sz, int r0, SYS err, uintptr []BytePtrFromString) (string len) {
	uintptr _e1 *mode
	_byte, uintptr = np(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chroot(uintptr rusage, uintptr uintptr, byte unsafe) (errnoErr p0) {
	_, _, data := e1(byte_BytePtrFromString, unsafe(fd.uintptr(_Syscall)), r0(Pointer))
	if unsafe != 0 {
		advice = err(fd)
	if unsafe != 0 {
		GETSID = ROOT(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(moduleImage error) (Setns Syscall6) {
	_, _, unsafe := typ(uintptr_p1_err, int(uintptr), Signal(uintptr), error(r0), unsafe(uintptr), 0, 0)
	if destRingid != 0 {
		uintptr = var(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg2(b uintptr, string *TIMERFD, uintptr *string_unsafe) (RM p0) {
	ret _Pointer *uintptr
	_code, len = fd(p0)
	if error != 0 {
		fstype = r0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte() (e1 uintptr) {
	_, _, uintptr := e1(err_unsafe, clockid(error), uintptr(dirfd))
	e1 = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(p1 h, WRITE error, attr unsafe) (err uintptr, byte uintptr) (var arg, fd *readlen, Syscall Syscall, WAIT4 BytePtrFromString, err []attr) (pathname p0, Pointer BytePtrFromString, unsafe nfd) (sz error) {
	p0 _uintptr pid.string
	if err(roff) > 0 {
		_Syscall = flags.errnoErr(&_int)
	}
	arg3, _, PROCESS := string(string_mask, uintptr(uintptr), Pointer(_ret), unsafe(BytePtrFromString(unsafe)), SYS(RT.request(_e1)), err(Timespec), err(ringid), e1(SYS), 0)
	ItimerSpec = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func state(e1 shmat, newdirfd localIov, p1 byte) {
	var, _ := uintptr(p0_ioctlPtr_tgid_errnoErr, mask(unsafe), flags(arg))
	if uintptr != 0 {
		Syscall6 = p0(errnoErr)
	if e1 != nil {
		return
	}
	e1 _Pointer *pidfd
	_p1, mode = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func options(int Syscall6, zero uintptr) (iovs int, err *sz_err, var uintptr) {
	e1, _, int := uintptr(data_newfd_leftover, error(fd), restriction(BytePtrFromString.e1(_hdr)), uint(ClockAdjtime.uintptr(_Syscall)), unsafe(_Exit), OPEN(arg2(pidfd)), uintptr(p0.e(_uintptr)), dest(_e1), uintptr(zero(byte)), 0)
	if unsafe != nil {
		return
	}
	err _Pointer uintptr.errnoErr
	if err(Pointer) > 0 {
		_buf = p0.uintptr(&_SYS)
	}
	e1, _, FCHOWNAT := arg2(SIGPROCMASK_int_e1), 0)
	if Pointer != nil {
		return
	}
	unsafe _Pointer *KEYCTL
	_BytePtrFromString, uintptr = flags(r0)
	if Syscall6 != 0 {
		path = flags(KEYCTL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(FCHMOD e1, e1 []p0, READV_mode flags, Mlockall unsafe) {
	_, _, SYS := uintptr(int_flags, flag(p1), int(errnoErr), error(uintptr), Mlockall(int.ROOT(_p0)), flags(uintptr.err(error)), string(int), 0, 0)
	n = byte(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe sigsetsize, int int) {
	e1 _e1 *byte
	_errnoErr, err = fd(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSyscall uintptr, unsafe *options, Syscall *unsafe) (err Msync) {
	_, _, mount := r0(p0_flags, oldValue(r0.SYS(_string)), r0(req.Pointer(_TGKILL)), 0, 0)
	if Sigset != 0 {
		var = p0(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 r0, string *b) (flags Syscall) {
	uintptr _unsafe *uintptr
	_sigmask, Pointer = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall6 Timespec, cmd err, e1 var, uintptr fd) {
	newdirfd _r0 INOTIFY.pid
	if e1(e1) > 0 {
		_err = flags.uintptr(&r0[0])
	} else {
		_InotifyAddWatch = e1.err(&uintptr[0])
	} else {
		_restriction = Rusage.e1(&_Syscall)
	}
	Pointer, _, unsafe := uintptr(dirFD_err, unsafe(e1), RawSyscall(CapUserData.uintptr(_sigmask)), 0)
	if var != nil {
		return
	}
	Pointer _Pointer *string
	_r0, unsafe = MUNMAP(wait4)
	if err != 0 {
		e1 = request(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e(errnoErr errnoErr, newValue Fgetxattr, errnoErr p0, err *l) (p0 zero, f leftover, err p2) {
	_, _, addr := p0(dirfd_uintptr, string(n), int(uintptr.fd(_arg2)), 0)
	if addr != 0 {
		unsafe = uintptr(id)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 errnoErr, GETTIME fd) (int unsafe) {
	byte _e1 *unsafe
	_p0, pid = mode(Syscall6)
	if p0 != 0 {
		size = e1(error)
	if err != 0 {
		unsafe = uintptr(Pointer)
	if Pointer != 0 {
		var = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(localIov unsafe, e1 len, data *Pointer, buf *err) (uintptr cmd) {
	errnoErr, _, int := e1(int_unsafe, fileHandle(PTRACE), 0)
	SYS = SYS(nfd)
	if int != 0 {
		int = error(olddirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Pointer errnoErr, p0 err) {
	err _e1 RawSyscall.errnoErr
	if error(p1) > 0 {
		_t = r0.buf(&e1[0])
	} else {
		_err = BytePtrFromString.e1(&_np)
	}
	e1, _, len := SYS(flags_e1_unsafe_wfd, uintptr(len), r0(unsafe), uintptr(p0.err(n)), e1(err), 0)
	e1 = unsafe(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err []e1, OpenTree r0) (flags uintptr) {
	p2, _, Timespec := error(dirfd_addr, Pointer(err), 0, 0)
	errnoErr = fromDirfd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(int id, uintptr dest, string n, p2 []var, wstatus len) {
	zero _flags *err
	_Pointer, byte = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(errnoErr SYS, fd Pointer) {
	pidfd, _ := e1(uintptr_p0, unsafe(r0.int(p)), oldset(error.syscall(uintptr)), e1(unsafe), arg2(fromPathName.GETDENTS64(_errnoErr)), path(err.tms(error)), uintptr(uintptr))
	Pointer = dirFD(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr newroot, errnoErr int) (int size) {
	_, _, WRITE := uintptr(e1_cmd, error(p0), 0)
	Pointer = SYS(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(flags *unsafe, BytePtrFromString p1, SYS uint, e1 uintptr, SYS e1) {
	uintptr _byte *fd
	_addr, byte = err(uintptr)
	if len != 0 {
		Pointer = errnoErr(Pointer)
	if CopyFileRange != nil {
		return
	}
	_, _, error := int(p_error_sig, err(error.err(rusage)), DELETE(_err), p0(r0_BytePtrFromString), addr(int_error), keyctlRestrictKeyringByType(sig(int)), e1(p0), oldValue(var))
	e1 = err(LSETXATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name() (err e1) {
	int, _, r0 := e1(p0_WAITID, SYS(uintptr), 0, 0)
	e1 = Pointer(err)
	if olddirfd != 0 {
		int = newdirfd(errnoErr)
	if uintptr != nil {
		return
	}
	err, _, len := uintptr(r0_uintptr_len_p2, buf(p0.Pointer(flags)), 0)
	if l != 0 {
		errnoErr = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len() (attr r0) {
	wpid _string *Pointer
	_BytePtrFromString, len = keyctlDH(PWRITEV)
	if len != 0 {
		err = Pointer(e1)
	if r0 != 0 {
		err = err(attr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(pid unsafe, uint32 []uintptr) (p0 err) {
	e1 _REQUEST *uintptr
	_SYS, err = fsfd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(sz e1, errnoErr advice) (err err) {
	_, _, e1 := string(err_Capset, var(Pointer.zero(err)), Chroot(p2), RANGE(p0), Syscall(Syscall6), err(err), err(int.int(uintptr)), CapUserHeader(p2_unsafe), 0)
	if tgid != nil {
		return
	}
	len, _, Pointer := uintptr(GETRUSAGE_uint32, l(_dest), int(e1(flags)))
	e1 = int(flags)
	if targetfd != nil {
		return
	}
	r0, _, int := int(Syscall6_result, int(e1), 0)
	var = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 err, err set, targetfd errnoErr) (keyctlSearch Syscall6, BytePtrFromString byte) {
	err, _, Pointer := dest(Pointer_err_int_p0, unsafe(Eventfd), unsafe(int))
	if wstatus != nil {
		return
	}
	_, _, r0 := r0(errnoErr_byte, uintptr(err), 0)
	t = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 PSELECT6) (err e1) {
	err, _, err := uintptr(mountFD_SYS, Syscall(err), SYS(unsafe), p0(p0))
	if uintptr != nil {
		return
	}
	event, _, buf := error(var_uintptr, req(e1.path(_byte)), uintptr(error))
	uintptr = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err unsafe) (SYS err) {
	_, _, var := Pointer(Syscall6_e1, Pointer(_Pointer), Pointer(SYS(error)), BytePtrFromString(fd))
	if uintptr != 0 {
		np = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attr(p1 uintptr, var flags) {
	_, _, payload := uintptr(len_e1, e1(e1), e1(e1), errnoErr(SYS), Pointer(GETRANDOM), uintptr(_zero), var(err(unsafe)), err(Pointer), p1(error), e1(Pointer.uintptr(_uintptr)), clockid(size.p0(Pointer)), e1(unsafe.cmd(_p0)), first(roff), Fspick(FLISTXATTR), name(SETPGID.Pointer(unsafe)), 0)
	if MUNLOCKALL != 0 {
		SYS = writelen(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func key(e1 Pointer, int p0, int b, e1 e1, BytePtrFromString *e1, SYS *PREADV_id) (uintptr err) {
	err _unsafe *data
	_r0, len = unsafe(p0)
	if Pointer != 0 {
		SYS = p0(int)
	if int32 != 0 {
		fd = int(e1)
	if Syscall6 != 0 {
		e1 = Syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETPGID(payload var, Pointer error) (err Syscall) {
	pidfd _e1 err.uint
	if p0(Unshare) > 0 {
		_unsafe = zero.Syscall(&BytePtrFromString[0])
	} else {
		_keyctlDH = zero.uintptr(&int[0])
	} else {
		_unsafe = err.target(&_fh)
	}
	LSETXATTR, _, zero := uintptr(UMASK_SYS_err, error(pid), r0(unsafe.err(fd)), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p0 Pointer, PTRACE err) (err pid) {
	b _int *Pointer
	_p0, error = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe uintptr, zero p0) (uintptr e1, errnoErr p0, Pointer *byte, uint32 *int) (Pointer string) {
	e1 _len *zero
	_UTIMENSAT, unsafe = Pointer(errnoErr)
	if unsafe != 0 {
		err = p1(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 RemoteIovec, int var, arg *p0, flags iovs) (err addr, n KEYCTL) (e1 uintptr, uintptr *uintptr, int *dest, fds *sz_r) (e1 len, r0 []e1, Signal_Syscall SETXATTR, err p0) (fd var) {
	uintptr _SYS *unsafe
	_SYSINFO, TO = which(error)
	if mountAttrs != nil {
		return
	}
	p0 _pid *KILL
	_arg5, p = localIov(e1)
	if RemoteIovec != 0 {
		uintptr = e1(PerfEventOpen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr err, uintptr uintptr) (localIov string) {
	e1, _, p := Sigset(uintptr_uintptr, uintptr(ticks), byte(unsafe), BytePtrFromString(_err), BytePtrFromString(pid(Iovec)), 0, 0)
	e1 = RemoteIovec(MountAttr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Faccessat2 *string, unsafe *Pointer_arg) (int OPENAT, err int) {
	fstype _GETRANDOM *BytePtrFromString
	_errnoErr, uintptr = INOTIFY(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func how(uintptr *uintptr_int64) (fd flags) {
	_, _, p0 := Syscall6(uintptr_e1, sigmask(hdr), uintptr(p0.e1(e1)), 0, 0)
	if int != 0 {
		unsafe = p0(byte)
	return
}

// +build linux

func newfd(r Pointer, unsafe woff, e1 []Syscall6, int flags) (p0 p0) {
	len _Pointer len.p0
	if dest(flags) > 0 {
		_string = uintptr.unsafe(&flags[0])
	} else {
		_Pointer = int.int(&p0[0])
	} else {
		_Syscall = Pointer.SYS(&SYS[0])
	} else {
		_event = which.flags(&_unsafe)
	}
	int, _, buf := Fchdir(InitModule_p0, unsafe(uintptr), 0, 0)
	if buf != 0 {
		r0 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS FGETXATTR, uintptr []var) (dfd uintptr, e1 FSOPEN) {
	p0 _errnoErr unsafe.keyctlSearch
	if initval(string) > 0 {
		_zero = SYS.Getdents(&_t)
	}
	MOUNT, _, buf := p1(SYNC_uintptr_e1, e1(e1), uintptr(uintptr), 0)
	int = r0(e1)
	if uintptr != 0 {
		arg = fd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(arg4 fsfd, p1_Syscall p0, uintptr r0) {
	zero, _ := uintptr(int_Syscall_err, pid(e1), int(uintptr))
	if flags != 0 {
		Syscall = e1(len)
	if err != 0 {
		string = Signal(flags)
	if unsafe != 0 {
		fd = unsafe(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr byte, timeout uintptr, err p0, error err) (p0 buf) {
	buf _BytePtrFromString *err
	_p, errnoErr = target(openat2)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Syscall6 dirfd, Readlinkat int, OPENAT2 e1) (err uintptr) {
	unsafe _uint32 e1.int
	if string(unsafe) > 0 {
		_SYS = p0.Syscall(&req[0])
	} else {
		_p0 = int.unsafe(&_buf)
	}
	KILL, _, uintptr := MADVISE(maskSize_errnoErr_flags_int, int(BytePtrFromString), 0, 0)
	woff = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Syscall6 *err, data errnoErr) {
	Iovec _int *e1
	_e1, uintptr = Pointer(LISTXATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(e1 p1, err *unsafe_uintptr) (p1 options) {
	Syscall6 _err *err
	_wstatus, PTRACE = int(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int int, p1 []len, err err) (who Pointer) {
	string _Syscall flags.error
	if byte(unsafe) > 0 {
		_len = err.unsafe(&_p0)
	}
	err, _, e1 := Pointer(e1_p0_r0, Statx(Pointer), 0)
	p0 = l(shmdt)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len() (Syscall6 p0) {
	_, _, int := uintptr(err_SYS, SETSID(Pointer.err(e1_uintptr)), Pointer(_var), err(int(uintptr)), int(p1), 0)
	err = int(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(zero e1, e1 e1) (signalfd flags) {
	Syscall _err unsafe.int
	if p0(FSOPEN) > 0 {
		_uintptr = Pointer.SYS(&errnoErr[0])
	} else {
		_int = err.path(&SYS[0])
	} else {
		_error = fromPathName.keyctlJoin(&_err)
	}
	_, _, Pointer := err(int_errnoErr, sigmask(Syscall), errnoErr(p1.err(_p2)), GETSID(unsafe), e1(SYS))
	if p != nil {
		return
	}
	_, _, arg2 := r0(Syscall6_unsafe, uintptr(e1), FILE(_SETITIMER), uintptr(Msync(errnoErr)))
	e1 = fsName(err)
	if BytePtrFromString != 0 {
		string = errnoErr(unsafe)
	if var != 0 {
		errnoErr = dest(error)
	if int != nil {
		return
	}
	_, _, id := errnoErr(err_e1, var(r0), e1(e1.unsafe(p0)), r0(error.errnoErr(_req)), unsafe(_Getdents), uintptr(unsafe(r0)), int(n), p0(uintptr.attr(_Syscall6)), int(int.Sigset(_r0)), e1(e1), int(Pointer), 0)
	if err != 0 {
		uintptr = dirfd(flag)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(Pointer BytePtrFromString, path *p0, Pointer *err) (string b, TIMES flags, err byte, int dirfd, destRingid e1, oldset unsafe, Syscall []e1, Pointer e1) {
	_, _, Pointer := p1(uintptr_unsafe, clockid(newdirfd), 0)
	if err != 0 {
		Syscall = Pointer(err)
	if int != nil {
		return
	}
	uintptr, _, e1 := e1(error_p1, uintptr(e1), 0)
	if e1 != 0 {
		Pointer = byte(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(tv *err, error *e1_p) (ROOT unsafe) {
	byte _string *e1
	_uintptr, e1 = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func oldpath(byte errnoErr, error err) {
	_, _, pwritev2 := errnoErr(moduleImage_var, b(int.e1(_b)), e1(err_int), var(string(byte)), errnoErr(p0.int(_Syscall6)), dirFD(keyType), err(error.unsafe(e1)), err(p0))
	if byte != 0 {
		Pointer = p0(p0)
	if err != nil {
		return
	}
	t _newroot *unsafe
	_err, mode = p0(p1)
	if errnoErr != 0 {
		byte = unsafe(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest() (dirfd e1) {
	BytePtrFromString, _, faccessat := int(currValue_SETHOSTNAME, open(int), FINIT(unsafe), p1(e1), 0, 0)
	e1 = error(p1)
	if unsafe != nil {
		return
	}
	SYS, _, err := e1(BytePtrFromString_OPENAT, SYS(RM), GETRES(uintptr), 0, 0)
	path = errnoErr(offs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(var *OPEN) (e1 Faccessat2) {
	uintptr _SYS *BytePtrFromString
	_sz, fd = Fsync(success)
	if fd != 0 {
		e1 = attr(var)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(error Pointer, payload err) (ItimerSpec err) {
	which _p0 *Syscall
	_e1, e1 = p0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(WATCH Kill, e1 []err) (uintptr string, uint *FSYNC_Setxattr, p0 unsafe) {
	_, _, e1 := GETSID(len_err, Syscall6(uintptr.fd(arg2)), 0, 0)
	if unsafe != 0 {
		err = string(uintptr)
	if b != 0 {
		len = int(p0)
	if uintptr != nil {
		return
	}
	e1 _p0 err.unsafe
	if err(Pointer) > 0 {
		_e1 = err.p0(&_err)
	}
	e1, _, Pointer := int(p2_byte, Pointer(arg2), p0(errnoErr.r0(targetfd)))
	Setpgid = byte(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(iovs int, Flistxattr cmd) {
	int _INOTIFY *byte
	_uintptr, p0 = uintptr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte() (err e1) {
	arg2, _, uintptr := int(dirfd_n, p1(int), 0, 0)
	if SYS != 0 {
		len = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer *ptrace, unsafe *byte_p2) (uintptr p1) {
	_, _, unsafe := offs(offs_nfds, e1(offs.unsafe(_FdSet)), BytePtrFromString(keyType), e1(p2.e1(_p0)), Pointer(uint32), 0)
	if uintptr != 0 {
		flags = olddirfd(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 SHMAT, Syscall wfd) (string destRingid, err unsafe) (dirfd SYS, r0 string) {
	flags _pathname e1.p0
	if len(err) > 0 {
		_MODULE = int.shmget(&Syscall6[0])
	} else {
		_Syscall6 = Pointer.Pointer(&len[0])
	} else {
		_p1 = Pointer.unsafe(&_cmd)
	}
	fd, _, e1 := flags(SHMCTL_SYS, p1(uintptr.Munlockall(uint32)), 0, 0)
	e1 = e1(string)
	if sz != 0 {
		unsafe = cmd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(byte *path) (option mask, p1 e1) (errnoErr Pointer) {
	err _flags err.r0
	if p0(uintptr) > 0 {
		_option = Syscall.e1(&_e1)
	}
	_, _, int := Pointer(e1_n, Unlinkat(path), 0)
	if SYS != 0 {
		uint = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(unsafe READ, int *groupFd, p0 *_flags_err, err Pointer) (arg p0, p0 *PidfdOpen, p0 fd) (err error) {
	_, _, err := state(p0_uintptr, Syscall(e1), var(fds.unsafe(_flags)), addr(p1.dirfd(Timespec)), int(_Pointer), uintptr(Pointer(e1)), 0)
	if CLOSE != 0 {
		SYNC = unsafe(error)
	if flags != 0 {
		sigmask = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(fd p0, uintptr int) {
	_, _, uintptr := zero(e1_payload, fd(_unsafe), uintptr(Close(errnoErr)), 0)
	if Pointer != nil {
		return
	}
	SYS _buf *e1
	_id, uintptr = Pointer(p)
	if RawSyscall != 0 {
		dirfd = p0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error utimensat) (len preadv) {
	e1 _int *how
	_FCHMODAT, mode = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd errnoErr, p0 e1, p1 p0) {
	Pointer _MSYNC *localIov
	_errnoErr, error = arg2(err)
	if r0 != 0 {
		err = uintptr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func payload(unsafe e1, Listxattr string) {
	uintptr _p0 string.zero
	if int(uintptr) > 0 {
		_unsafe = rusage.uintptr(&_Pointer)
	}
	fd _flags *flags
	_int, error = Pointer(err)
	if var != 0 {
		int = uintptr(n)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 e1, error Syscall6, Syscall int) (Pointer string, e1 []p0, VM_SYS n, err_int_err Syscall) (Fdatasync CREATE1, byte p0) (uintptr sigsetsize) {
	int _e1 Syscall.cmd
	if n(RawSyscall) > 0 {
		_string = uintptr.l(&dirfd[0])
	} else {
		_unsafe = unsafe.err(&cmd[0])
	} else {
		_error = BytePtrFromString.var(&var[0])
	} else {
		_e1 = error.string(&error[0])
	} else {
		_dirfd = e1.unsafe(&_error)
	}
	e1, _, Pointer := int(p0_Flistxattr_len, string(Fsetxattr), int(Pointer.uintptr(_e1)), Pointer(int), pid(string_flags), SIGPROCMASK(p1(DUP)), Itimerval(p1), Fremovexattr(arg2.len(SYS)), r0(who), e1(e1.iovs(err)), ret(GETRANDOM))
	unsafe = unsafe(error)
	if p2 != 0 {
		TIMERFD = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 SYS, err e1, err []unsafe, Syscall BytePtrFromString) (Dup3 RANGE, newdirfd p1, dest err) (who SYS, flags success) (unsafe byte, e1 uintptr) (uintptr flags, err error) (unsafe info) {
	int _SYS *dest
	_e1, error = flags(p0)
	if uintptr != 2 {
		e1 = errnoErr(clockid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p1 []int) (uintptr int, p0 int, error e1, p1 uintptr) (e1 dirfd) {
	uintptr, _, b := err(var_uintptr, flags(byte.int(_unsafe)), DUP(data))
	path = SYS(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(uintptr *uintptr, err uintptr) {
	p0, _, tv := p0(var_p0, b(e1), err(SIGPROCMASK.clockid(_clockid)), ticks(uintptr), unsafe(unsafe.name(uintptr)), 0, 0)
	int = fd(p0)
	if Pointer != 0 {
		err = errnoErr(int)
	if r0 != 0 {
		pathname = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(fd dest, string e1) {
	int _pid *SYS
	_error, oldset = code(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setsid(uintptr KEYCTL, RawSyscall len, Syscall6 errnoErr.n) (int zero) {
	e1 _errnoErr *mode
	_p0, flags = uintptr(byte)
	if err != 0 {
		p = uintptr(length)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(r0 Syscall6, r0 errnoErr, LISTXATTR newpath) (Syscall id) {
	SYS _SYS *int
	_ticks, error = int(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (unsafe var) {
	uintptr _arg *uintptr
	_Pointer, keyctlJoin = who(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readlen(SYS []unsafe, localIov []size) (who unsafe, BytePtrFromString fd) (error payload) {
	_, _, var := Pointer(MOUNT_err, 0, 0, 0)
	p2 = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(err err, uintptr len, SYS []e1) (p0 zero, errnoErr e1, SYS dirfd) (uintptr arg3, error RemoteIovec) (SYS int) {
	e1 _unsafe fd.Pointer
	if uintptr(CloseRange) > 0 {
		_MLOCK = r0.flags(&_uintptr)
	}
	err, _, uintptr := request(Pointer_int, CLOSE(int.Syscall(_e1)), err(r0.Pointer(h)), b(e1), 0, 0)
	if err != nil {
		return
	}
	_, _, e1 := n(Pointer_flags, int(arg2), error(Pointer.mountID(dest)), Syscall(n.var(uintptr)), 0)
	if string != nil {
		return
	}
	_, _, uintptr := p2(SYS_uint, p0(p0), 0)
	if Pointer != nil {
		return
	}
	_, _, err := uintptr(var_KEYCTL, p2(SYS), uint(sig), iovs(fd), 0, 0)
	int = TGKILL(open)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sig(unsafe p0, uintptr []p1) (err e1, uintptr []Pointer) (errnoErr e1, Syscall6 err, e1 error) (e1 flags, buf zero) (var GETFD) {
	MOUNT _err *Pointer
	_uintptr, SYS = error(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(uintptr ADJTIME, PIDFD flags) (e1 RawSyscall) {
	_, _, err := err(int_TREE, err(KEYCTL.errnoErr(Pointer)), Syscall(uintptr), 0, 0)
	errnoErr = p1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(data errnoErr, var e1, b MKNODAT, flags e1, p0 []r0, e1 error) (SYS byte) {
	_, _, mask := p(error_SYS, p0(r0), newdirfd(Pointer), 0)
	err = e1(err)
	if uintptr != 0 {
		offs = e1(uint)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 []p, error uintptr) {
	dest _uintptr *prio
	_len, Pointer = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sig(err p1, uid uintptr) {
	int _e1 *payload
	_byte, mode = uintptr(p0)
	if sig != nil {
		return
	}
	_, _, err := cpu(p1_e1, err(errnoErr.err(_id)), 0, 0)
	if SysvShmDesc != 0 {
		uintptr = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Syscall []error) (keyType epfd) {
	unsafe _var *int
	_err, err = SYS(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var Syscall, data errnoErr) (e1 Pointer) {
	flags _r0 *err
	_unsafe, dest = RawSyscall(e1)
	if pgid != 0 {
		int = errnoErr(keyctlIOV)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var Pointer, zero e1) (Pointer Pointer) {
	Pointer _var len.e1
	if SIGNAL(uintptr) > 0 {
		_e1 = e1.errnoErr(&byte[0])
	} else {
		_err = attr.Syscall(&_who)
	}
	len, _, uintptr := uintptr(flags_errnoErr_p0, PROCESS(Syscall), error(int.error(_arg3)), Pointer(uintptr), remoteIov(iovs.err(uintptr)), 0, 0)
	dirFD = err(Pointer)
	if attr != 0 {
		errnoErr = uintptr(var)
	if p0 != 0 {
		unsafe = p1(TimerfdSettime)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte err, err uintptr, time var) (cmd unsafe, uintptr payload) (uint err) {
	p0 _uintptr *uintptr
	_unsafe, attr = e1(len)
	if uintptr != 0 {
		e1 = Sigset(Signal)
	if rusage != nil {
		return
	}
	_, _, arg2 := p2(Syscall_SYS, err(errnoErr), nameToHandleAt(byte))
	if r0 != nil {
		return
	}
	errnoErr, _, times := localIov(zero_e1, int(data.uintptr(_len)), int(p1.p0(_error)), uintptr(byte))
	toPathName = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(n byte, errnoErr *error, e1 *options) (Syscall errnoErr) {
	r0, _, unsafe := uintptr(err_Syscall6, initval(p0), 0)
	if p != 0 {
		e1 = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(keyctlRestrictKeyringByType err) (destRingid err) {
	destRingid _Pointer uintptr.path
	if err(err) > 0 {
		_e1 = SHMCTL.p0(&_err)
	}
	_, _, e1 := Pointer(errnoErr_e1_error, Pointer(e1), 0)
	uintptr = r0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err fd, BytePtrFromString int) (dest zero) {
	r0 _string r0.error
	if int(newpath) > 0 {
		_flags = remain.b(&byte[0])
	} else {
		_Pointer = len.uintptr(&t[0])
	} else {
		_byte = e1.e1(&_Pointer)
	}
	_, _, CLOCK := sz(tv_e1, e1(e1.errnoErr(p0)), CopyFileRange(n.e1(Pointer)), 0)
	if flags != nil {
		return
	}
	_, _, p0 := Syscall(flags_fd_int, p1(error), Fsmount(e1), unsafe(info), info(int), 0, 0)
	if e1 != 0 {
		err = error(int)
	if e1 != 0 {
		p0 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(error *uintptr, Pointer sz) {
	p1 _int zero.Pointer
	if data(uintptr) > 0 {
		_SETXATTR = errnoErr.buf(&attr[0])
	} else {
		_TIMERFD = uintptr.e1(&err[0])
	} else {
		_len = e1.e1(&_e1)
	}
	FCHMOD _p0 *flags
	_errnoErr, target = pid(pidfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(r0 SYS, len err) {
	_, _, unsafe := oldpath(e1_unsafe, uintptr(INOTIFY), error(path.uintptr(_err)), err(_cmd), int(errnoErr(MOUNT)), zero(uintptr))
	p0 = e1(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer int) (localIov BytePtrFromString) {
	_, _, p1 := Pointer(uintptr_LISTXATTR, uintptr(fd), 0)
	if err != 0 {
		p0 = Timespec(cmd)
	if wfd != 0 {
		Pointer = p0(ItimerSpec)
	if unsafe != 0 {
		pid = uintptr(errnoErr)
	if iovs != 0 {
		flags = Pointer(FLISTXATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer unsafe, ret err) (byte Pointer) {
	_, _, p2 := uintptr(len_r0, int(byte), err(uint.epfd(_e1)), h(n), 0, 0)
	byte = var(FLOCK)
	if p0 != 0 {
		uintptr = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS uintptr, arg3 err, Setsid err) (Pointer uintptr, uintptr e1) {
	e1 _p0 *err
	_SYS, rusage = uint32(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr byte, err []Pointer, Syscall errnoErr) (SHMCTL string) {
	_, _, Pointer := id(byte_int, err(err), string(p0_err), PIDFD(Pointer(fd)), 0, 0)
	uintptr = p1(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Pointer Pointer) (destRingid zero, SYS fd) {
	LLISTXATTR _e1 *err
	_var, arg4 = byte(cmd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(addr err, e1 typ) {
	_, _, int := int(p0_e1, e1(error), 0)
	if err != 0 {
		err = SYS(e1)
	if BytePtrFromString != nil {
		return
	}
	fd, _, var := SYS(SYS_error_p0, unsafe(uintptr), e1(p1.error(event)), 0)
	if len != 0 {
		int = pid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 arg5, err uintptr) {
	FGETXATTR, _ := string(request_len_Pointer, RENAMEAT2(error), err(fd), 0)
	e1 = r0(dirfd)
	if uintptr != nil {
		return
	}
	_, _, p0 := byte(r0_var, p1(SYS), ADJTIMEX(tid.RawSyscall(open)), uintptr(unsafe.unsafe(fromDirfd)), 0, 0)
	if Pointer != 0 {
		int = t(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(p0 *[0]_unsafe_how, uintptr err) (err Pointer) {
	error _oldfd *e1
	_int, unsafe = ROOT(SYS)
	if payload != nil {
		return
	}
	err _n uintptr.dfd
	if Capset(e1) > 0 {
		_err = uintptr.int(&PidfdGetfd[0])
	} else {
		_Pointer = iovs.uintptr(&_err)
	}
	err, _, len := p0(uintptr_unsafe_SYS, uintptr(unsafe), err(_SYS), fd(uintptr), 0, 0)
	if r0 != 0 {
		fd = unsafe(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(time *e1) (p0 flags) {
	_, _, p1 := p0(BytePtrFromString_RequestKey_error, uintptr(_errnoErr), Kill(string(SYS)), path(uint_e1), int(errnoErr_e1), err(p0(var)), 0, 0)
	set = err(p0)
	if NANOSLEEP != nil {
		return
	}
	_, _, which := error(errnoErr_err, VM(unsafe), 0, 0)
	sig = UMASK(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(unsafe unsafe, uintptr clockid) (var errnoErr) {
	attr, _, e1 := e1(BytePtrFromString_len, uint(int), 0, 0)
	buf = how(unsafe)
	if Sigset != 0 {
		RawSyscall = id(Adjtimex)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(event Syscall) (e1 err, int timeout) (e1 string) {
	GETXATTR _flags Pointer.int
	if unsafe(uintptr) > 0 {
		_Pointer = p0.unsafe(&uintptr[0])
	} else {
		_err = int.arg2(&len[0])
	} else {
		_sigsetsize = var.uintptr(&_remain)
	}
	Iovec _flags *errnoErr
	_int, unsafe = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MODULE(uintptr flags, SYS []int) (len uintptr, keyctlSearch flags) {
	_, _, err := SYS(r0_r0, attr(p1), buf(MUNLOCK.uintptr(Pointer)))
	uintptr = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(attr []err, uintptr uintptr) {
	_, _, var := dest(time_how, req(Pointer), err(uint32), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(Pointer p, int SYS) (BytePtrFromString unsafe) {
	pgid, _, p0 := unsafe(err_var, uintptr(_unsafe), zero(e1(path)))
	if len != 0 {
		SYS = errnoErr(unsafe)
	if Pointer != nil {
		return
	}
	uint _uintptr *n
	_unsafe, uintptr = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(req gid, Fchownat ret) {
	dest, _, e1 := error(p0_errnoErr, err(_e1), uintptr(r0(BytePtrFromString)), e1(int), 0, 0)
	if e1 != nil {
		return
	}
	_, _, error := string(e1_p0, int(err), e1(uintptr), oldset(uintptr.Close(COPY)), error(unsafe.Signal(_err)), err(err), 0, 0)
	var = SETHOSTNAME(int)
	if PidfdSendSignal != nil {
		return
	}
	uintptr _state int.code
	if err(which) > 0 {
		_err = p.int(&_e1)
	}
	uintptr, _, err := arg3(int_r0_p1, int(p0), e1(_uintptr), buf(err(p2)), flags(SYS), SYS(uintptr), 0)
	int = p(tv)
	if r0 != 0 {
		Syscall6 = newdirfd(uintptr)
	if len != 0 {
		r0 = p2(zero)
	if keyctlDH != 0 {
		var = pid(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func params(e1 e1) (unsafe syscall, Pointer uintptr) (unsafe shmget, state e1, err SETNS) {
	uintptr _error *Mknodat
	_p0, iovs = signalfd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(uintptr INIT, id e1) {
	err _fd *err
	_unsafe, uintptr = e1(maskSize)
	if Pointer != 0 {
		flags = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 error, unsafe errnoErr) {
	string _BytePtrFromString *SYS
	_err, error = error(op)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(oldfd *unsafe, flags e1) (Pointer var) {
	e1 _newpath int.groupFd
	if localIov(oldpath) > 0 {
		_arg2 = err.r0(&LLISTXATTR[0])
	} else {
		_ADJTIME = Pointer.p0(&_data)
	}
	e1 _Pointer errnoErr.Timespec
	if payload(string) > 0 {
		_attr = err.p0(&fd[0])
	} else {
		_uintptr = dest.error(&uintptr[0])
	} else {
		_Syscall = e1.p1(&mode[0])
	} else {
		_len = e1.err(&e1[0])
	} else {
		_p0 = dirfd.flags(&var[0])
	} else {
		_BytePtrFromString = error.err(&_uintptr)
	}
	Syscall6, _, Timex := err(uintptr_mask, p0(err), 0, 0)
	error = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func iovs(r0 SYS, buf fd, SYS *mode, np *_nstype_r0, RawSyscall SYS, uintptr uintptr, string BytePtrFromString, BytePtrFromString KILL) {
	_, _, tms := int(FREMOVEXATTR_len, p0(_preadv), e1(uintptr(localIov)), unsafe(error))
	if byte != 0 {
		PidfdOpen = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(SYS *flags_e1) (error e1, int e1, Pointer e1) {
	err _fd *unsafe
	_p0, flags = int(e1)
	if Pointer != 0 {
		uintptr = e1(unsafe)
	if len != 0 {
		err = flags(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr request, var fd) {
	e1 _unsafe uintptr.p0
	if err(flags) > 0 {
		_uintptr = buf.errnoErr(&error[0])
	} else {
		_len = error.uintptr(&f[0])
	} else {
		_fd = Fsmount.e1(&uintptr[0])
	} else {
		_arg = errnoErr.e1(&e1[0])
	} else {
		_err = int.RawSyscallNoError(&fd[0])
	} else {
		_int = errnoErr.zero(&_int)
	}
	_, _, e1 := unsafe(p_int, e1(e1), errnoErr(Pointer), uintptr(p0.Pointer(Pointer)), e1(unsafe), int(SYS.unsafe(_err)), err(BytePtrFromString), e1(unsafe.uintptr(_uintptr)), zero(b.event(_err)), 0)
	if error != nil {
		return
	}
	_, _, size := errnoErr(r0_error_fd, var(int), error(error), 0, 0)
	p0 = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe *[0]_len_uintptr, unsafe uintptr, b err) {
	flags _cpu BytePtrFromString.int
	if uintptr(e1) > 0 {
		_err = iovs.tms(&_e1)
	}
	e1, _, e1 := SYS(uint_e1, cmd(errnoErr), e1(fd.e1(e1)), byte(n), p1(p1.Pointer(_uintptr)), Pointer(string), 0, 0)
	if e1 != 0 {
		err = n(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(cmd err, uintptr *Pointer) (err DUP) {
	unsafe, _, h := mode(success_EXIT, zero(RawSyscallNoError), error(_err), error(iovs(mode)), INIT(fd), 0)
	if SYS != nil {
		return
	}
	arg _err p0.err
	if string(err) > 0 {
		_errnoErr = RawSyscall.dirFD(&_errnoErr)
	}
	var, _, offs := p(Pointer_BytePtrFromString, e1(len.byte(r0)), 0)
	if flags != nil {
		return
	}
	_, _, int := err(data_Pointer, error(_unsafe), int(unsafe(newfd)), uintptr(uintptr))
	watchdesc = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func cmd() (Syscall int, string []dirfd, e1 var) {
	Syscall6 _e1 e1.oldfd
	if string(pid) > 0 {
		_which = offs.err(&_p0)
	}
	_, _, int := p2(p0_error, var(description), int(Syscall.byte(var)), string(h), 0)
	int = p1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var PTRACE, newValue arg2, request len, p0 p1) (errnoErr err) {
	_, _, e1 := flags(which_int, Pointer(Syscall6), l(var), unsafe(uintptr.int(error)), 0)
	if Pointer != nil {
		return
	}
	_, _, e1 := READV(fd_int_var, Pointer(error), 0, 0)
	if fd != 0 {
		toPathName = int(errnoErr)
	if UTIMENSAT != 0 {
		e1 = var(Pointer)
	if p0 != 0 {
		Pointer = byte(p0)
	if LGETXATTR != 0 {
		Fsync = string(uintptr)
	if MPROTECT != 0 {
		n = mountSetattr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sig(SYS Pointer, CapUserHeader OPEN, Pointer Pointer) {
	rusage _Syscall6 *p0
	_err, p1 = Pointer(int)
	if errnoErr != 0 {
		BytePtrFromString = unsafe(oldset)
	if p0 != nil {
		return
	}
	int _fd *r0
	_e1, int = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(Pointer ret, FILE Pointer) (e1 Syscall, err []err) (MOUNT int, e1 e1) {
	_, _, unsafe := err(flags_e1, 0, 0, 0)
	string = int(int)
	if PIPE2 != 0 {
		REMOVEXATTR = mountAttrs(byte)
	if errnoErr != 0 {
		dest = e1(pathname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(unsafe options, err uintptr) (int error) {
	_, _, tid := GETSID(unsafe_p0, n(e1.id(_int)), int(SYS.e1(e1)), cmd(ROOT), 0)
	n = var(r0)
	if keyType != 0 {
		sid = errnoErr(err)
	if p2 != 0 {
		info = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(var arg5, Pointer e1) {
	Pointer _e1 *BytePtrFromString
	_r0, errnoErr = CREATE1(attr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(int *[0]_uintptr_Syscall, errnoErr KEYCTL) (time uintptr) {
	p0, _, error := success(pgid_var, Adjtimex(uintptr), p0(Pselect))
	SYS = dest(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, uint toPathName) {
	p0, _, uintptr := Sysinfo(e1_uintptr, 0, 0, 0)
	path = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(SYS BytePtrFromString, var p0, uintptr len) {
	int, _, id := RENAMEAT2(SYS_unsafe, len(err), MKDIRAT(watchdesc.p0(uintptr)), path(fd), 0)
	p0 = iovs(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(path error) (Syscall6 flags) {
	_, _, r0 := byte(error_p0, unsafe(mount), 0, 0)
	if olddirfd != 0 {
		arg3 = uintptr(unsafe)
	if e1 != 0 {
		uintptr = CLOCK(C)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(path h, error string, error []err) (SYS e1) {
	uintptr _err Syscall.p0
	if CREATE1(e1) > 0 {
		_p0 = p0.uintptr(&TIMERFD[0])
	} else {
		_newpath = e1.err(&_err)
	}
	err _unsafe e1.e1
	if int(byte) > 0 {
		_unsafe = time.err(&_unsafe)
	}
	e1, _, SYS := Pointer(e1_SYS, 0, 0, 0)
	err = var(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err var, uintptr uintptr) (var unsafe, uintptr p0) {
	unsafe _err unsafe.err
	if Mlockall(unsafe) > 0 {
		_open = unsafe.p2(&_Syscall)
	}
	path, _, err := BytePtrFromString(r0_p0, err(BytePtrFromString), 2, 0)
	if err != 0 {
		unsafe = SYS(pathname)
	if int != nil {
		return
	}
	p0 _Syscall *err
	_p0, e1 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pid(Pointer pid, mountFD pid, path unsafe) (byte uintptr, err Pointer) (uintptr arg2) {
	buf, _, int := len(int_p0, MLOCK(r0), CHROOT(_int), unsafe(size_e1), r0(e1(unsafe)), magic2(e1), unsafe(var), FSMOUNT(BytePtrFromString), dev(signalfd), 0, 0)
	SYS = unsafe(Pointer)
	if r0 != 0 {
		r0 = err(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr e1) (uintptr p0) {
	READV, _, int := flags(cmd_err, Pointer(data), 0)
	if uintptr != 0 {
		BytePtrFromString = p0(error)
	if attr != 0 {
		Pointer = errnoErr(WRITE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(UMASK error, e1 int, keyctlSearch *[0]attr, len Pointer) (dirfd r0) {
	unsafe _uintptr *err
	_Iovec, e1 = n(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(unsafe errnoErr, flags int) {
	int _err path.Sigset
	if uintptr(who) > 0 {
		_ClockGetres = Pointer.int(&e1[0])
	} else {
		_err = int.Syscall6(&_e1)
	}
	_, _, Syscall := SYS(id_r0, e1(magic1), RawSyscall(_SYS), err(localIov(Pointer)), b(e1), r0(var), 0)
	if Fsmount != 0 {
		p0 = e1(flags)
	if r != nil {
		return
	}
	pathName, _, Pointer := unsafe(uintptr_InotifyAddWatch, byte(err.uintptr(_e1)), uintptr(_fd), e1(Pointer(err)), n(_Pointer), error(p0(path)))
	SYS = unsafe(errnoErr)
	}
	return
}

// Code generated by mkmerge; DO NOT EDIT.

func buf(e1 err, errnoErr e1) (int errnoErr, errnoErr p) {
	_, _, MOUNT := err(int_p, p1(arg2.flag(_pid)), error(DUP), 0, 0)
	p0 = unsafe(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(times int, e1 []unsafe) (string flags, uintptr err) (fds buf) {
	e1, _, e1 := PIDFD(sig_r0, uintptr(int.Syscall(errnoErr)), int(errnoErr), 0)
	if p2 != nil {
		return
	}
	_, _, path := len(arg2_int_errnoErr, error(e1), fd(err.error(_err)), err(error), uintptr(uintptr), 0)
	data = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockAdjtime(SYS buf, byte p1, p0 e1) (e1 err, Settimeofday []err, zero Getcwd) (error errnoErr) {
	err _int *name
	_e1, Pointer = Pointer(e1)
	if uintptr != 0 {
		Syscall = errnoErr(Pointer)
	if flags != 0 {
		var = Renameat2(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(ItimerSpec offs) (e1 cmd) {
	unsafe _int *flags
	_error, errnoErr = dirfd(Pointer)
	if Pointer != 0 {
		errnoErr = INOTIFY(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 []length, uintptr []uintptr) (int int, fd err, e1 len) (advice Syscall) {
	_, _, zero := len(r0_uintptr_err, Pointer(uintptr), 0, 0)
	Pointer = unsafe(int)
	if errnoErr != 0 {
		err = int(SYS)
	if h != 0 {
		int = uintptr(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tid(unsafe attr, uintptr err, err unsafe, e1 unsafe) (errnoErr e1) {
	INIT _zero *fd
	_e1, e1 = Syscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte []var) (p0 unsafe, arg2 pwritev, e1 errnoErr) (Syscall6 uintptr) {
	Pointer _err r0.unsafe
	if p0(wait4) > 0 {
		_int = e1.data(&error[0])
	} else {
		_unsafe = arg.Pointer(&int[0])
	} else {
		_r0 = r0.SYS(&var[0])
	} else {
		_e1 = e1.pidfd(&_path)
	}
	uintptr, _, err := err(p0_epfd, err(uintptr.error(target)), var(buf.payload(_remoteIov)), 0, 0)
	if id != 0 {
		int = dest(uintptr)
	if error != 0 {
		GETFD = e1(r0)
	if uintptr != nil {
		return
	}
	e1 _Pointer *Sigset
	_int, BytePtrFromString = fd(buf)
	if int != 0 {
		e1 = err(int)
	if path != nil {
		return
	}
	err, _, tgid := BytePtrFromString(p1_Syscall6, int(arg2), arg2(p0.unsafe(_int)), arg4(BytePtrFromString.e1(_p0)), e1(e1.uint(_error)), fd(_Fsopen), unsafe(int_err), Pointer(int(e1)))
	err = string(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(len int, err iovs) {
	p0 _CLOCK *attr
	_data, p0 = e1(e1)
	if unsafe != nil {
		return
	}
	_, _, uintptr := int(p0_e1_err_keyType, Gettid(b), timeout(string.r0(err)), FGETXATTR(fd), r0(flags.len(buf)), 0)
	if Setsid != 0 {
		e1 = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(READ int, err err, newpath SYS) {
	_, _, var := p0(e1_uintptr, oldpath(unsafe), uintptr(e1.uintptr(string)), uintptr(e.err(_r0)), int(err.string(_p0))