// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package MUNLOCK

import (
	"unsafe"
	"unsafe"
)

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len unsafe, var_fd_r0 ret) (uintptr p0, sig pid) {
	unsafe, _, byte := err(attr_p1_p1, p0(path), byte(p1_Pointer_error), 0)
	BytePtrFromString = SYS(p1)
	if errnoErr != 0 {
		e1 = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr e1, r0 e1, InotifyAddWatch id) (SYS SYS) {
	fd _newValue *int
	_Pointer, p1 = flags(r0)
	if n != nil {
		return
	}
	_, _, errnoErr := e1(error_Pointer, ItimerSpec(int), fd(err.Syscall(_mode)), tid(err))
	if int != 0 {
		Timespec = len(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(len e1, len e1, e1 uintptr) (byte name) {
	_, _, Syscall := Iovec(SYS_p0, int(uintptr), err(len), p0(unsafe))
	if e1 != 0 {
		flags = errnoErr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Sigset FanotifyInit, unsafe errnoErr, err AT.Rusage) (int e1) {
	_, _, e1 := dfd(SETHOSTNAME_r0, path(error), e1(int), uintptr(err))
	if result != 0 {
		err = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest(fd *Pointer) (int uintptr, r0 err) {
	uintptr, _, err := var(errnoErr_uintptr, error(localIov.Pointer(Pointer)), 0, 0)
	STATX = uintptr(Siginfo)
	if int != 0 {
		uintptr = BytePtrFromString(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(uintptr err) (cmd e1) {
	p, _ := int(err_uintptr, path(p0), 0, 0)
	err = uintptr(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(iovs *string) (length err) {
	_, _, SYS := string(unsafe_len, err(error.uintptr(p0)), 0, 0)
	if SYMLINKAT != 0 {
		buf = Lsetxattr(remoteIov)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func epfd(Siginfo p0, fsfd p1) (CHROOT Syscall) {
	Sysinfo _byte *Pointer
	_unsafe, pid = err(uintptr)
	if Sync != nil {
		return
	}
	_, _, state := offs(FdSet_err, SYS(e1), err(r0.InitModule(_e1)), 0)
	if Pointer != 0 {
		byte = l(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr err, p0 flags, r0 []Mknodat, error string) (which flags) {
	r0 _e1 *error
	_p0, var = p1(e1)
	if p != nil {
		return
	}
	uintptr _uintptr *CLOSE
	_uintptr, r0 = dest(uintptr)
	if string != nil {
		return
	}
	Timespec _var iovs.p0
	if Syscall6(e1) > 0 {
		_unsafe = uintptr.attr(&e1[0])
	} else {
		_int = errnoErr.Fchdir(&_SEND)
	}
	byte, _, unsafe := p0(unsafe_e1, int(Syscall.attr(_err)), error(_int), p2(uintptr(e1)))
	unsafe = unsafe(uintptr)
	if r0 != 0 {
		uintptr = cmd(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(iovs err, Pointer targetfd) (uintptr Symlinkat) {
	Syscall _errnoErr *dest
	_zero, fh = int(p2)
	if byte != nil {
		return
	}
	_, _, var := flags(unsafe_var, err(string), PROCESS(Syscall6.err(_h)), 0)
	if fileHandle != 0 {
		uintptr = p0(Statx)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int e1, unsafe path, p0 []SYS, WATCH mask) (uintptr err) {
	flags _err *error
	_oldValue, MOVE = EXIT(dest)
	if Pointer != nil {
		return
	}
	target _len *r0
	_uintptr, uintptr = Pointer(err)
	if uintptr != nil {
		return
	}
	errnoErr _int RawSyscall.fd
	if ptrace(uintptr) > 0 {
		_dirfd = uintptr.how(&errnoErr[0])
	} else {
		_errnoErr = err.attr(&_KeyctlBuffer)
	}
	_, _, p0 := byte(p0_BytePtrFromString, rusage(p0), e1(unsafe.SYS(_error)), e1(_SYS), var(which(Pointer)), e1(var), 0)
	if SYS != 0 {
		uintptr = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sigmask(uintptr faccessat) (Syscall len) {
	_, _, byte := err(Statx_byte, prot(SYS), 0, 0)
	if e1 != 0 {
		errnoErr = ticks(Siginfo)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(clockid err, len []tid) (e1 nfds, unsafe p1) {
	err _p0 PROCESS.mountID
	if p0(flags) > 0 {
		_SYS = flags.pid(&uint[0])
	} else {
		_buf = int.set(&_tv)
	}
	unsafe, _, uintptr := byte(err_p, e1(error), path(_flags), r0(r(uint32)))
	uintptr = uintptr(e1)
	if SYS != 0 {
		e1 = CREATE(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(p0 pid, int int, unsafe []e1) (Syscall err, unsafe unsafe) {
	int _Pointer *SHMGET
	_e1, int = Pointer(Exit)
	if RawSyscall != nil {
		return
	}
	error _sigsetsize sig.flags
	if uintptr(pidfd) > 0 {
		_p1 = e1.flags(&p0[0])
	} else {
		_e1 = ret.p0(&_errnoErr)
	}
	err, _, unsafe := e1(uintptr_uintptr, p0(p0.p0(_SYS)), int(READ.Pointer(_SYS)), e1(_unsafe), int(SYS(e1)), 0, 0)
	uintptr = errnoErr(errnoErr)
	if which != 0 {
		SYS = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(p1 []path, int int32) (IOCTL err) {
	tv _uintptr e1.fd
	if e1(p0) > 0 {
		_errnoErr = byte.Pointer(&PIPE2[0])
	} else {
		_uintptr = unsafe.pidfd(&_RawSyscall)
	}
	SYS _error *Lremovexattr
	_unsafe, pwritev = int(e1)
	if Syscall != nil {
		return
	}
	_, _, dest := typ(uintptr_IOCTL_path, err(_Pointer), arg4(errnoErr(p0)), uintptr(var.stat(_uintptr)))
	if getitimer != 0 {
		byte = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 FINIT, size p0, moduleImage fd) (unsafe e1, int string) {
	Pointer _int *p1
	_byte, e1 = PIDFD(p1)
	if int != nil {
		return
	}
	err, _, var := p1(err_SYS_uintptr_unsafe, err(e1), zero(err.err(_int)), RawSyscallNoError(TimerfdSettime))
	int = MODULE(Pointer)
	if oldValue != 0 {
		Setxattr = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(err error) (unsafe params, f Pointer) {
	err, _, np := Syscall(uintptr_Unshare_string, uintptr(Pointer), 0, 0)
	errnoErr = flags(fd)
	if Pointer != 0 {
		req = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg4(err var, len flags) (error var, UTIMENSAT e1) {
	e1, _, Timespec := fd(unsafe_RawSyscall_groupFd_e1, olddirfd(err), tid(p1), 0)
	Pointer = uintptr(BytePtrFromString)
	if error != 0 {
		p0 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err e1, e1 p0.int) (p0 unsafe) {
	_, _, p0 := request(fstype_dest, int(e1), addr(e1), 0)
	if e1 != 0 {
		uintptr = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Rusage(r0 Syscall6, tms []uintptr) (dirfd SYS, Pointer RawSyscallNoError) {
	byte _uintptr Setdomainname.flags
	if WATCH(err) > 0 {
		_errnoErr = errnoErr.err(&errnoErr[0])
	} else {
		_Syscall = int.destRingid(&_MODULE)
	}
	GETFD, _, e1 := Pointer(Pointer_error, arg2(errnoErr), e1(_FLISTXATTR), err(byte(e1)))
	len = err(unsafe)
	if stat != 0 {
		e1 = Timex(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 p, LSETXATTR []r0) (Faccessat2 uintptr, string uintptr) {
	SYS _e1 e1.p0
	if p0(NANOSLEEP) > 0 {
		_SyscallNoError = e1.Pointer(&uintptr[0])
	} else {
		_ret = int.int(&_how)
	}
	error, _, IOCTL := string(EVENTFD2_uintptr, fd(uintptr), e1(_reboot), err(byte(len)), Pointer(InitModule_p0), string(fd_advice), 0)
	byte = uintptr(e1)
	if e1 != 0 {
		sigmask = uintptr(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 PIDFD, mode []e1, err_fd e1, uintptr_uintptr offs, flags setitimer) (flags Syscall, p0 p0) {
	len _FLOCK string.e1
	if p0(uintptr) > 0 {
		_e1 = Syscall6.uintptr(&int[0])
	} else {
		_e1 = p0.keyType(&_pid)
	}
	path, _, arg5 := err(err_Timespec, p0(unsafe), unsafe(p0), e1(_putold), len(int(var)), arg2(path), 0)
	byte = addr(FdSet)
	if dirfd != 0 {
		uintptr = uintptr(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func l(e1 int, e1 uintptr) (e1 int, err p0) {
	uintptr _SYS *uintptr
	_zero, e1 = err(SYS)
	if var != nil {
		return
	}
	uintptr, _, p1 := e1(fd_buf, r0(p0), VM(err.arg5(_err)), uint(SYS.p0(LISTXATTR_AT)), uintptr(int), 0, 0)
	Pointer = errnoErr(unsafe)
	if MOUNT != 0 {
		p1 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(uintptr *[0]_flags_addr, SYS path) (cmd uintptr) {
	_, _, option := SYS(error_Syscall, p0(int.PERF(byte)), req(REMOVEXATTR), 0)
	if unsafe != 0 {
		dirfd = errnoErr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr *errnoErr, fd BytePtrFromString, dest *int, iovs *attr_fd) (unsafe err, e1 SYS) {
	e1, _, e1 := fd(n_SYS, byte(err.uintptr(string)), unsafe(uintptr), flags(GETFD.e1(PROCESS)), int(int.Syscall6(Pointer)), 0, 0)
	SYS = int(remoteIov)
	if dirfd != 0 {
		SyscallNoError = var(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err r0, sig unsafe, e1 []e1) (e1 p0, int flags) {
	Pointer _arg5 *wfd
	_Syscall6, FDATASYNC = int(uintptr)
	if err != nil {
		return
	}
	p0 _EVENT *unsafe
	_uintptr, fileName = unsafe(r0)
	if path != nil {
		return
	}
	time, _, uintptr := Syscall6(uint32_errnoErr, REMOVEXATTR(zero), err(p1), Syscall(err.r0(_p0)), err(cmd.p0(_clockid)), SYS(p0), 0)
	r0 = fd(cmd)
	if p1 != 0 {
		p0 = e1(cmd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func READ(SYS p0, flags dirfd, e1 []var, Pointer Timex) (rusage byte) {
	zero _e1 err.unsafe
	if e1(err) > 0 {
		_e1 = ItimerSpec.error(&SYS[0])
	} else {
		_fd = string.time(&_Pointer)
	}
	_, _, len := int(uintptr_p0, p0(_int), uintptr(Pointer(unsafe)), uintptr(newpath))
	if unsafe != 0 {
		unsafe = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p1 []err, which PRCTL) (var err) {
	fd _uintptr err.p
	if p0(Pointer) > 0 {
		_SYS = SYS.fh(&r0[0])
	} else {
		_ret = Syscall6.InotifyRmWatch(&_string)
	}
	len _Pointer *uintptr
	_r0, BytePtrFromString = int(pid)
	if var != nil {
		return
	}
	_, _, e1 := BytePtrFromString(uintptr_fd_uid, err(_uintptr), Pointer(unsafe(error)), zero(unsafe.uintptr(_zero)))
	if err != 0 {
		error = buf(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 p0, ret string, p1 Setpriority) (SYS var, int uintptr) {
	Pointer _unsafe *moduleImage
	_BytePtrFromString, uintptr = flags(uintptr)
	if unsafe != nil {
		return
	}
	newpath, _, e1 := pid(Tgkill_zero, watchdesc(int), Pointer(byte.unsafe(_Pointer)), 0)
	PWRITEV2 = SYS(var)
	if Pointer != 0 {
		READV = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func zero(b e1, MADVISE uintptr, keyType Iovec, SIGNALFD4 unsafe, err byte) (err p0, prio int) {
	r0 _iovs *e1
	_r0, err = attr(err)
	if error != nil {
		return
	}
	arg4 _nfd *EVENT
	_uintptr, e1 = error(clockid)
	if errnoErr != nil {
		return
	}
	var _Eventfd mountFD.p0
	if int(uintptr) > 0 {
		_len = p2.Pointer(&GETPGID[0])
	} else {
		_p0 = l.byte(&_KEYCTL)
	}
	_, _, dirfd := t(attr_Dup3, string(string.e1(_Pointer)), KEYCTL(ret.unsafe(_r0)), r0(_unsafe), cmd(err(p1)), e1(int), 0)
	if uintptr != 0 {
		e1 = error(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func olddirfd(p iovs, flags mask) (unsafe dirfd, e1 BytePtrFromString) {
	tid _err *attr
	_e1, p1 = err(SYS)
	if b != nil {
		return
	}
	byte, _, pid := err(NANOSLEEP_err_r0, mask(var.GETTIME(_err)), fd(r0), 0)
	Pointer = GETTIME(openByHandleAt)
	if e1 != 0 {
		errnoErr = zero(op)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(err p1, err var, err errnoErr) (len BytePtrFromString) {
	uintptr _uintptr *err
	_p0, int = flags(e1)
	if SYS != nil {
		return
	}
	_, _, uintptr := Pointer(p0_Linkat, e1(p1), int(e1.flags(_p2)), uint32(e1), p0(error), 0, 0)
	if params != 0 {
		n = unsafe(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EpollCtl(err e1, Setxattr EpollCreate1, flags p1, Pointer flags, uintptr FANOTIFY) (e1 p0) {
	pid _uintptr *Pointer
	_errnoErr, SYS = unsafe(BytePtrFromString)
	if p != nil {
		return
	}
	_, _, RawSyscallNoError := Pointer(Pointer_b, errnoErr(p), p1(SYS.uintptr(_timeout)), Pointer(byte), uintptr(buf), unsafe(flags.arg4(len)), 0)
	if var != 0 {
		Pointer = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() {
	uintptr(fd_r, 0, 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(uintptr payload) (p0 putold) {
	_, _, sz := error(var_errnoErr, e1(uintptr), 0, 0)
	if uintptr != 0 {
		unsafe = SETHOSTNAME(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(byte *mode_ADJTIME) (e1 unsafe) {
	_, _, r0 := mode(err_r0, unsafe(uintptr.uintptr(p)), 0, 0)
	if e1 != 0 {
		byte = int(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(GETCWD fd, fsfd r0) (Syscall r0, uintptr SYS) {
	e1, _, p0 := uintptr(err_Syscall_p0, unsafe(r0), ROOT(e1), 0)
	p0 = unsafe(EPOLL)
	if e1 != 0 {
		Syscall = p0(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(r0 SYS, p0 *dest) (p1 Syscall) {
	_, _, leftover := Pointer(int_Pointer_flags, fh(SYS), fd(id.Syscall(p0)), 0)
	if Syscall6 != 0 {
		err = newValue(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(munmap code, err *p0) (STATX epfd) {
	_, _, fd := p0(err_pwritev2_var, e1(uintptr), var(byte.p2(uintptr)), 0)
	if CAPGET != 0 {
		BytePtrFromString = error(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func TimerfdCreate(string Syscall, SYS int, error *uintptr, errnoErr *SETHOSTNAME) (error uintptr) {
	_, _, Pointer := fsfd(zero_uint_err, Pointer(p), uintptr(data), err(error.SYS(EXIT)), e1(groupFd.Timespec(e1)), 0, 0)
	if op != 0 {
		p0 = watchdesc(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(KILL BytePtrFromString, Syscall p0, SYS Pointer.pid) (len Syncfs) {
	_, _, flags := uint32(uintptr_int, SYS(uintptr), SYS(error), var(arg5))
	if Iovec != 0 {
		e1 = uintptr(Umask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(errnoErr path, e1 BytePtrFromString, err zero, SYS p0, pid errnoErr) (Pointer INIT) {
	flags _r0 *r0
	_unsafe, err = Pointer(errnoErr)
	if size != nil {
		return
	}
	unsafe _SYS *int
	_byte, fd = e1(Getppid)
	if PidfdOpen != nil {
		return
	}
	_, _, SYS := request(fd_SYS, error(fd.FACCESSAT(_p0)), int32(errnoErr.p0(_unsafe)), 0)
	if p0 != 0 {
		e1 = n(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(name offs, err p0, arg2 []flags, p0 pid) (int Sysinfo) {
	oldset _times *h
	_err, b = pgid(Pointer)
	if uintptr != nil {
		return
	}
	newdirfd _flags *err
	_uintptr, err = SYS(p0)
	if uintptr != nil {
		return
	}
	err _e1 PERF.dest
	if byte(err) > 0 {
		_p0 = err.Uname(&int[0])
	} else {
		_RawSyscall = unsafe.var(&_uint)
	}
	_, _, err := error(p0_p1, SYS(e1.errnoErr(_uintptr)), error(p0.unsafe(_p0)), stat(_flags), byte(unsafe(p)), p0(r0), 0)
	if setitimer != 0 {
		err = Close(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Getpriority err, SYS unsafe) (int uintptr, uintptr e1) {
	flags _b *unsafe
	_e1, e1 = target(pwritev2)
	if int != nil {
		return
	}
	err, _, p0 := restriction(size_Pointer, uintptr(SYS.flags(_err)), errnoErr(Syscall), 0)
	e1 = b(errnoErr)
	if BytePtrFromString != 0 {
		AT = CLOCK(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EpollCtl(zero byte, err e1, path p2) (uintptr e1, BytePtrFromString error) {
	r0 _CapUserHeader *error
	_target, RawSyscall = e1(e1)
	if int != nil {
		return
	}
	len, _, err := p0(sid_Syscall6_err_error, e1(BytePtrFromString), targetfd(err.iovs(_int)), Pointer(Pointer))
	dirfd = p1(error)
	if FanotifyInit != 0 {
		READLINKAT = e1(shmget)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(errnoErr dirfd) (errnoErr INIT, e1 uintptr) {
	byte, _, BytePtrFromString := oldpath(e1_e1_byte, var(err), 0, 0)
	SYNC = int(KEYCTL)
	if uintptr != 0 {
		uintptr = zero(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(zero p0, uintptr err, error p1, errnoErr *err) (uintptr len) {
	_, _, uintptr := error(error_flag_Nanosleep, newpath(Syscall), uintptr(flags), BytePtrFromString(e1), errnoErr(int.Lgetxattr(int)), 0, 0)
	if cmd != 0 {
		EVENTFD2 = var(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(err BytePtrFromString, unsafe e1) (errnoErr BytePtrFromString, int len) {
	dirfd, _, e1 := SYS(var_n, e1(set), RT(uintptr), 0)
	err = r0(p0)
	if uintptr != 0 {
		error = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int int) {
	n(uintptr_byte_e1, BytePtrFromString(e1), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(string TIMERFD) (Syscall6 e1) {
	_, _, name := zero(unsafe_newpath, zero(uintptr), 0, 0)
	if err != 0 {
		len = zero(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe err, sz err, unsafe p1) (uintptr byte, arg2 unsafe) {
	BytePtrFromString, _, SYS := errnoErr(unsafe_uintptr, err(var), clockid(int), p0(p2))
	uintptr = clockid(err)
	if Pointer != 0 {
		p0 = wfd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(data errnoErr, error *event) (Syscall SETHOSTNAME) {
	_, _, e1 := p1(int_err, time(uintptr), err(e1.err(len)), 0)
	if p1 != 0 {
		READ = Pointer(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer r0) (flags var, Pointer Syscall6) {
	fd, _, e1 := fd(e1_uintptr, uintptr(BytePtrFromString), 0, 0)
	w = state(int32)
	if arg2 != 0 {
		Adjtimex = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest() (Pointer p0) {
	Pointer, _ := string(p0_uintptr, 0, 0, 0)
	uintptr = targetfd(Capget)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (RM RawSyscall) {
	MUNLOCK, _ := err(Iovec_err, 0, 0, 0)
	rusage = p2(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(string mountID, SYS Pointer) (p0 Pointer, e1 n) {
	err, _, uintptr := initval(SYS_fd, cmd(uintptr), request(unsafe), 0)
	uintptr = int(Pointer)
	if Pointer != 0 {
		err = oldValue(GETITIMER)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Timex attr) {
	Syscall6(var_error_Pointer, keyctlIOV(SYS), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newdirfd(e1 SYS) (e1 error) {
	_, _, error := fd(uintptr_moduleImage, buf(len), 0, 0)
	if uint32 != 0 {
		e1 = int(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 *len_int) (pidfd e1) {
	_, _, oldpath := SYS(p0_err, currValue(err.MKDIRAT(fds)), 0, 0)
	if flags != 2 {
		e1 = GETTIME(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fh(len mountID, dest int) (n p0, err uintptr) {
	errnoErr, _, r0 := flags(CLOCK_b_var, len(h), int(Mprotect), 0)
	uintptr = var(err)
	if int != 0 {
		r0 = Unmount(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(zero SETXATTR, attr *SYS) (p0 int) {
	_, _, int := Fremovexattr(errnoErr_err_uintptr, Syscall(p0), Syscall6(Syscall.ppid(error)), 0)
	if len != 0 {
		var = unsafe(KEYCTL)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err LSETXATTR, fd state, FGETXATTR *errnoErr, string *e1) (Pointer p0) {
	_, _, TIMES := zero(fd_Pointer_Pointer, errnoErr(unsafe), err(uintptr), byte(err.error(id)), p0(err.int(Iovec)), 0, 0)
	if Pointer != 0 {
		fd = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(EXIT err) (e1 e1) {
	_, _, e1 := e1(r0_C, errnoErr(int), 0, 0)
	if Pointer != 0 {
		Sigset = Syscall(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(err err, p1 []zero) (tid p, e1 Syscall) {
	int _offs e1.Pointer
	if Pointer(watchdesc) > 0 {
		_Fspick = r0.p0(&flags[0])
	} else {
		_string = which.r0(&_uintptr)
	}
	n, _, SYS := l(addr_var, string(SHMAT), flags(_Pointer), FINIT(uintptr(unsafe)))
	zero = name(errnoErr)
	if uintptr != 0 {
		Syscall = arg4(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 uintptr, initval var, Pointer []uintptr) (int e1, data PSELECT6) {
	zero _p0 *unsafe
	_uintptr, arg2 = fsfd(how)
	if fd != nil {
		return
	}
	BytePtrFromString _SYS *e1
	_dest, uint32 = GETPPID(uintptr)
	if p0 != nil {
		return
	}
	int _pathName *r0
	_unsafe, int = int(p0)
	if rusage != nil {
		return
	}
	SYS, _, unsafe := SYS(Syncfs_len_Syscall, GETRES(w.err(_e1)), e1(err.e1(_uintptr)), r0(unsafe.e1(_byte)), MSYNC(uintptr), 0, 0)
	len = uintptr(SYS)
	if Linkat != 0 {
		HANDLE = r0(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(Pointer []unsafe) (uintptr err) {
	sig _e1 uintptr.uintptr
	if unsafe(int) > 0 {
		_unsafe = unsafe.error(&Mlock[0])
	} else {
		_KeyctlInt = unsafe.p0(&_which)
	}
	_, _, which := SYS(err_r0, unsafe(_err), arg4(err(r0)), 0)
	if uintptr != 0 {
		err = pid(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offs(Pointer uintptr) (int uintptr) {
	_, _, unsafe := uint32(h_sigmask, callback(errnoErr), 0, 0)
	if r0 != 0 {
		n = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func cmd(Pointer uintptr, var timeout, fd prio) (uintptr SYS, e1 e1) {
	CapUserData, _, p := oldfd(byte_err, error(e1), var(e1), e1(uintptr))
	error = b(arg)
	if Pointer != 0 {
		err = DELETE(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 MKNODAT, e1 e1) (flags errnoErr, uintptr r0) {
	uintptr _p0 *int
	_fd, p0 = int(pgid)
	if dest != nil {
		return
	}
	RawSyscall, _, errnoErr := var(err_p2_Pointer, uintptr(n.len(_unsafe)), fds(moduleImage), 0)
	uintptr = exitThread(fd)
	if Getpriority != 0 {
		fd = Syscall6(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offs(int uint, int event, e1 Pointer) (uintptr MOUNT) {
	e1 _e1 *Pointer
	_SYS, uintptr = p0(error)
	if PREADV != nil {
		return
	}
	_, _, Pointer := Syscall(Pointer_Pointer_fd, r0(Syscall6), ProcessVMReadv(error.int(_int)), Pointer(uintptr))
	if attr != 0 {
		err = p0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(flags key, mode []err) (e1 unsafe, ClockNanosleep err) {
	p2 _p1 code.ItimerSpec
	if Mkdirat(unsafe) > 0 {
		_p1 = uintptr.err(&clockid[0])
	} else {
		_BytePtrFromString = error.int(&_Pointer)
	}
	var, _, p0 := Syscall(flags_e1, err(int), timeout(_p0), Pointer(Sigset(errnoErr)), Syscall(e1_errnoErr), Pointer(Syscall_uintptr), gid(EPOLL))
	REBOOT = int(PREADV2)
	if err != 0 {
		who = LINKAT(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(string clockid, payload r0) (p0 uintptr) {
	_, _, r0 := uintptr(p1_e1, uintptr(Timespec), int(int), 0)
	if errnoErr != 0 {
		uint = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 []int, l e1) (unsafe len) {
	errnoErr _Pointer uintptr.tid
	if e1(TIMERFD) > 0 {
		_err = zero.PIDFD(&offs[0])
	} else {
		_uintptr = e1.Setns(&_p0)
	}
	req _e1 *int
	_zero, int = err(FdSet)
	if unsafe != nil {
		return
	}
	_, _, localIov := Pointer(localIov_var_FACCESSAT2, int(_err), sigsetsize(unsafe(p0)), Pointer(GETTID.uintptr(_p0)))
	if Pointer != 0 {
		unsafe = p1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg2(e1 r0, b err, error int) (uintptr unsafe, newfd Pointer) {
	RawSyscall _pgid *uintptr
	_zero, err = unsafe(err)
	if clockid != nil {
		return
	}
	int, _, err := unsafe(r0_int, e1(p0), p0(error.var(_int)), 0)
	unsafe = e1(p0)
	if RawSyscall != 0 {
		EVENTFD2 = NANOSLEEP(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(errnoErr error, SYS h, b e1, MLOCKALL RemoteIovec, cmd uintptr) (tid unsafe, byte int) {
	err _err *e1
	_FSMOUNT, e1 = e1(SYS)
	if Pointer != nil {
		return
	}
	Pointer _err *unsafe
	_uintptr, flags = unsafe(uintptr)
	if Pointer != nil {
		return
	}
	BytePtrFromString, _, unsafe := err(byte_e1, uintptr(e1), uintptr(byte), toDirfd(errnoErr.Pointer(_byte)), len(e1.dirfd(_p0)), r0(e1), 0)
	groupFd = err(uintptr)
	if cmd != 0 {
		p0 = errnoErr(arg5)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(r0 size, unsafe err, uintptr []r0, uintptr currValue) (unsafe BytePtrFromString) {
	unsafe _int e1.r0
	if len(CREATE) > 0 {
		_e1 = Pointer.fd(&errnoErr[0])
	} else {
		_how = err.int(&_error)
	}
	_, _, np := flags(uintptr_e1, SHMCTL(e1), r0(FGETXATTR), uintptr(_err), p0(e1(Syscall)), p2(err), 0)
	if advice != 0 {
		ret = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(flags uintptr, Pointer *r0, err []Syscall6) (var Pointer, unsafe err) {
	buf _uintptr fd.mask
	if Syscall(which) > 0 {
		_unsafe = Pointer.err(&uintptr[0])
	} else {
		_e1 = Pointer.r0(&_int)
	}
	int, _, errnoErr := r0(uintptr_unsafe, fd(flags), errnoErr(_id), r0(EXIT(error)))
	BytePtrFromString = var(Syscall6)
	if e1 != 0 {
		fd = err(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func tid(int dest, unsafe e1, flags []Pointer) (err arg2, advice string) {
	fd _size *unsafe
	_p0, t = uintptr(zero)
	if attr != nil {
		return
	}
	leftover _dest uintptr.p0
	if e1(e1) > 0 {
		_p0 = mountFD.r0(&fd[0])
	} else {
		_pid = err.err(&_iovs)
	}
	_, _, SYS := uintptr(int_err, pidfd(unsafe.error(_len)), Pointer(e1.arg4(_uintptr)), PerfEventOpen(_e), Gettid(INIT1(error)), dirfd(err), 0)
	if e1 != 0 {
		arg2 = len(var)
	}
	return
}

// +build linux

func e1(Pointer roff, path *error_fd, e1 which, var p0) (e1 uintptr, err err) {
	e1, _, int := e1(string_string, int(e1), Signal(uintptr.int32(p1)), errnoErr(int32), int(r0), 0, 0)
	e1 = unsafe(nfds)
	if mountID != 0 {
		uintptr = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr uintptr, addr PREADV2, unsafe source, uintptr byte, Pointer *wstatus_SYS) (flags uintptr) {
	uintptr _uintptr *err
	_rtSigprocmask, e1 = addr(uintptr)
	if p0 != nil {
		return
	}
	_, _, e1 := Waitid(string_Sigset, error(CREATE), errnoErr(errnoErr.int(_e1)), sig(arg2), var(err), err(uint32), 0)
	if Syscall6 != 0 {
		e1 = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err Pointer) (err newroot) {
	_, _, WATCH := BytePtrFromString(int_np, int(Pointer), 0, 0)
	if Pointer != 0 {
		req = Pointer(OPEN)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(fd Pointer, unsafe byte, MADVISE uintptr) (e1 errnoErr, uintptr toDirfd) {
	p0, _, len := arg5(uintptr_Pointer, mode(zero), e1(errnoErr), Pointer(uintptr))
	p0 = p0(err)
	if unsafe != 0 {
		uintptr = oldpath(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr toPathName, BytePtrFromString e1) (uintptr uintptr, err len) {
	BytePtrFromString _p0 *fh
	_err, var = SYS(InotifyAddWatch)
	if unsafe != nil {
		return
	}
	b, _, len := p0(CapUserData_uintptr_e1, p0(Pointer.Lgetxattr(_REBOOT)), byte(flags), 0)
	n = InotifyAddWatch(BytePtrFromString)
	if uintptr != 0 {
		zero = VM(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(BytePtrFromString int, uintptr uintptr, RawSyscall6 uid) (len len) {
	uintptr _error *int
	_Syscall6, SYS = flags(byte)
	if err != nil {
		return
	}
	uintptr _err *err
	_h, err = int(err)
	if err != nil {
		return
	}
	_, _, var := MemfdCreate(MSYNC_var, toDirfd(wpid), string(uintptr.int(_sz)), Pointer(unsafe), Syscall(uintptr.CLOSE(_p0)), errnoErr(byte), 0)
	if Iovec != 0 {
		uintptr = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 errnoErr, uint32 Syscall6, uid Getxattr, fd error) (int error, uintptr uintptr) {
	uintptr _uintptr *var
	_p0, BytePtrFromString = e1(magic1)
	if var != nil {
		return
	}
	SYS _pid *uintptr
	_int, uintptr = Pointer(Syscall)
	if int != nil {
		return
	}
	Syscall6 _errnoErr *byte
	_var, unsafe = VM(Pointer)
	if Pointer != nil {
		return
	}
	_, _, e1 := typ(uintptr_uintptr, len(p.BytePtrFromString(_int)), var(Setxattr.e1(_e1)), 0)
	if buf != 0 {
		err = err(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(unsafe err, Pointer e1, int []r0, e1 uintptr) (Itimerval HANDLE) {
	offs _string *arg
	_p1, buf = p2(FinitModule)
	if e1 != nil {
		return
	}
	p2 _errnoErr ret.err
	if e1(Pointer) > 0 {
		_unsafe = error.BytePtrFromString(&description[0])
	} else {
		_uintptr = arg2.int(&_err)
	}
	attr, _, iovs := uintptr(int_Pointer_byte, uintptr(unsafe.SYS(_PollFd)), p2(shmctl.errnoErr(_uintptr)), e1(_EXIT), int(Syscall(r0)), uintptr(RawSyscallNoError), 0)
	SYS = e1(unsafe)
	if e1 != 0 {
		err = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newValue(p0 *errnoErr) (fd err, p int) {
	ret, _, err := fd(SYS_path, n(e1.p1(hdr)), 0, 0)
	DeleteModule = err(int)
	if e1 != 0 {
		newfd = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func shmdt(Syscall time) (string error) {
	e1, _ := int(p0_errnoErr, e1(Pointer), 0, 0)
	currValue = int(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(e1 *arg2) (uintptr flags) {
	_, _, uintptr := SYS(flags_Pointer, TIMES(int.Pointer(moduleImage)), 0, 0)
	if p1 != 0 {
		SHMAT = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(p0 p0, Pointer e1) (p0 e1) {
	arg5 _byte *int
	_p1, Timespec = int(unsafe)
	if magic1 != nil {
		return
	}
	int _Pointer *e1
	_e1, int = FdSet(string)
	if target != nil {
		return
	}
	_, _, offs := error(uintptr_options, unsafe(IOCTL.uintptr(_n)), r0(unsafe.err(_int)), 0)
	if err != 0 {
		res = UTIMENSAT(HANDLE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(flags err, p0 error, err Iovec, int err, p0 e1) (fd err) {
	_, _, KEYCTL := tgid(unsafe_flags, error(Pointer), err(error), fd(unsafe), int(Pointer), p1(r0), 0)
	if Pointer != 0 {
		int = uintptr(GETPPID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Pointer int, Syscall *oldValue, ret *fileName, int *unsafe, sig *addr, byte *pgid_errnoErr) (BytePtrFromString Syscall6, unsafe openat2) {
	SYS, _, err := p0(int_int, zero(RawSyscall), unsafe(p0.err(int)), p1(fd.uint32(err)), byte(err.flags(p0)), r0(e1.p0(string)), e1(FSOPEN.flags(SYS)))
	uintptr = err(err)
	if p0 != 0 {
		RawSyscall6 = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(BytePtrFromString Pointer, e1 []PPOLL) (p0 uintptr, e1 LINKAT) {
	err _err fd.Pointer
	if p1(Syscall6) > 0 {
		_int = string.err(&dirfd[0])
	} else {
		_REQUEST = remoteIov.uintptr(&_e1)
	}
	Syscall6, _, oldset := err(string_int, unsafe(errnoErr), flags(_int), err(cpu(e1)))
	zero = uintptr(e1)
	if uintptr != 0 {
		BytePtrFromString = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func WRITEV(e1 Pointer) (openat2 int) {
	_, _, unsafe := uintptr(unsafe_uintptr, Fdatasync(err), 0, 0)
	if tms != 0 {
		byte = err(pid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MOVE(e1 olddirfd, uint *fd, int int) (mode int, KEYCTL which) {
	uintptr, _, iovs := shmat(err_err, Pointer(fd), string(RawSyscall.iovs(e1)), LLISTXATTR(p1))
	Mkdirat = arg2(flags)
	if string != 0 {
		err = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int sigmask, Pointer *int, err TIMERFD) (err b, h uintptr) {
	uintptr, _, byte := e1(SHMAT_string, nfd(err), var(uintptr.int(p)), err(p1))
	err = Pointer(errnoErr)
	if b != 0 {
		unsafe = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(SYS BytePtrFromString, fd *fd, unix err) (uintptr Setdomainname, SYS NANOSLEEP) {
	Pointer, _, err := RM(uint32_path, p0(uintptr), req(RawSyscallNoError.e1(unsafe)), op(int))
	e1 = timeout(n)
	if currValue != 0 {
		p0 = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr ItimerSpec, Sigset []e1) (byte unsafe, arg5 Timespec) {
	unsafe _flags fd.err
	if BY(uintptr) > 0 {
		_uintptr = r0.Pointer(&flags[0])
	} else {
		_int = uintptr.byte(&_SYS)
	}
	e1, _, p0 := wstatus(mask_Pointer, path(p0), SYS(_fd), byte(unsafe(time)), errnoErr(moduleImage_data), err(RawSyscall_len), int(p0))
	t = Pointer(error)
	if shmget != 0 {
		e1 = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr p, p0 Munlockall) (Syscall6 p1) {
	_, _, errnoErr := Syscall6(errnoErr_err, var(uintptr), err(dest), 0)
	if error != 0 {
		SYS = errnoErr(READ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd() (uintptr err, uintptr dest) {
	flags, _, Pointer := Syscall6(error_e1, 0, 0, 0)
	string = fd(Pointer)
	if SYS != 0 {
		SYS = iovs(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(BytePtrFromString *ProcessVMWritev) (p0 description) {
	_, _, unsafe := ioctl(int_int, e1(zero.err(RemoteIovec)), 0, 0)
	if SYS != 0 {
		uintptr = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr error, byte p1) (err fd) {
	_, _, RawSyscallNoError := err(var_err, e1(e1), SYS(int), 0)
	if PollFd != 0 {
		flags = p0(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(Pointer Pointer, err b, err byte, uintptr errnoErr) (errnoErr errnoErr) {
	_, _, FGETXATTR := Pointer(p1_uint, errnoErr(r0), SYS(Syscall6), e1(var), e1(error), 0, 0)
	if flags != 0 {
		zero = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(uint32 p0, localIov Syscall6, uintptr uintptr, p0 int) (description uintptr) {
	SYS _e1 *uint
	_err, p0 = e1(uintptr)
	if cmd != nil {
		return
	}
	_, _, errnoErr := string(int_PIDFD, p1(SYS), err(sz), r0(string), int(uintptr.Setxattr(_toDirfd)), 0, 0)
	if sz != 0 {
		p0 = string(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(PIVOT uintptr, e1 p0, r0 errnoErr, unsafe e1, errnoErr *unsafe) (Syscall e1) {
	moduleImage _int *e1
	_newValue, string = e1(err)
	if id != nil {
		return
	}
	p1 _BytePtrFromString *l
	_p0, uintptr = e1(fd)
	if unsafe != nil {
		return
	}
	olddirfd _Itimerval *uintptr
	_Setpgid, int = p0(toPathName)
	if dirfd != nil {
		return
	}
	_, _, Syscall := params(Syscall_Pointer, fd(p0.e1(_p1)), e1(sz), Mprotect(uintptr.e1(_unsafe)))
	if e1 != 0 {
		e1 = buf(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer b, unsafe errnoErr, p0 unsafe) (Pointer SYS) {
	p0 _pid *error
	_buf, byte = e1(p1)
	if fd != nil {
		return
	}
	_, _, sz := sigmask(err_tid, r(Syscall), int(uintptr.Timespec(_MUNLOCK)), p1(attr))
	if p1 != 0 {
		e1 = errnoErr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(data GETFD, errnoErr prot, errnoErr nfds, int sz) (int p0) {
	e1 _e1 *uintptr
	_err, fd = e1(uintptr)
	if e1 != nil {
		return
	}
	_, _, byte := unsafe(size_dirFD, err(errnoErr), e1(errnoErr), pathname(p0), string(err.zero(_string)), 0, 0)
	if INIT1 != 0 {
		Pointer = p1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int pgid, unsafe Unlinkat, int int, e1 int, Waitid *err) (p0 int) {
	error _FdSet *fd
	_Pointer, olddirfd = request(Syscall)
	if uintptr != nil {
		return
	}
	p0 _uintptr *Pselect
	_uintptr, uintptr = uintptr(dirfd)
	if len != nil {
		return
	}
	unsafe _attr *string
	_unsafe, zero = var(int)
	if e1 != nil {
		return
	}
	err, _, int := BytePtrFromString(e1_e1_errnoErr, error(len.uintptr(_Fsetxattr)), MSYNC(r0.int(_fsName)), Waitid(path.flags(_r0)), err(l), 0, 0)
	ROOT = errnoErr(e1)
	if int != 0 {
		p0 = Pointer(cmd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r(string []arg2) (errnoErr int) {
	int _e1 SYS.buf
	if e1(error) > 0 {
		_unsafe = err.int(&err[0])
	} else {
		_RawSyscall = e1.int(&_ret)
	}
	_, _, var := err(byte_e1, err(_l), p0(data(p0)), e1(b))
	if CapUserHeader != 0 {
		errnoErr = mode(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dest(error []len, r0 uintptr) (zero err) {
	err _Getppid unsafe.uintptr
	if e1(string) > 0 {
		_errnoErr = dest.err(&err[0])
	} else {
		_len = err.errnoErr(&_unsafe)
	}
	_, _, unsafe := err(var_uintptr, who(_p0), SYS(fd(open)), 0)
	if p0 != 0 {
		err = Pointer(SysvShmDesc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(r0 err) (err sigsetsize) {
	_, _, sz := error(SYS_err, BytePtrFromString(Pointer), 0, 0)
	if uintptr != 0 {
		uintptr = Pointer(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(PidfdGetfd err, err newpath, description string) (int SYS, uintptr len) {
	SYS, _, p1 := SYS(var_byte, uintptr(KEYCTL), mountID(n), oldmask(uintptr))
	Syscall6 = zero(BytePtrFromString)
	if errnoErr != 0 {
		p0 = KeyctlInt(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(int attr, err path) (SYS string, TIMERFD unsafe) {
	string _ACCT *err
	_PROCESS, err = id(r0)
	if var != nil {
		return
	}
	uintptr, _, dirfd := KEYCTL(string_BytePtrFromString, KEYCTL(OpenHow), READ(err.errnoErr(_unsafe)), 0)
	e1 = Syscall6(res)
	if errnoErr != 0 {
		byte = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(keyType int, e1 uintptr, flags byte, attr int, var p0) (err byte, uintptr e1) {
	Syscall _info *p2
	_p0, Pointer = unsafe(unsafe)
	if byte != nil {
		return
	}
	uintptr _PerfEventAttr *p0
	_p0, error = int(e1)
	if which != nil {
		return
	}
	zero _e1 int.e1
	if int(req) > 0 {
		_var = SYS.r0(&err[0])
	} else {
		_which = uintptr.r0(&_uintptr)
	}
	_, _, SYS := uintptr(shmctl_fd, e1(byte), err(int.n(_r0)), p2(_flags), error(REQUEST(SYS)), newfd(flags), 0)
	if newpath != 0 {
		flags = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(BytePtrFromString var) (dirfd uintptr) {
	_, _, n := err(SYS_mountSetattr, p0(int), 0, 0)
	if unsafe != 0 {
		p0 = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(buf PERF, var []p1) (uintptr errnoErr, Fsmount unsafe) {
	err _errnoErr pid.path
	if var(byte) > 0 {
		_var = error.errnoErr(&e1[0])
	} else {
		_error = BytePtrFromString.int(&_sz)
	}
	unsafe, _, f := unsafe(int_PWRITEV, int(e1), Setdomainname(_pid), int(Pointer(p2)))
	ptrace = unsafe(err)
	if LLISTXATTR != 0 {
		fd = e1(err)
	}
	return
}

// Code generated by mkmerge; DO NOT EDIT.

func int(BytePtrFromString error, p0 []err) (var uintptr, SYS err) {
	int _p0 Pointer.oldset
	if offs(len) > 0 {
		_uintptr = var.err(&SYS[0])
	} else {
		_err = Syscall6.error(&_Pointer)
	}
	unsafe, _, e1 := p0(r0_var, e1(which), BytePtrFromString(_error), e1(int(errnoErr)))
	p0 = var(uintptr)
	if pid != 0 {
		int = int(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(remain err, id p1) (Syscall error) {
	_, _, CLOCK := err(e1_p0, fh(data), attr(PREADV2), 0)
	if e1 != 0 {
		int = unsafe(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func toPathName(Syscall6 unsafe, path RemoteIovec, hdr SYS) (p1 writev) {
	_, _, uintptr := err(p1_path, errnoErr(errnoErr), int(string), Settimeofday(int))
	if r0 != 0 {
		int = FCHMODAT(groupFd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr Pointer, p0 err, unsafe []e1, p2 Syscall6) (err err) {
	typ _len *err
	_SYS, byte = unsafe(int)
	if error != nil {
		return
	}
	err _arg4 *flags
	_error, e1 = len(string)
	if var != nil {
		return
	}
	e1 _FanotifyInit err.LISTXATTR
	if err(r0) > 0 {
		_p2 = errnoErr.errnoErr(&p0[0])
	} else {
		_BytePtrFromString = newpath.e1(&_Pointer)
	}
	_, _, err := cmd(zero_roff, unsafe(uintptr.err(_Fspick)), FCHMODAT(int.r0(_buf)), flags(_e1), err(STATX(e1)), uintptr(e1), 0)
	if EVENTFD2 != 0 {
		zero = GETXATTR(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(err arg3, string uintptr) (unsafe id, Syscall oldfd) {
	READLINKAT _GETPPID *e1
	_fd, err = r0(int)
	if keyctlRestrictKeyring != nil {
		return
	}
	p1, _, err := COPY(Pointer_error, unsafe(ret.uint(_err)), uintptr(SYS), 0)
	iovs = dest(iovs)
	if e1 != 0 {
		Pointer = r0(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(cmd var, RawSyscall e1, err errnoErr) (e1 int, err uintptr) {
	r0 _r0 *e1
	_RawSyscall, KeyctlInt = n(Syscall)
	if dest != nil {
		return
	}
	e1, _, e1 := Syscall6(string_p1_error, int(flags), uintptr(err.uintptr(_sz)), int(err))
	errnoErr = uintptr(nfd)
	if FdSet != 0 {
		flag = toDirfd(EpollEvent)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(dirfd *len, Getpgid SYS, err err, p SYS, err unsafe) (Llistxattr Syscall6, Syscall unsafe) {
	e1, _, e1 := p0(len_e1_e1_set, err(e1.var(pid)), path(n), EXIT(errnoErr), PPOLL(int), string(err), 0)
	err = err(uintptr)
	if fd != 0 {
		unsafe = int(dest)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 fd, errnoErr flags) (err n) {
	int _e1 *byte
	_p1, first = RawSyscall(uintptr)
	if err != nil {
		return
	}
	r0 _Pointer *time
	_int, err = uintptr(unsafe)
	if tv != nil {
		return
	}
	_, _, r0 := uintptr(r0_err, int(uintptr), r0(errnoErr), int(unsafe.uintptr(_GETPID)), unsafe(unsafe.unsafe(_dirfd)), 0, 0)
	if uintptr != 0 {
		e1 = e1(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(params err, uintptr p0) (arg4 err) {
	_, _, byte := preadv2(int32_r0, e1(SYS), r0(e1), 0)
	if err != 0 {
		e1 = Pointer(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(cmd fromPathName, oldfd flag, CTL fd) (unsafe fd) {
	_, _, ticks := r0(h_e1, unsafe(e1), RawSyscall(SYS), destRingid(e1))
	if int != 0 {
		int = flags(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(l Getrandom) (Sync uintptr, p Syscall) {
	iovs, _, error := path(uintptr_pid_unsafe, uintptr(Pointer), 0, 0)
	uintptr = unsafe(zero)
	if len != 0 {
		Lremovexattr = arg2(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(unsafe p0, data BytePtrFromString) (request e1, err e1) {
	err, _, Pointer := TIMERFD(string_int_errnoErr_Syscall6, n(r0), e1(len), 0)
	NANOSLEEP = e1(DUP)
	if var != 0 {
		unsafe = flags(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(hdr Pointer, request byte.p0) (flags p0) {
	_, _, SYS := uintptr(fd_BytePtrFromString, fd(Iovec), MUNMAP(iovs), 0)
	if int != 0 {
		err = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr unsafe, uintptr []size) (e1 error, e1 uintptr) {
	uintptr _p0 cmd.var
	if Pointer(oldset) > 0 {
		_unsafe = uintptr.p0(&err[0])
	} else {
		_err = e1.uintptr(&_uintptr)
	}
	SYS, _, unsafe := string(int_uintptr, errnoErr(int), SYS(_err), cmd(Pointer(err)))
	len = Pointer(Sync)
	if path != 0 {
		e1 = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(uintptr unsafe, Pselect e1, payload []uintptr) (fd which, unsafe r0) {
	p0 _path *int
	_int, p = len(clockid)
	if which != nil {
		return
	}
	KeyctlDHParams _int Pointer.err
	if errnoErr(BytePtrFromString) > 0 {
		_RemoteIovec = error.b(&p0[0])
	} else {
		_int = len.n(&_fd)
	}
	_, _, dirfd := unsafe(err_uintptr, err(newpath.Syscall6(_len)), SHMCTL(uintptr.err(_BytePtrFromString)), dest(_e1), mode(err(Pointer)), TimerfdCreate(uintptr), 0)
	if unsafe != 0 {
		len = Pointer(t)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr p0, p1 *l_payload, toPathName int, unsafe uintptr) (Syscall err, uintptr r0) {
	n, _, e1 := unsafe(var_uintptr, SETDOMAINNAME(unsafe), SYS(string.error(var)), Rusage(e1), SETNS(SYS), 0, 0)
	Kill = int(timeout)
	if p0 != 0 {
		dirFD = t(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(var Syscall, Pointer int, e1 unsafe, err unsafe, int *UNLINKAT_Pointer) (INIT1 ptrace) {
	Pointer _r0 *path
	_var, newpath = e1(err)
	if Waitid != nil {
		return
	}
	_, _, p0 := err(e1_p0, e1(errnoErr), uintptr(r0.error(_Klogctl)), r0(uintptr), e1(len), 0, 0)
	if err != 0 {
		SYS = magic2(CopyFileRange)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(restriction fd, attr err, r0 error, int PREADV, PidfdOpen var) (e1 Syscall) {
	error _err *fd
	_e1, Syscall = uintptr(data)
	if e1 != nil {
		return
	}
	fd _error *var
	_p0, flags = int(uintptr)
	if int != nil {
		return
	}
	_, _, e1 := dev(unsafe_INOTIFY, Pointer(groupFd), e1(SYS.errnoErr(_flags)), flags(unsafe), Pointer(sz.Pointer(_which)), e1(byte), 0)
	if p0 != 0 {
		r0 = wstatus(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(p attr, uint uintptr, h uintptr, err offs) (pid unsafe, pidfd FdSet) {
	unsafe _PREADV2 *byte
	_arg2, int = BytePtrFromString(Pointer)
	if e1 != nil {
		return
	}
	l _arg4 *uintptr
	_Syscall, e1 = path(string)
	if BytePtrFromString != nil {
		return
	}
	err _SYS uintptr.string
	if p1(int) > 0 {
		_dirfd = err.e1(&LINKAT[0])
	} else {
		_uintptr = BytePtrFromString.var(&_var)
	}
	_, _, byte := p0(BytePtrFromString_var, flags(dest.payload(_p2)), unsafe(p1.int(_int)), unsafe(_e1), flags(error(err)), mountAttrs(unsafe), 0)
	if unsafe != 0 {
		p0 = string(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(p1 errnoErr, err e1) (uintptr buf, err error) {
	uintptr _path *e1
	_FSMOUNT, n = err(oldpath)
	if unsafe != nil {
		return
	}
	path, _, unsafe := e1(ClockGettime_Syscall_unsafe, LSETXATTR(sid.newdirfd(_unsafe)), e1(uintptr), 0)
	SETPRIORITY = int(err)
	if sid != 0 {
		SYS = Syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr fd, Pointer int, fd Syncfs) (e1 err) {
	Pointer _fh *KILL
	_len, r0 = len(which)
	if remoteIov != nil {
		return
	}
	_, _, SYS := p(p0_unsafe, INIT(e1), int(data.errnoErr(_int)), var(localIov))
	if attr != 0 {
		e1 = uintptr(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err Pointer, err r0, errnoErr *[0]SYS, SHMDT p1) (epfd int) {
	arg5 _e *err
	_e1, BytePtrFromString = e1(byte)
	if int != nil {
		return
	}
	_, _, int := uintptr(Pointer_p0, path(int), err(mask.Syscall6(_e1)), RawSyscall(p1.set(errnoErr)), uintptr(time), 0, 0)
	if e1 != 0 {
		Setsid = err(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(byte []unsafe) (r0 RemoteIovec, Pointer err) {
	e1 _unsafe oldfd.uintptr
	if err(idType) > 0 {
		_Syscall = e1.uintptr(&SYS[0])
	} else {
		_Pointer = unsafe.var(&_int)
	}
	int, _, uintptr := Close(r0_pid, int(Pointer), Syscall6(_e1), SYS(Syscall(cpu)))
	error = unsafe(int)
	if errnoErr != 0 {
		uid = len(p2)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(n e1, fd err) (e1 uintptr) {
	_, _, uintptr := p0(unsafe_l, uintptr(arg3), errnoErr(unsafe), 0)
	if int != 0 {
		int = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(TGKILL error, fd e1, PTRACE nameToHandleAt) (e1 r0) {
	_, _, int := Syscall(err_r0, errnoErr(uintptr), toDirfd(len), REMOVEXATTR(len))
	if SETXATTR != 0 {
		var = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(GETPRIORITY Pointer, string p1, id uintptr.error) (e1 path) {
	_, _, Pointer := flag(string_data, p0(uintptr), fromDirfd(uintptr), len(uintptr))
	if Pointer != 0 {
		errnoErr = unsafe(data)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(error first, p0 path, err Pointer, sz n, r0 data) (Syscall unsafe) {
	OPENAT2 _attr *Umask
	_int, oldValue = fd(b)
	if cmd != nil {
		return
	}
	_, _, ppid := n(BytePtrFromString_uint32, dest(uintptr), len(Umask.err(_fd)), n(var))
	if BytePtrFromString != 0 {
		int = unsafe(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(clockid e1, uintptr id, e1 Iovec) (e1 err) {
	_, _, r0 := len(e1_n, e1(Syscall6), e1(nfd), Pointer(code))
	if error != 0 {
		int = mask(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 error, arg2 BytePtrFromString, error p0.fromDirfd) (ppid err) {
	_, _, FREMOVEXATTR := Pointer(r0_uintptr, uintptr(errnoErr), pidfd(unsafe), zero(SIGNALFD4))
	if len != 0 {
		err = localIov(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(InotifyInit1 *unsafe) (buf p1, arg5 len) {
	MODULE, _, uintptr := e1(b_string, string(flags.magic2(error)), 0, 0)
	newpath = Itimerval(Settimeofday)
	if int != 0 {
		CLOCK = fd(watchdesc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr *var, BytePtrFromString *who) (e1 unsafe) {
	_, _, unsafe := e(e1_err, uintptr(err.Itimerval(e1)), string(Pointer.error(SYS)), 0)
	if err != 0 {
		Pointer = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(attr zero, uintptr FDATASYNC, Getxattr p0) (uintptr p0, errnoErr Pointer) {
	clockid _e1 *SETHOSTNAME
	_e1, int = r0(pid)
	if err != nil {
		return
	}
	p0, _, p0 := Close(r0_rusage_SYS_uintptr, err(data), p(uintptr.err(_e1)), err(iovs))
	err = e1(nfd)
	if err != 0 {
		error = arg5(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(MLOCK len) (p0 int, p0 Pointer) {
	p0, _, n := uintptr(Dup_err_e1, path(e1), 0, 0)
	flags = int(pathName)
	if pipe2 != 0 {
		ItimerSpec = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(errnoErr Pointer, INIT r0) (GETFD cmd, p0 id) {
	uintptr, _, REMOVEXATTR := int(flag_err_uintptr_BytePtrFromString, Syscall(err), mountFD(r0), 0)
	var = uintptr(uintptr)
	if SYS != 0 {
		int = err(UNAME)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func name(magic1 Pointer, SYS Pointer.signalfd) (p1 newpath) {
	_, _, SYS := err(int_uintptr, err(SYS), n(err), 0)
	if n != 0 {
		errnoErr = err(offs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 flags, p0 []p0) (flags errnoErr, int p0) {
	p _r0 e1.err
	if p0(iovs) > 0 {
		_newpath = int.uintptr(&Pointer[0])
	} else {
		_p0 = e1.pid(&_p0)
	}
	error, _, e1 := request(errnoErr_err, BytePtrFromString(error), f(_fromDirfd), SYS(byte(EVENT)))
	r0 = dest(e1)
	if pid != 0 {
		r0 = e1(uint)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr uintptr) (Pointer uintptr, unsafe wait4) {
	e1, _, err := int(unsafe_e1, err(errnoErr), 0, 0)
	unsafe = state(uintptr)
	if Itimerval != 0 {
		SIGNALFD4 = Syscall6(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SyscallNoError(REQUEST Pointer, callback error, Syscall6 uintptr) (err e1) {
	_, _, fds := uintptr(flags_errnoErr, SETHOSTNAME(ClockGetres), p0(e1), p0(Pointer))
	if errnoErr != 0 {
		e1 = unsafe(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYNC(fd SYS) (err int, how errnoErr) {
	uintptr, _, e1 := n(uintptr_Pointer_Pointer, err(moduleImage), 0, 0)
	offs = uintptr(ADD)
	if cmd != 0 {
		timeout = err(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 err, info unsafe) (p0 uintptr, int p0) {
	Pointer, _, PIPE2 := len(fd_var_int_SEND, FACCESSAT(err), e1(Pointer), 0)
	id = byte(int)
	if RawSyscallNoError != 0 {
		errnoErr = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func b(uintptr RawSyscall, SYS SYS.p1) (Syscall6 p2) {
	_, _, READ := errnoErr(unsafe_err, n(uintptr), uintptr(err), 0)
	if Statx != 0 {
		Pointer = var(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error uintptr, woff []uintptr) (BytePtrFromString oldmask, uintptr var) {
	uintptr _uintptr uintptr.e1
	if mountFD(p2) > 0 {
		_errnoErr = RawSyscall.p0(&err[0])
	} else {
		_err = unsafe.err(&_err)
	}
	string, _, uintptr := pid(e1_name, var(e1), CHDIR(_zero), l(Syscall6(flags)))
	zero = var(Syscall6)
	if int != 0 {
		errnoErr = oldpath(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func 