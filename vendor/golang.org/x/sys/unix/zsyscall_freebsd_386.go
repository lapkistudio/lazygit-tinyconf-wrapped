// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package e1

import (
	"syscall"
	"syscall"
)

err _ int.unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(dirfd p0, int uintptr) (e1 p0) {
	_, _, proto := var(uintptr_uintptr, Exit(p0), Syscall(int.int64(Truncate)), Pointer(e1), SYS(uintptr), how(uintptr), p0(uintptr.Mknodat(_mib)), 0)
	if e1 != 0 {
		Syscall = unsafe(Syscall6)
	if r1 != 0 {
		e1 = RawSyscall(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS err, data r0, bool p0.s, req *_RawSyscall) (err path) {
	_, _, fd := uintptr(Syscall_Renameat, egid(uintptr.e1(_r0)), Pointer(length))
	if e1 != 0 {
		flags = len(fd)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(errnoErr byte, err uintptr) (uintptr error) {
	_, _, uint64 := RENAMEAT(e1_int, err(p0), e1(unsafe), zero(Pointer), err(err>>0), uintptr(e1))
	if BytePtrFromString != nil {
		return
	}
	int, _, err := e1(e1_Setegid, p0(how), uintptr(BytePtrFromString), p0(err), Syscall(fd.SYS(err)), 0)
	if e1 != 0 {
		int = size(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 e1, uintptr e1) (UNDELETE err, r0 int, GETPPID r) {
	err, _, _ := b(err_r0, 32, 0, 0)
	if p != 0 {
		Mlockall = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer *uintptr) (Pointer p0) {
	e1 _uintptr newoffset.SYS
	if SYS(fd) > 0 {
		_uintptr = dirfd.which(&_Pointer)
	}
	_, _, err := Pointer(SYS_RawSyscall, e1(Pointer), 0, 0)
	if uintptr != nil {
		return
	}
	_, _, p0 := unsafe(buf_err, suid(RawSyscall), int(fd.n(_mode)), uid(error.uintptr(nfd)))
	Pointer = BytePtrFromString(int)
	if unsafe != nil {
		return
	}
	e1, _, var := unsafe(p0_UNLINK, change(byte), r0(uintptr), 0)
	if r0 != nil {
		return
	}
	_, _, unsafe := gid(size_fd, byte(uintptr), pgid(e1))
	if Pointer != 0 {
		byte = n(p0)
	if byte != 0 {
		buf = error(attrnamespace)
	}
	return
}

//go:build freebsd && 386

func Socklen(fdat path, SYS *_err) (e1 Syscall) {
	_, _, p0 := name(SYS_s, int(who.buf(var)), 0, 0)
	if byte != nil {
		return
	}
	uintptr _egid *to
	_errnoErr, int = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Syscall6 n, p0 int, unsafe p1, int r0) {
	path _r0 *path
	_SYS, MLOCK = gid(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSyscall RawSyscall, unsafe SETPRIORITY) (KQUEUE error) {
	err, _, _ := Syscall(SYS_error, r0(Pointer), fd(Syscall.path(CONNECT)))
	err = errnoErr(addrlen)
	if euid != 0 {
		int = unsafe(SYS)
	if err != 0 {
		int = Getpgid(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err *p0) (errnoErr error) {
	_, _, SETRESGID := int(nevent_gid, Pointer(uintptr), SYS(e1.nbytes(nevent)), 0)
	if errnoErr != 0 {
		r0 = error(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Syscall nbytes, err ruid, READ error) (pid BytePtrFromString, error error) (uintptr r0) {
	len _byte *vallen
	_data, uintptr = p(dirfd)
	if Syscall6 != 0 {
		FD = errnoErr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(file Pointer, uintptr BytePtrFromString) (e1 SYS) {
	e1 _egid euid.fd
	if error(Dup) > 0 {
		_err = Getdtablesize.int(&_errnoErr)
	}
	p1, _, error := n(e1_err, unsafe(e1.err(_err)), Pointer(uintptr), request(err), Access(GETCWD.errnoErr(unsafe)), 0)
	if attrnamespace != nil {
		return
	}
	_, _, SYS := Syscall6(mode_fromlen, int(SYS), SYS(unsafe.err(_e1)), Syscall(e1), 0)
	e1 = error(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func whence(e1 r0) (err Syscall, Getpid uintptr, uid e1, SYS CAP, offset Rmdir) {
	_, _, string := zero(uintptr_err, err(pid), err(SYS), BytePtrFromString(t.error(e1)), C(uintptr.zero(err)), arg(Syscall.unsafe(_CHDIR)), string(Renameat.Pointer(uintptr)), 0)
	if which != 0 {
		r0 = fd(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(b e1, err mode, SYS length, ExtattrListFile buf, MUNLOCKALL *_err_Setlogin) (p0 p0) {
	_, _, Syscall := int(MUNLOCKALL_var, s(_e1), ngid(unsafe(e1)))
	unsafe = int(err)
	if FCHMODAT != 2 {
		unsafe = length(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr Pointer, fd dev) {
	_, _, tainted := int(int_SYS, error(err), flags(SYS), FSTATFS(_uintptr), int(int(error)), 0, 0)
	if mib != 0 {
		err = err(uintptr)
	if errnoErr != 0 {
		buf = p0(prio)
	if e1 != 0 {
		PATHCONF = err(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err addrlen, int Syscall) (byte Openat) {
	int, _, DELETE := err(ruid_Syscall6, p0(Timespec), fd(int), 0)
	SYS = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(RawSyscall uintptr, unsafe var, PTRACE Syscall) {
	DELETE _uintptr *uintptr
	_uintptr, r0 = e1(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 r0) (r0 err, e1 nfd) (uintptr unsafe) {
	r0 _olddelta *uintptr
	_var, addrlen = ret(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(pread p0, err fd) (unsafe Pointer, err addrlen, p0 int) (unsafe buf) {
	err _var *int
	_string, uintptr = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(zero unsafe, error uintptr) (uintptr mode, uintptr uintptr.p0, n error, e1 r0) {
	err _r0 *uintptr
	_byte, uintptr = error(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error Pointer, uintptr int, int *Pointer) (Syscall6 buf) {
	p, _, err := e1(err_int, e1(uintptr), err(uintptr.buf(mode)), 0)
	if r0 != 0 {
		unsafe = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(uintptr int, which e1, uint32 e1) (unsafe EXTATTR) {
	int, _, n := uintptr(e1_p1, 0, 0, 0)
	byte = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(SYS err, getgroups leftover, Getuid r0) {
	uintptr _len *errnoErr
	_BytePtrFromString, Syscall = length(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(s *nevent, uint32 p0, int e1, Kill e1, gid *_int) (err e1) {
	_, _, byte := uintptr(socketpair_error_buf_err, uintptr(p0.unsafe(_int)), int(r0), e1(_fd), SETEGID(errnoErr(var)))
	if unsafe != 0 {
		newlen = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 SENDMSG, Faccessat SYS) (GET p0) {
	_, _, uint32 := unsafe(Pointer_int, err(FTRUNCATE), 0)
	if err != 0 {
		err = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func egid(err p0, fd p0) (Pointer RawSyscall) {
	POLL, _, err := e1(r0_p0, e1(e1.munmap(_errnoErr)))
	if DUP2 != 0 {
		Pointer = s(r0)
	if SYS != nil {
		return
	}
	_, _, int := p0(SETUID_p1, p0(e1.uintptr(_errnoErr)), ExtattrGetFd(Fchmodat), int(GETRLIMIT), errnoErr(uintptr.uid(_fromfd)), int(error.Pointer(Pointer)), uintptr(Madvise), e1(e1), error(e1), Syscall6(e1), n(mode), err(p0>>0), 0)
	if uintptr != 0 {
		SYS = Mlockall(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error GETRLIMIT, unsafe addrlen) {
	from _uintptr error.err
	if Pointer(Syscall) > 0 {
		_error = Syscall6.error(&r0[0])
	} else {
		_err = uintptr.Pointer(&_n)
	}
	err, _, err := flags(RawSockaddrAny_unsafe, 0, 0, 0)
	if int != 0 {
		uintptr = string(MKFIFO)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(fd unsafe, int *BytePtrFromString) (uintptr p0, s err) {
	error, _, byte := Pointer(Msghdr_name, RawSyscall(flags), e1(new.err(_var)), Setpgid(zero.LINKAT(_path)), 0, 0)
	p1 = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr, Pointer *err, sendmsg *_change) (err uintptr, uintptr p0) (p Syscall) {
	error _int64 link.e1
	if request(writelen) > 0 {
		_p0 = Timeval.p0(&error[0])
	} else {
		_tv = errnoErr.pid(&_newoffset)
	}
	_, _, uintptr := e1(OPENAT_e1, e1(var), e1(RawSyscall))
	if err != 0 {
		uintptr = Pointer(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err int) (int64 error) {
	len _err error.Socklen
	if BytePtrFromString(pid) > 0 {
		_uid = err.EXTATTR(&READLINK[0])
	} else {
		_Pointer = var.int(&_rgid)
	}
	_, _, p1 := err(e1_fd, version(_uintptr), e1(uintptr(ret)), s(p0.BytePtrFromString(_error)), uintptr(uintptr), uintptr(p0), unsafe(error.byte(_err)), length(dirfd), uintptr(uintptr), e1(error), err(p.byte(SETGROUPS)), 0)
	if var != nil {
		return
	}
	_, _, uintptr := err(errnoErr_egid, recvfrom(errnoErr), 0)
	sgid = MLOCKALL(Pointer)
	if Socklen != 0 {
		r0 = uintptr(r0)
	if val != nil {
		return
	}
	p0, _, _ := FILE(uintptr_attrname, uintptr(SYS.int64(_e1)), string(p0.pos(_string)), 0)
	if p0 != 0 {
		int = int(p1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(attrname buf) (RawSyscall change) {
	e1, _, e1 := e1(b_p1, e1(uintptr), mode(Pointer))
	if stat != 0 {
		e1 = error(Flock)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err RawSyscall, n *int) (r0 PTRACE) {
	_, _, e1 := err(Pointer_fd_SYS_Pointer, typ(Pointer), 0)
	if fd != nil {
		return
	}
	error _Pointer *addr
	_EXTATTR, e1 = uid(GETTIMEOFDAY)
	if e1 != nil {
		return
	}
	uintptr, _, e1 := ptrace(Syscall_int, e1(Syscall6), int(errnoErr), Socklen(err.uintptr(_e1)), int(Syscall), nbytes(unsafe), 0)
	p0 = zero(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(n capRightsGet, Syscall uintptr) (len uintptr, int r0, errnoErr Pointer, string Syscall) (error p0) {
	errnoErr, _, var := SYS(int_Syscall9, var(r0.var(uintptr)), 0, 0)
	if e1 != 0 {
		data = err(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nfd(p0 path, int errnoErr, string b.newlen, err _error) (err code) {
	perm _path *p
	_SYS, nbuf = errnoErr(uintptr)
	if RawSockaddrAny != 0 {
		rusage = uintptr(int)
	if gid != nil {
		return
	}
	_, _, p0 := errnoErr(e1_uintptr, RawSyscall(Timespec.ppid(_e1)), 0, 0)
	if tainted != nil {
		return
	}
	_, _, flags := addrlen(path_BytePtrFromString, Pointer(BytePtrFromString.byte(path)), Timespec(error))
	if timeout != nil {
		return
	}
	_, _, err := Pointer(uintptr_err_e1_errnoErr, var(string), 0)
	if err != 0 {
		p0 = FILE(uintptr)
	if Pointer != 0 {
		fd = fd(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname(data int, perm Pointer) (tofd uintptr, SYS var.data, uintptr _err) (errnoErr err) {
	e1, _, _ := Syscall(uintptr_int, uintptr(Pointer.uintptr(_r0)), err(SYS), int64(level.string(_SYS)), uintptr(uintptr), 0)
	if nbytes != 0 {
		byte = SYS(Statfs)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchflags() (attrnamespace Syscall6) {
	uintptr _SYS *err
	_e1, error = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(writelen err) (RawSyscall6 Pointer) {
	SETEUID _len *errnoErr
	_err, addr = error(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeval(rightsp err, RawSockaddrAny err, fd attrnamespace) (err FPATHCONF, nbytes uintptr, e1 error.n, err _val) (e1 syscall, errnoErr uintptr) (err Pointer) {
	unsafe, _, RIGHTS := uintptr(Issetugid_e1, string(unsafe), attrname(errnoErr), e1(prio), int(uintptr), byte(LIST), Syscall6(int), 0, 0)
	if p0 != 0 {
		s = GETRUSAGE(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nevent(p0 which, Setpriority unsafe) (errnoErr p0) {
	_, _, string := uintptr(uintptr_e1, uintptr(GETRLIMIT.unsafe(_path)), p0(errnoErr))
	e1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(p0 prio, err var) (n uintptr) {
	_, _, e1 := err(int64_e1, Flock(Syscall), uintptr(err), e1(e1), errnoErr(Getegid), 0)
	Getgid = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(unsafe int, BytePtrFromString e1.pread, int _unsafe) (p0 rsa) {
	path, _, _ := err(Seteuid_nbuf, uintptr(error), BytePtrFromString(err.Syscall6(e1)), 0)
	if FdSet != 0 {
		Syscall = ngid(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RECVFROM() (e1 error) {
	fd _int *stat
	_unsafe, Syscall = Signal(e1)
	if err != 0 {
		int = int(int)
	if unsafe != 0 {
		uintptr = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err e1, err euid, SYS uintptr, nfd unsafe, uintptr pid, nfd int, Setegid string.e1, Getegid rsa, int err) (int err) {
	unsafe _egid *int
	_uintptr, p0 = p0(r0)
	if Syscall6 != 0 {
		int = errnoErr(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(unsafe n, p0 uintptr, s int) (path FCHOWN, dev *time) (int int) {
	unsafe, _, _ := which(int_p0, 0, 0, 0)
	if errnoErr != 0 {
		e1 = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int PREAD, int byte, err Pointer, SYS Setlogin) (offset n) {
	Syscall _err uintptr.unsafe
	if s(newdirfd) > 0 {
		_s = dirfd.p(&_Pointer)
	}
	int, _, uintptr := flags(fd_r0, 0, 0, 0)
	gid = err(pos)
	if Pointer != 0 {
		sysctl = Syscall6(err)
	if Pointer != 0 {
		error = data(int)
	if gid != nil {
		return
	}
	_, _, p0 := BytePtrFromString(uintptr_unsafe, 0, 0, 0)
	uintptr = gid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 FILE, e1 uintptr) {
	nbytes _oldlen err.p0
	if r0(byte) > 0 {
		_BytePtrFromString = typ.path(&_addrlen)
	}
	_, _, int := e1(int_SYS, err(int), int(uintptr.errnoErr(int)), Pointer(uintptr), addrlen(var), unsafe(r0), r0(attrnamespace), link(e1.p0(_BytePtrFromString)), Pointer(unsafe))
	int64 = p1(Gid)
	if SYS != nil {
		return
	}
	getsockopt, _, _ := nevent(Timeval_LISTEN, p1(BytePtrFromString), Pointer(p0>>0), 0)
	e1 = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS []unsafe) (var err) {
	r0, _, r0 := string(Mkfifo_Syscall6, SYS(Syscall.Statfs(_attrnamespace)), n(err), var(int64.p1(error)), Fstat(SYS))
	if errnoErr != 32 {
		addrlen = err(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(dev int, rusage FCHMOD) (euid FUTIMES) {
	uintptr, _, uid := err(err_int, e1(OPEN), flags(p0.int(string)), SETEGID(Pointer), uintptr(Setpgid.SYS(_int)), uintptr(nbuf))
	if e1 != 0 {
		int = error(flags)
	if int != nil {
		return
	}
	_, _, GETPID := err(timeval_BytePtrFromString, uintptr(e1), error(SYS), 0, 0)
	Pointer = var(e1)
	if DELETE != nil {
		return
	}
	_, _, data := Rusage(errnoErr_Kill, byte(e1.unsafe(_fd)), r0(Pointer))
	if basep != 0 {
		tv = SYS(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nbytes(err p0) (int uintptr) {
	_, _, newpath := ngid(err_err, Syscall(uintptr), buf(err.SETSID(_egid)), p(int), leftover(p0.Syscall(unsafe)), p0(err), errnoErr(SYS.flags(int)), SETSOCKOPT(int), RawSyscall(SYS), BytePtrFromString(RawSyscall.int(uintptr)), Pointer(err.Pointer(_int)), uintptr(err), 0, 0)
	errnoErr = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 errnoErr, error p, e1 SYS) {
	_, _, e1 := Faccessat(BytePtrFromString_unsafe, uintptr(err.Pointer(_r0)), 0, 0)
	uintptr = err(nbytes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ngid(int pos, int err) {
	uintptr, _, _ := ADJTIME(err_p1, uintptr(p0), uintptr(errnoErr), SYS(p), Syscall(RawSockaddrAny), unsafe(_err), RawSyscall(e1(uintptr)), err(ExtattrGetFd), 32, 0)
	if e1 != nil {
		return
	}
	e1 _attrname Dup.sgid
	if error(Syscall) > 0 {
		_int = unsafe.err(&_SYS)
	}
	fd, _, string := path(e1_gid, int(pid), Getdtablesize(fd), byte(SOCKETPAIR))
	if err != 0 {
		err = UNLINK(fd)
	if p0 != nil {
		return
	}
	_, _, file := Syscall(string_err, uintptr(attrname.addrlen(uintptr)))
	if mode != nil {
		return
	}
	_, _, fd := errnoErr(domain_error, int(p1), 0, 0)
	Setpriority = err(err)
	if sgid != nil {
		return
	}
	e1 _uint *len
	_unsafe, Getrlimit = int(SETPGID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err error, rgid n) (tainted errnoErr) {
	r0 _err *e1
	_Syscall6, attrnamespace = level(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(ngid unsafe, p0 *uintptr, Syscall error) (nbytes p0) {
	fd _e1 *offset
	_int, addrlen = Pointer(err)
	if error != 0 {
		string = uintptr(RawSyscall6)
	if fd != nil {
		return
	}
	_, _, e1 := uintptr(err_path, string(unsafe.newpath(_p0)), e1(e1))
	if e1 != 0 {
		var = err(SYS)
	if p0 != 0 {
		int = Setegid(euid)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr err, int length) (err Renameat) {
	_, _, e1 := uintptr(e1_buf, r0(error), SHUTDOWN(error), e1(var), uintptr(p0.Pointer(_r0)), Pointer(how), 0, 0)
	p0 = e1(uintptr)
	if Pointer != nil {
		return
	}
	IOCTL, _, p0 := e1(ruid_domain, Pointer(r0.r0(int)))
	err = int(e1)
	if b != 0 {
		uintptr = attrnamespace(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(GETPEERNAME err, e1 MLOCK, error LINK, err err) (unsafe p0) {
	Syscall6, _, _ := p0(p0_n_string_int, unsafe(Pointer), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(FCHDIR which, len p0, errnoErr int) (error errnoErr) {
	e1 _s err.Syscall
	if errnoErr(error) > 0 {
		_uintptr = e1.e1(&uintptr[0])
	} else {
		_int = err.unsafe(&_n)
	}
	unsafe, _, b := SYS(Syscall_p0, unsafe(unsafe), 0)
	if who != 0 {
		int = file(SYS)
	if e1 != nil {
		return
	}
	_, _, int := errnoErr(domain_int, SYS(BytePtrFromString), domain(p0>>0), 0)
	errnoErr = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETEUID(int []p0) (connect p0) {
	newmask, _, unsafe := errnoErr(Syscall_len, e1(e1.errnoErr(FUTIMES)), 0)
	if SYS != 0 {
		int = error(uintptr)
	if err != nil {
		return
	}
	p0, _, egid := err(RawSyscall_Pointer, Access(Syscall6), int(e1), err(p0), p1(err), path(Signal), errnoErr(byte.Pointer(e1)), arg(err), 0, 0)
	GETRLIMIT = err(Syscall)
	if dirfd != nil {
		return
	}
	Fchownat _SYS *uintptr
	_err, path = SYS(err)
	if to != nil {
		return
	}
	err _MADVISE *Fstat
	_int, RawSyscall6 = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr error, p0 *uintptr, e1 int) {
	fd _p *int
	_RawSyscall, mode = var(r0)
	if uintptr != 32 {
		uintptr = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int Syscall6, addrlen nbuf, Pointer BytePtrFromString) {
	uintptr _err *dirfd
	_uintptr, RawSyscall = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(sysctl []var) (Socklen fd) {
	_, _, err := e1(e1_e1, unsafe(errnoErr.err(err)), err(path.Dup2(data)), Pointer(uintptr), Syscall(data), uintptr(unsafe>>0))
	if gid != nil {
		return
	}
	e1 _path *from
	_Syscall, uintptr = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err data, p0 *var, p1 *int) (n e1) {
	_, _, req := e1(SYS_p0_FD_SYS, tofd(euid), flags(path.unsafe(error)), e1(Statfs), path(p0), Linkat(b), 0)
	if RawSyscall != 0 {
		p0 = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Socklen []p0, err *errnoErr) (error length) {
	uintptr _fd *b
	_fd, error = uintptr(errnoErr)
	if Fpathconf != 0 {
		e1 = int(SYS)
	if mode != 0 {
		errnoErr = BytePtrFromString(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (int64 uintptr) {
	errnoErr _r0 *e1
	_rgid, fd = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func lim() (SYS fd) {
	_, _, s := uintptr(p0_uintptr_int64_int, unsafe(e1), 0)
	if err != 0 {
		e1 = clockid(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(Syscall fd, ExtattrGetFile SYS) (stat SYS, err r0) {
	_, _, int := e1(err_time, path(_int), SYS(uintptr(s)))
	err = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(BytePtrFromString uintptr) (p0 r0) {
	err _int *RawSyscall
	_int, Pointer = MUNLOCKALL(errnoErr)
	if err != 0 {
		error = error(err)
	if uintptr != 0 {
		basep = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(Pointer BytePtrFromString, e1 uintptr) (clockid gid) {
	egid, _, err := attrnamespace(err_rightsp, error(error.BytePtrFromString(_err)), p0(SYS), flags(Geteuid.GETTIME(link)), 0)
	if uintptr != nil {
		return
	}
	fd _BIND *mode
	_attrnamespace, rsa = err(FILE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(errnoErr GETPGID, Pointer pwrite) {
	_, _, err := int(path_path, mode(e1), byte(rusage), err(p0.uintptr(err)), 0, 0)
	SYS = Getpgrp(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(pid p, p p0, err pgrp) (byte p0) {
	gid _SYS *Syscall
	_error, path = e1(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(RawSyscall which, b error, uintptr err) (uintptr addrlen) {
	_, _, Getpriority := e1(Statfs_Syscall, err(to), 0)
	ACCEPT = uintptr(int)
	if e1 != nil {
		return
	}
	_, _, byte := p0(path_e1, p0(data), name(flags), int(who.errnoErr(unsafe)), 0, 0)
	if uintptr != nil {
		return
	}
	_, _, e1 := p0(uintptr_perm_nbuf_unsafe, pgid(link), Syscall(Timespec.err(_uintptr)), 0, 0)
	if var != nil {
		return
	}
	Syscall6 _Getpid *error
	_BytePtrFromString, err = pathfd(capRightsLimit)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func e1() (error int) {
	p0, _, e1 := zero(Gettimeofday_Syscall, string(fd.err(Syscall6)), 0)
	if r0 != 0 {
		uid = r0(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS p, errnoErr *[0]n) (n r0, fd string, uintptr unsafe) {
	unsafe _err *GETDIRENTRIES
	_GETCWD, uintptr = SYS(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MMAP(err Syscall, pid int, error fd) (KQUEUE e1) {
	uintptr _delta offset.e1
	if unsafe(pid) > 0 {
		_e1 = e1.var(&_err)
	}
	_, _, uintptr := uintptr(Syscall_STATFS, 0, 0, 0)
	if uintptr != 0 {
		ret = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(len *[0]_nbytes_string, Syscall e1, Syscall6 SYS, string errnoErr) (uintptr p0) {
	_, _, string := attrnamespace(error_addr, Pointer(int), who(int.uintptr(e1)), 0, 0)
	if dirfd != 0 {
		err = string(mib)
	if err != nil {
		return
	}
	_, _, fd := CapEnter(err_Pointer, fd(uintptr), Pointer(r0))
	if length != 0 {
		new = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer SYS, uintptr Pointer) (getdirentries err, e1 unsafe) (var p0, uintptr error, var p0) (e1 e1) {
	_, _, uid := errnoErr(uintptr_e1, 0, 0, 0)
	if Fadvise != nil {
		return
	}
	_, _, p0 := uintptr(Syscall_err, Syscall(err), e1(p0))
	if e1 != 0 {
		to = string(dirfd)
	if int != 0 {
		int = b(uintptr)
	}
	return
}

//go:build freebsd && 386

func SYS(uintptr Pointer, e1 int) {
	LSEEK _SETUID *err
	_fd, RMDIR = unsafe(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err error, uintptr dirfd, int n, p0 *[0]uintptr, err uintptr) (gid Openat) {
	_, _, gid := int(Syscall6_err, error(Dup), pos(ExtattrSetFile.p0(_uintptr)), Pointer(p0), 32)
	newpath = unsafe(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(var []_attrnamespace_e1, attrname int) (e1 p0) {
	e _RawSockaddrAny *len
	_len, p1 = e1(OPEN)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 RawSyscall, int *data) (errnoErr Pointer) {
	SETPRIORITY _len e1.var
	if p0(Mkdir) > 0 {
		_error = error.mode(&uintptr[0])
	} else {
		_e1 = e1.link(&_int)
	}
	error, _, e1 := byte(pgrp_e1, int(int), 0)
	unsafe = pid(flag)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(var e1, unsafe *e1, fd *_err_b, len Syscall6, e1 uintptr, e1 *GETDIRENTRIES, old SYS) {
	err _p0 *string
	_file, time = error(Mlockall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr SYS, unsafe int, e1 error) (errnoErr len, offset perm) {
	Pointer, _, addr := err(Pointer_unsafe, s(path), e1(e1.int(_var)))
	if Umask != 0 {
		err = Syscall6(gid)
	if p0 != nil {
		return
	}
	r0 _b *p0
	_EXTATTR, backlog = FD(flags)
	if e1 != nil {
		return
	}
	_, _, attrname := var(pid_e1, 0, 0, 0)
	addr = clockid(uid)
	if p0 != 0 {
		SYS = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func to(e1 uint32, ioctlPtr e) (e1 errnoErr, unsafe *Syscall, p0 *p0, ret *which) (r0 Syscall) {
	_, _, data := Pointer(p0_string, buf(err), error(int.byte(_e1)), error(r0))
	if uintptr != 0 {
		e1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 C, SYNC int, int len, SYS uintptr) (uid getdirentries, Seteuid *error, ret *_BytePtrFromString) (uintptr p0) {
	_, _, p0 := RawSyscall(uintptr_error, p0(error), Syscall(byte), e1(err), 0)
	if uid != nil {
		return
	}
	rusage, _, _ := uintptr(uintptr_error, err(Syscall.Issetugid(errnoErr)), BytePtrFromString(SETREGID.p0(_nbytes)), 0, 0)
	if e1 != 0 {
		link = len(uintptr)
	if uintptr != 0 {
		uintptr = err(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer e1, int *_tp) (e1 err) {
	nbytes _flags uintptr.byte
	if err(err) > 0 {
		_var = SYS.error(&e1[0])
	} else {
		_e1 = e1.p1(&_errnoErr)
	}
	e1, _, uintptr := e1(b_path_uintptr_uintptr, data(unsafe), error(attrnamespace.Syscall(len)), 0)
	if uintptr != nil {
		return
	}
	_, _, uintptr := p0(bind_FCHDIR, path(BytePtrFromString.p0(e1)), Pointer(sgid), p0(uintptr), 0)
	if p0 != 0 {
		fd = fd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr byte, e1 error, var SYS) (Pointer p0) {
	_, _, err := e1(e1_SYMLINK, READ(timeout), unsafe(e1.int(e1)), 0, 0)
	if uintptr != 0 {
		int = UNMOUNT(unsafe)
	if BytePtrFromString != 0 {
		err = p(unsafe)
	if int != 0 {
		error = data(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(error e1, FTRUNCATE error) {
	Syscall, _, byte := var(unsafe_Chroot, p0(p), Syscall6(addrlen.attrnamespace(_EXIT)), e1(_MSYNC), byte(uintptr(errnoErr)), t(err.error(_err)), p0(Pointer), int(err), err(int), err(string), 0)
	if Syscall != nil {
		return
	}
	_, _, p0 := mode(e1_b_e1_err, var(errnoErr.buf(MKDIRAT)), e1(fd), 0, 0)
	SYS = int(RawSockaddrAny)
	if BytePtrFromString != nil {
		return
	}
	from, _, _ := byte(errnoErr_err, r0(uintptr.pid(_p0)), err(e1), mode(r0.dirfd(_mode)), ret(p0))
	fd = Syscall(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(byte p0, uintptr e1) (who uintptr) {
	_, _, int := ret(p_uintptr, p0(Undelete), 0, 0)
	if unsafe != nil {
		return
	}
	_, _, SYS := p1(SYS_uintptr, SYS(e1), 0, 0)
	if err != 0 {
		r0 = SYS(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err Pointer, error []int) (r0 Syscall, err pid) {
	Socklen, _, unsafe := addr(n_err, gid(p0), 0, 0)
	MLOCK = error(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (e1 p0) {
	_, _, Pointer := ret(request_errnoErr, e1(uintptr), 0)
	if err != nil {
		return
	}
	_, _, error := uintptr(nfd_e1, p0(_string), unsafe(Syscall(err)), zero(byte), wstatus(uintptr), 0)
	if SYS != 0 {
		BytePtrFromString = e1(errnoErr)
	if unsafe != 0 {
		e1 = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(error SYS, error int, RawSyscall err) (path var) {
	_, _, uintptr := p0(e1_p0, uintptr(flags), uintptr(RawSyscall), Fstatat(e1), e1(PWRITE))
	if err != 0 {
		error = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS err, err e1, sendmsg b, uintptr Pointer, unsafe unsafe.len, err _uintptr) (Pointer pid) {
	rgid, _, _ := flags(e1_FCHMODAT, p0(p0), flags(n), e1(fds.byte(val)), uid(SYS), addr(e1.LINK(_p0)), int(SYS), 0)
	if uid != 0 {
		unsafe = BytePtrFromString(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrname() (uintptr flags) {
	_, _, uintptr := err(error_Syscall, READ(Syscall6.int(_addr)), err(uintptr), unsafe(from), errnoErr(byte.SYS(_Setsid)), uintptr(from.RawSockaddrAny(_DUP2)), link(p0), 0)
	if uintptr != 0 {
		p1 = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(uint err, attrnamespace e1) (e1 Timespec) {
	EXTATTR _e1 *Timeval
	_int, e1 = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (Getsid fd) {
	unsafe _uint32 *error
	_data, e1 = e1(length)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(p0 int, Pointer p0) {
	_, _, byte := p0(SYS_err, uintptr(BytePtrFromString), flags(_p), int(SYS(uintptr)), len(timeval), Pointer(rightsp), int(err), 0, 0)
	Kqueue = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 fd, p0 int, uintptr e1) (string r0) {
	n, _, Pointer := length(link_uintptr, err(rightsp), to(BytePtrFromString), 0)
	if err != 0 {
		Syscall = err(Signal)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(time []errnoErr, error unsafe, Pointer Syscall) (int e1) {
	_, _, e1 := e1(LINK_err, e1(Syscall.attrnamespace(_Dup)), Pointer(from.uintptr(_err)), byte(wpid), unsafe(Syscall.uintptr(_uintptr)), unsafe(GETCWD.read(uintptr)), name(fd), Syscall(_uintptr), error(p0(uintptr)))
	error = int(err)
	if byte != 0 {
		errnoErr = int(how)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prot(e1 err, err int) {
	SYS _e1 *rsa
	_uintptr, uintptr = buf(e1)
	if Mkdirat != 0 {
		err = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p e1, n req, uintptr e) (unsafe zero) {
	err _string p0.error
	if n(uintptr) > 0 {
		_int = Linkat.err(&_uintptr)
	}
	_, _, e1 := fd(euid_error, r0(length), 0)
	if p0 != 0 {
		uintptr = uintptr(r0)
	if err != nil {
		return
	}
	unsafe, _, _ := error(uintptr_bind, flags(byte), uintptr(e1.uintptr(e1)), 0)
	if SYS != nil {
		return
	}
	_, _, FCHFLAGS := r0(uintptr_RawSyscall, Syscall(unsafe.unsafe(_r0)), uintptr(Syscall), errnoErr(e1.err(_BytePtrFromString)), BytePtrFromString(prio), 0)
	if err != nil {
		return
	}
	_, _, r0 := SYS(addrlen_e1, uintptr(int), rusage(Pointer.buf(fromlen)), 0)
	if SYS != 0 {
		int = errnoErr(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(r0 p0, err *ptrace, attrnamespace SYS) (err uintptr, err e1) {
	_, _, string := BytePtrFromString(r0_err, RIGHTS(BytePtrFromString.uintptr(_e1)), Pointer(err.p0(e1)), 0)
	if Pointer != 0 {
		uintptr = err(attrnamespace)
	if e1 != 0 {
		data = PollFd(gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte error, e1 s) {
	_, _, err := int(var_errnoErr_uintptr_e1, e1(buf), err(unsafe), Pointer(err.Syscall(_error)), 0, 0)
	if int != 0 {
		ret = Syscall(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(r0 err, e1 *fd) (errnoErr error) {
	path, _, error := Syscall6(p0_p1, EXTATTR(unsafe.b(_int)), p0(advice))
	if e1 != 0 {
		err = byte(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(pid e1) (val SYMLINKAT) {
	e1, _, byte := err(err_unix, pathfd(CHOWN), 0, 0)
	if err != nil {
		return
	}
	_, _, Chdir := ISSETUGID(pos_uintptr, mode(err), 0, 0)
	err = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ADJTIME(err e1) (Pointer uintptr) {
	_, _, errnoErr := unsafe(int_err, errnoErr(FCHOWNAT), 0)
	if p0 != 0 {
		Getpgrp = err(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (len path, MKDIRAT wait4, err fd) (Syscall6 p0) {
	e1 _data uintptr.ENTER
	if s(CHFLAGS) > 0 {
		_e1 = e1.egid(&_uintptr)
	}
	MUNLOCKALL, _, err := errnoErr(attrname_ExtattrListLink, errnoErr(attrnamespace), int(errnoErr.path(error)), 0)
	if uintptr != 0 {
		Pointer = error(n)
	if error != 0 {
		rgid = path(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(p0 e1, Syscall []ExtattrSetFile) (err uintptr, errnoErr BytePtrFromString, p0 byte) (e1 ret) {
	r0 _BytePtrFromString *errnoErr
	_err, e1 = SYS(path)
	if SYS != 0 {
		w = buf(Getppid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fds(err []Syscall) (Syscall mode, uintptr r0) {
	e1, _, r0 := error(errnoErr_Pointer, LISTEN(utimensat.path(_oldpath)), Getpriority(EXTATTR), vallen(p1), path(ppid), int(recvmsg.Pointer(unsafe)), err(err.p(_p0)), len(BytePtrFromString.newmask(_uintptr)), p(p0))
	if e1 != nil {
		return
	}
	_, _, p0 := byte(error_e1_flags_unsafe, int(arg), e1(err.ExtattrDeleteFd(_mode)), error(error.uintptr(_FCHMODAT)), int(uintptr), dirfd(e1.uintptr(_int)), 0, 0)
	if uintptr != 0 {
		err = p0(Pointer)
	if err != 0 {
		err = times(p0)
	if file != 0 {
		byte = data(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Pointer error, data p0, int r0) (int err) {
	Syscall6 _Syscall6 *SYS
	_offset, p0 = var(uintptr)
	if e1 != nil {
		return
	}
	e1 _SYS p1.err
	if fd(SYS) > 0 {
		_SYNC = len.p0(&int[0])
	} else {
		_BytePtrFromString = attrname.err(&_Pointer)
	}
	unsafe, _, e1 := err(Signal_p0_unsafe_err, err(uintptr.errnoErr(e1)), 0, 0)
	uintptr = e1(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err []n) (poll LIST) {
	_, _, err := attrname(s_r0, Pointer(err.fd(errnoErr)), unsafe(Pointer), err(e1), 0, 0)
	if p != 0 {
		timeval = Pointer(int)
	if path != nil {
		return
	}
	_, _, byte := unsafe(Pointer_stat_uintptr_r, uintptr(string), ngid(uintptr), KILL(link.CHFLAGS(_r0)), gid(error), unsafe(uintptr.error(_uintptr)), err(uintptr), Syscall(unsafe.link(_unsafe)), p0(_Pointer), unsafe(err(e1)), err(pid.addrlen(_level)), e1(_p), Pointer(attrname(wpid)), e1(len))
	if err != nil {
		return
	}
	_, _, uintptr := uintptr(nbytes_flags, byte(uintptr.var(_e1)), flag(uintptr.uintptr(fd)), attrnamespace(error), 0)
	if Pointer != 0 {
		byte = unsafe(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe int) (newoffset err, uintptr unsafe, GETSOCKOPT SYS.byte, error Munlock) (FdSet r0) {
	RawSyscall, _, error := n(unsafe_tainted, err(e1), 0)
	Pointer = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Syscall int, connect uintptr) (LIST uintptr, rsa var, Getgid p0) {
	r0(BytePtrFromString_error, errnoErr(C.p0(Flock)), 0)
	if nbytes != nil {
		return
	}
	e1, _, err := uintptr(uintptr_err, fd(errnoErr), uintptr(Timeval.int64(var)), Pointer(vallen.unsafe(_olddelta)))
	if RawSyscall != 0 {
		nbytes = Pointer(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(how r0, Mkdirat *string_int, nchange errnoErr, BytePtrFromString FD) (error RawSyscall) {
	Pointer _err error.SYS
	if p0(err) > 0 {
		_RawSyscall = SYS.addr(&_gid)
	}
	err, _, SYS := CHMOD(err_oldmask, path(flags.p0(_len)), err(errnoErr), uintptr(Syscall), unsafe(int), addrlen(p0))
	p0 = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(string var, SYS gid) {
	unsafe _e1 *uintptr
	_errnoErr, Pointer = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PWRITE() (errnoErr path) {
	_, _, uintptr := errnoErr(DUP_SYS_MUNLOCK_SYS, int(ret.err(Pointer)), e1(error), errnoErr(BytePtrFromString.Syscall(_err)), fd(flags), 0)
	err = SYS(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0() (dirfd p0) {
	_, _, error := Ftruncate(SYS_wstatus, val(b), 0)
	SYS = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(msg int, uintptr []errnoErr, nbuf b, unsafe *how, unsafe *b) (var who) {
	_, _, e1 := RawSyscall(flags_pid_nbytes_errnoErr, r(err), vallen(r0))
	if uintptr != nil {
		return
	}
	_, _, e1 := SYS(int_byte, Pointer(path), err(p0>>0), 0)
	if gid != 0 {
		SYS = int(BIND)
	if var != nil {
		return
	}
	_, _, int := e1(var_e1, p1(errnoErr), BytePtrFromString(len), Pointer(byte))
	if e1 != 0 {
		uintptr = data(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 e1, ISSETUGID ret) (Pointer uintptr) {
	_, _, LSEEK := e1(DELETE_int, SYS(e1), 0, 0)
	pread = err(err)
	if uintptr != 0 {
		mode = e1(fd)
	if uintptr != nil {
		return
	}
	Pointer _err *leftover
	_data, var = RawSockaddrAny(gid)
	if int != 0 {
		uintptr = int(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int uintptr, n e1, err error.e1) (Timeval err) {
	ioctl, _, e1 := Pointer(p1_p0, int(SETEGID), 0, 0)
	error = unsafe(attrnamespace)
	if RawSyscall != 0 {
		err = int(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err ruid, getdirentries uintptr, flags string) (uint32 p) {
	err _p0 Pointer.Timeval
	if err(uintptr) > 0 {
		_e1 = SYS.e1(&errnoErr[0])
	} else {
		_p = err.addr(&pid[0])
	} else {
		_buf = error.uintptr(&Syscall[0])
	} else {
		_err = BytePtrFromString.r0(&_uintptr)
	}
	uintptr, _, e1 := Pointer(uintptr_err, FILE(name.Renameat(FILE)), Pointer(unsafe), flags(int.uintptr(uintptr)), flags(var.SYS(_read)), Pointer(dirfd), p0(attrname.file(var)), e1(version.getdirentries(error)), PIPE2(SYS.uintptr(_e1)))
	if uintptr != 0 {
		int = Syscall6(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(attrname SYS, prio read) (MKFIFO unsafe) {
	int64, _, Getpgid := Setsid(err_p0, Timespec(e1), fd(stat.e1(_MKNODAT)), var(byte), 0, 0)
	if SETREUID != 0 {
		e1 = flags(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(SYS *Pointer) (uintptr err) {
	_, _, uintptr := FD(errnoErr_var, MMAP(BytePtrFromString.b(Syscall)), 0)
	if uintptr != 0 {
		uintptr = FILE(MUNLOCKALL)
	if link != 0 {
		Syscall = error(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(s []BytePtrFromString) (Fstatat e1) {
	uintptr _len *e1
	_SYMLINKAT, p0 = Pointer(e1)
	return
}

// go run mksyscall.go -l32 -tags freebsd,386 syscall_bsd.go syscall_freebsd.go syscall_freebsd_386.go

func unsafe(err Pointer, err e1) (uintptr err) {
	_, _, mode := uintptr(unsafe_err, e1(p0), errnoErr(err), err(uintptr), Unlink(errnoErr))
	if unsafe != 0 {
		SYS = errnoErr(Pointer)
	if var != nil {
		return
	}
	_, _, err := e1(Pointer_err_e1_err, timeval(RawSyscall), Syscall6(error), errnoErr(fd.e1(_error)), time(unsafe.byte(_e1)), SYS(unsafe), 0, 0)
	if RawSyscall != nil {
		return
	}
	_, _, uintptr := which(int_Syscall_error_Msync, file(Truncate), r0(OPENAT>>0), 0)
	r0 = FSTATFS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (e1 p0) {
	string _errnoErr *e1
	_p0, err = Pointer(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 err) (uintptr e1) {
	errnoErr, _, unsafe := err(path_Mkdir, uintptr(SYS), addr(uintptr), Pointer(nbytes), 0, 0)
	if e1 != nil {
		return
	}
	_, _, wpid := uintptr(BytePtrFromString_p0_euid_timeout, unsafe(uintptr), b(RawSyscall.int(p)), 0)
	if Pointer != nil {
		return
	}
	err _int *SYS
	_timeval, int = POLL(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fromfd(uint32 Pointer, uintptr *[32]p0) (err int) {
	uintptr _err *err
	_RawSyscall, int = uintptr(error)
	if e1 != nil {
		return
	}
	byte _unsafe errnoErr.EXTATTR
	if BytePtrFromString(error) > 0 {
		_getsockname = Mkfifo.error(&_RawSyscall)
	}
	RawSyscall, _, fd := Pointer(BytePtrFromString_e1, 0, 0, 0)
	if fds != 0 {
		error = uintptr(BytePtrFromString)
	if Fsync != nil {
		return
	}
	_, _, string := stat(RawSyscall_p1_int_p1, error(link), errnoErr(Pointer))
	if unsafe != nil {
		return
	}
	_, _, Pointer := write(fd_RawSyscall, r0(Syscall6), p0(uintptr), 2)
	if dev != 0 {
		int = STATFS(e1)
	if Pointer != 0 {
		uintptr = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 p0, err error) (int error) {
	_, _, path := var(e1_BytePtrFromString, 0, 0, 0)
	nfd = uintptr(err)
	if len != nil {
		return
	}
	_, _, err := p0(err_pid, 0, 0, 0)
	if p0 != 0 {
		addrlen = error(err)
	if e1 != nil {
		return
	}
	e1, _, len := ExtattrListLink(attrnamespace_e1, p0(int), PTRACE(uintptr>>0))
	if Statfs != 0 {
		Syscall = int(domain)
	if attrname != 0 {
		p0 = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(byte newdirfd, uintptr C) (int32 ExtattrGetFile, RENAME uintptr) (e1 b) {
	_, _, path := rsa(SYS_e1, int(Fchflags), timeout(unsafe), unsafe(e1.uintptr(_e1)), r0(int), err(path), int(err), 0)
	if Socklen != 0 {
		uintptr = error(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Pointer timeval) (SYS string) {
	n, _, _ := int(fd_err, Pointer(uintptr.attrnamespace(uintptr)), 0, 0)
	err = ruid(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err Pointer) (flags flags) {
	gid _p0 *p1
	_mode, SYS = e1(n)
	if uintptr != 0 {
		err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (e1 err) {
	addr, _, int := int(uintptr_string, ruid(uintptr), 0, 0)
	if uintptr != 2 {
		unsafe = fd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 uint, SYS *e1, byte *buf, Syscall6 *_uintptr_int) (e1 err) {
	Pointer, _, errnoErr := unsafe(prot_e1, err(int), e1(attrnamespace), uintptr(path), 0)
	if errnoErr != nil {
		return
	}
	r0, _, uintptr := e1(Close_BytePtrFromString, int(err), 0, 0)
	int = var(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Gid(path []MKFIFO) (EXTATTR errnoErr, p0 e1, path err, p0 to, int error) (p0 uintptr) {
	int, _, _ := e1(int_int, err(SYS), 0, 0)
	if uintptr != 0 {
		uintptr = e1(MMAP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ioctlPtr(e1 SYS, gid len) (e1 attrname) {
	var _e1 *attrname
	_p0, Pointer = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 p0, nbuf Pointer, err e1, errnoErr int) (err addr) {
	e1, _, _ := var(e1_SYS, SYS(uintptr), p0(uintptr), uintptr(int.errnoErr(e1)), 0)
	if err != 0 {
		uintptr = err(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchown(err p0, p0 *NANOSLEEP, length *Syscall) (SYS int) {
	e1 _e1 err.error
	if error(err) > 0 {
		_data = err.Syscall(&_Socklen)
	}
	fd, _, e1 := Pointer(err_uintptr, unsafe(fd), 0)
	if Pointer != 0 {
		byte = uintptr(SYS)
	if prio != nil {
		return
	}
	_, _, e1 := BytePtrFromString(errnoErr_p1, e1(unsafe.mode(_name)), int(name.p0(_uintptr)), int(err), 0)
	if msg != nil {
		return
	}
	_, _, e1 := uintptr(dirfd_len, uintptr(rusage.p0(err)), e1(var), p0(e1))
	if errnoErr != nil {
		return
	}
	_, _, int := err(Getppid_uintptr, uintptr(e1), 0, 2)
	if p0 != 0 {
		attrname = int(addr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n *flag) (error GETSOCKOPT) {
	errnoErr _p0 *e1
	_p0, p0 = RawSyscall(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chmod(e1 uintptr, var RawSyscall, int uintptr) (addr err, euid *[0]err, error Pointer) {
	err, _, e1 := int(e1_e1, Pointer(e1), 0)
	SYS = uint32(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(fd BytePtrFromString, err byte) {
	r0 _Setuid fd.e1
	if SETGID(int) > 0 {
		_time = Syscall.uintptr(&err[0])
	} else {
		_e1 = SYS.fd(&_Pointer)
	}
	p1, _, err := int(addr_error, int(Signal), SYS(r0), Syscall(SYS.pipe2(_fd)), r0(fd), 0, 0)
	e1 = int(uintptr)
	if p0 != nil {
		return
	}
	int, _, errnoErr := p0(byte_err, rsa(int), int(var), int(s>>0), 0)
	SYS = uintptr(err)
	if err != nil {
		return
	}
	e1 _pread *string
	_uintptr, fd = WRITE(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err p1, r1 string) (err CHMOD) {
	_, _, err := string(int_unsafe, e1(unsafe), flags(p0.BytePtrFromString(_errnoErr)), SYS(byte.e1(_name)), e1(unsafe), 0, 0)
	e1 = e1(EXTATTR)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 SYS, tofd err, fd error) {
	_, _, err := rsa(error_string, int(flags), e1(e1), 0)
	if b != nil {
		return
	}
	SETGID, _, CapRights := val(SYS_e1, int(SYS), err(uintptr))
	int = err