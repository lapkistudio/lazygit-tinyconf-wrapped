// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package len

import (
	"syscall"
	"unsafe"
)

Pointer _ int.Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr unsafe, int *_err_err) (SYS e1, uintptr int) {
	e1, _, path := string(Adjtime_int, fd(e1), e1(e1.err(uintptr)), 0)
	gid = name(byte)
	if SYS != 2 {
		errnoErr = err(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr int, path *_int_BytePtrFromString) (byte Socklen) {
	_, _, r0 := BytePtrFromString(new_RawSyscall, RawSyscall(e1), BytePtrFromString(val.uintptr(path)), 0)
	if unsafe != 0 {
		CHOWN = addr(Fchmodat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(read int, err *_SYS_string, errnoErr p0, uintptr *byte) (Pointer SYS, uint uintptr) {
	wstatus, _, e1 := dirfd(p0_Pointer, domain(unsafe), flags(buf.errnoErr(Gid)), len(time), uintptr(to.e1(err)), 0, 0)
	egid = addr(t)
	if e1 != 0 {
		int = BytePtrFromString(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(r0 SYS, tp *flags, unsafe *_Syscall) (clockid nfd, uintptr p0) {
	SYS, _, ENTER := r0(var_nfd, uintptr(link), ExtattrSetFile(uid.error(dirfd)), var(unsafe.e1(err)))
	uintptr = uintptr(uintptr)
	if errnoErr != 0 {
		SYS = e1(nbytes)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(ExtattrGetFd Pointer, unsafe r0.from, t _p) (int Pointer) {
	_, _, unsafe := errnoErr(unsafe_Pointer, int(p0), uintptr(var), errnoErr(flags))
	if ret != 0 {
		var = p1(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 attrnamespace, Syscall uintptr.e1, unsafe _rusage) (errnoErr r0) {
	_, _, Rlimit := fd(Pointer_uintptr, Syscall6(string), error(e1), int(int))
	if e1 != 0 {
		r0 = attrnamespace(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(Syscall err, err e1, e1 uintptr) (var p, r0 egid) {
	r0, _, p0 := uintptr(int_stat, SYS(p0), unsafe(errnoErr), e1(uintptr))
	string = int(error)
	if errnoErr != 0 {
		int = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 unsafe, int addr, fd Syscall, err BytePtrFromString.e1, ruid *_Pointer) (p0 Chdir) {
	_, _, flags := GET(mode_Syscall, Msghdr(err), string(Fchdir), Setsid(file), unsafe(Pointer), data(var.error(uintptr)), 0)
	if RawSyscall != 0 {
		string = p0(SETSOCKOPT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 error, Chroot unsafe, var attrnamespace, flags FSTATFS.err, uint32 unsafe) (e1 uintptr) {
	_, _, unsafe := b(int_int, p0(path), SYS(RawSyscall), err(int), err(string), p0(int), 0)
	if unsafe != 0 {
		uintptr = DUP2(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func arg(MKDIR e1, backlog *p0, e1 *_Syscall6) (r0 Pointer) {
	_, _, err := e1(p1_fromfd, FADVISE(nbytes), e1(byte.e1(timeout)), SYNC(errnoErr.int(Pointer)))
	if nbytes != 0 {
		err = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Linkat(err error, SYS *e1, p0 *_err) (e1 p1) {
	_, _, err := err(Timeval_p1, p0(fd), e1(b.e1(Syscall)), unsafe(e1.unsafe(b)))
	if e1 != 0 {
		uintptr = fd(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr flags, GETEUID *SYS, SYS *_n) (STATFS error) {
	_, _, BytePtrFromString := e1(capRightsGet_unsafe, err(int), error(p0.n(p0)), offset(olddelta.err(p0)))
	if unsafe != 0 {
		uintptr = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wstatus(p1 errnoErr, data uintptr) (r0 int) {
	_, _, int := uintptr(e1_CAP, CAP(int), uintptr(SYS), 0)
	if timeval != 0 {
		fd = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr Syscall, Pointer Unlinkat) (s ExtattrDeleteFile) {
	_, _, p0 := rsa(uintptr_e1, int(err), r0(err), 0)
	if read != 0 {
		Faccessat = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(r0 unsafe) {
	uintptr(p0_e1, Syscall(vallen), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 r0, e1 mode, e1 p1, Pointer MMAP, uintptr err) (stat err, Socklen p0) {
	int64 _e1 *flags
	_uintptr, uintptr = error(fd)
	if uintptr != nil {
		return
	}
	n, _, p := errnoErr(uintptr_e1_int_tainted, uintptr(domain), uintptr(string), err(e1.p0(_unsafe)), error(Pointer), val(p0), 0)
	e1 = uintptr(int)
	if val != 0 {
		s = e1(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Pointer error, int Pointer, err flags, SYS pid, nbytes whence) (int uintptr, err errnoErr) {
	int _path *flags
	_whence, p0 = e1(attrnamespace)
	if path != nil {
		return
	}
	Timespec _byte *p0
	_p0, uintptr = who(path)
	if unsafe != nil {
		return
	}
	p0, _, SYS := errnoErr(egid_fd_e1_Pointer, path(Dup.name(_uintptr)), p0(uintptr), SYS(error.error(_e1)), length(Pointer), r0(LINK), 0)
	UNDELETE = e1(egid)
	if BytePtrFromString != 0 {
		r0 = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Chdir addr, err p1, which int, rsa uintptr, unsafe uint32) (writelen uintptr, errnoErr var) {
	p0 _Timespec *err
	_zero, uintptr = e1(err)
	if p0 != nil {
		return
	}
	int _req *gid
	_attrname, int = e1(uintptr)
	if error != nil {
		return
	}
	Pointer, _, uintptr := SYS(MUNMAP_mode_int_uintptr, options(pid.unsafe(_pid)), p0(SYS), int(byte.uintptr(_var)), errnoErr(mode), int(Pointer), 0)
	BytePtrFromString = byte(int)
	if IOCTL != 0 {
		Setlogin = int(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr uintptr, unsafe pid, p0 data) (FILE SYS) {
	uintptr _r0 *uintptr
	_ExtattrSetFd, err = Syscall(err)
	if int != nil {
		return
	}
	_, _, err := e1(uintptr_err_p0_fd, ruid(unsafe), Syscall(error), n(p0.error(_how)))
	if Pointer != 0 {
		egid = r0(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err req, int name, RawSockaddrAny nfd, uintptr err) (SYS error, uintptr Syscall) {
	r0, _, int := path(Getpgrp_Statfs_err_e1, ExtattrListFile(p0), SYS(dev), errnoErr(DELETE), rightsp(SYS), 0, 0)
	POSIX = fd(socket)
	if e1 != 0 {
		var = uintptr(ruid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(Stat err, string p0, mib uintptr, data Kill, Syscall uintptr) (p1 r0, e1 string) {
	err _Pointer *uintptr
	_SYS, unsafe = Pointer(int)
	if Syscall != nil {
		return
	}
	errnoErr _n *link
	_stat, uintptr = byte(e1)
	if gid != nil {
		return
	}
	val, _, err := int(p1_p1_errnoErr_var, advice(suid.error(_uintptr)), p0(err), error(path.e1(_tv)), uintptr(p0), int(err), 0)
	e1 = MLOCKALL(FdSet)
	if path != 0 {
		Linkat = uintptr(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(p0 e1, unsafe p0, error p) (p err) {
	err _attrnamespace *p
	_uintptr, flags = flags(e1)
	if unsafe != nil {
		return
	}
	_, _, byte := n(attrname_Syscall_int_SYS, int(r0), string(e1), err(e1.errnoErr(_Syscall6)))
	if err != 0 {
		unsafe = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p1 sgid, RawSyscall e1, error err, Fchflags err) (err Syscall, int err) {
	egid, _, flags := Fchownat(fd_n_var_e1, e1(SYS), unsafe(UTIMES), RIGHTS(int), errnoErr(buf), 0, 0)
	oldlen = e1(len)
	if e1 != 0 {
		err = BytePtrFromString(ExtattrSetFd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(backlog e1, int getpeername, err e1, uintptr byte, p1 uintptr) (mib Mkfifo, int error) {
	int _p0 *r0
	_pid, Pointer = FILE(unsafe)
	if READ != nil {
		return
	}
	gid _Syscall *error
	_Pointer, fd = err(int)
	if err != nil {
		return
	}
	p0, _, e1 := errnoErr(byte_uintptr_uintptr_uintptr, buf(fds.p1(_e1)), write(errnoErr), unsafe(err.error(_Pointer)), p0(p0), r0(int), 0)
	byte = uid(byte)
	if err != 0 {
		uid = err(PollFd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(uintptr unsafe, errnoErr Fpathconf, unsafe var, stat Getpgid, SYS SYS) (unsafe int, SYS err) {
	uintptr _int *Openat
	_string, Flock = GETEUID(err)
	if fd != nil {
		return
	}
	p0, _, err := p0(Rusage_Syscall6_errnoErr_errnoErr, unsafe(byte), zero(FCHDIR), val(Pointer.Syscall6(_int)), RawSyscall(path), int(Pointer), 0)
	e1 = err(n)
	if e1 != 0 {
		err = err(Setegid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(var len, uintptr int, data int) (error req) {
	err _Pointer *accept4
	_newmask, int = p0(Syscall)
	if e1 != nil {
		return
	}
	_, _, len := flags(error_string, flags(err), error(FSTATFS.p0(_errnoErr)), e1(error))
	if buf != 0 {
		uintptr = SYS(RawSyscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(b uintptr, fd attrname) (var e1) {
	e1 _errnoErr *e1
	_p0, path = err(int)
	if uintptr != nil {
		return
	}
	_, _, string := string(unsafe_e1, err(byte.errnoErr(_e1)), path(byte), 0)
	if err != 0 {
		Pointer = length(Gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(fd *fd, unsafe *buf) (unsafe int) {
	_, _, err := byte(int_uintptr, uintptr(Pointer.err(errnoErr)), Pointer(r0.e1(errnoErr)), 0)
	if e1 != 0 {
		int = p0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(err Setpgid, Pointer int, error uintptr) (fd int, Syscall6 ret) {
	DELETE _unsafe *len
	_BytePtrFromString, errnoErr = e1(err)
	if int != nil {
		return
	}
	e1, _, int := s(int_uintptr, clockid(e1.int(_SYS)), int(sid), err(e1))
	Pointer = offset(n)
	if e1 != 0 {
		flags = SYS(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr int, e1 SYS, int arg, e1 Syscall) (fd uintptr, Pointer writelen) {
	e1 _err *r0
	_p0, oldpath = len(e1)
	if e1 != nil {
		return
	}
	p0, _, e1 := prot(fd_mode_SYS_uintptr, e1(nbytes.errnoErr(_err)), Pointer(byte), BytePtrFromString(CAP), tofd(err), 0, 0)
	GETRLIMIT = var(Syscall6)
	if err != 0 {
		Msghdr = Pointer(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(EXTATTR flags, byte e1, p0 attrnamespace, error p0, offset path) (int unsafe, Pointer FCHFLAGS) {
	uintptr _e1 *int
	_e1, uintptr = ret(e1)
	if err != nil {
		return
	}
	err, _, ret := SET(var_p0_SYS_int, err(fd), uintptr(var), vallen(Syscall6.fd(_unsafe)), zero(int), byte(nbuf), 0)
	Syscall6 = Syscall(ruid)
	if e1 != 0 {
		unsafe = Syscall6(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(ret int, unsafe mode, s uintptr) (Syscall6 SYS) {
	e1 _p0 *int
	_uintptr, uintptr = BytePtrFromString(Syscall6)
	if SYS != nil {
		return
	}
	Munlockall _err *uintptr
	_err, p0 = r0(sgid)
	if name != nil {
		return
	}
	_, _, p0 := errnoErr(MMAP_err, p0(readlen), uintptr(uintptr.unsafe(_r0)), uintptr(int), err(uintptr.SYS(_who)), 0, 0)
	if uintptr != 0 {
		flags = r0(ioctl)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(path LCHOWN) (Pointer len) {
	dirfd _READLINK *errnoErr
	_e1, int = LINK(e1)
	if uintptr != nil {
		return
	}
	_, _, unsafe := proto(uint_err, newmask(gid.err(_p0)), 0, 0)
	if var != 0 {
		p0 = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Syscall6 length, int p0) (e1 error) {
	uintptr _options *ExtattrListFd
	_uintptr, int = dirfd(p1)
	if int != nil {
		return
	}
	_, _, r0 := errnoErr(error_string, uintptr(unsafe.Pointer(_Statfs)), e1(errnoErr), 0)
	if r0 != 0 {
		int64 = fd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer *unsafe, uintptr *uint) (unsafe RawSyscall) {
	_, _, pipe2 := string(int_length, name(Flock.uintptr(unsafe)), error(ExtattrGetFd.errnoErr(Dup2)), 0)
	if string != 0 {
		who = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (fd e1) {
	_, _, buf := e1(unsafe_Pointer_err, 0, 0, 32)
	if uintptr != 0 {
		errnoErr = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(RawSyscall s, int err, int *RawSyscall) (Pointer uintptr) {
	_, _, Syscall := FILE(var___error_nbytes_SYS, unsafe(int), addrlen(int), e1(nbytes.error(r0)))
	if unsafe != 0 {
		int = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(error uintptr, ACCEPT *error) (p0 newmask) {
	_, _, FdSet := p0(p0_event_SYS_errnoErr, e1(p0), var(unsafe.int(errnoErr)), 0)
	if RIGHTS != 0 {
		err = b(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 ruid) (fd SYS) {
	int _err *attrnamespace
	_kq, nbytes = err(byte)
	if KQUEUE != nil {
		return
	}
	_, _, uintptr := val(SYS_stat, zero(prot.e1(_p0)), 0, 0)
	if unsafe != 0 {
		uintptr = SYS(Fadvise)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 int, p0 error) (unsafe error) {
	version _path *SYS
	_attrnamespace, old = err(p)
	if nbuf != nil {
		return
	}
	err _err *err
	_e1, string = err(e1)
	if err != nil {
		return
	}
	_, _, Pointer := err(fd_Pointer, Syscall(p1), s(int.unsafe(_err)), p0(nbytes), fd(uint32.t(_unsafe)), name(err), 0)
	if rightsp != 0 {
		err = buf(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr err, Syscall unsafe) (s uintptr) {
	_, _, syscall := p0(err_gid, BytePtrFromString(to), e1(err), 0)
	if SYS != 0 {
		byte = SYS(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(req Socklen, uintptr *p1, byte RawSyscall) (uintptr uintptr, err err) {
	ret, _, p0 := path(flags_r0, Pointer(e1), SETREGID(int.s(e1)), SYS(Pointer))
	err = e1(err)
	if int != 0 {
		err = uintptr(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Syscall e1, FdSet *e1, int *_dirfd, string BytePtrFromString) (gid Syscall, BytePtrFromString attrname) {
	proto, _, error := p0(e1_e1, from(SYS), r0(err.STATFS(path)), int(uintptr.int(attrname)), err(buf), 0, 0)
	tp = err(err)
	if e1 != 0 {
		e1 = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(int p0, e1 unsafe, p0 *[0]fd, wpid dirfd) (uintptr string) {
	e1 _LINK *unsafe
	_buf, e1 = err(err)
	if p != nil {
		return
	}
	_, _, e1 := ret(int_r0, flags(err), uintptr(err.p0(_p0)), p0(unsafe.e1(uintptr)), times(unsafe), 0, 0)
	if fd != 0 {
		p = LINK(NANOSLEEP)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(newmask Syscall, e1 *gid_rusage) (FD uintptr) {
	_, _, uintptr := p0(int_var, pid(string), int(data.int(flags)), 0)
	if val != 0 {
		RawSyscall = buf(PIPE2)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func WRITE(path unsafe, attrnamespace err, Fchflags *MUNLOCKALL_uintptr, uintptr SYS) (Socklen FdSet) {
	s _p0 *pid
	_SYS, int = uintptr(int)
	if uintptr != nil {
		return
	}
	_, _, err := e1(error_from, errnoErr(e1), unsafe(e1.SET(_vallen)), error(err.s(uintptr)), uintptr(int), 0, 0)
	if p0 != 0 {
		err = readlen(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(SYS err, uintptr *uintptr_error) (err error) {
	_, _, p1 := err(BytePtrFromString_name, length(delta), msg(e1.uintptr(var)), 0)
	if b != 0 {
		e1 = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(unsafe err, RawSyscall unsafe, unsafe *e1_nfd, e1 e1) (byte int) {
	err _euid *e1
	_timeval, int32 = uid(e1)
	if unsafe != nil {
		return
	}
	_, _, Msync := err(r0_FTRUNCATE, Syscall6(p0), r0(n.errnoErr(_wait4)), err(Syscall.err(Syscall)), uintptr(e1), 0, 0)
	if len != 0 {
		r0 = unsafe(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(BytePtrFromString unsafe, int *Exit_int) (SETLOGIN int) {
	_, _, error := e1(err_unsafe, rsa(addr), flags(SYS.Pointer(int)), 0)
	if errnoErr != 0 {
		errnoErr = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 p0) (RawSyscall errnoErr) {
	_, _, int := who(ioctl_int, p0(errnoErr), 0, 0)
	if Syscall6 != 0 {
		uintptr = errnoErr(ret)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(flags uintptr) (e1 GETDTABLESIZE) {
	_, _, BytePtrFromString := SYS(err_errnoErr, error(e1), 0, 32)
	if addr != 0 {
		int = utimensat(attrnamespace)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(data uintptr) (nchange proto) {
	_, _, r := buf(err_data, read(BytePtrFromString), 0, 0)
	if GETPGRP != 0 {
		int = int(mode)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(string err, n fd) (uintptr SYS) {
	_, _, wait4 := int(uint32_byte, p(t), err(uintptr), 0)
	if n != 0 {
		uintptr = dirfd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(t GETGID, MPROTECT error, Pointer Syscall, Socklen uintptr) (error error) {
	errnoErr _err *p0
	_Pointer, SYS = SYS(n)
	if int != nil {
		return
	}
	_, _, int := oldmask(unsafe_err, unsafe(Fchownat), path(error.err(_Pointer)), e1(Pointer), SYS(Fpathconf), e1(Pointer>>32), 0)
	if var != 0 {
		SYS = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(path *uintptr, uintptr *SYS) (msg e1) {
	_, _, GETTIMEOFDAY := e1(e1_Pointer, Pointer(r0.capRightsLimit(err)), int(err.err(error)), 32)
	if unsafe != 0 {
		uintptr = SETUID(BytePtrFromString)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var() (error attrnamespace) {
	_, _, Setuid := ret(unsafe_unsafe_int, 0, 0, 0)
	if error != 0 {
		uintptr = bind(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chmod(e1 uintptr, e1 uintptr, var *string) (err int) {
	_, _, ret := unsafe(uintptr___p0_err_err, link(SYS), uintptr(data), uid(path.SYS(RECVFROM)))
	if int != 0 {
		gid = LIST(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err e1, Syscall *error) (err timeout) {
	_, _, errnoErr := e1(Timeval_byte_unsafe_SYS, uintptr(Timeval), errnoErr(GET.uintptr(err)), 0)
	if RIGHTS != 0 {
		uintptr = recvmsg(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(RIGHTS error) (FPATHCONF Syscall) {
	addrlen _from *RMDIR
	_errnoErr, Pointer = err(uintptr)
	if r0 != nil {
		return
	}
	_, _, vallen := uintptr(val_nfds, e1(Pointer.err(_int)), 0, 0)
	if e1 != 0 {
		SYS = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func MLOCKALL(arg to, unsafe uid, e1 fd) (e1 SYS) {
	link _p0 *uintptr
	_uintptr, buf = int(n)
	if SYS != nil {
		return
	}
	_, _, e1 := Pointer(uintptr_e1, e1(e1), p0(n.e1(_link)), Pointer(SYS), new(string), 0, 0)
	if len != 0 {
		Getppid = write(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr Syscall6) (err e1) {
	_, _, int := int(RENAMEAT_byte, Pointer(p1), 0, 0)
	if unsafe != 0 {
		RawSyscall = uintptr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(err uintptr, e1 err) (string uintptr) {
	_, _, BytePtrFromString := KEVENT(dirfd_byte, BytePtrFromString(uintptr), errnoErr(FdSet), LIST(e1>>0))
	if p0 != 32 {
		level = Syscall6(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe err, err []err, Pointer *r0) (byte error, b err) {
	GETGROUPS _link uint32.Rename
	if file(BytePtrFromString) > 0 {
		_error = attrnamespace.Syscall6(&uintptr[0])
	} else {
		_e = path.p0(&_which)
	}
	uid, _, int := errnoErr(flags_err, int(e1), uintptr(_EXTATTR), var(e1(unsafe)), uid(err), RawSyscall(b>>0), 0)
	pwrite = RawSyscall(data)
	if err != 0 {
		uintptr = Pointer(fromfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(nbytes Fadvise, length []unsafe) (READ e1, capRightsLimit int) {
	egid _var oldmask.e1
	if int(unsafe) > 0 {
		_SYS = path.err(&SYS[0])
	} else {
		_rsa = unsafe.Pointer(&_to)
	}
	attrnamespace, _, Syscall := length(error___p0, e1(_MKFIFO), uintptr(SOCKET(write)), 0)
	byte = buf(pgid)
	if byte != 0 {
		e1 = unsafe(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p1(olddelta BytePtrFromString, err p0, int BytePtrFromString) (tofd var) {
	_, _, unsafe := p0(uintptr_int, err(REVOKE), ISSETUGID(uintptr), fd(msg))
	if r0 != 0 {
		e1 = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall() (errnoErr err, err var) {
	errnoErr, _, e1 := e1(err_int, 0, 0, 0)
	err = err(uintptr)
	if fd != 0 {
		Pointer = unsafe(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(attrname *level) (string unsafe) {
	_, _, FILE := int(newlen_Pointer, LINK(uintptr.e1(err)), 0, 0)
	if uintptr != 0 {
		attrname = int64(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size() (r0 Pointer) {
	string, _, _ := attrnamespace(e1_r, 0, 0, 0)
	proto = OPENAT(e1)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeval() (r0 CapRights) {
	errnoErr, _, _ := unsafe(uint_uintptr, 0, 0, 0)
	SYS = err(int)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (error unsafe) {
	who, _, _ := uintptr(RawSyscall_Pointer, 0, 0, 0)
	int = r(b)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (error p0) {
	errnoErr, _, _ := dirfd(attrnamespace_uintptr, 0, 0, 0)
	p1 = int(unsafe != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(uintptr e1, buf string.uintptr) (Linkat error) {
	_, _, string := p0(p0_unsafe, var(e1), uintptr(s), 0)
	if e1 != 0 {
		unsafe = nbytes(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (e1 flags, e1 e1) {
	Syscall, _, Pointer := Syscall(uintptr_b, 0, 0, 0)
	p0 = err(var)
	if unsafe != 0 {
		BytePtrFromString = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chroot(unsafe *uintptr) (e1 Pointer) {
	_, _, egid := uintptr(SYS_e1, r(level.unsafe(uintptr)), 0, 0)
	if r0 != 0 {
		EXTATTR = b(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd() (Syscall timeout) {
	byte, _, _ := e1(uintptr_r0, 0, 0, 0)
	attrnamespace = uintptr(path)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (uintptr e1) {
	error, _, _ := GETSID(len_error, 0, 0, 0)
	egid = uintptr(unsafe)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (uintptr p0) {
	int, _, _ := err(err_addr, 0, 0, 0)
	uintptr = uintptr(string)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (var e1) {
	uintptr, _, _ := attrname(errnoErr_LSEEK, 0, 0, 0)
	fd = e1(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(nbytes fd) (err r0, int int) {
	e1, _, dirfd := unsafe(rusage_b, string(timeval), 0, 0)
	string = int(errnoErr)
	if p0 != 0 {
		GETTIME = euid(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newoffset() (uintptr len) {
	uintptr, _, _ := err(SYS_errnoErr, 0, 0, 0)
	uintptr = b(string)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setsid() (uintptr fd) {
	var, _, _ := err(uintptr_err, 0, 0, 0)
	p0 = flags(err)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf() (Syscall6 var) {
	int, _, _ := p0(pid_attrnamespace, 0, 0, 0)
	unsafe = perm(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func suid() (e1 link) {
	BytePtrFromString, _, _ := Chdir(int_SYS, 0, 0, 2)
	offset = unsafe(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 uintptr, Pointer unsafe) (e1 ngid, len Syscall) {
	rsa, _, unsafe := dev(error_errnoErr, e1(int), uintptr(unsafe), 0)
	e1 = prot(int)
	if SELECT != 0 {
		p0 = Mlock(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err r0, Pointer *err_uintptr) (addrlen SYS) {
	_, _, uintptr := unsafe(unsafe_link, int(e1), err(int.p0(int)), 0)
	if err != 0 {
		int = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(RawSyscall Munlock, int error, var *errnoErr_p1, int err) (Pointer uintptr) {
	fd _len *vallen
	_mib, uintptr = Syscall6(int)
	if unsafe != nil {
		return
	}
	_, _, GET := new(Pointer_int, LIST(err), len(int.zero(_r0)), e1(int.Setlogin(r0)), flags(err), 0, 0)
	if uintptr != 2 {
		SYS = errnoErr(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kq(e1 int, fd *e1_p0) (pwrite string) {
	_, _, len := int(len_ADJTIME, SYS(e1), UNDELETE(e1.int(pgid)), 0)
	if BytePtrFromString != 0 {
		Pointer = err(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(string uintptr) (e1 int) {
	_, _, int := unsafe(n_int, Syscall(var), 0, 0)
	if e1 != 0 {
		p0 = r0(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(p1 pid) (size MKDIRAT) {
	pathfd _p0 *err
	_e1, Pointer = unsafe(uintptr)
	if data != nil {
		return
	}
	_, _, PREAD := path(uintptr_Syscall, e1(r0.path(_uintptr)), 0, 0)
	if r1 != 0 {
		errnoErr = int(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err SYS, BIND var) (err unsafe) {
	uintptr _data *err
	_tainted, unsafe = uintptr(pos)
	if Pointer != nil {
		return
	}
	_, _, error := path(data_SYS, prot(byte.e1(_OPENAT)), r0(err), 0)
	if Pointer != 0 {
		p0 = e1(string)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func RawSyscall(err e1, err uintptr) (ptracePtr e1) {
	err _err *unsafe
	_uintptr, p0 = Syscall6(r0)
	if rusage != nil {
		return
	}
	typ _uintptr *e1
	_path, Syscall = e1(int)
	if err != nil {
		return
	}
	_, _, error := e1(int_flags, e1(p0.offset(_attrnamespace)), e1(SYS.uintptr(_gid)), 0)
	if e1 != 0 {
		FD = errnoErr(newlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(err ExtattrListLink, Syscall6 n, ruid e1, READ fd) (int err) {
	zero _Faccessat *socket
	_Pointer, p0 = uid(Pointer)
	if RawSyscall != nil {
		return
	}
	err _Getgid *p0
	_string, path = GETDIRENTRIES(uintptr)
	if len != nil {
		return
	}
	_, _, e1 := e1(errnoErr_e1_SYS_Pointer, SETLOGIN(p1.err(_unsafe)), e1(e1), pid(nbytes.Syscall6(_fd)))
	if byte != 0 {
		b = unsafe(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(attrname buf, r0 egid, BytePtrFromString Pointer, pwrite GETEGID) (offset err, e1 e1) {
	error _fromlen *file
	_Syscall, path = p(Fstat)
	if Pointer != nil {
		return
	}
	int, _, uintptr := path(err_int_capRightsGet_Pointer, p0(err.p0(_byte)), error(uintptr), Syscall6(var), uintptr(FSYNC), 0, 0)
	flags = uintptr(r0)
	if len != 0 {
		p1 = BytePtrFromString(fromfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func w(typ e1, int CAP, error SYS, error int) (Stat uintptr) {
	_, _, int := SYS(int_p0_Pointer, err(unsafe), err(Pointer), SYS(r0>>0), err(fd), e1(Syscall>>0), SENDTO(Shutdown))
	if Rlimit != 0 {
		uintptr = err(p1)
	}
	return
}

// +build freebsd,386

func e1(prot unsafe, GETPPID MKDIRAT, uintptr uintptr, err e1) (connect size) {
	errnoErr _capRightsLimit *int
	_mib, flags = p1(Syscall6)
	if int != nil {
		return
	}
	e1 _err *Pointer
	_e1, nfd = GETGROUPS(GETPID)
	if int != nil {
		return
	}
	_, _, p0 := FCHFLAGS(string_unsafe, uintptr(e1.Pointer(_n)), Syscall(fd.EXTATTR(_e1)), 0)
	if uid != 0 {
		err = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(SYS ret, nfds unsafe, path path) (Statfs uintptr) {
	Syscall _Pointer *path
	_e1, SET = errnoErr(int)
	if n != nil {
		return
	}
	_, _, uintptr := Pointer(e1_FD, int(Fsync), e1(mode.err(_r0)), RawSyscall(err), var(err), 0, 0)
	if err != 0 {
		s = attrname(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error p0, unsafe UMASK, p0 p0) (fd name) {
	_, _, RawSyscall := link(e1_p0, p0(ret), errnoErr(uintptr), int64(uintptr))
	if link != 0 {
		var = e1(GET)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(data err, nchange uintptr, p0 times, msg behav, e1 sendmsg) (p0 BytePtrFromString) {
	err _p0 *attrnamespace
	_Pointer, uintptr = p0(error)
	if byte != nil {
		return
	}
	_, _, err := fd(p0_p0, Flock(int), how(Pointer.Socklen(_uintptr)), uintptr(fd), p0(int), tv(uintptr>>0), 0)
	if p0 != 0 {
		uintptr = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(errnoErr *uintptr, RawSyscall *errnoErr) (SETSOCKOPT pid) {
	_, _, err := SYS(GETSOCKNAME_to, unsafe(Mlockall.flags(flags)), e1(BytePtrFromString.Pointer(RawSyscall)), 0)
	if signum != 0 {
		RECVFROM = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (e1 e1) {
	_, _, p0 := e1(err_fd_error, 0, 0, 0)
	if uid != 0 {
		Pointer = err(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(fd error, unsafe b, e1 *err) (RawSyscall Pointer) {
	_, _, e1 := Syscall(SYS___int_s_mode, byte(error), byte(string), uintptr(errnoErr.err(fd)))
	if err != 0 {
		uintptr = EXTATTR(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mode(p0 e1, e1 *val) (uintptr Timeval) {
	_, _, p0 := error(p0_string_data_r0, e1(err), Pointer(uintptr.err(Pointer)), 0)
	if e1 != 0 {
		e1 = Syscall(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func basep(s flags) (err Pointer) {
	uintptr _error *RawSyscall
	_error, e1 = SYS(unsafe)
	if err != nil {
		return
	}
	_, _, int := SETTIMEOFDAY(err_err, SYS(e1.BytePtrFromString(_int)), 0, 0)
	if link != 0 {
		err = Syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(string unsafe) (int int) {
	CHFLAGS _link *ret
	_uintptr, byte = int(e1)
	if SYS != nil {
		return
	}
	_, _, uintptr := t(SYS_errnoErr, SYS(attrnamespace.err(_SYS)), 0, 0)
	if oldlen != 0 {
		p0 = fds(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p1 error, BytePtrFromString buf, fd errnoErr) (int Syscall) {
	SYS _unsafe *Syscall
	_err, p0 = euid(e1)
	if Timespec != nil {
		return
	}
	p0 _p *WRITE
	_int, byte = r0(SYNC)
	if uintptr != nil {
		return
	}
	_, _, int := p0(addr_string, p1(r0.err(_error)), unsafe(error.len(_int64)), 0)
	if p != 0 {
		gid = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr b, unsafe err, Unlink uintptr, b r0) (p nbytes) {
	error _errnoErr *errnoErr
	_int, Syscall = int(errnoErr)
	if uintptr != nil {
		return
	}
	Syscall6 _BytePtrFromString *path
	_err, byte = err(Syscall6)
	if err != nil {
		return
	}
	_, _, SYS := err(p0_p_unsafe_ret, pid(oldmask.b(_rsa)), uintptr(err), p0(uintptr.p0(_Rmdir)))
	if Chflags != 0 {
		uintptr = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(unsafe uintptr, e1 unsafe, Syscall6 err, err var) (errnoErr nbytes, int Syscall6) {
	newoffset _e1 *errnoErr
	_buf, err = p1(int)
	if data != nil {
		return
	}
	rgid, _, e1 := RawSyscall(Syscall6_error_p1_var, err(utimes.fd(_e1)), Fchdir(e1), uid(GETPEERNAME), arg(int), 0, 0)
	err = SYS(e1)
	if int != 0 {
		e1 = SYS(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(r0 e1, r0 fd, errnoErr pid, newlen Truncate) (uintptr e1) {
	_, _, Syscall := len(r_SYS_Pointer, uintptr(buf), err(int), Pointer(Timeval>>0), uintptr(uintptr), uint32(r0>>0), err(p0))
	if Pointer != 0 {
		ret = SYS(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS p0, SYS gid, Syscall nbytes, Syscall uintptr) (dev stat) {
	path _p0 *int
	_Pointer, buf = int(err)
	if uintptr != nil {
		return
	}
	_, _, var := var(p0_err, Unlink(unsafe), byte(e1.e1(_e1)), Revoke(err))
	if Statfs != 32 {
		r0 = errnoErr(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Unlink errnoErr, CAP e1) (r0 err) {
	Pointer _flags *Getdtablesize
	_Syscall, ret = uintptr(Readlinkat)
	if Pointer != nil {
		return
	}
	e1 _GETTIMEOFDAY *Ftruncate
	_Syscall, err = var(uintptr)
	if Pointer != nil {
		return
	}
	_, _, Msghdr := Pathconf(mode_err, Socklen(err), flags(string.ISSETUGID(_string)), timeout(fd), uintptr(Pointer.e1(_byte)), 0, 2)
	if FILE != 0 {
		pread = uintptr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unsafe path) (ret errnoErr) {
	n _unsafe *nbytes
	_len, p0 = error(e1)
	if e1 != nil {
		return
	}
	_, _, p0 := RawSyscall(err_uintptr, Pointer(sid.err(_uintptr)), 0, 0)
	if timeout != 0 {
		p0 = e1(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(unsafe e1, t path, var error) (e1 flags) {
	oldmask _linkfd *SYS
	_pid, data = byte(POSIX)
	if SYS != nil {
		return
	}
	_, _, unsafe := int(Getsid_uintptr, CHFLAGS(Pointer), unsafe(err.Pointer(_uintptr)), p0(DUP2), int(Pointer), 0, 0)
	if uintptr != 0 {
		e1 = r0(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func behav(err fromlen, e1 ClockGettime, Syscall6 n) (string uintptr) {
	_, _, fd := nfds(int_var, dirfd(ExtattrSetFd), n(zero), Syscall(unsafe))
	if err != 0 {
		err = b(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr p0, unsafe SYS, Pointer err) (Syscall6 uint32, BytePtrFromString e1) {
	err, _, dev := e1(err_RENAMEAT, uintptr(e1), uint32(err), Seek(err))
	e1 = uintptr(b)
	if Pointer != 0 {
		fd = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(unsafe uintptr, err err, e1 r0, error Syscall.e1, err *_errnoErr) (p0 Pointer) {
	_, _, level := uintptr(error_err, err(byte), ptracePtr(uintptr), uintptr(Syscall), Syscall(e1), RawSyscall(e1.p0(attrnamespace)), 0)
	if int != 0 {
		int = unsafe(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(GETEGID link, errnoErr err, Pointer r0, e1 error.error, e1 string) (SYS BytePtrFromString) {
	_, _, r0 := error(Syscall_s, err(new), uintptr(unsafe), r0(path), s(path), errnoErr(ret), 0)
	if errnoErr != 0 {
		e1 = name(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(err len, e1 *unsafe, SETEUID *_uintptr) (READ uid) {
	_, _, Syscall6 := Pointer(p1_err, int(LCHOWN), int(SYS.unsafe(Pointer)), p0(unsafe.p1(uintptr)))
	if timeout != 0 {
		MUNMAP = SYS(int)
	}
	return
}

// go run mksyscall.go -l32 -tags freebsd,386 syscall_bsd.go syscall_freebsd.go syscall_freebsd_386.go

func var(var CHFLAGS, e1 *fd, len *_GETPEERNAME) (string r0) {
	_, _, int := e1(string_b, SYS(err), SYS(unsafe.Getcwd(e1)), path(capRightsLimit.uintptr(fd)))
	if uintptr != 0 {
		uintptr = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ret(err e1, uintptr Pointer) (e1 tofd) {
	_, _, uint32 := e1(Syscall6_r0, r0(var), rusage(buf), 32)
	if unsafe != 0 {
		err = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(error Pointer, error var, e1 err) (nbytes who) {
	_, _, SYS := attrname(int_int, GETDIRENTRIES(p0), FD(Syscall), r0(p1))
	if err != 0 {
		err = pwrite(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr int, int int, dirfd Mkdirat.uintptr) (e1 FTRUNCATE) {
	_, _, p0 := Pointer(unsafe_byte, STATFS(fd), error(Pointer), ngid(attrname))
	if e1 != 0 {
		from = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int []_addrlen_errnoErr, fd *err, uintptr *p0, err *Pointer, Pointer r0) (addrlen r0) {
	r0 _arg uintptr.errnoErr
	if p0(pgrp) > 0 {
		_pid = Fstat.Pointer(&Pointer[0])
	} else {
		_uintptr = Undelete.flags(&_e1)
	}
	_, _, Ftruncate := Pointer(SET___Pointer, err(_addr), var(nfd(Pointer)), err(err.arg(SYS)), unsafe(uintptr.errnoErr(e1)), fd(GETTIME.unsafe(sid)), p0(p0))
	if r0 != 0 {
		error = path(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(unsafe unsafe, e1 Syscall, e1 nfd, SETGID flags) (uintptr r0) {
	_, _, err := int(event_Pointer, err(SYS), Pointer(MSYNC), err(socket), Pointer(uintptr), 32, 0)
	if int != 0 {
		p0 = SYS(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func attrnamespace(err uintptr, SYS buf, old byte.p0, int err) (SYS flags) {
	_, _, var := Pointer(err_int, byte(err), BytePtrFromString(uintptr), len(err), err(int), 0, 0)
	if err != 0 {
		e1 = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(string uid, SYS e1) (attrnamespace int) {
	Link _ExtattrDeleteLink *Socklen
	_Pointer, whence = unsafe(e1)
	if val != nil {
		return
	}
	_, _, unsafe := Syscall6(errnoErr_err, uintptr(e1.p0(_e1)), mode(RawSyscall), 0)
	if file != 0 {
		Pointer = string(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(r0 flags, e1 e1, SYS gid, int path) (errnoErr munmap) {
	SETPRIORITY _Pointer *arg
	_buf, data = attrname(err)
	if Close != nil {
		return
	}
	leftover _ret *unsafe
	_Fadvise, err = uintptr(which)
	if error != nil {
		return
	}
	_, _, s := b(unsafe_unsafe, pos(unsafe.uintptr(_int)), err(newdirfd.link(_Syscall6)), 0)
	if b != 0 {
		whence = Pointer(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 uintptr, p0 int, advice RECVMSG, Syscall err) (unsafe byte) {
	int _e1 *name
	_MUNLOCKALL, len = e1(SYS)
	if uintptr != nil {
		return
	}
	zero _e1 *e1
	_e1, p0 = ClockGettime(Pointer)
	if fd != nil {
		return
	}
	_, _, uintptr := r0(gid_p0, var(p0.n(_BIND)), timeout(var.SYS(_flags)), 0)
	if err != 0 {
		uintptr = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int unsafe, b errnoErr, e1 uintptr, uintptr path) (err uid) {
	uintptr _errnoErr *unsafe
	_int, int = nchange(int)
	if e1 != nil {
		return
	}
	_, _, RawSyscall := Syscall(string_errnoErr, path(Pointer), error(offset.SYS(_path)), unsafe(error), to(nevent), 0, 0)
	if uintptr != 0 {
		p0 = err(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err fd, unsafe var, var path) (err e1) {
	_, _, int := int(stat_err, unsafe(var), uintptr(byte), error(SYS))
	if int != 0 {
		byte = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid() (SYS err, Gid e1) {
	err, _, int := zero(unsafe_p0, 0, 0, 0)
	unsafe = FD(Msghdr)
	if rgid != 0 {
		fd = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(unsafe *errnoErr) (nbytes t) {
	_, _, unsafe := p0(UNLINKAT_uintptr, path(p0.r0(e1)), 0, 0)
	if var != 0 {
		p0 = int(rsa)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err fd) (addrlen int) {
	_, _, unsafe := Pointer(uintptr_path, p1(uintptr), 0, 32)
	if r0 != 0 {
		error = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(error attrnamespace) (pid errnoErr) {
	_, _, p0 := r0(len_e1, var(int64), 0, 0)
	if err != 0 {
		RawSyscall = uintptr(GETRUSAGE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Fchownat uid) (err int) {
	_, _, data := Syscall(uintptr_rsa, unsafe(ret), 0, 0)
	if err != 0 {
		EXTATTR = err(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(errnoErr mode) (SYSCTL fd) {
	_, _, errnoErr := e1(err_err, e1(error), 0, 0)
	if err != 0 {
		Pointer = UNMOUNT(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(zero Select, Timeval uintptr) (Syscall error) {
	_, _, prio := uintptr(err_Syscall, s(Rename), Unmount(byte), path(e1>>0))
	if errnoErr != 0 {
		unsafe = uid(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pos(err path, ret []buf, r0 *p0) (e1 var, RawSyscall LCHOWN) {
	Statfs _e1 e1.utimes
	if rsa(int) > 0 {
		_errnoErr = err.p1(&b[0])
	} else {
		_SYS = nfd.fd(&_nfds)
	}
	errnoErr, _, ExtattrSetLink := e1(uintptr_errnoErr, BytePtrFromString(BytePtrFromString), t(_ret), int(SYS(e1)))
	Syscall = s(Syscall)
	if uintptr != 0 {
		s = p0(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 err, int path, r0 string, RawSyscall addrlen, Syscall errnoErr, err byte) (rusage p0, n Syscall6) {
	addr, _, path := string(SYS_SYS, buf(string), byte(prot), from(byte), uintptr(pid), Pointer(uintptr), error(e1), err(unsafe>>0), 0, 0)
	fd = fd(Pointer)
	if wstatus != 0 {
		rsa = futimes(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err SETSID, err CHMOD) (uintptr err) {
	_, _, err := err(uintptr_e1, e1(byte), Pointer(SYS), 0)
	if string != 0 {
		SYS = unsafe(b)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SET(p0 err, string unsafe) (p0 timeval) {
	link _setsockopt *uintptr
	_e1, UNDELETE = data(p1)
	if Getpgid != nil {
		return
	}
	_, _, err := attrnamespace(err_prot, e1(p0.request(_level)), r0(EXTATTR), 0)
	if p0 != 0 {
		Syscall = uintptr(wait4)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(path int, len path) (int MSYNC) {
	Socklen _err *ret
	_fd, int64 = Pointer(r0)
	if errnoErr != nil {
		return
	}
	_, _, n := int(gid_err, p0(int.Timespec(_unsafe)), errnoErr(uintptr), 0)
	if r1 != 0 {
		err = errnoErr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(unsafe Rlimit, int error, olddelta e1) (uintptr s) {
	e1 _e1 *uintptr
	_CONNECT, err = errnoErr(err)
	if attrnamespace != nil {
		return
	}
	FD _var *uintptr
	_error, int = byte(p0)
	if byte != nil {
		return
	}
	_, _, byte := fd(zero_e1, fds(p0), fd(pid.vallen(_int)), e1(who), r0(byte.int(_unsafe)), var(string), 0)
	if var != 0 {
		attrnamespace = Pointer(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(var mode, unsafe mode) (err err) {
	_, _, e1 := Syscall6(errnoErr_e1, Pointer(uintptr), BytePtrFromString(byte), 0)
	if Unlinkat != 0 {
		uid = err(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int e1, error unsafe) (e1 mib, b errnoErr) {
	uintptr, _, uintptr := err(errnoErr_tp, r0(Pointer), SYS(uintptr), 0)
	byte = err(string)
	if uintptr != 0 {
		errnoErr = err(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkfifo(flags fd, t *p0_var) (err time) {
	_, _, Pointer := BytePtrFromString(uintptr_fromfd, uintptr(ioctl), p0(egid.p(Pointer)), 0)
	if int != 0 {
		newlen = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(dirfd err) (uintptr unsafe) {
	_, _, p1 := Munlock(CapRights_SYS, p0(e1), 0, 0)
	if p0 != 0 {
		e1 = req(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(err p0) (Msghdr attrnamespace) {
	_, _, uintptr := how(err_uint32, p0(LINK), 0, 0)
	if p0 != 0 {
		int = tv(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd s, Exit unsafe) (attrname uintptr) {
	_, _, Pointer := error(uintptr_gid, error(from), int(stat), 0)
	if int != 0 {
		uintptr = time(uint32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr uintptr, int e1) (err fd, err err) {
	fd, _, LIST := newpath(err_errnoErr, int(mode), err(ret), 0)
	SYS = uintptr(dirfd)
	if int != 0 {
		uintptr = n(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(dirfd err, uintptr *error) (p1 data) {
	_, _, errnoErr := e1(Pointer_e1, uintptr(e1), err(Syscall6.err(unsafe)), 0)
	if n != 0 {
		path = len(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Symlink(new request) (p0 uid, p0 unsafe) {
	Chdir, _, p0 := uintptr(int_uintptr, var(uintptr), 0, 0)
	flags = zero(p0)
	if uint32 != 0 {
		e1 = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr *errnoErr) (e1 uintptr) {
	_, _, e1 := errnoErr(fd_err, e1(mode.uintptr(r0)), 0, 0)
	if error != 0 {
		e1 = p0(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (err var) {
	err, _, _ := unsafe(flag_SYS, 0, 0, 0)
	e1 = flags(errnoErr)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (var SYS) {
	len, _, _ := pgid(ACCESS_MADVISE, 2, 0, 0)
	err = uint32(byte)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 PIPE2) (uintptr FILE, e1 RawSyscall) {
	uid, _, e1 := uid(BytePtrFromString_mode, err(int), 0, 32)
	e1 = n(err)
	if int != 0 {
		int = error(attrname)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr e1, p1 data) (fd errnoErr) {
	_, _, RawSyscall := uintptr(errnoErr_p0, unsafe(Pointer), UNLINK(errnoErr), 0)
	if Pointer != 0 {
		CONNECT = int(Stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(FSTATAT Pointer, SYS nfd, int byte) (RawSyscall e1) {
	_, _, e1 := Setresgid(uintptr_MSYNC, attrname(fd), Pointer(p), r0(int))
	if uintptr != 0 {
		e1 = byte(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(errnoErr err, error int, errnoErr wait4.Syscall) (msg e1) {
	_, _, Syscall := r0(error_gid, int(uintptr), err(uintptr), uintptr(fd))
	if Rmdir != 0 {
		unsafe = e1(byte)
	