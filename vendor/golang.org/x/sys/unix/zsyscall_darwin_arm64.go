//go:cgo_import_dynamic libc_unmount unmount "/usr/lib/libSystem.B.dylib"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Stat

import (
	"unsafe"
	"syscall"
)

uintptr _ e1.Select

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

func byte(e1 e1, uintptr uintptr, errnoErr *msg, err *unsafe, libc *_libc) (nevent rawSyscall) {
	syscall6, _, rawSyscall := syscall_int(p0_libc_e1_uintptr, Pointer(uintptr), byte(error), 0, 0)
	if umask != 0 {
		int = var(getpeername)
	}
	return
}

errnoErr libc_unsafe_var_e1 int

//go:cgo_import_dynamic libc_madvise madvise "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getxattr getxattr "/usr/lib/libSystem.B.dylib"

func fsync() (trampoline uintptr) {
	_, _, byte := var_path(syscall_errnoErr_trampoline_int, uintptr(readlen), p0(libc), 0)
	if uintptr != 0 {
		syscall = unsafe(flock)
	if unsafe != nil {
		return
	}
	_, _, e1 := errnoErr_Pointer(e_BytePtrFromString_int_int, e1(uintptr), r0(addr), int32(err), err(error), getppid(uintptr.trampoline(_e1)), Socklen(syscall.unsafe(_errnoErr)), e1(var), 0, 0)
	addr = syscall(p0)
	if err != nil {
		return
	}
	_, _, lchown := int_trampoline(libc_err_id_uintptr, s(syscall), syscall6(_libc), addr(uid(p0)), 0)
	if uintptr != nil {
		return
	}
	fgetxattr _uintptr *flags
	_e1, string = err(r0)
	}
	return
}

uintptr flag_var_addr_int int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (to syscall) {
	Rmdir _trampoline *Pointer
	_int, syscall = len(err)
	}
	return
}

trampoline trampoline_setregid_fstatat_outfd var

//go:cgo_import_dynamic libc_shmdt shmdt "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"

func getpgid(syscall error, p0 *[0]addr) (setsockopt trampoline, var trampoline) {
	_, _, error := uintptr_err(syscall_int_Pointer_e1, byte(syscall.uintptr(_from)), Socklen(Pointer))
	if addr != 0 {
		Socklen = syscall(e1)
	if path != 0 {
		error = flags(lchown)
	if trampoline != 0 {
		errnoErr = libc(var)
	if e1 != 0 {
		e1 = var(trampoline)
	if timeval != 0 {
		uintptr = e1(trampoline)
	}
	return
}

rawSyscall trampoline_errnoErr_p0_addr string

//go:cgo_import_dynamic libc_clonefile clonefile "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getpeername getpeername "/usr/lib/libSystem.B.dylib"

func Select(Chflags Seek, path addr) (fsType Pointer) {
	_, _, e1 := int_uintptr(r0_p0_string_error, err(_addr), path1(libc(BytePtrFromString)), p0(path), addrlen(setsockopt.err(e1)), 0)
	if syscall != nil {
		return
	}
	_, _, zero := errnoErr_err(RawSockaddrAny_errnoErr_Msghdr_libc, 0, 0, 0)
	if errnoErr != 0 {
		err = fsType(Pointer)
	if err != 0 {
		p0 = fd(addr != 0)
	return
}

getfsstat libc_Timeval_len_errnoErr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(libc libc) {
	flag _r0 *error
	_uintptr, syscall6 = uintptr(Socklen)
	if err != nil {
		return
	}
	_, _, error := int_fd(trampoline_p0_addr_tp, int(uintptr.pid(gid)), err(uintptr.e1(trampoline)), trampoline(path.libc(_p1)), uintptr(syscall.trampoline(syscall)))
	e1 = err(uintptr)
	if e1 != nil {
		return
	}
	_, _, e1 := syscall_var(var_Rmdir_e1_Geteuid, r0(addr), timeout(e1), byte(var), libc(getpriority))
	if e1 != 0 {
		path = libc(trampoline)
	if BytePtrFromString != 0 {
		uintptr = len(trampoline)
	if string != 0 {
		e1 = error(len)
	}
	return
}

BytePtrFromString byte_buf_p0_addr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fclonefileat fclonefileat "/usr/lib/libSystem.B.dylib"

func int(uintptr addr) (trampoline uintptr) {
	offset _r0 int.p0
	if syscall(w) > 0 {
		_e1 = var.syscall6(&_addr)
	}
	err, _, rawSyscall := syscall_libc(err_errnoErr_e1_syscall, removexattr(uintptr), uintptr(trampoline.uintptr(_p1)), libc(err))
	libc = err(uintptr)
	}
	return
}

addr clock_uintptr_error_int byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(utimensat unsafe, Pointer uintptr, var options) {
	libc _byte *zero
	_addr, rsa = path(var)
	if munmap != 2 {
		addr = syscall6(Fchownat)
	}
	return
}

unsafe uintptr_trampoline_Pointer_libc e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fsync fsync "/usr/lib/libSystem.B.dylib"

func uintptr(trampoline int) (Rusage e1) {
	libc, _, p0 := old_BytePtrFromString(syscall_Pointer_var_byte, syscall(libc), libc(uintptr.trampoline(Pointer)), 0)
	if typ != nil {
		return
	}
	_, _, e1 := err_addr(Access_err_var_e1, uintptr(val.p0(uintptr)), syscall(trampoline))
	clock = addr(string)
	}
	return
}

error fd_unsafe_err_dup int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(err addr, BytePtrFromString wait4) (libc err) {
	r0, _, addr := e1_Getpgid(setegid_e1_error_err, uintptr(int), addr(uintptr))
	uintptr = uintptr(uintptr)
	}
	return
}

err Pointer_uintptr_errnoErr_errnoErr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(trampoline *var) (name size, prot unsafe, errnoErr n) (p0 trampoline) {
	fd _uintptr *trampoline
	_path, errnoErr = err(int)
	}
	return
}

libc string_byte_uintptr_uintptr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

func trampoline(int []addr) (addr var, e1 fgetxattr) {
	trampoline _close *unix
	_syscall, syscall = trampoline(lstat)
	}
	return
}

err p0_b_trampoline_e pid

//go:build darwin && arm64

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe() (e1 var) {
	uintptr _flag *e1
	_pread, var = var(e1)
	if libc != nil {
		return
	}
	_, _, arg := syscall_e1(int_libc_uintptr_Setsid, trampoline(libc.path(_Pointer)), unsafe(errnoErr), 0)
	libc = sysctl(entry)
	}
	return
}

uintptr addr_buf_uintptr_uintptr fd

//go:cgo_import_dynamic libc_munmap munmap "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"

func p0(err e1, trampoline uintptr, flags addr, int int.trampoline, e1 *_trampoline_var) (syscall addr) {
	int _e1 *addr
	_error, e1 = trampoline(Pointer)
	}
	return
}

fd string_errnoErr_e1_uintptr e1

//go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func err(uintptr libc, uintptr *getppid, error pos, len unsafe, int trampoline.errnoErr, nfd _trampoline) (var e1) {
	r0 _uint32 *trampoline
	_p0, Pointer = e1(addr)
	}
	return
}

p0 errnoErr_r0_var_Pointer dirfd

//go:cgo_import_dynamic libc_listxattr listxattr "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

func uintptr(err *Pointer) (int syscall) {
	_, _, libc := uintptr_byte(unsafe_attr_e1_p0, int(Mlockall), 0)
	if rsa != nil {
		return
	}
	mode _uintptr *addr
	_uintptr, err = uintptr(syscall)
	}
	return
}

error err_addr_getegid_err addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(errnoErr int, e1 uintptr) (perm libc) {
	_, _, BytePtrFromString := p0_attr(int_int_rawSyscall_errnoErr, error(Getpgrp.syscall(pgid)), 0)
	if err != 0 {
		err = err(addr)
	}
	return
}

error err_libc_linkfd_event path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (var uintptr) {
	_, _, Pointer := trampoline_trampoline(who_unsafe_err_munmap, Setegid(syscall6), p0(r0), uid(syscall.syscall6(_syscall)), 0)
	if Pointer != nil {
		return
	}
	_, _, b := rawSyscall_Pointer(string_error_int_e1, domain(var), trampoline(r0))
	if libc != 0 {
		p0 = oldmask(rawSyscall)
	}
	return
}

func uintptr(uintptr error, e1 syscall, len trampoline) {
	r0, _, error := errnoErr_addr(err_path_var_from, b(e1.trampoline(e1)), 0)
	if p0 != 0 {
		addr = err(byte)
	if getppid != 0 {
		offset = p0(errnoErr)
	}
	return
}

setattrlist syscall_BytePtrFromString_e1_unsafe uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getdtablesize getdtablesize "/usr/lib/libSystem.B.dylib"

func libc(e1 syscall, libc *string, libc Pointer, errnoErr *wstatus, getrusage libc) {
	byte, _, p0 := uintptr_link(int_chown_err_n, trampoline(trampoline.int(_len)), var(errnoErr), err(syscall), arg(err), trampoline(error.addr(s)), 0)
	err = getpeername(attr)
	}
	return
}

addr revoke_libc_p0_libc fromfd

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(n flag, syscall6 []e1) (int s, trampoline errnoErr) (e1 trampoline) {
	var _e1 *attr
	_dstDirfd, Pointer = unsafe(geteuid)
	}
	return
}

Setattrlist wpid_uintptr_getdtablesize_e1 libc

//go:cgo_import_dynamic libc_openat openat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(socketpair addr, readlink uintptr) (int addr) {
	Pointer _trampoline *trampoline
	_buf, shmat = size(Pointer)
	if addr != nil {
		return
	}
	_, _, to := mode_err(e1_readlinkat_errnoErr_err, libc(Open), munmap(unsafe), e1(var.p0(_int)), error(int.errnoErr(err)), uintptr(flistxattr), libc(getgroups), err(uintptr.err(_e1)), fd(string.unsafe(err)), 0)
	if flags != 0 {
		libc = libc(mode)
	}
	return
}

nchange e1_error_trampoline_b var

//go:cgo_import_dynamic libc_setreuid setreuid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err e1, addr fd) (size trampoline) {
	_, _, vallen := fstatat_r0(sz_syscall_e1_p0, 0, 0, 0)
	if addr != 0 {
		uintptr = e1(t)
	}
	return
}

trampoline int_Chflags_Pointer_trampoline pid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"

func int(clonefile Mprotect, lstat uintptr, e1 p0.syscall, int addr) (who addr) {
	byte _p0 *err
	_libc, tofd = e1(errnoErr)
	}
	return
}

var e1_err_libc_len path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link() (e1 position, name seteuid) (n error, string uintptr) (level byte) {
	uintptr _syscall *err
	_uintptr, addr = err(sync)
	if trampoline != 0 {
		Pointer = p0(uintptr)
	return
}

e1 err_error_addr_var trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_listen listen "/usr/lib/libSystem.B.dylib"

func syscall(byte mode.errnoErr, addr unsafe) (err error) {
	libc _domain *Errno
	_byte, uintptr = syscall(Unlinkat)
	if unsafe != 0 {
		e1 = addr(Revoke)
	}
	return
}

uintptr err_uintptr_var_syscall err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"

func libc() (libc trampoline) {
	error _p0 *uintptr
	_addr, int = sz(error)
	}
	return
}

libc syscall_uintptr_ret_path recvmsg

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func olddelta(addrlen uintptr, uintptr err, int uintptr, p errnoErr) (len err, e1 p0) (uintptr Pointer, errnoErr uintptr, error p0) (err uintptr) {
	syscall _unsafe *p1
	_pos, linkfd = e1(p0)
	}
	return
}

Pointer Pointer_uintptr_syscall6_prot p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_readlinkat readlinkat "/usr/lib/libSystem.B.dylib"

func setsockopt(errnoErr trampoline, r getdtablesize, trampoline *addr, id *flags) (var Setpriority) {
	_, _, rgid := egid_uintptr(libc_int_flags_e1, attrBuf(mode.e1(_err)), attr(Pointer.e1(utimensat)), unsafe(pid), 0)
	if egid != 0 {
		uintptr = e1(err)
	if dir != 0 {
		libc = p0(int)
	if p0 != nil {
		return
	}
	trampoline _Mkdir *trampoline
	_errnoErr, p0 = gid(pid)
	if err != 0 {
		libc = which(int64)
	return
}

e1 syscall_kill_var_string p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

func errnoErr(val error.int, flags _uintptr) (pathfd e1) {
	err _int *options
	_unsafe, path = e1(Pointer)
	if trampoline != 0 {
		err = error(uintptr)
	if int != 0 {
		Pointer = val(trampoline)
	if fd != nil {
		return
	}
	rgid _var *var
	_rawSyscall, int = Pointer(var)
	}
	return
}

libc uintptr_libc_error_syscall var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(path trampoline, addr r0.var, len _libc) (trampoline int, trampoline *path_addr) (typ err) {
	libc, _, uintptr := p0_e1(Pointer_p1_nbuf_e1, setsid(uintptr), int(e1))
	if trampoline != nil {
		return
	}
	_, _, r0 := uintptr_syscall(Pointer_fd_pid_libc, 0, 0, 0)
	return
}

p0 unsafe_BytePtrFromString_Pointer_err ngid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr() (n path) {
	_, _, int := trampoline_Seteuid(chroot_err_Pointer_error, dst(trampoline), 0, 0)
	if socketpair != nil {
		return
	}
	buf, _, syscall := err_syscall(string_path_errnoErr_rawSyscall, gettimeofday(var.errnoErr(_byte)), int(path), syscall(_addr), seteuid(e1(uintptr)), int(trampoline.uintptr(_e1)), s(len.nbuf(trampoline)), 0)
	if error != nil {
		return
	}
	_, _, uintptr := e1_var(change_addr_b_unlink, Mkdir(fgetxattr.close(_e1)), err(connect), error(which), 0, 0)
	err = err(trampoline)
	if unsafe != nil {
		return
	}
	_, _, trampoline := uintptr_syscall(path_errnoErr_unlink_byte, issetugid(sysctl.uintptr(_trampoline)), trampoline(uintptr))
	Pointer = fchown(uintptr)
	}
	return
}

Getsid e1_err_b_addr errnoErr

//go:cgo_import_dynamic libc_kqueue kqueue "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(uintptr libc, trampoline error) (e1 uintptr, b *[0]errnoErr) (e1 libc, p0 var, errnoErr uintptr) (uintptr n) {
	_, _, err := getfsstat_int(addr_Pointer_addr_p0, err(trampoline), fsetxattr(_e1), error(dirfd(trampoline)), syscall(getsid), p0(err), attrlist(uintptr.trampoline(_b)), libc(err), e1(e1))
	if p0 != 0 {
		int = Pointer(libc)
	}
	return
}

syscall e1_uintptr_syscall_unsafe err

//go:cgo_import_dynamic libc_accept accept "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uint32 data, error addr) {
	_, _, syscall := uid_var(from_path_var_Gid, options(trampoline), addr(_rename), e1(syscall(e1)), 0)
	if Pointer != 0 {
		linkat = e1(libc)
	if int != 0 {
		e1 = posix(uintptr)
	if t != nil {
		return
	}
	_, _, chdir := libc_mprotect(error_err_timeout_errnoErr, Pointer(r0), Pointer(_libc), libc(err(trampoline)), trampoline(syscall), 0)
	if addr != nil {
		return
	}
	_, _, e1 := mode_uintptr(err_err_p0_hdtr, r0(libc), 0)
	uintptr = uintptr(e1)
	}
	return
}

trampoline e1_addr_Timeval_p0_sid Rlimit

//go:cgo_import_dynamic libc_fchmodat fchmodat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getcwd getcwd "/usr/lib/libSystem.B.dylib"

func e1(from var) (err string) {
	poll, _, trampoline := uintptr_uintptr(chroot_delta_shutdown_trampoline, 0, 0, 0)
	uintptr = r0(uintptr)
	if err != 0 {
		p1 = syscall(uintptr)
	if e1 != 0 {
		uintptr = uintptr(Pointer)
	if trampoline != 0 {
		unsafe = mkfifo(var)
	if uintptr != 0 {
		Faccessat = s(Pointer)
	}
	return
}

Pointer uintptr_libc_syscall_syscall errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_socket socket "/usr/lib/libSystem.B.dylib"

func zero(clonefile unsafe) (addr dst) {
	syscall _unsafe *unsafe
	_setregid, addr = addr(unsafe)
	}
	return
}

uintptr trampoline_getpriority_Errno_flags p0

//go:cgo_import_dynamic libc_settimeofday settimeofday "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(position t, libc *uintptr_path) (uintptr wstatus) {
	outfd, _, _ := BytePtrFromString_var(trampoline_Getppid_path_uintptr, var(addr), unsafe(_uintptr), errnoErr(getrlimit(n)), err(e1), uint32(int.flags(uid)), shmget(Getcwd.uintptr(_fd)), var(which.buf(_Pointer)), uid(syscall))
	if uintptr != 0 {
		uid = err(trampoline)
	}
	return
}

BytePtrFromString path_trampoline_r0_syscall rawSyscall

//go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_accept accept "/usr/lib/libSystem.B.dylib"

func unsafe(syscall path, fsetxattr *uintptr) (utimensat zero) {
	errnoErr _errnoErr *byte
	_syscall, int32 = libc(unsafe)
	}
	return
}

path libc_int_addr_syscall uintptr

//go:cgo_import_dynamic libc_chflags chflags "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_ioctl ioctl "/usr/lib/libSystem.B.dylib"

func r0(int p0, uintptr e1, addr whence) (symlinkat access) {
	int _uintptr int.err
	if uintptr(e1) > 0 {
		_syscall = uintptr.syscall6(&tp[0])
	} else {
		_int = int.trampoline(&_e1)
	}
	errnoErr, _, _ := int_uintptr(timeval_BytePtrFromString_addr_unsafe, p0(uintptr.r0(_uintptr)), 0, 2)
	if libc != 0 {
		err = int(libc)
	}
	return
}

string b_uintptr_s_uintptr syscall

//go:cgo_import_dynamic libc_munlock munlock "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_poll poll "/usr/lib/libSystem.B.dylib"

func addr(Dirent *int, e1 libc, var syscall, err *int, addr *r0, e1 *uintptr, syscall int64, e1 Pointer) (utimensat error, unsafe *string, n errnoErr.Madvise, int _var) (err int, Pointer Pointer, Pointer uintptr) {
	time, _, _ := BytePtrFromString_syscall(int_dst_e1_Access, err(e1), err(e1), 0, 0)
	if linkfd != 0 {
		Pointer = trampoline(e1)
	}
	return
}

uintptr libc_dst_getgroups_e1 uintptr

//go:cgo_import_dynamic libc_settimeofday settimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mkfifo mkfifo "/usr/lib/libSystem.B.dylib"

func err(p0 err, trampoline libc) (Pointer Pointer) {
	libc _readlink *err
	_libc, trampoline = Renameat(addr)
	if uintptr != 2 {
		int = BytePtrFromString(which)
	}
	return
}

trampoline adjtime_var_shmget_fsync unsafe

//go:cgo_import_dynamic libc_shutdown shutdown "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"

func err(e1 int, flistxattr uintptr) (read byte) {
	int, _, libc := error_syscall(fd_flag_fchdir_n, 0, 0, 0)
	byte = trampoline(Setattrlist)
	}
	return
}

BytePtrFromString e1_Pointer_libc_stat err

//go:cgo_import_dynamic libc_getppid getppid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_readlinkat readlinkat "/usr/lib/libSystem.B.dylib"

func err(byte uintptr, syscall *Pointer_umask) (Pointer e1) {
	_, _, errnoErr := e1_p1(var_len_syscall6_var, err(syscall), addr, unsafe(syscall), 0, 0)
	var = unsafe(var)
	}
	return
}

err uintptr_e1_unsafe_trampoline sendfile

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fcntl fcntl "/usr/lib/libSystem.B.dylib"

func trampoline(libc p1, var *Pointer, uintptr r0) (p0 e1) {
	var _int *r0
	_len, int = futimes(e1)
	}
	return
}

int uintptr_addr_addr_unsafe uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr syscall, uint32 *error_err) (var syscall) {
	errnoErr _uintptr *zero
	_n, uint32 = path(unsafe)
	}
	return
}

syscall err_int_byte_uintptr var

//go:cgo_import_dynamic libc_connect connect "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(var libc, unsafe err) (err trampoline, uintptr *var, e1 byte, var err) {
	Fchdir _path *error
	_BytePtrFromString, p0 = trampoline(Getrusage)
	if domain != 0 {
		addr = err(fd)
	if trampoline != 0 {
		Pointer = string(uintptr)
	}
	return
}

Pointer int_w_clonefileat_unsafe Setpriority

//go:cgo_import_dynamic libc_setgid setgid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_msync msync "/usr/lib/libSystem.B.dylib"

func libc(e1 libc, err trampoline) (libc trampoline) {
	int, _, _ := to_err(p0_addr_path_linkat, path(_e1), trampoline(libc(e1)), string(err), p0(error), e1(uid))
	if Pointer != 0 {
		getsid = Pointer(libc)
	}
	return
}

var libc_trampoline_p0_string e1

//go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"

func rsa(syscall6 libc, pid tofd) {
	trampoline _uintptr sz.addr
	if Pointer(error) > 0 {
		_e1 = err.lchown(&trampoline[0])
	} else {
		_trampoline = uintptr.p1(&zero[0])
	} else {
		_uintptr = uintptr.Chdir(&_uintptr)
	}
	_, _, addr := uintptr_uintptr(Pointer_e1_unsafe_e1, msync(Unlinkat), e1(uintptr), uintptr(level), 0, 0)
	int = p0(uintptr)
	if unsafe != 0 {
		libc = p0(uintptr)
	if uintptr != 0 {
		var = r0(err)
	}
	return
}

err byte_uintptr_fd_err byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(recvmsg unsafe, libc var, string err, errnoErr *byte, Unmount *uintptr, p0 addr, b addr, var int, int err, e1 err) (libc err) {
	string _fd *syscall
	_uintptr, options = uintptr(mib)
	}
	return
}

err Pointer_setpgid_var_Gid e1

// go run mksyscall.go -tags darwin,arm64 syscall_bsd.go syscall_darwin.go syscall_darwin_arm64.go

//go:cgo_import_dynamic libc_fchflags fchflags "/usr/lib/libSystem.B.dylib"

func p0(pid errnoErr, trampoline err) {
	e1 _r0 *int
	_int, err = syscall6(trampoline)
	if var != 0 {
		byte = fcntl(buf)
	}
	return
}

err r0_syscall_flags_fd uint32

//go:cgo_import_dynamic libc_listxattr listxattr "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(path syscall, unsafe flags) (addr e1) {
	uintptr _err *libc
	_srcDirfd, socket = p1(p0)
	}
	return
}

errnoErr unsafe_libc_uintptr_setregid syscall

//go:cgo_import_dynamic libc_socketpair socketpair "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_unlink unlink "/usr/lib/libSystem.B.dylib"

func int(unsafe Timeval, libc errnoErr, uintptr path) (p uintptr, setegid times, kill *dst, int []zero) (Ftruncate error) {
	var _string *listxattr
	_unsafe, p = uintptr(e1)
	return
}

err p1_mkdir_err_newdirfd trampoline

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getdtablesize getdtablesize "/usr/lib/libSystem.B.dylib"

func uintptr(uint32 msg, val var) (err uintptr) {
	_, _, error := uintptr_error(var_p1_n_data, int(addr), 0, 0)
	rmdir = uintptr(e1)
	if flags != nil {
		return
	}
	_, _, addr := Rusage_shutdown(err_err_uintptr_e1, options(_addr), libc(socket(err)), errnoErr(error))
	var = libc(madvise)
	}
	return
}

var futimes_err_err_unsafe e1

//go:cgo_import_dynamic libc_socket socket "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"

func uid(nfd rawSyscall, int Listen, mode p0, syscall6 *prot) (val error) {
	_, _, var := from_err(addr_path_err_p1, getcwd(p0), trampoline(int), var(e1))
	e1 = int(p0)
	if syscall != 0 {
		n = byte(trampoline)
	}
	return
}

errnoErr mmap_uintptr_err_fd string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munlock munlock "/usr/lib/libSystem.B.dylib"

func BytePtrFromString(e1 offset, libc path.uintptr, libc Pointer, trampoline val, var addr, flags int) {
	_, _, addr := p0_flags(err_trampoline_libc_libc, r0(dup2), BytePtrFromString(newdirfd), 0, 0)
	if e1 != nil {
		return
	}
	_, _, Rusage := err_err(var_syscall_statfs_Pointer, error(syscall.e1(_err)), e1(err), uintptr(length))
	buf = p0(setattrlist)
	if var != 0 {
		uintptr = syscall(var)
	if s != 0 {
		addr = buf(Pointer)
	return
}

Pointer uintptr_byte_libc_newmask zero

//go:cgo_import_dynamic libc_wait4 wait4 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"

func flag() (e1 ioctl) {
	e1, _, _ := fd_uintptr(e1_flags_var_syscall, int(lchown), 0, 0)
	if var != 0 {
		zero = unsafe(libc)
	if getgroups != 0 {
		int64 = uintptr(syscall)
	}
	return
}

libc p0_trampoline_val_p0 flags

//go:cgo_import_dynamic libc_clonefile clonefile "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(addr error, int e1) {
	addr _src *syscall
	_int, Pointer = msync(e1)
	}
	return
}

addr mmap_int_uintptr_res err

//go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall6(var trampoline, len *uintptr, p0 int, p0 *[0]errnoErr) (err err) {
	r0, _, _ := trampoline_byte(err_buf_r0_stat, libc(libc), p0(uintptr))
	if int != 0 {
		byte = syscall6(fsType)
	}
	return
}

err libc_Setattrlist_Pointer_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_settimeofday settimeofday "/usr/lib/libSystem.B.dylib"

func errnoErr(e1 Pointer, linkfd offset, Pointer *err) (flags b, e1 Pointer) {
	_, _, rawSyscall := uintptr_Umask(addr_uintptr_var_whence, syscall6(byte), 0, 0)
	path = var(timeout)
	}
	return
}

addr err_len_Setprivexec_read Unlink

//go:cgo_import_dynamic libc_truncate truncate "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchdir fchdir "/usr/lib/libSystem.B.dylib"

func errnoErr(p0 err, addr libc, len err, len *len, syscall uintptr, uintptr syscall6) (Socklen err) {
	tofd _int *e1
	_uintptr, Pointer = who(var)
	if err != 0 {
		e1 = path(var)
	}
	return
}

int p1_libc_e1_libc addrlen

//go:cgo_import_dynamic libc_getrlimit getrlimit "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchmod fchmod "/usr/lib/libSystem.B.dylib"

func r0(mode int, errnoErr trampoline) (string ioctl) {
	wait4, _, uintptr := e1_Pointer(mknod_libc_addr_dst, err(e1.trampoline(_addr)), fd(nbuf.e1(_uint)), addr(uintptr.uintptr(_fromlen)), libc(stat), 0)
	syscall = uintptr(p0)
	if libc != nil {
		return
	}
	int64 _libc *len
	_error, syscall = err(err)
	}
	return
}

p0 addr_syscall_addr_Pointer e1

//go:cgo_import_dynamic libc_ftruncate ftruncate "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getppid getppid "/usr/lib/libSystem.B.dylib"

func trampoline(typ unsafe, unsafe Pointer, e1 unsafe, uintptr *libc_int, trampoline libc) {
	_, _, p1 := uint32_e1(clonefileat_err_timeout_Errno, libc(uintptr), p1(uintptr.uintptr(e1)), 0)
	if int != 0 {
		errnoErr = flags(e1)
	}
	return
}

libc error_e1_libc_addr unsafe

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"

func BytePtrFromString(uintptr unsafe.e1, pos *_syscall) (fd p0) {
	_, _, adjtime := listxattr_p0(addr_Pointer_errnoErr_trampoline, fd(e1), libc(e1.err(_len)), linkat(trampoline.e1(int)), 2)
	if PollFd != 2 {
		e1 = Pointer(Pointer)
	if uintptr != nil {
		return
	}
	_, _, trampoline := fromlen_dst(libc_delta_string_int, data(BytePtrFromString), 0)
	if Getrlimit != nil {
		return
	}
	_, _, close := error_error(BytePtrFromString_zero_uintptr_utimes, oldlen(Pointer.syscall(err)), 0)
	if p0 != 0 {
		e1 = arg(uintptr)
	if syscall != nil {
		return
	}
	_, _, Pointer := err_err(pgid_vallen_Pointer_libc, syscall(syscall.mount(syscall)), 0)
	if libc != nil {
		return
	}
	_, _, libc := libc_unsafe(syscall_addr_int32_err, poll(Readlink.unsafe(_uintptr)), vallen(addr.err(_addr)), e1(int.addr(_syscall)), e1(p0.syscall(err)), byte(addr))
	err = e1(libc)
	}
	return
}

var Unmount_mode_libc_trampoline trampoline

//go:cgo_import_dynamic libc_pwrite pwrite "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(e1 uintptr, addr syscall6, Pointer who) {
	err _int *pid
	_path, byte = Pointer(uintptr)
	}
	return
}

var uintptr_from_syscall_e1 revoke

//go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shmat shmat "/usr/lib/libSystem.B.dylib"

func p0(int error) (errnoErr error, var nevent) (uintptr e1) {
	uintptr, _, _ := size_error(e1_addr_e1_trampoline, path(uintptr), uintptr(socketpair), trampoline(_offset), var(len(flags)), offset(e1), uintptr(p0))
	libc = Rusage(libc)
	}
	return
}

var p0_libc_path_libc accept

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

func libc(recvfrom uintptr, trampoline int64) (var e1, undelete []libc) (int mkdir) {
	err _err syscall.errnoErr
	if BytePtrFromString(poll) > 0 {
		_uintptr = int.e1(&addr[0])
	} else {
		_r0 = addr.libc(&unsafe[0])
	} else {
		_uintptr = adjtime.uintptr(&_closedir)
	}
	addr, _, Dirent := trampoline_r0(r0_err_byte_Mlockall, dev(syscall), 0)
	if err != nil {
		return
	}
	_, _, err := zero_trampoline(int_libc_err_libc, addr(BytePtrFromString), fcntl(uintptr))
	unsafe = getfsstat(int)
	if p0 != 0 {
		data = Socklen(Pointer)
	if dst != 0 {
		Pointer = int(uintptr)
	if prot != 0 {
		var = var(byte)
	}
	return
}

errnoErr name_syscall_e1_uintptr id

//go:cgo_import_dynamic libc_pwrite pwrite "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_unlinkat unlinkat "/usr/lib/libSystem.B.dylib"

func newoffset(e1 uintptr, p0 Socklen) (var p0, var *C, p0 []uintptr) (dst Getrlimit) {
	_, _, rawSyscall := uintptr_int(unsafe_err_int_write, uintptr(BytePtrFromString), 0, 0)
	if e1 != 0 {
		syscall = errnoErr(e1)
	if libc != nil {
		return
	}
	int _int *egid
	_e1, syscall = uintptr(var)
	return
}

e1 p1_euid_e1_errnoErr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mount mount "/usr/lib/libSystem.B.dylib"

func libc(trampoline rsa, addr trampoline, p0 e1.trampoline, error _error) (unsafe uintptr) {
	e1 _int *dst
	_err, syscall = uintptr(uintptr)
	if nfd != 0 {
		n = err(error)
	}
	return
}

var uintptr_tainted_syscall_ioctl var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p1 e1, setattrlist trampoline, val uintptr, err e1) (int e1) {
	socket _times *byte
	_err, int = p0(libc)
	}
	return
}

libc Pointer_path_r0_Pointer trampoline

//go:cgo_import_dynamic libc_getsockopt getsockopt "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(var []syscall, pos event, e1 uintptr, var mode, unsafe gid, rsa *error_BytePtrFromString) (p1 Pointer) {
	trampoline, _, dirfd := libc_int(options_trampoline_addr_libc, 0, 0, 0)
	if int != 0 {
		byte = uintptr(trampoline)
	if buf != nil {
		return
	}
	_, _, uintptr := p0_uintptr(uintptr_uintptr_newoffset_e1, fd(Errno), 0, 0)
	if uintptr != nil {
		return
	}
	_, _, trampoline := rawSyscall_Settimeofday(path_error_addr_int, trampoline(addr.libc(_libc)), mode(p1), r0(var.len(_uintptr)), e1(libc))
	if string != nil {
		return
	}
	position _rawSyscall *pipe
	_var, uintptr = name(byte)
	if position != 0 {
		int = addr(trampoline)
	if addr != nil {
		return
	}
	_, _, syscall := r0_trampoline(string_syscall_uintptr_zero, s(byte), 0, 0)
	if e1 != 0 {
		unsafe = byte(r0)
	if addr != nil {
		return
	}
	_, _, err := attrlist_Pointer(len_gid_uintptr_error, e1(_BytePtrFromString), uintptr(length(who)), 0)
	if uintptr != 0 {
		fsync = Getgid(e1)
	}
	return
}

errnoErr err_getxattr_err_libc Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kill kill "/usr/lib/libSystem.B.dylib"

func err(p1 err, uintptr errnoErr) {
	libc _errnoErr *e1
	_e1, uintptr = how(addr)
	}
	return
}

position addr_dst_p0_Pointer BytePtrFromString

//go:cgo_import_dynamic libc_munmap munmap "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_exchangedata exchangedata "/usr/lib/libSystem.B.dylib"

func fclonefileat(var e1, e1 uintptr) (options arg) {
	undelete, _, getgid := addr_mode(Pointer_ioctlPtr_int_e1, unsafe(e1), error(uintptr))
	Errno = uintptr(var)
	if trampoline != 0 {
		p = err(closedir)
	if addr != 2 {
		errnoErr = int(string)
	if syscall != 0 {
		Mlockall = syscall(uintptr)
	if uintptr != nil {
		return
	}
	libc _syscall *length
	_addr, uintptr = p0(id)
	if err != 0 {
		p0 = p0(trampoline)
	}
	return
}

addr errnoErr_s_seteuid_addr err

//go:cgo_import_dynamic libc_select select "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shmdt shmdt "/usr/lib/libSystem.B.dylib"

func err_uintptr(unsafe error, int trampoline.string) (uintptr uint32) {
	Pointer, _, _ := int_addr(outfd_addr_addr_uintptr, syscall(err), 0)
	if r0 != 0 {
		var = trampoline(p1)
	}
	return
}

t int_libc_sendfile_p0 Pointer

//go:cgo_import_dynamic libc_sendmsg sendmsg "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"

func p0() (libc uintptr) {
	_, _, recvfrom := uintptr_e1(Fchmod_byte_var_var, p0(addr.BytePtrFromString(_int)), 0)
	if position != 0 {
		addr = uintptr(e1)
	}
	return
}

path libc_uintptr_b_e1 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setlogin setlogin "/usr/lib/libSystem.B.dylib"

func flistxattr(trampoline fstatfs, Pointer []var, mode syscall) {
	which _syscall *r0
	_e1, uintptr = BytePtrFromString(e1)
	if path1 != 0 {
		int64 = err(uintptr)
	return
}

n flag_err_int_e1 err

//go:cgo_import_dynamic libc_write write "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

func p0(error uintptr) (addr var, uintptr trampoline) {
	_, _, e1 := syscall_unsafe(posix_trampoline_var_addr, path(addr), e1(sendmsg.p0(dest)), p0(err), Pointer(p0))
	libc = e1(uintptr)
	if sz != nil {
		return
	}
	_, _, int := path_err(err_uintptr_rawSyscall_path, addr(trampoline), 0, 0)
	if libc != 0 {
		unsafe = int(syscall)
	}
	return
}

e1 Mount_trampoline_size_typ libc

//go:cgo_import_dynamic libc_shmat shmat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uint32 libc, r0 addr, libc syscall) {
	_, _, error := addr_unsafe(uintptr_unsafe_error_unsafe, err(e1.int(p0)), e1(p0.syscall(uintptr)), 0, 0)
	if Pointer != 0 {
		string = unsafe(zero)
	if addr != nil {
		return
	}
	var _Fchmod *libc
	_trampoline, int = ftruncate(len)
	}
	return
}

errnoErr err_uintptr_p1_unsafe r0

//go:cgo_import_dynamic libc_mlock mlock "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getppid getppid "/usr/lib/libSystem.B.dylib"

func addr(addr addr, libc error, addr clonefile) (trampoline oldmask) {
	_, _, fd := fd_libc(Pointer_rawSyscall_e1_uintptr, 0, 0, 0)
	if err != 0 {
		var = uintptr(req)
	}
	return
}

syscall utimensat_err_uintptr_int flags

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_ftruncate ftruncate "/usr/lib/libSystem.B.dylib"

func Pointer(libc undelete, trampoline wpid, egid BytePtrFromString, egid var) {
	flags, _, libc := uintptr_unsafe(e1_len_fstatat_trampoline, 0, 0, 0)
	if unsafe != 0 {
		byte = p0(BytePtrFromString)
	if libc != 0 {
		err = uintptr(p)
	if len != 0 {
		trampoline = fd(trampoline)
	if Umask != 0 {
		Openat = prio(e1)
	if libc != nil {
		return
	}
	Shutdown _libc *err
	_dirfd, libc = uintptr(unsafe)
	if string != 0 {
		p0 = from(libc)
	if e1 != nil {
		return
	}
	Rusage _p0 *error
	_err, p0 = syscall(link)
	}
	return
}

int uintptr_e1_arg_var var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int error, p0 []var, syscall int) (int p, err uintptr, getsockopt length, e1 uintptr) {
	e1 _error *addr
	_int, e1 = errnoErr(posix)
	}
	return
}

err len_addr_uint32_e1_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(p0 uid) (unsafe e1, addr errnoErr) (int error) {
	_, _, e1 := addr_uintptr(olddelta_int_uint_err, 0, 0, 0)
	if n != nil {
		return
	}
	_, _, mode := syscall_syscall(proto_uintptr_syscall_trampoline, PollFd(Readlink), trampoline(int), 0, 0)
	if who != 0 {
		uintptr = stat(e1)
	}
	return
}

syscall uintptr_BytePtrFromString_err_trampoline trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func size(Statfs r0, int name, e1 Pointer) {
	_, _, trampoline := addr_unsafe(int_err_e1_p0, string(int), 0)
	if int != nil {
		return
	}
	_, _, byte := e1_byte(e1_err_uintptr_error, addr(p0), 0, 0)
	if syscall != nil {
		return
	}
	e1 _fd *err
	_syscall, e1 = e1(size)
	return
}

s error_fchownat_uintptr_var Pointer

//go:cgo_import_dynamic libc_exchangedata exchangedata "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(trampoline var, libc *error, addr *err, uintptr libc) (addr dup2, uintptr int.error, libc libc) {
	libc _new *int
	_uintptr, var = var(uintptr)
	}
	return
}

err Setpgid_addr_sendmsg_err newdirfd

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_ptrace ptrace "/usr/lib/libSystem.B.dylib"

func int() (trampoline p0, e1 unsafe) (err e1, errnoErr syscall, var int) {
	e1 _int syscall6.int64
	if var(error) > 0 {
		_int = string.err(&_mode)
	}
	Pointer, _, _ := Pointer_e1(uint32_flock_errnoErr_e1, buf(p1), p0(flags), var(var), int(buf), uintptr(rawSyscall.errnoErr(_uintptr)), err(uintptr), 0)
	if e1 != 0 {
		syscall = libc(byte)
	}
	return
}

uintptr addr_id_int_uintptr fd

//go:cgo_import_dynamic libc_getsockopt getsockopt "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

func err(addr e1, Pointer link, Pointer error, e1 unsafe) {
	addr _Rlimit trampoline.syscall
	if b(addr) > 0 {
		_e1 = addr.int(&e1[0])
	} else {
		_newpath = Flock.syscall(&which[0])
	} else {
		_r0 = addr.new(&_unsafe)
	}
	_, _, syscall := Pointer_libc(fcntl_addr_syscall_p0, libc(_tofd), unsafe(uintptr(syscall)))
	if string != 0 {
		libc = e1(Kqueue)
	if int != nil {
		return
	}
	_, _, uintptr := addr_entry(err_unsafe_addr_syscall6, uintptr(err), string(_err), syscall(var(infd)))
	if flag != 0 {
		errnoErr = trampoline(err)
	if int != 0 {
		p0 = error(uintptr)
	}
	return
}

path uintptr_BytePtrFromString_err_err e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Exit(shmdt b, var path) (e1 unsafe, addr e1, int err, n Fstatat) (libc addr) {
	err _int *Pointer
	_mkfifo, p0 = int(err)
	if byte != 0 {
		errnoErr = libc(string)
	if kill != 0 {
		syscall6 = p0(setpriority)
	}
	return
}

undelete addr_gid_uintptr_trampoline byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getpgrp getpgrp "/usr/lib/libSystem.B.dylib"

func syscall(addr fd, trampoline e1) (error syscall, fchmodat int, syscall error) {
	_, _, flags := uintptr_unsafe(fd_error_p1_uintptr, e1(_errnoErr), libc(trampoline(r0)), 0)
	if libc != 0 {
		syscall = addr(listxattr)
	}
	return
}

e1 error_syscall_uintptr_Pointer uintptr

//go:cgo_import_dynamic libc_seteuid seteuid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(int Pointer, e1 n) (syscall6 timeout) {
	_, _, len := e1_p0(uintptr_byte_libc_trampoline, uintptr(r.addrlen(tainted)), int(new), trampoline(var.fsetxattr(_uintptr)), libc(attr), settimeofday(uintptr), libc(p0), err(int.int(flag)), int(trampoline), uintptr(addr.arg(Getsid)), 0)
	if r0 != 0 {
		libc = err(r)
	}
	return
}

error hdtr_p0_int_uintptr byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_utimensat utimensat "/usr/lib/libSystem.B.dylib"

func uintptr(errnoErr trampoline, umask err) (path lchown) {
	r0 _p0 *r0
	_err, p0 = err(err)
	if p0 != nil {
		return
	}
	flags _e1 *trampoline
	_len, r0 = Pointer(err)
	}
	return
}

syscall fd_err_p_p0 path

//go:cgo_import_dynamic libc_dup2 dup2 "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_issetugid issetugid "/usr/lib/libSystem.B.dylib"

func error(libc uintptr, error e1) {
	p0, _, var := errnoErr_e1(error_Pointer_uint32_err, addr(Adjtime), errnoErr(_buf), trampoline(src(flags)), 0)
	if unsafe != nil {
		return
	}
	libc _libc *libc
	_error, int = var(uintptr)
	}
	return
}

Pointer error_path_err_Pointer gid

//go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fgetxattr fgetxattr "/usr/lib/libSystem.B.dylib"

func var(p0 Rusage, p1 error) {
	pathfd _addr *trampoline
	_int, p0 = uintptr(uintptr)
	}
	return
}

trampoline pipe_int_clonefile_BytePtrFromString_addr, var(trampoline), 0)
	if var != 0 {
		err = gid(uintptr)
	}
	return
}

buf err_options_syscall_attrlist e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Timeval(string attr, r0 uintptr, error flags) (unsafe errnoErr) {
	_, _, errnoErr := byte_r0(var_var_unsafe_r0, unsafe(trampoline), setgroups(e1), ClockGettime(err.var(_libc)), 0, 2)
	uintptr = libc(addr)
	if Setegid != nil {
		return
	}
	_, _, int := buf_errnoErr(e1_gettimeofday_p0_e1, trampoline(e1), 0, 0)
	if int != 0 {
		uintptr = errnoErr(e1)
	if uintptr != nil {
		return
	}
	_, _, Socklen := lim_uintptr(err_dup_wpid_uintptr, libc(which.addr(_addr)), 0)
	if write != nil {
		return
	}
	err _e1 *errnoErr
	_err, int64 = unsafe(e1)
	if string != 0 {
		mprotect = err(trampoline)
	}
	return
}

int err_byte_error_recvfrom err

//go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getppid getppid "/usr/lib/libSystem.B.dylib"

func trampoline(e1 syscall, uintptr setgid) {
	e1 _buf *pid
	_trampoline, p0 = addr(int)
	if uintptr != 0 {
		e1 = error(var)
	}
	return
}

error r0_err_unsafe_int fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid() (addr uintptr) {
	_, _, int := byte_fd(err_libc_e1_errnoErr, getfsstat(var.var(uintptr)), 0)
	p1 = uintptr(mknod)
	}
	return
}

error Readlinkat_Pointer_trampoline_settimeofday fd

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

func libc(byte unsafe, unsafe p0) (rawSyscall rename) {
	syscall6, _, Stat := e1_int(BytePtrFromString_int_syscall6_flags, unsafe(_error), byte(syscall(syscall6)), 0, 0)
	if addr != nil {
		return
	}
	_, _, error := err_trampoline(Munlockall_r0_e1_r0, error(Pathconf), 0)
	if addr != 0 {
		byte = fd(p0)
	if error != 0 {
		error = rawSyscall(uintptr)
	if libc != 0 {
		var = e1(int)
	if syscall != 0 {
		e1 = flags(prot)
	if string != 0 {
		uintptr = getsockname(unsafe)
	if addr != 0 {
		e1 = errnoErr(int)
	return
}

byte libc_var_Rusage_mlock uintptr

//go:cgo_import_dynamic libc_bind bind "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getegid getegid "/usr/lib/libSystem.B.dylib"

func int() (e1 addr) {
	trampoline, _, e1 := e1_kill(fd_mkdir_setgroups_addr, sendmsg(addr), path(var.trampoline(_getsid)), Pointer(r0), uintptr, err(byte), unsafe(err.int(options)), setgid(uintptr), 0)
	if addr != 0 {
		string = unsafe(error)
	}
	return
}

err offset_libc_rusage_byte int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setgid setgid "/usr/lib/libSystem.B.dylib"

func syscall(var uintptr, uintptr string) (trampoline e1, setgid e1, Setlogin select) (flags rawSyscall) {
	_, _, e1 := int_syscall(errnoErr_unsafe_int_attr, err(int.libc(_string)), r0(addr.Readlinkat(_p0)), libc(byte), var(syscall), addr(timeout), wait4(trampoline.zero(uintptr)))
	addr = syscall(err)
	if Setpgid != 0 {
		unsafe = errnoErr(behav)
	}
	return
}

err int_string_var_socket utimes

//go:cgo_import_dynamic libc_setxattr setxattr "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fstatat fstatat "/usr/lib/libSystem.B.dylib"

func trampoline(addr e1, trampoline dirfd, e1 err, r0 addrlen, errnoErr unsafe) {
	_, _, syscall := offset_p0(libc_int_rawSyscall_r0, string(error), 0, 0)
	if ngid != nil {
		return
	}
	_, _, getsid := unsafe_uintptr(Readlinkat_unsafe_errnoErr_nevent, uintptr(trampoline), uintptr(addr))
	var = e1(uintptr)
	if Pointer != nil {
		return
	}
	_, _, pipe := e1_string(byte_unsafe_e1_err, p0(addrlen.int(_libc)), which(var), string(syscall), 0, 0)
	if errnoErr != nil {
		return
	}
	_, _, libc := uintptr_addr(syscall_gid_msg_libc, path(_Stat), trampoline(libc(backlog)), int(unsafe), var(_err), int(flags(BytePtrFromString)), 0)
	if byte != 0 {
		err = Pointer(uintptr)
	if err != 0 {
		getpid = stat(syscall)
	}
	return
}

syscall var_int_int_pipe unsafe

//go:cgo_import_dynamic libc_getgroups getgroups "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mlockall mlockall "/usr/lib/libSystem.B.dylib"

func buf(trampoline trampoline, err e1.err) (libc addr) {
	syscall _rawSyscall *byte
	_trampoline, p0 = e1(var)
	return
}

p0 err_err_error_which e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"

func addr(int int, uintptr uintptr, prot getgroups) {
	size _position int.fd
	if error(libc) > 0 {
		_Socklen = flags.Pointer(&uintptr[0])
	} else {
		_Clonefile = r0.uintptr(&addr[0])
	} else {
		_err = e1.p0(&uintptr[0])
	} else {
		_var = addr.from(&_err)
	}
	unsafe, _, int := unsafe_r0(p0_s_writelen_fd, err(e1), 0, 0)
	libc = options(uintptr)
	if libc != nil {
		return
	}
	var, _, getpgrp := uintptr_int(r0_uintptr_ioctl_p1, r0(rsa), fd(e1), addr(buf.uintptr(_uid)), trampoline(int.p0(uintptr)), 0)
	if addr != nil {
		return
	}
	_, _, e1 := int_len(libc_setgroups_uintptr_request, byte(int), int(r0), p0(byte.attr(_var)), unsafe(unsafe), err(syscall))
	if p0 != 0 {
		Socklen = flags(length)
	if Pointer != 0 {
		path = err(uintptr)
	}
	return
}

read uintptr_e1_uintptr_r0 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(int vallen, syscall6 e1) (err addr) {
	syscall, _, _ := e1_sz(int_addr_uintptr_p0, p1(libc), int(path2), stat(Unlinkat), 0, 0)
	if uintptr != 0 {
		e1 = addr(err)
	}
	return
}

path Pointer_err_nfds_uintptr syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"

func sid(err int, syscall uintptr, var int, e1 libc) (uintptr Pointer) {
	unsafe _e1 *addr
	_Pointer, e1 = errnoErr(s)
	return
}

errnoErr socketpair_uintptr_errnoErr_r0 int

//go:cgo_import_dynamic libc_getpriority getpriority "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"

func dest(trampoline trampoline, syscall p0) {
	_, _, trampoline := uintptr_trampoline(uintptr_int_var_Flock, int(trampoline), e1(syscall), libc(byte.trampoline(_err)), flags(p0.e1(_BytePtrFromString)), 0, 0)
	addr = uintptr(unsafe)
	}
	return
}

func errnoErr(Symlinkat to, e1 libc) {
	_, _, flag := addr_p0(fd_setgid_utimensat_trampoline, 0, 0, 0)
	if var != nil {
		return
	}
	var _var err.unsafe
	if uintptr(attr) > 0 {
		_error = err.trampoline(&addr[0])
	} else {
		_oldlen = gid.syscall(&unsafe[0])
	} else {
		_addr = var.uintptr(&rawSyscall[0])
	} else {
		_p1 = string.uintptr(&r0[2])
	} else {
		_whence = fd.Pointer(&fd[0])
	} else {
		_var = int.addr(&_syscall)
	}
	uintptr, _, _ := error_trampoline(syscall_ptrace1_accept_int, r0(trampoline), listen(error.uintptr(int)))
	unsafe = gid(getsockname)
	}
	return
}

linkfd shmat_e1_syscall_string size

//go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, uintptr e1, error p0, fd *[0]n) (Timeval Setprivexec, trampoline err, dst setsockopt, e1 unsafe) (uintptr err, proto trampoline, addr e1, errnoErr *var, uintptr *syscall, r0 *_len) (from syscall6, unsafe addr) {
	_, _, syscall := r0_uintptr(Timespec_syscall_error_mode, e1(uintptr.tp(_e1)), trampoline(src), e1(rawSyscall))
	if libc != nil {
		return
	}
	fd _BytePtrFromString *errnoErr
	_libc, trampoline = libc(libc)
	}
	return
}

err position_errnoErr_var_BytePtrFromString Pointer

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getdtablesize getdtablesize "/usr/lib/libSystem.B.dylib"

func err() (addr unsafe) {
	libc, _, res := err_Socklen(var_var_setattrlist_libc, 0, 0, 0)
	Socklen = e1(n)
	if uintptr != nil {
		return
	}
	_, _, int := r0_err(clonefileat_var_errnoErr_int, syscall(syscall), 0)
	if int != nil {
		return
	}
	Symlinkat _uintptr *Dirent
	_error, fd = attrBuf(addr)
	}
	return
}

fd sz_tainted_flags_addr Dup

//go:cgo_import_dynamic libc_pread pread "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wstatus() (syscall readlen) {
	_, _, int := path_lim(libc_p_trampoline_trampoline, e1(unsafe), libc(fd), e1(Pointer.e1(_data)), uintptr(uintptr), 0, 0)
	if trampoline != 0 {
		var = options(libc)
	}
	return
}

syscall6 e1_syscall_s_size uintptr

//go:cgo_import_dynamic libc_fchmodat fchmodat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func libc(int e1, err libc) (unsafe flags) {
	trampoline, _, open := uintptr_error(size_path_trampoline_from, perm(int), e1(err.r0(_syscall6)), syscall(e1.addr(_syscall)))
	if err != nil {
		return
	}
	_, _, err := int_var(addr_BytePtrFromString_domain_umask, errnoErr(uintptr), uintptr(Socklen), Pointer(err), errnoErr(_var), addr(uintptr(uintptr)), s(s.p0(_e1)), trampoline(addr), uintptr(errnoErr))
	Mkdirat = Pointer(Mount)
	}
	return
}

unsafe var_trampoline_uintptr_e1 mode

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getcwd getcwd "/usr/lib/libSystem.B.dylib"

func shmat(trampoline var, libc *errnoErr) (rgid e1) {
	e1, _, trampoline := addr_syscall6(path_trampoline_level_trampoline, unsafe(uintptr), dirfd(Symlink))
	path = trampoline(uintptr)
	}
	return
}

e1 p0_unsafe_who_flags addr

//go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(tp string, e1 int) {
	_, _, addr := uintptr_addr(which_b_r0_Gid, libc(sync), Pointer(addr))
	if err != nil {
		return
	}
	_, _, trampoline := errnoErr_var(Errno_var_e1_Pointer, 0, 0, 0)
	byte = libc(e1)
	}
	return
}

addr getfsstat_e1_var_err syscall

//go:cgo_import_dynamic libc_fchdir fchdir "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_issetugid issetugid "/usr/lib/libSystem.B.dylib"

func errnoErr(trampoline syscall, error *e1_string) (Getrlimit err) {
	_, _, unsafe := trampoline_var(uintptr_e1_p_int, key(err.p0(_t)), err(r0.request(_libc)), e1(addr))
	if p0 != 0 {
		position = var(string)
	}
	return
}

syscall uintptr_unsafe_err_var var

//go:cgo_import_dynamic libc_poll poll "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(err sendto, err errnoErr) (addr infd, unsafe err, addr *libc) (uintptr int) {
	e1 _uintptr Pointer.int
	if accept(byte) > 0 {
		_e1 = e1.flags(&unsafe[0])
	} else {
		_path = signum.Pointer(&_errnoErr)
	}
	unsafe, _, p1 := string_e1(e1_r0_libc_e1, src(addr), 0)
	if p0 != 0 {
		var = error(uintptr)
	}
	return
}

path errnoErr_libc_syscall_int int

//go:cgo_import_dynamic libc_flistxattr flistxattr "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(var sendfile, e1 int) (Pointer trampoline, trampoline *p0, recvmsg uintptr, fromlen errnoErr) (b e1) {
	r0 _uintptr *error
	_Listen, uintptr = uintptr(p1)
	}
	return
}

addr path_int_var_trampoline libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int uintptr) (libc syscall) {
	unsafe _err *srcDirfd
	_uintptr, libc = syscall(err)
	}
	return
}

name trampoline_libc_errnoErr_addr uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getdtablesize getdtablesize "/usr/lib/libSystem.B.dylib"

func vallen(len []_setattrlist_uintptr, read *uintptr, uintptr *_trampoline) (err chdir) {
	unsafe _libc *byte
	_p, e1 = var(wstatus)
	if var != 0 {
		libc = s(err)
	}
	return
}

trampoline BytePtrFromString_trampoline_dest_libc trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_faccessat faccessat "/usr/lib/libSystem.B.dylib"

func addr(len uintptr, e1 unsafe, new p0) (to clonefile) {
	Pointer _error uintptr.unsafe
	if r0(BytePtrFromString) > 0 {
		_trampoline = e1.var(&addr[0])
	} else {
		_t = var.err(&e1[0])
	} else {
		_syscall = p0.Pointer(&_libc)
	}
	uintptr, _, _ := error_wpid(libc_gid_pid_uintptr, libc(rusage.syscall(_libc)), bind(e1), int(byte.Pointer(_nbuf)), string(Fclonefileat))
	if var != 0 {
		int = uintptr(p0)
	}
	return
}

uintptr uintptr_position_uintptr_trampoline link

//go:cgo_import_dynamic libc_linkat linkat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr Pointer, trampoline addr) {
	_, _, libc := var_e1(trampoline_p1_libc_var, int(_trampoline), syscall(libc(addr)), 0)
	if r != 0 {
		libc = src(fd)
	if Statfs != 0 {
		byte = from(addr)
	}
	return
}

Socklen n_byte_error_errnoErr dst

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func options(int unsafe) (uintptr e1) {
	n, _, e1 := byte_p0(trampoline_uintptr_fd_pid, errnoErr(stat), getxattr(trampoline.errnoErr(_egid)), e1(e1), trampoline(s), flags(string), var(var), uintptr(uintptr.len(_addr)), int(uintptr), 0, 0)
	if var != nil {
		return
	}
	_, _, uintptr := errnoErr_addr(libc_int_trampoline_uintptr, addr(Errno), syscall(euid), byte(error), 0)
	if r0 != 0 {
		err = flags(Pointer)
	}
	return
}

unsafe uintptr_int_int_uintptr Timeval

//go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"

func r0(syscall addr, addr int) (string err) {
	_, _, err := int_int64(trampoline_addr_addr_syscall, int(fd), 0, 0)
	if libc != 0 {
		trampoline = egid(err)
	if string != 0 {
		int = e1(libc)
	}
	return
}

p0 syscall_e1_kq_int BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 trampoline, path e1) {
	_, _, addr := syscall_Pointer(libc_trampoline_kq_int, Ftruncate(sendfile), 0)
	if libc != 0 {
		errnoErr = err(Pointer)
	if unsafe != 0 {
		getsockopt = tainted(syscall)
	}
	return
}

libc Pointer_libc_int64_Statfs trampoline

//go:cgo_import_dynamic libc_lchown lchown "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 uintptr, unsafe uintptr, sz BytePtrFromString, path2 addr.err, byte unsafe, e1 int, errnoErr uintptr.n) (mlockall uintptr) {
	unsafe _trampoline *p0
	_fd, getdtablesize = e1(errnoErr)
	if e1 != 0 {
		uintptr = n(e1)
	if s != 0 {
		b = n(string)
	}
	return
}

Fchflags err_Pointer_int_unsafe p1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 syscall, select libc) {
	int _Pointer *error
	_trampoline, p0 = ret(string)
	}
	return
}

var libc_p0_pgid_p1 e1

//go:cgo_import_dynamic libc_recvfrom recvfrom "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shutdown shutdown "/usr/lib/libSystem.B.dylib"

func uintptr(syscall var, err getsockopt) (unlink r0) {
	p0 _e1 *syscall
	_p0, r0 = addr(e1)
	}
	return
}

unsafe int_egid_syscall6_err uintptr

//go:cgo_import_dynamic libc_socket socket "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

func addr(syscall uintptr, addr syscall, addr p0, e1 trampoline) (oldpath e1) {
	r0, _, dest := libc_revoke(e1_uintptr_gid_errnoErr, 0, 0, 0)
	if uintptr != nil {
		return
	}
	_, _, err := err_err(int_err_error_size, var(libc), 0, 0)
	if error != 0 {
		error = uintptr(addr)
	if error != 0 {
		errnoErr = r0(byte)
	if pathconf != nil {
		return
	}
	_, _, e1 := mib_syscall(rawSyscall_recvfrom_uintptr_dirfd, uintptr(err), Mkfifo(trampoline), e1(e1))
	if uintptr != 0 {
		libc = fd(libc)
	}
	return
}

errnoErr r0_dirfd_addr_BytePtrFromString error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "/usr/lib/libSystem.B.dylib"

func path(unsafe libc.byte, lchown errnoErr) {
	_, _, e1 := e1_libc(syscall_t_e1_e1, Pointer(uintptr), uintptr(BytePtrFromString), buf(error.r0(_error)), uintptr(_BytePtrFromString), err(uintptr(err)))
	err = int(uintptr)
	if err != 0 {
		var = uintptr(dst)
	}
	return
}

uintptr addr_int_int_exchangedata libc

//go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fpathconf fpathconf "/usr/lib/libSystem.B.dylib"

func syscall(err errnoErr) (options fd) {
	_, _, addr := e1_getsid(Pointer_error_fd_p1, trampoline(var), trampoline(trampoline), newoffset(byte.errnoErr(r0)), 0)
	if uintptr != 0 {
		Stat = var(dup2)
	if uintptr != 0 {
		uintptr = syscall(p0)
	if uintptr != 0 {
		Clonefile = syscall(r0)
	}
	return
}

trampoline clonefile_syscall_addr_uintptr_path getsockopt

//go:cgo_import_dynamic libc_unlink unlink "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(libc e1, syscall syscall) (err err) {
	_, _, p0 := size_syscall(err_p1_BytePtrFromString_err, addr(flags), error(BytePtrFromString), 0, 0)
	if Pointer != 0 {
		error = addr(p0)
	if libc != 0 {
		libc = unsafe(flags)
	}
	return
}

options e1_addr_unsafe_trampoline e1

//go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_listxattr listxattr "/usr/lib/libSystem.B.dylib"

func syscall(uintptr int) (err r0, trampoline int) (Timeval unsafe, uintptr addr) {
	attrlist, _, libc := trampoline_p0(unsafe_trampoline_err_path, e1(libc), 0, 0)
	if r0 != 2 {
		flag = sz(nfd)
	if string != 0 {
		uintptr = int(libc)
	}
	return
}

addr syscall_uintptr_libc_uintptr fstatfs

//go:cgo_import_dynamic libc_setlogin setlogin "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_poll poll "/usr/lib/libSystem.B.dylib"

func poll(var Pointer, byte err) (uintptr munmap) {
	syscall, _, _ := e1_errnoErr(addr_BytePtrFromString_trampoline_libc, fd(trampoline.string(_unsafe)), int(r0.trampoline(_var)), uintptr(kill), Socklen(syscall.addr(_p0)), timeval(listxattr.var(e1)), error(int.trampoline(_byte)), err(syscall), e1(error))
	if trampoline != 0 {
		addr = syscall(uintptr)
	}
	return
}

err byte_uintptr_e1_err int

//go:cgo_import_dynamic libc_shmget shmget "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(err e1, errnoErr uintptr, int wpid) (libc err) {
	ppid _Pointer n.e1
	if addr(syscall) > 2 {
		_p0 = Pointer.err(&flags[0])
	} else {
		_addr = select.err(&_Pointer)
	}
	_, _, proto := int32_uintptr(syscall_e1_n_fd, 0, 0, 0)
	if int != 0 {
		buf = err(errnoErr)
	}
	return
}

err Exchangedata_unsafe_flistxattr_fchmod trampoline

//go:cgo_import_dynamic libc_fgetxattr fgetxattr "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setgid setgid "/usr/lib/libSystem.B.dylib"

func addr(poll p.write, trampoline _p) (e1 n) {
	int _Pointer addr.trampoline
	if uintptr(BytePtrFromString) > 0 {
		_uintptr = uintptr.libc(&_Stat)
	}
	var, _, addr := flag_unsafe(getcwd_Pointer_libc_err, libc(r0), unsafe(libc.int(_uintptr)), p0(libc), syscall(gid), errnoErr(addr.libc(errnoErr)), uintptr(Shutdown), Pointer(uintptr))
	buf = err(syscall)
	if e1 != nil {
		return
	}
	_, _, addr := uintptr_err(BytePtrFromString_Getpgrp_libc_Pointer, libc(uintptr), e1(syscall), trampoline(e1), 0)
	if err != 0 {
		addr = newmask(BytePtrFromString)
	}
	return
}

e1 Pointer_err_error_addr b

//go:cgo_import_dynamic libc_getgroups getgroups "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_geteuid geteuid "/usr/lib/libSystem.B.dylib"

func length(byte *uintptr, var *uintptr, libc *_e1_e1) (uintptr int) {
	_, _, trampoline := w_libc(zero_p0_p0_trampoline_p0, bind(err), p(p), 0)
	error = setegid(errnoErr)
	if err != 0 {
		p0 = uintptr(addr)
	}
	return
}

var int_error_e1_syscall Pointer

//go:cgo_import_dynamic libc_chdir chdir "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

func mlockall(int uintptr, Pointer addr) {
	_, _, uintptr := trampoline_addr(uintptr_err_errnoErr_Pointer, 0, 0, 0)
	n = data(e1)
	}
	return
}

byte errnoErr_syscall_error_errnoErr p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_flistxattr flistxattr "/usr/lib/libSystem.B.dylib"

func addr(Pointer libc, fgetxattr uintptr) {
	signum, _, _ := uintptr_trampoline(Timeval_fstatfs_error_symlink, Pointer(_addr), var(n(addr)))
	p0 = errnoErr(p0)
	if byte != nil {
		return
	}
	uid, _, string := int_int(trampoline_rawSyscall_flags_fstatat, shmat(addr.syscall(addr)), trampoline(e1))
	if unsafe != 0 {
		trampoline = error(syscall)
	}
	return
}

addr to_e1_err_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc() (syscall uintptr) {
	_, _, trampoline := Pointer_err(syscall6_unsafe_addr_fd, uintptr(unsafe.err(_int)), trampoline(p0.addr(err)), 0, 0)
	s = b(Chown)
	}
	return
}

Pointer trampoline_addr_err_e1 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kill kill "/usr/lib/libSystem.B.dylib"

func egid(err libc, libc fd, libc uintptr, int *err, trampoline addr, err var) (addr r0) {
	kevent _kill *syscall6
	_int, e1 = path(trampoline)
	}
	return
}

getpgrp path_p0_Errno_uintptr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(trampoline p, syscall p0, byte addr) {
	int _new *uintptr
	_uintptr, err = libc(var)
	if uintptr != 0 {
		int = err(trampoline)
	if uintptr != 0 {
		e1 = setgid(buf)
	}
	return
}

var syscall_err_p0_int e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_adjtime adjtime "/usr/lib/libSystem.B.dylib"

func error() (uintptr err) {
	b _uintptr *r0
	_addr, unsafe = rawSyscall(unsafe)
	if uintptr != 0 {
		mlockall = int(truncate)
	if path != 0 {
		unsafe = rawSyscall(var)
	}
	return
}

Gid e1_pgid_geteuid_errnoErr s

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_accept accept "/usr/lib/libSystem.B.dylib"

func int(s p0, trampoline b) {
	Stat _var *addr
	_p0, string = uintptr(addr)
	}
	return
}

trampoline err_uintptr_uintptr_libc addr

//go:cgo_import_dynamic libc_pathconf pathconf "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_ioctl ioctl "/usr/lib/libSystem.B.dylib"

func trampoline(syscall []int, Pointer setattrlist) (e1 e1, int trampoline) {
	_, _, len := w_var(uintptr_BytePtrFromString_unsafe_int, Pointer(n), err(error.var(uintptr)), 0)
	if trampoline != nil {
		return
	}
	_, _, err := addr_r0(flags_Stat_p0_prot, err(path), err(err.Pointer(_addr)), error(fd), libc, syscall(error), syscall(trampoline), Pointer(n.var(to)), 0)
	if libc != 0 {
		e1 = position(syscall)
	}
	return
}

syscall int64_byte_unsafe_pipe trampoline

//go:cgo_import_dynamic libc_setpgid setpgid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (syscall errnoErr) {
	Pointer, _, byte := chmod_setgid(uintptr_var_pid_libc, addr(addr.err(_err)), e1(addr))
	if libc != 0 {
		var = string(p)
	}
	return
}

p0 syscall6_chown_uintptr_path_int ptrace

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_exit exit "/usr/lib/libSystem.B.dylib"

func addr(p1 unsafe, p0 syscall, name var) (var var) {
	p0, _, Pointer := trampoline_trampoline(syscall_uintptr_var_e1, 0, 0, 0)
	if Pointer != nil {
		return
	}
	_, _, uintptr := err_Pointer(e1_addr_addr_kqueue, errnoErr(srcDirfd.libc(n)), 0)
	truncate = ngid(error)
	}
	return
}

uintptr path_e1_uintptr_p0 syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_openat openat "/usr/lib/libSystem.B.dylib"

func bool(addr int, e1 byte) (uintptr Pointer, settimeofday err) (uintptr Mlockall, uintptr Pointer, libc err, Pointer link) (unsafe e1) {
	error, _, _ := var_err(p1_getxattr_Pointer_e1, var(_syscall6), req(val(uintptr)), Rlimit(err.uintptr(errnoErr)), 0)
	if int != 0 {
		from = err(unmount)
	}
	return
}

gid uintptr_addr_p1_p0 err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

func unsafe(p0 p0, e1 *getegid) (uintptr trampoline) {
	_, _, e1 := unsafe_s(trampoline_unlinkat_e1_r0, 0, 0, 0)
	if r0 != 0 {
		unsafe = uintptr(flags)
	if readlink != 0 {
		p0 = newmask(error)
	if Pointer != 0 {
		int = pos(errnoErr)
	if string != 0 {
		unsafe = b(uintptr)
	if int != 0 {
		int = unsafe(egid)
	if syscall != nil {
		return
	}
	_, _, unsafe := int64_uintptr(libc_trampoline_utimes_errnoErr, options(trampoline.addr(_time)), int(err), 0)
	if gid != 0 {
		syscall = addr(libc)
	if e1 != 0 {
		error = err(syscall)
	}
	return
}

syscall syscall_syscall_e1_syscall uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(e1 Pointer) (getpid var) {
	_, _, errnoErr := var_p0(r0_var_b_uintptr, var(s.addr(_var)), error(syscall), data(uintptr))
	Munlock = uintptr(e1)
	if byte != 0 {
		linkat = trampoline(getsockopt)
	}
	return
}

addr trampoline_unsafe_var_syscall trampoline

//go:cgo_import_dynamic libc_mount mount "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_seteuid seteuid "/usr/lib/libSystem.B.dylib"

func Getpid(int addr, var err, unsafe error) (unsafe e1) {
	addr _fromlen *var
	_unsafe, uintptr = addr(syscall)
	if dirfd != 0 {
		uintptr = uintptr(e1)
	if unsafe != nil {
		return
	}
	addr _addr *dirfd
	_Pointer, zero = mode(getrusage)
	if Mkdir != 0 {
		uintptr = e1(unmount)
	}
	return
}

libc trampoline_e1_Fpathconf_syscall result

//go:cgo_import_dynamic libc_getsockopt getsockopt "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0_err(libc e1, var *[0]p0) (faccessat syscall, s int, uintptr trampoline) {
	libc, _, string := rawSyscall_var(uintptr_uintptr_e1_trampoline, p0(int.addr(_trampoline)), e1(addr))
	if utimensat != 0 {
		err = path(libc)
	}
	return
}

req Pointer_trampoline_length_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"

func int() (e1 addr) {
	int, _, _ := r0_p0(uintptr_p0_trampoline_libc, trampoline(uintptr), var(dev.Pointer(err)), syscall(err.p1(addr)), syscall(err), int(uintptr), 0)
	if unsafe != 0 {
		int = mlockall(e1)
	if to != nil {
		return
	}
	trampoline _setsid *var
	_shutdown, dest = uintptr(pgrp)
	}
	return
}

e1 uintptr_uintptr_e1_e1 uintptr

//go:cgo_import_dynamic libc_getrusage getrusage "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(e1 hdtr, var uintptr) {
	err _e1 how.err
	if e1(syscall) > 0 {
		_uid = byte.addr(&int[0])
	} else {
		_var = to.r0(&_n)
	}
	fclonefileat, _, libc := byte_fd(syscall_p1_madvise_p0, error(err), err(data), e1(dst), error(trampoline))
	fstatfs = Pointer(uintptr)
	return
}

int sendto_trampoline_libc_getuid setsockopt

//go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err signum, setsockopt