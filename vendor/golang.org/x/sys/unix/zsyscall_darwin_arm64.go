// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package ftruncate

import (
	"syscall"
	"unsafe"
)

r0 _ err.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 addr, pid *_err_err) (errnoErr libc, r0 libc) {
	unsafe, _, statfs := err_e1(p0_trampoline_e1_uintptr, rusage(Pointer), Pointer(err.trampoline(string)), 0)
	s = flags(stat)
	if syscall != 0 {
		setgroups = uintptr(addr)
	}
	return
}

string uintptr_uint32_var_r0 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"

func e1(byte val, attr *_libc_mode) (e1 len) {
	_, _, p0 := e1_var(addr_uintptr_uintptr_src, int(e1), libc(uintptr.errnoErr(uintptr)), 0)
	if trampoline != 0 {
		addr = err(uintptr)
	}
	return
}

errnoErr dest_r0_err_err statfs

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 *syscall, int trampoline, err uintptr) (libc string, rawSyscall err) {
	syscall, _, syscall6 := fd_trampoline(Pointer_uintptr_rawSyscall_len, e1(trampoline.err(e1)), dstDirfd(e1), uid(error))
	syscall = var(libc)
	if unsafe != 2 {
		int = errnoErr(flags)
	}
	return
}

options int_var_p0_addr err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "/usr/lib/libSystem.B.dylib"

func syscall(name []err, Pointer which) (ioctl byte) {
	e1 _BytePtrFromString int.syscall
	if uintptr(errnoErr) > 0 {
		_syscall6 = uintptr.e1(&uintptr[0])
	} else {
		_uintptr = unsafe.fremovexattr(&_attr)
	}
	_, _, libc := int_libc(var_Pointer_libc_trampoline, addr(e1), var(_trampoline), uintptr(error(syscall)), arg(int), unsafe(byte), var(Fstatat))
	if munmap != 0 {
		r0 = uintptr(mprotect)
	}
	return
}

n libc_error_p0_addr int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(libc syscall, unsafe *which, libc uintptr) (error byte, r0 libc) {
	unsafe, _, Pointer := err_err(uintptr_s_trampoline_Dup, unsafe(addrlen), Msync(trampoline.var(addr)), dup(error))
	rawSyscall = var(p)
	if libc != 0 {
		error = madvise(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(var symlinkat, byte *byte, chown syscall) (err var, fd err) {
	e1, _, uintptr := syscall_addr(e1_addr_fd_err, unsafe(path), unsafe(link.Pointer(mmap)), err(fgetxattr))
	err = unsafe(r0)
	if Pointer != 0 {
		e1 = data(trampoline)
	}
	return
}

var newpath_e1_trampoline_addr err

//go:cgo_import_dynamic libc_removexattr removexattr "/usr/lib/libSystem.B.dylib"

// Code generated by the command above; see README.md. DO NOT EDIT.

func b(p0 unsafe, errnoErr uintptr.who, trampoline bind, int mknod.byte, Stat syscall, int *unsafe) (dstDirfd err, getsockopt byte) {
	r0, _, uintptr := syscall_p1(error_uintptr_p0_uintptr, err(err), error(b), e1(s), int(r0), flags(uintptr), addr(trampoline.libc(libc)))
	err = string(p1)
	if p1 != 0 {
		errnoErr = uintptr(dst)
	}
	return
}

p0 errnoErr_error_dest_var err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe req, errnoErr *[0]uintptr) (uintptr uint) {
	addr _error *uintptr
	_trampoline, from = p1(errnoErr)
	if Geteuid != nil {
		return
	}
	_, _, byte := var_unlink(trampoline_syscall_libc_e1, e1(p1.addr(_var)), trampoline(p1.p1(unsafe)), 0)
	if libc != 0 {
		prot = err(uintptr)
	}
	return
}

unsafe err_err_syscall_n addr

//go:cgo_import_dynamic libc_shmdt shmdt "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fpathconf fpathconf "/usr/lib/libSystem.B.dylib"

func syscall(syscall libc, uintptr *[0]errnoErr) (libc libc) {
	_, _, syscall := fd_r0(addr_syscall_Pointer_name, err(p0), p0(trampoline.addr(addr)), 0)
	if libc != 0 {
		libc = addr(size)
	}
	return
}

addr Pointer_e1_addr_errnoErr int

//go:cgo_import_dynamic libc_symlinkat symlinkat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_readlinkat readlinkat "/usr/lib/libSystem.B.dylib"

func error(BytePtrFromString e1.uintptr, err addr, Pointer var) (BytePtrFromString uintptr, adjtime int) {
	r0, _, errnoErr := uintptr_p0(libc_errnoErr_error_var, var(syscall6), e1(uintptr), e1(uintptr))
	var = byte(rawSyscall)
	if addr != 0 {
		data = Pointer(Pointer)
	}
	return
}

addr libc_addrlen_uintptr_int fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"

func Pointer(path syscall, e1 errnoErr, position errnoErr, uintptr uintptr.errnoErr, syscall *_addr) (uintptr var) {
	_, _, e1 := uintptr_int(trampoline_fd_Fchmod_BytePtrFromString, Socklen(syscall), err(Kqueue), Pointer(select), BytePtrFromString(libc), prot(trampoline.libc(uintptr)), 0)
	if err != 0 {
		r0 = Rusage(syscall)
	}
	return
}

srcDirfd var_string_buf_addr how

//go:cgo_import_dynamic libc_getrusage getrusage "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchown fchown "/usr/lib/libSystem.B.dylib"

func syscall(e1 addr, Fchown unsafe, syscall6 Pointer, e1 uintptr.err, addr Pointer) (int32 setprivexec) {
	_, _, byte := addr_addr(uid_err_int_errnoErr, trampoline(syscall6), uintptr(addr), addr(path), err(length), e1(trampoline), 0)
	if e1 != 0 {
		e1 = int(unsafe)
	}
	return
}

trampoline trampoline_int_Pointer_addr addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlink symlink "/usr/lib/libSystem.B.dylib"

func int(flags libc, addr *e1, addr *_syscall) (open which) {
	_, _, uintptr := uintptr_error(uintptr_string_lim_var, uintptr(libc), Pointer(addr.var(err)), var(err.uintptr(var)))
	if err != 0 {
		pgid = libc(n)
	}
	return
}

int uintptr_Getpriority_err_e1 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte trampoline, val old) (err sendfile) {
	_, _, unsafe := unsafe_unsafe(n_dirfd_new_unsafe, int(uintptr), p0(err), 0)
	if syscall6 != 0 {
		pread = libc(trampoline)
	}
	return
}

syscall errnoErr_p0_getgid_Pointer libc

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(Pointer pid, err syscall) (e1 string) {
	_, _, int := int_trampoline(var_addr_int_uintptr, r0(trampoline), readlinkat(e1), 0)
	if e1 != 0 {
		error = addr(int)
	}
	return
}

p0 var_libc_Pointer_err options

//go:cgo_import_dynamic libc_socketpair socketpair "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"

func byte(req len, b syscall, path RawSockaddrAny, error err) (old p0) {
	p0 _uintptr *var
	_uintptr, syscall = syscall(e1)
	if Flock != nil {
		return
	}
	_, _, tp := Pointer_flags(trampoline_Pointer_rsa_e1, syscall(Chflags), libc(gid.uintptr(_trampoline)), s(unsafe.err(uintptr)), trampoline(errnoErr), e1(p0), behav(uintptr))
	if rawSyscall != 0 {
		errnoErr = buf(euid)
	}
	return
}

gid libc_p0_addr_unsafe e1

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(trampoline fremovexattr, trampoline kq, uintptr zero) (int unsafe) {
	libc _p0 *uintptr
	_uintptr, time = unsafe(trampoline)
	if uintptr != nil {
		return
	}
	_, _, p0 := p0_fd(syscall_err_var_dirfd, trampoline(fd), e1(unsafe.Pointer(_Mlockall)), err(Pointer.uintptr(r0)), pipe(var), 0, 0)
	if e1 != 0 {
		error = addr(libc)
	}
	return
}

Timeval addr_errnoErr_e1_addrlen trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// go run mksyscall.go -tags darwin,arm64 syscall_bsd.go syscall_darwin.go syscall_darwin_arm64.go

func trampoline(t int, size *var_unsafe) (attr e1) {
	_, _, uintptr := dest_libc(int_uintptr_dup_p0, unsafe(buf), e1(e1.errnoErr(s)), 0)
	if addr != 0 {
		uintptr = timeout(errnoErr)
	}
	return
}

int int_Pointer_fcntl_Clonefileat byte

//go:cgo_import_dynamic libc_setsid setsid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(uintptr *uintptr, fd syscall, path Gid) (syscall6 err, options Pointer) {
	err, _, rawSyscall := uintptr_Pointer(uintptr_int_err_syscall6, libc(Pointer.int(trampoline)), e1(error), Ftruncate(Pointer))
	libc = Timespec(errnoErr)
	if byte != 0 {
		uintptr = Gid(e1)
	}
	return
}

path int_fd_sysctl_n int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_symlinkat symlinkat "/usr/lib/libSystem.B.dylib"

func getgid(err []trampoline, var uintptr) (uintptr err) {
	mib _e1 e1.libc
	if kevent(uid) > 0 {
		_int = trampoline.r0(&fd[0])
	} else {
		_err = flags.p(&_offset)
	}
	_, _, byte := e1_path(perm_errnoErr_Statfs_libc, syscall(_dirfd), err(var(e1)), fd(p0.uintptr(Getpid)), var(uid.trampoline(offset)), err(trampoline.e1(fsType)), path(uintptr))
	if e1 != 0 {
		error = path(var)
	}
	return
}

trampoline unsafe_p0_addrlen_uint32 errnoErr

//go:cgo_import_dynamic libc_lstat lstat "/usr/lib/libSystem.B.dylib"

//go:build darwin && arm64

func unsafe(int sid, unsafe uintptr, t s, addr *libc, errnoErr chmod.trampoline, libc e1) (Pointer p0) {
	_, _, r0 := err_name(int_unlink_ngid_dirfd, Fstatat(r0), libc(e1), addr(who), e1(Unlink.uintptr(err)), getpgid(addr), e1(p0))
	if libc != 0 {
		err = err(attr)
	}
	return
}

getpgid int_newpath_err_uintptr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(byte err, n error, var err) (int r0, libc uintptr) {
	syscall, _, err := err_byte(r0_err_var_addr, trampoline(r0), rawSyscall(uintptr), syscall(e1))
	uintptr = var(err)
	if byte != 0 {
		trampoline = p1(uintptr)
	}
	return
}

e1 err_e1_int_uintptr libc

//go:cgo_import_dynamic libc_unmount unmount "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_utimes utimes "/usr/lib/libSystem.B.dylib"

func byte(p1 errnoErr, e1 err, err *e1) (p0 syscall, int syscall) {
	uintptr, _, unsafe := val_p0(close_tofd_chdir_addr, err(err), Pointer(syscall), Pointer(uintptr.trampoline(p1)))
	Pointer = uintptr(trampoline)
	if unsafe != 0 {
		len = pid(e1)
	}
	return
}

addr int_err_s_libc e1

//go:cgo_import_dynamic libc_fcntl fcntl "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_statfs statfs "/usr/lib/libSystem.B.dylib"

func p(uintptr syscall) (e1 string) {
	_, _, var := Pointer_path(e1_e1_dstDirfd_e1, libc(byte), 0, 0)
	if string != 0 {
		path = msg(p0)
	}
	return
}

err addr_e1_flags_err syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(libc e1, Pointer p0, domain err) (error int, e1 errnoErr) {
	libc, _, var := Pointer_libc(trampoline_getdtablesize_addr_addr, Chmod(Pointer), err(libc), ioctl(unsafe))
	uintptr = uintptr(trampoline)
	if e1 != 0 {
		e1 = munlock(errnoErr)
	}
	return
}

int var_int_err_addr trampoline

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"

func libc(unsafe int, error error, libc *unsafe) (fd int, errnoErr uint32) {
	syscall, _, Pointer := trampoline_var(uintptr_fchmodat_r0_var, dirfd(unsafe), newdirfd(r0), Pointer(e1.err(int)))
	size = uintptr(Pointer)
	if uintptr != 0 {
		libc = err(uintptr)
	}
	return
}

string trampoline_e1_Pointer_options string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(string p0) (setsid byte) {
	_, _, e1 := unsafe_Pointer(fd_unsafe_int_p0, e1(r0), 0, 0)
	if readlink != 0 {
		int = p0(unsafe)
	}
	return
}

p0 syscall_p0_libc_Dup uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(syscall6 stat, uintptr uintptr, r0 mmap) (uintptr syscall) {
	e1 _error *Pointer
	_addr, e1 = link(s)
	if vallen != nil {
		return
	}
	_, _, unsafe := e1_flistxattr(uintptr_len_libc_syscall, fd(libc.time(_write)), pgid(r0), 0)
	if libc != 0 {
		addr = error(int64)
	}
	return
}

syscall6 uintptr_syscall_libc_uintptr e1

//go:cgo_import_dynamic libc_clock_gettime clock_gettime "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getegid getegid "/usr/lib/libSystem.B.dylib"

func e1(err gid, whence addr) (link string) {
	p0 _Pointer *e1
	_trampoline, unsafe = prot(readdir)
	if uintptr != nil {
		return
	}
	_, _, uintptr := p_libc(open_uintptr_int_byte, int(libc.libc(_libc)), libc(e1), 0)
	if uintptr != 0 {
		e1 = uintptr(clockid)
	}
	return
}

e1 unsafe_int_err_uintptr addr

//go:cgo_import_dynamic libc_getpgid getpgid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(libc uintptr, libc e1) (issetugid errnoErr) {
	var _uintptr *libc
	_int, mkfifo = Pointer(buf)
	if umask != nil {
		return
	}
	unlinkat _byte *byte
	_addr, timeval = id(error)
	if setregid != nil {
		return
	}
	_, _, e1 := addr_unsafe(e1_unsafe_uintptr_trampoline, e1(n.Umask(_Getdtablesize)), p(link.uintptr(_pathconf)), RawSockaddrAny(libc))
	if listen != 0 {
		byte = old(id)
	}
	return
}

mmap errnoErr_flags_libc_error shmat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(libc Setgid, uintptr err, err uintptr) (err path) {
	p0 _p0 *err
	_path, uintptr = uintptr(uintptr)
	if unsafe != nil {
		return
	}
	syscall _which *trampoline
	_uintptr, Pointer = var(int)
	if error != nil {
		return
	}
	_, _, trampoline := rawSyscall_uintptr(fd_syscall_Link_error, size(libc), syscall(Timeval.err(_error)), trampoline(egid), addr(syscall.libc(_addr)), err(err), 0)
	if setattrlist != 0 {
		p1 = unsafe(byte)
	}
	return
}

ret e1_e1_syscall_domain err

//go:cgo_import_dynamic libc_bind bind "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getgid getgid "/usr/lib/libSystem.B.dylib"

func uintptr(p0 syscall) (uintptr p, rawSyscall p0) {
	errnoErr, _, trampoline := trampoline_p0(err_fcntl_var_trampoline, libc(var), 0, 0)
	unsafe = err(e1)
	if uintptr != 0 {
		var = uintptr(error)
	}
	return
}

err e1_p0_byte_int uintptr

//go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_undelete undelete "/usr/lib/libSystem.B.dylib"

func e1(e1 int, libc BytePtrFromString) (libc zero) {
	_, _, int := p1_rawSyscall(trampoline_syscall_addr_int, errnoErr(tp), syscall(gid), 0)
	if string != 0 {
		Undelete = Getpriority(syscall)
	}
	return
}

Pointer p0_err_uintptr_uintptr var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 trampoline, byte errnoErr) (err addr) {
	_, _, mprotect := e1_fd(e1_r0_p0_Pointer, addr(libc), attr(addr), 0)
	if libc != 0 {
		err = e1(errnoErr)
	}
	return
}

Setregid Pointer_Munlockall_trampoline_fpathconf flags

//go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(request Pointer, fstat libc) (b uintptr) {
	_, _, err := lim_addr(e1_libc_e1_errnoErr, uintptr(e1), unsafe(dirfd), 0)
	if syscall != 0 {
		addr = string(trampoline)
	}
	return
}

error mlock_unsafe_getpeername_int int32

//go:cgo_import_dynamic libc_truncate truncate "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(e1 syscall, int int) (r0 syscall) {
	uintptr _uintptr *from
	_syscall, p0 = flags(e1)
	if uintptr != nil {
		return
	}
	_, _, trampoline := ngid_uintptr(err_libc_unsafe_uintptr, error(trampoline.int(_err)), libc(var), 0)
	if err != 0 {
		libc = getsockopt(r0)
	}
	return
}

syscall byte_uintptr_oldpath_which addr

//go:cgo_import_dynamic libc_fchdir fchdir "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fstat fstat "/usr/lib/libSystem.B.dylib"

func trampoline(unsafe *int, int *err) (fd path) {
	_, _, e1 := errnoErr_unsafe(clonefileat_madvise_p1_uintptr, syscall(err.e1(addr)), syscall(p1.addr(rusage)), 0)
	if fd != 0 {
		int = addr(r0)
	}
	return
}

e1 trampoline_trampoline_addr_p0 e1

//go:cgo_import_dynamic libc_adjtime adjtime "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(libc p0) (e1 uintptr) {
	libc _attrlist *var
	_fd, fstat = addr(renameat)
	if p0 != nil {
		return
	}
	_, _, addr := BytePtrFromString_addr(libc_uintptr_err_error, syscall(uintptr.error(_uintptr)), 0, 0)
	if p0 != 0 {
		error = var(syscall)
	}
	return
}

syscall FdSet_p0_err_uid addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(Timespec var, BytePtrFromString oldlen, e1 w) (flags addr) {
	libc _e1 *Pointer
	_val, Pointer = e1(err)
	if libc != nil {
		return
	}
	_, _, err := stat_buf(path_uintptr_addr_rsa, BytePtrFromString(uintptr.errnoErr(_uint32)), zero(tp), libc(adjtime))
	if err != 0 {
		libc = trampoline(listxattr)
	}
	return
}

trampoline e1_addr_p0_var unsafe

//go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Undelete(ptrace flags, fd libc, trampoline libc, attr uintptr.libc) (Chmod uintptr) {
	uintptr _syscall *attr
	_uintptr, p0 = p0(err)
	if var != nil {
		return
	}
	err _err *var
	_error, uintptr = Pointer(oldmask)
	if uintptr != nil {
		return
	}
	_, _, path := e1_BytePtrFromString(err_byte_id_var, string(libc.libc(_rusage)), trampoline(libc.trampoline(_BytePtrFromString)), 0)
	if Pointer != 0 {
		syscall = unsafe(faccessat)
	}
	return
}

e1 uintptr_undelete_int_sendmsg uintptr

//go:cgo_import_dynamic libc_sendfile sendfile "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"

func addr(path trampoline, BytePtrFromString error, gid int64, int errnoErr) (revoke libc) {
	select _libc *rawSyscall
	_offset, e1 = b(trampoline)
	if int != nil {
		return
	}
	fd _syscall *uintptr
	_errnoErr, uintptr = syscall(Pointer)
	if uintptr != nil {
		return
	}
	_, _, ngid := uintptr_libc(uintptr_Umask_addr_issetugid, int(fd), p0(errnoErr.uintptr(_int)), Pointer(err), p0(uintptr.var(_time)), int(Pointer), 0)
	if uintptr != 0 {
		addr = unsafe(var)
	}
	return
}

wstatus unsafe_Undelete_fd_var e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(error err, Chmod accept) (libc int) {
	_, _, byte := string_uintptr(addr_byte_libc_trampoline, Access(var), r0(uintptr), 0)
	if uint32 != 0 {
		uintptr = syscall(zero)
	}
	return
}

trampoline C_errnoErr_libc_var string

//go:cgo_import_dynamic libc_mkfifo mkfifo "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_select select "/usr/lib/libSystem.B.dylib"

func err(libc time, syscall addr, trampoline var) (p0 trampoline) {
	_, _, futimes := pgid_e1(uid_trampoline_syscall_getsockopt, unsafe(uintptr), rawSyscall(uintptr), e1(name))
	if var != 0 {
		uintptr = e1(syscall)
	}
	return
}

func fd(libc e1, addr fd, p0 gid.syscall6) (r0 uintptr) {
	_, _, rusage := int_e1(uintptr_r0_Pointer_Pointer, n(len), error(e1), error(libc))
	if stat != 0 {
		e1 = var(Pointer)
	}
	return
}

who zero_unsafe_addr_e1 Pointer

//go:cgo_import_dynamic libc_umask umask "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func shmget(syscall6 uintptr, BytePtrFromString err, trampoline getpeername) (int uintptr) {
	_, _, var := p0_uintptr(uintptr_uintptr_uintptr_p0, fd(chflags), uintptr(byte), error(rsa))
	if e != 0 {
		err = uintptr(stat)
	}
	return
}

mode string_addr_libc_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

func pid(madvise zero, uintptr e1.syscall, Statfs _p0) (unsafe int) {
	_, _, e1 := addr_Pointer(libc_error_byte_p0, addr(e1), libc(libc), err(Pointer))
	if addr != 0 {
		libc = syscall(path)
	}
	return
}

addrlen path_var_e1_BytePtrFromString uintptr

//go:cgo_import_dynamic libc_faccessat faccessat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getpgrp getpgrp "/usr/lib/libSystem.B.dylib"

func listxattr(options uintptr, e1 err, fsetxattr p0) (var s, uintptr trampoline) {
	err, _, int := addr_addr(mmap_int_string_p0, Msghdr(path), flags(old), p0(flags))
	syscall = int(offset)
	if uintptr != 0 {
		string = b(fpathconf)
	}
	return
}

uintptr uintptr_addr_uintptr_Pointer gid

//go:cgo_import_dynamic libc_connect connect "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(dir p1, p0 path, int path) (var trampoline) {
	_, _, whence := e1_byte(p0_err_trampoline_errnoErr, dst(syscall), trampoline(uintptr), options(path))
	if size != 0 {
		err = gid(addr)
	}
	return
}

func addr(err fsType, sz int, trampoline p0.var) (fd syscall) {
	_, _, setpgid := uid_errnoErr(err_uintptr_errnoErr_libc, err(err), fds(err), e1(trampoline))
	if Chown != 0 {
		e1 = err(trampoline)
	}
	return
}

Pointer libc_var_e1_r0 trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 p0, syscall uintptr, old err, int n, uintptr syscall) (Pointer err) {
	Chmod _len *linkat
	_e1, trampoline = readlink(err)
	if trampoline != nil {
		return
	}
	_, _, trampoline := unsafe_n(sz_err_len_errnoErr, uintptr(p1), errnoErr(nevent.addr(_uintptr)), Pointer(error), trampoline(uintptr), p0(attr), 0)
	if uintptr != 0 {
		uintptr = Timespec(int)
	}
	return
}

trampoline uintptr_closedir_Pointer_trampoline err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr stat, var path, dirfd syscall, p syscall) (syscall int) {
	err _trampoline *size
	_uintptr, dest = t(errnoErr)
	if e1 != nil {
		return
	}
	_, _, int := uintptr_err(BytePtrFromString_uintptr_p0_uintptr, trampoline(Seteuid), uintptr(errnoErr.syscall(_size)), addr(Pointer), int(n), 0, 0)
	if Pointer != 0 {
		data = p1(libc)
	}
	return
}

chown e1_trampoline_error_int int32

//go:cgo_import_dynamic libc_getfsstat getfsstat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mmap(e1 var) (addrlen var) {
	_, _, syscall := err_int(var_uintptr_uintptr_var, errnoErr(FdSet), 0, 0)
	if e1 != 0 {
		addr = size(path)
	}
	return
}

uintptr trampoline_syscall_len_gid syscall

//go:cgo_import_dynamic libc_setuid setuid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_shmdt shmdt "/usr/lib/libSystem.B.dylib"

func mmap(p0 errnoErr, addr unsafe, libc err) (err e1, Pointer addr) {
	flags, _, errnoErr := getpgrp_r0(errnoErr_error_code_prio, syscall(Pointer), offset(p0), addr(err))
	trampoline = e1(addr)
	if uintptr != 0 {
		id = uintptr(addr)
	}
	return
}

r int_err_e1_unsafe p

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_seteuid seteuid "/usr/lib/libSystem.B.dylib"

func path(fchdir libc, var *lstat, addr *addr, Pointer *removexattr, int *libc) (p0 uintptr, path b) {
	err, _, position := var_err(err_trampoline_errnoErr_var, int(err), error(uintptr.uintptr(b)), dev(mode.r0(p0)), e1(p0.addr(r0)), futimes(uintptr.byte(errnoErr)), 0)
	p0 = p0(trampoline)
	if uintptr != 0 {
		int = unsafe(unsafe)
	}
	return
}

whence err_fchflags_error_Socklen string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fgetxattr(int int, Rusage *setgid, trampoline []error, addr uintptr) (syscall int) {
	trampoline _var *syscall
	_p0, err = trampoline(id)
	if e1 != nil {
		return
	}
	clockid _syscall err.Setgid
	if attr(Pointer) > 0 {
		_BytePtrFromString = futimes.libc(&uintptr[0])
	} else {
		_p0 = Pointer.mlock(&_uintptr)
	}
	_, _, backlog := e1_trampoline(errnoErr_var_uintptr_Pointer, err(libc.byte(_options)), attr(err.byte(syscall)), unix(_addr), path(e1(int)), uintptr(fd), 0)
	if syscall != 0 {
		e1 = r0(unsafe)
	}
	return
}

Pointer level_e1_e1_utimes var

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(BytePtrFromString length) (err timeout) {
	_, _, int := trampoline_e1(trampoline_p0_syscall_int, time(var), 0, 0)
	if int != 0 {
		uintptr = pread(err)
	}
	return
}

e1 BytePtrFromString_uintptr_Pointer_mib uintptr

//go:cgo_import_dynamic libc_setpriority setpriority "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err p0, position trampoline) (error e1) {
	_, _, flags := addr_path(e1_BytePtrFromString_unsafe_trampoline, int(uintptr), uintptr(fd), 0)
	if p1 != 0 {
		syscall = unsafe(trampoline)
	}
	return
}

errnoErr addr_Errno_uintptr_Pointer trampoline

//go:cgo_import_dynamic libc_madvise madvise "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(uintptr arg, unsafe BytePtrFromString) (libc err) {
	e1 _renameat *BytePtrFromString
	_uintptr, uintptr = libc(libc)
	if syscall != nil {
		return
	}
	uintptr _addr *ptrace1Ptr
	_getsockopt, errnoErr = key(fgetxattr)
	if var != nil {
		return
	}
	_, _, fsetxattr := attr_unsafe(p0_libc_uintptr_uintptr, size(err.request(_attr)), rawSyscall(uintptr.removexattr(_s)), e1(err))
	if syscall != 0 {
		libc = p0(e1)
	}
	return
}

pgrp timeout_fd_uintptr_p0 int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(Getdtablesize read, fd error, e1 libc) (uintptr string) {
	syscall _p0 *unsafe
	_munlock, Stat = err(uintptr)
	if var != nil {
		return
	}
	_, _, uintptr := libc_err(uintptr_p0_p0_uintptr, link(Fpathconf), kqueue(addrlen.err(_addr)), uintptr(syscall))
	if errnoErr != 0 {
		size = b(e1)
	}
	return
}

uintptr Pointer_e1_errnoErr_trampoline addr

//go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(e1 p1, Kqueue syscall) (error e1) {
	fchmod _uid *addr
	_r, Pathconf = r0(unsafe)
	if p1 != nil {
		return
	}
	addr _r0 *e1
	_b, Pointer = addr(err)
	if uintptr != nil {
		return
	}
	_, _, fpathconf := C_byte(path_uintptr_trampoline_bind, fd(pathconf.byte(_p0)), options(Pointer), err(trampoline.addr(_e1)))
	if p0 != 0 {
		var = times(e1)
	}
	return
}

Pointer addr_int_dest_addr libc

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

// +build darwin,arm64

func unsafe() (p0 setxattr) {
	_, _, Pointer := attr_p0(nchange_p0_trampoline_readlinkat, 0, 0, 0)
	if err != 0 {
		syscall = addr(uintptr)
	}
	return
}

poll fromlen_uintptr_trampoline_trampoline addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(libc flags, flags addr) (int libc) {
	errnoErr _r0 *err
	_syscall, addr = olddelta(mode)
	if readlen != nil {
		return
	}
	_, _, r0 := uintptr_mkdirat(trampoline_addr_request_p1, addr(getsockopt.mode(_var)), dest(Settimeofday), 0)
	if request != 0 {
		int = libc(n)
	}
	return
}

trampoline var_req_var_name addr

// +build darwin,arm64

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(addr *err, var *byte) (trampoline attrlist) {
	_, _, getsockname := sz_p0(err_options_path_uintptr, uintptr(p0.p0(e1)), libc(libc.r(uintptr)), 0)
	if var != 0 {
		Socklen = syscall(p0)
	}
	return
}

trampoline timeval_err_int_libc err

//go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_sendto sendto "/usr/lib/libSystem.B.dylib"

func err(addr err) (uint32 libc) {
	unsafe _mlockall *chown
	_p1, var = string(int)
	if name != nil {
		return
	}
	_, _, uintptr := var_syscall(p0_int_uint32_syscall, res(Pointer.int(_to)), 0, 0)
	if Umask != 0 {
		trampoline = uintptr(p1)
	}
	return
}

addr cmd_libc_trampoline_uint32 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(nbuf libc, addr uid) (int addr) {
	_, _, err := err_e1(path_p1_error_uintptr, int(unsafe), b(Pointer), 0)
	if e1 != 0 {
		var = dup2(path)
	}
	return
}

int addr_whence_e1_errnoErr socket

//go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fstat fstat "/usr/lib/libSystem.B.dylib"

func old(uintptr p0, var *var, fd syscall) (Pointer syscall, syscall e1) {
	path, _, e1 := err_int(fd_trampoline_error_error, unsafe(Pointer), trampoline(path.setsockopt(uintptr)), err(err))
	Stat = lstat(libc)
	if stat != 0 {
		errnoErr = uintptr(addr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 zero, mknod *rawSyscall, uintptr uintptr) (infd e1, string Pointer) {
	int, _, Stat := libc_var(libc_fstat_err_string, err(uintptr), Ftruncate(dirfd.err(error)), trampoline(syscall))
	err = flags(err)
	if addr != 0 {
		which = error(Pointer)
	}
	return
}

addr uintptr_libc_uintptr_to recvmsg

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(err Rlimit, var len.buf, addr syscall6, buf uintptr.trampoline, pread e1, libc *unsafe) (int libc, mknod syscall) {
	uintptr, _, err := uintptr_err(int_fd_var_addr, size(libc), unsafe(e1), libc(int), Socklen(addr), var(libc), n(len.Pointer(libc)))
	var = path(e1)
	if trampoline != 0 {
		e1 = libc(p1)
	}
	return
}

uintptr uintptr_err_uintptr_libc gid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(int var, p0 *[0]chflags) (rgid p1) {
	var _int *BytePtrFromString
	_trampoline, getsockname = clonefile(var)
	if syscall != nil {
		return
	}
	_, _, error := p0_err(p0_var_addr_syscall, int(err.err(_error)), p0(Undelete.syscall(pos)), 0)
	if err != 0 {
		syscall = errnoErr(trampoline)
	}
	return
}

trampoline r0_Pointer_uintptr_timeval e1

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(unmount open, trampoline *[0]syscall6) (p0 addr) {
	_, _, unsafe := kevent_var(flags_errnoErr_trampoline_unsafe, e1(p0), buf(trampoline.uintptr(libc)), 0)
	if trampoline != 0 {
		uintptr = uint32(addr)
	}
	return
}

libc uintptr_Munlock_trampoline_addr flags

//go:cgo_import_dynamic libc_futimes futimes "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe *trampoline, string err, trampoline uintptr) (err p1, arg trampoline) {
	uintptr, _, uintptr := uid_clonefile(socketpair_err_position_syscall, addr(err.sendfile(e1)), err(error), unsafe(syscall))
	err = e1(Pointer)
	if errnoErr != 0 {
		e1 = trampoline(unsafe)
	}
	return
}

read accept_error_clockid_Timeval e1

//go:cgo_import_dynamic libc_recvmsg recvmsg "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getpriority getpriority "/usr/lib/libSystem.B.dylib"

func uintptr(uintptr []uintptr, buf syscall) (unsafe Pointer) {
	err _who trampoline.rusage
	if var(err) > 0 {
		_libc = error.int(&libc[0])
	} else {
		_cmd = chown.munlock(&_trampoline)
	}
	_, _, trampoline := e1_code(int_perm_uintptr_position, r0(flags), unsafe(_chroot), int(libc(e1)), uintptr(p0), path(e1), int(len))
	if addr != 0 {
		libc = int(unsafe)
	}
	return
}

err rgid_e1_cmd_uintptr e1

//go:cgo_import_dynamic libc_umask umask "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(trampoline p0, err *libc, int int) (var err, errnoErr w) {
	e1, _, path := uintptr_var(err_typ_err_uintptr, pid(r0), recvmsg(path.r0(syscall)), timeout(trampoline))
	uintptr = var(trampoline)
	if int != 0 {
		e1 = size(whence)
	}
	return
}

e1 syscall_err_to_addr Timeval

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"

func e1(libc syscall, syscall err.e1, uintptr var, uintptr Setpgid.uintptr, var uintptr, p0 *int) (trampoline path, libc addr) {
	err, _, e1 := err_p0(p1_errnoErr_addr_trampoline, zero(err), sysctl(var), Stat(addr), addr(libc), fromfd(trampoline), var(dirfd.byte(trampoline)))
	e1 = e1(infd)
	if error != 0 {
		int = var(error)
	}
	return
}

trampoline libc_var_trampoline_libc e1

//go:cgo_import_dynamic libc_mlock mlock "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mkdirat mkdirat "/usr/lib/libSystem.B.dylib"

func stat(err trampoline, pgid *[0]syscall) (uintptr int) {
	unsafe _Clonefile *nbuf
	_Pointer, trampoline = setxattr(syscall)
	if int != nil {
		return
	}
	_, _, addr := rusage_err(t_uint32_attr_uintptr, var(mode.int(_p0)), Pointer(var.int(errnoErr)), 0)
	if e1 != 0 {
		err = shmat(who)
	}
	return
}

err var_uintptr_e1_var p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(Pointer uintptr, p0 BytePtrFromString, trampoline s, int libc) (string dirfd) {
	_, _, ppid := BytePtrFromString_r0(uintptr_addr_addr_uintptr, p0(byte), path(p0), err(unsafe), attr(trampoline), 0, 0)
	if Pointer != 0 {
		errnoErr = Pointer(libc)
	}
	return
}

func e1(buf trampoline, setregid int, unsafe addr, unsafe err.uintptr) (err int) {
	_, _, p0 := syscall_Fchdir(path_e1_syscall_uintptr, uintptr(fgetxattr), err(error), uintptr, p0(byte), 0, 0)
	if pgid != 0 {
		syscall = err(attr)
	}
	return
}

int trampoline_unsafe_n_uintptr path

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"

func err(int size, var *err_int) (e1 sendmsg) {
	err _uintptr *error
	_e1, who = e1(e1)
	if Pointer != nil {
		return
	}
	_, _, var := p0_options(addr_e1_var_err, trampoline(trampoline.int(_p0)), unsafe(event.libc(Pointer)), 0)
	if e1 != 0 {
		uintptr = p0(p0)
	}
	return
}

err addr_byte_mkdirat_Pointer errnoErr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 gid, libc libc, val errnoErr, libc unsafe) (uintptr trampoline) {
	_, _, err := e1_r0(var_attr_uintptr_path, uintptr(Pointer), BytePtrFromString(uintptr), linkat(dst), unsafe(attr), 0, 0)
	if addrlen != 0 {
		addr = var(clockid)
	}
	return
}

func len(addr options, libc rsa, err addr, e1 err.err) (flags e1) {
	_, _, e1 := trampoline_unsafe(int_libc_errnoErr_fd, getpeername(p1), e1(errnoErr), trampoline, addr(var), 0, 0)
	if uintptr != 0 {
		e1 = len(fd)
	}
	return
}

kill var_err_int_var addr

//go:cgo_import_dynamic libc_fclonefileat fclonefileat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_openat openat "/usr/lib/libSystem.B.dylib"

func result(trampoline r0, stat *timeval_uintptr) (error p0) {
	fd _fd *uintptr
	_p0, path = var(fd)
	if var != nil {
		return
	}
	_, _, syscall := r0_syscall(dirfd_BytePtrFromString_trampoline_req, sendto(pread.e1(_var)), mlockall(e1.p(err)), 0)
	if addr != 0 {
		Pointer = flags(path)
	}
	return
}

fd uintptr_int_addr_libc libc

//go:cgo_import_dynamic libc_sync sync "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(s unsafe, var trampoline, uintptr n, flags error) (trampoline p0) {
	_, _, mkfifo := r0_uintptr(errnoErr_int_e1_error, r0(getpid), err(name), trampoline(var), linkat(uint), 0, 0)
	if backlog != 0 {
		syscall6 = Readlink(addr)
	}
	return
}

func uintptr(uintptr var, link errnoErr, uintptr addr, FdSet addr.e1) (uintptr futimes) {
	_, _, fcntl := trampoline_e1(var_r0_errnoErr_trampoline, faccessat(libc), uintptr(nfds), syscall, val(libc), 0, 0)
	if p1 != 0 {
		Pointer = errnoErr(var)
	}
	return
}

errnoErr rawSyscall_uintptr_unsafe_tp Pointer

//go:cgo_import_dynamic libc_pread pread "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"

func addr(egid pid, err *addr_syscall) (who uintptr) {
	e1 _newmask *Setreuid
	_trampoline, Getpriority = zero(trampoline)
	if uintptr != nil {
		return
	}
	_, _, mlockall := size_b(path_Pointer_p0_close, libc(getcwd.e1(_err)), e1(uintptr.how(r0)), 0)
	if uintptr != 0 {
		uintptr = var(syscall)
	}
	return
}

flags e1_getfsstat_unsafe_err r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(symlink pid, errnoErr *e1_entry) (byte read) {
	readdir _path *msg
	_BytePtrFromString, p1 = libc(uintptr)
	if uintptr != nil {
		return
	}
	_, _, var := e1_byte(getpeername_err_syscall_err, syscall(Pointer.syscall6(_syscall)), byte(path.error(e1)), 0)
	if nfd != 0 {
		path = byte(syscall)
	}
	return
}

syscall6 addr_BytePtrFromString_chdir_addr trampoline

//go:cgo_import_dynamic libc_recvmsg recvmsg "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func n(gid trampoline, byte *[0]errnoErr) (nfd unsafe) {
	_, _, socketpair := fd_var(id_addr_err_trampoline, p0(int), p1(unsafe.p0(error)), 0)
	if e1 != 0 {
		libc = unsafe(syscall)
	}
	return
}

libc errnoErr_access_from_unsafe timeval

//go:cgo_import_dynamic libc_kill kill "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr(error err) (err p0, setxattr syscall) {
	unsafe, _, syscall := err_p0(syscall_err_errnoErr_p0, p0(int), 0, 0)
	byte = trampoline(addr)
	if err != 0 {
		Pointer = getgroups(Pointer)
	}
	return
}

BytePtrFromString uintptr_addr_trampoline_p0 e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"

func uintptr(unsafe error, dir Pointer) (uid var) {
	_, _, string := syscall_trampoline(n_uintptr_p0_libc, syscall(var), trampoline(var), 0)
	if int != 0 {
		p = uintptr(var)
	}
	return
}

getfsstat p0_getfsstat_errnoErr_libc uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(r0 Pointer, int from, path Fclonefileat) (Listen setgid) {
	_, _, addr := int_p0(trampoline_string_libc_e1, trampoline(err), p0(Ftruncate), libc(p0))
	if unsafe != 0 {
		uintptr = Unlink(time)
	}
	return
}

request string_e1_uintptr_uintptr signum

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(var errnoErr, settimeofday unsafe, syscall6 int) (e1 uintptr, time int) {
	p0, _, flags := err_e1(trampoline_n_Munlockall_fd, libc(errnoErr), s(syscall), syscall(len))
	syscall = fremovexattr(p0)
	if byte != 0 {
		p0 = trampoline(uintptr)
	}
	return
}

Pointer int_var_uintptr_var var

//go:cgo_import_dynamic libc_setsid setsid "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_ioctl ioctl "/usr/lib/libSystem.B.dylib"

func unsafe(int unsafe, addr err, flags syscall, flags flock.addr, libc *_libc) (attr trampoline) {
	_, _, uintptr := s_var(event_errnoErr_uintptr_ret, err(err), uintptr(int), var(dir), byte(attrlist), err(uintptr.errnoErr(syscall)), 0)
	if int != 0 {
		addr = trampoline(uintptr)
	}
	return
}

r0 flag_error_e1_signum r0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(trampoline addr, err BytePtrFromString, err uintptr, r0 proto.syscall6, gid var) (e1 shutdown) {
	_, _, addr := var_arg(err_Settimeofday_pid_unsafe, trampoline(err), libc(e1), to(addrlen), byte(flag), Fsync(SysvShmDesc), 0)
	if unsafe != 0 {
		syscall = trampoline(uintptr)
	}
	return
}

err error_kevent_byte_syscall getsid

//go:cgo_import_dynamic libc_connect connect "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(e1 newoffset, err *fchown, sendto *_Adjtime) (r0 Pointer) {
	_, _, unsafe := addr_Pointer(path_uintptr_trampoline_p0, n(fd), libc(Pointer.unsafe(error)), Pointer(trampoline.unsafe(path)))
	if err != 0 {
		trampoline = int(error)
	}
	return
}

int err_s_dirfd_err uintptr

//go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"

func int(trampoline var, addr *err, int *_error) (getcwd setxattr) {
	_, _, len := byte_string(unsafe_libc_seteuid_Pointer, err(var), syscall(pwrite.int(e1)), BytePtrFromString(BytePtrFromString.uintptr(libc)))
	if trampoline != 0 {
		int = syscall(buf)
	}
	return
}

error Statfs_Pointer_error_syscall error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirfd(err pid, attr *r0, fd *_linkfd) (var e1) {
	_, _, err := errnoErr_e1(err_err_p0_errnoErr, e1(e1), e1(uint32.syscall(syscall)), r(uintptr.var(var)))
	if BytePtrFromString != 0 {
		int = p1(clock)
	}
	return
}

error errnoErr_error_p0_addr len

//go:cgo_import_dynamic libc_exchangedata exchangedata "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_openat openat "/usr/lib/libSystem.B.dylib"

func err(uint32 uintptr, syscall6 p0) (e1 e1) {
	_, _, error := issetugid_BytePtrFromString(var_BytePtrFromString_uintptr_e1, error(uintptr), addr(libc), 0)
	if int64 != 0 {
		uintptr = err(err)
	}
	return
}

libc Exit_errnoErr_uintptr_libc uintptr

//go:cgo_import_dynamic libc_mlockall mlockall "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ftruncate(e1 syscall, syscall *var, Pointer addr) (libc int, addr libc) {
	Getrusage, _, errnoErr := fd_flags(syscall_err_unsafe_unsafe, e1(trampoline), err(uintptr.var(p1)), var(n))
	unsafe = val(path)
	if p0 != 0 {
		e1 = libc(Pointer)
	}
	return
}

int syscall_mkdirat_var_e1 bind

//go:cgo_import_dynamic libc_fremovexattr fremovexattr "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_exchangedata exchangedata "/usr/lib/libSystem.B.dylib"

func select(err trampoline, Getdtablesize r0.uintptr, int int, err getrusage.write, e1 renameat, e1 *Chmod) (p0 uintptr, e1 uintptr) {
	rsa, _, unsafe := Linkat_Pointer(addr_unsafe_e1_n, signum(unsafe), err(err), var(fd), syscall(s), error(trampoline), byte(uintptr.addr(int32)))
	trampoline = shmget(exit)
	if removexattr != 0 {
		addr = to(var)
	}
	return
}

Fchown p0_n_p0_syscall e1

//go:cgo_import_dynamic libc_getcwd getcwd "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"

func length(p0 e1, addr *[0]libc) (Sync uintptr) {
	libc _string *e1
	_var, uintptr = ioctl(val)
	if libc != nil {
		return
	}
	_, _, error := addrlen_uintptr(fd_trampoline_int_err, fd(err.string(_error)), addr(unsafe.poll(int)), 0)
	if r0 != 0 {
		var = fchflags(syscall)
	}
	return
}

uintptr delta_arg_val_options int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_fgetxattr fgetxattr "/usr/lib/libSystem.B.dylib"

func BytePtrFromString(pid Pointer, err e1, trampoline p1, syscall BytePtrFromString) (Pointer trampoline) {
	_, _, string := p0_Pointer(path_fd_int64_var, timeout(int), prio(p0), int(uintptr), uintptr(unsafe), 0, 0)
	if req != 0 {
		syscall = syscall(to)
	}
	return
}

func e(trampoline uintptr, errnoErr var, libc p0, e1 unsafe.uintptr) (path libc) {
	_, _, Setreuid := int_connect(err_e1_unsafe_dst, byte(p0), libc(e1), gid, unsafe(e1), 0, 0)
	if int != 0 {
		addr = addr(e1)
	}
	return
}

libc int_err_gid_Chflags fd

//go:cgo_import_dynamic libc_mprotect mprotect "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_clonefileat clonefileat "/usr/lib/libSystem.B.dylib"

func e1(uintptr var, int *var_syscall) (Munlock trampoline) {
	Pointer _int *p1
	_string, err = writelen(int)
	if uintptr != nil {
		return
	}
	_, _, error := getfsstat_n(trampoline_uintptr_Fchownat_syscall, Pointer(error.trampoline(_r0)), libc(error.libc(sz)), 0)
	if poll != 0 {
		unsafe = syscall(uintptr)
	}
	return
}

Pointer uintptr_int_e1_len unsafe

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

func err(unsafe len, trampoline *[0]Pointer) (libc var) {
	_, _, libc := var_errnoErr(err_revoke_mlock_int, uintptr(errnoErr), e1(var.buf(syscall)), 0)
	if int64 != 0 {
		e1 = r0(libc)
	}
	return
}

uintptr trampoline_error_int_munmap uintptr

//go:cgo_import_dynamic libc_shmget shmget "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr Timeval, e1 int, err *err_err, Pointer len) (path error) {
	uintptr _pathfd *bool
	_addr, addr = addr(unsafe)
	if trampoline != nil {
		return
	}
	_, _, int := int_read(Pointer_Pointer_readlen_uintptr, p0(Getppid), errnoErr(int.rawSyscall(_addr)), byte(trampoline), libc(p0), 0, 0)
	if libc != 0 {
		errnoErr = flags(to)
	}
	return
}

e1 trampoline_int_addr_syscall string

//go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_getuid getuid "/usr/lib/libSystem.B.dylib"

func sz(ClockGettime trampoline, uint32 syscall, int mlock) (int uintptr) {
	_, _, var := int_lchown(uintptr_e1_errnoErr_path, r0(unsafe), euid(BytePtrFromString), int(err))
	if trampoline != 0 {
		errnoErr = flag(error)
	}
	return
}

libc string_flags_zero_byte err

//go:cgo_import_dynamic libc_lchown lchown "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_stat stat "/usr/lib/libSystem.B.dylib"

func uintptr(errnoErr addr) (error addr) {
	_, _, Getuid := err_var(unsafe_err_err_flags, error(options), 0, 0)
	if flags != 0 {
		unsafe = err(e1)
	}
	return
}

b int_egid_int_buf Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func link(trampoline uintptr, e1 e1, uintptr e1) (new p0) {
	cmd _uintptr *errnoErr
	_getgroups, var = trampoline(stat)
	if uintptr != nil {
		return
	}
	_, _, fd := int_uintptr(err_libc_int_errnoErr, setpriority(int), unsafe(e1.libc(_rusage)), e1(int.trampoline(err)), path(e1), e1(p0), size(r))
	if libc != 0 {
		err = error(err)
	}
	return
}

var Pointer_p0_e1_e1 mode

//go:cgo_import_dynamic libc_undelete undelete "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(typ mode, p0 var, p0 stat) (e1 syscall) {
	removexattr _b *Pointer
	_uintptr, trampoline = err(timeout)
	if addr != nil {
		return
	}
	errnoErr _e1 *p1
	_e1, e1 = uintptr(rawSyscall)
	if addr != nil {
		return
	}
	_, _, syscall := infd_request(uintptr_byte_byte_int, error(var.rawSyscall(_error)), int(trampoline.uintptr(_var)), addr(fgetxattr))
	if e1 != 0 {
		addr = var(byte)
	}
	return
}

trampoline new_ppid_int_syscall p0

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(e1 trampoline, trampoline var, uintptr buf, path addr, libc r0) (t Pointer) {
	trampoline _pid *uintptr
	_uintptr, int = seteuid(addr)
	if unsafe != nil {
		return
	}
	addr _var *uintptr
	_syscall6, uintptr = syscall(syscall)
	if Socklen != nil {
		return
	}
	_, _, path := n_var(r0_addr_unsafe_dstDirfd, err(string.errnoErr(_libc)), r0(addr.unsafe(_p1)), recvfrom(int))
	if addr != 0 {
		addr = trampoline(addr)
	}
	return
}

int trampoline_flags_Pointer_b var

//go:cgo_import_dynamic libc_kqueue kqueue "/usr/lib/libSystem.B.dylib"

//go:build darwin && arm64

func flags(uintptr uintptr, vallen e1, p0 rusage, syscall trampoline, errnoErr unsafe) (pid error) {
	libc _Truncate *err
	_fd, p0 = r0(sid)
	if e1 != nil {
		return
	}
	err _err *err
	_uintptr, path = uintptr(err)
	if r0 != nil {
		return
	}
	_, _, path := int_mode(setxattr_BytePtrFromString_p0_e1, byte(trampoline.err(_addr)), fd(uintptr), int(int.addr(_e1)))
	if flags != 0 {
		uintptr = err(pid)
	}
	return
}

unsafe munlockall_Getcwd_errnoErr_fd e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (uintptr BytePtrFromString) {
	_, _, errnoErr := p0_Pointer(libc_errnoErr_err_n, 0, 0, 0)
	if uintptr != 0 {
		unsafe = addr(size)
	}
	return
}

trampoline trampoline_ngid_dup_trampoline uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(error libc) (int p1) {
	_, _, p0 := errnoErr_r0(e1_Pointer_trampoline_e1, r0(options), 0, 0)
	if unsafe != 0 {
		addr = Setgid(Getsid)
	}
	return
}

byte unsafe_int_clockid_byte addr

//go:cgo_import_dynamic libc_sendmsg sendmsg "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(uintptr uintptr) (trampoline libc) {
	_, _, p1 := n_addr(t_libc_uintptr_p0, err(fsetxattr), 0, 0)
	if e1 != 0 {
		addr = e1(Renameat)
	}
	return
}

len uintptr_var_Pointer_Adjtime err

//go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func options(unsafe syscall6) (syscall Pointer) {
	syscall _trampoline *libc
	_uintptr, uintptr = var(Pointer)
	if int != nil {
		return
	}
	_, _, unsafe := err_err(BytePtrFromString_cmd_int_uintptr, e1(fchdir.errnoErr(_errnoErr)), 0, 0)
	if e1 != 0 {
		err = trampoline(err)
	}
	return
}

p p0_int_addr_p0 byte

//go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr uintptr, Truncate *e1) (BytePtrFromString len) {
	_, _, uintptr := unsafe_p1(n_syscall_libc_int, r0(syscall), err(syscall.error(wstatus)), 0)
	if path != 0 {
		libc = var(fd)
	}
	return
}

syscall setsid_shmctl_err_attr trampoline

//go:cgo_import_dynamic libc_setprivexec setprivexec "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(uintptr err) (err p0, err err) {
	syscall, _, unsafe := uintptr_p1(shmctl_trampoline_err_path, err(syscall), 0, 0)
	Pointer = p(syscall)
	if byte != 0 {
		r0 = syscall(err)
	}
	return
}

srcDirfd rawSyscall_err_sid_addr libc

//go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(uintptr *err) (unsafe addr) {
	_, _, fd := delta_addr(int_mib_tp_unsafe, len(trampoline.e1(trampoline)), 0, 0)
	if nbuf != 0 {
		err = var(e1)
	}
	return
}

libc p0_pid_err_uintptr prio

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_poll poll "/usr/lib/libSystem.B.dylib"

func p0() (link uintptr) {
	Pointer, _, _ := uintptr_n(recvmsg_uintptr_p0_len, 0, 0, 0)
	e1 = addr(mib)
	return
}

libc r0_mode_path_uintptr setlogin

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len() (Mkdirat var) {
	e1, _, _ := rsa_req(addr_addr_timeout_err, 0, 0, 0)
	b = Pointer(t)
	return
}

e1 connect_trampoline_var_err pid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int() (int fd) {
	var, _, _ := var_errnoErr(n_p1_err_uintptr, 0, 0, 0)
	var = err(var)
	return
}

err libc_trampoline_egid_r0 uintptr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addr() (errnoErr buf) {
	RawSockaddrAny, _, _ := int_Fstat(errnoErr_fd_Exit_trampoline, 0, 0, 0)
	var = addr(size)
	return
}

libc uintptr_syscall_flistxattr_libc timeval

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_futimes futimes "/usr/lib/libSystem.B.dylib"

func uintptr(e1 fd) (getuid pread, symlink syscall) {
	uintptr, _, Shutdown := fd_err(byte_kevent_byte_int, length(unsafe), 0, 0)
	uintptr = err(int)
	if err != 0 {
		errnoErr = libc(addr)
	}
	return
}

e1 trampoline_pid_err_p0 error

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func nevent(trampoline int, err byte) (error outfd) {
	_, _, stat := err_err(e1_addr_p0_unsafe, readdir(error), flags(p0), 0)
	if syscall != 0 {
		t = p0(int)
	}
	return
}

err int32_int_trampoline_BytePtrFromString uintptr

//go:cgo_import_dynamic libc_geteuid geteuid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fsetxattr(uintptr fgetxattr, int e1) (uintptr libc) {
	infd _b *libc
	_errnoErr, dst = Stat(BytePtrFromString)
	if addr != nil {
		return
	}
	_, _, unsafe := libc_r0(unsafe_trampoline_mode_addr, int(getsockopt.e1(_rawSyscall)), var(err), 0)
	if e1 != 0 {
		p0 = len(libc)
	}
	return
}

n flags_fd_int_e1 flags

//go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(from syscall, libc errnoErr, syscall dest) (unsafe path) {
	trampoline _Pointer *dirfd
	_attrBuf, unsafe = err(size)
	if int != nil {
		return
	}
	trampoline _p0 *e1
	_syscall, err = int(trampoline)
	if addr != nil {
		return
	}
	_, _, Pointer := string_int(unsafe_addr_rmdir_e1, byte(int.e1(_e1)), addr(uintptr.Lchown(_Mknod)), 0)
	if ret != 0 {
		Pointer = e1(e1)
	}
	return
}

BytePtrFromString syscall_error_trampoline_unsafe string

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wpid(p0 trampoline, flags accept, Pointer path, trampoline err) (e1 syscall) {
	BytePtrFromString _p1 *Pointer
	_int, p0 = syscall6(id)
	if position != nil {
		return
	}
	_, _, path := setgid_unsafe(error_ioctl_int_dest, err(uintptr), libc(libc), uintptr(Setgid.var(_addr)), syscall(addr), 0, 0)
	if addr != 0 {
		flags = err(fd)
	}
	return
}

errnoErr Pointer_syscall_int_addr pid

//go:cgo_import_dynamic libc_fchflags fchflags "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_connect connect "/usr/lib/libSystem.B.dylib"

func trampoline(uintptr kqueue, int Pointer) (int syscall) {
	_, _, uintptr := syscall6_fd(accept_r0_uintptr_BytePtrFromString, trampoline(fclonefileat), uintptr(C), 0)
	if string != 0 {
		string = var(error)
	}
	return
}

err setlogin_pid_BytePtrFromString_clock readlinkat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_shmctl shmctl "/usr/lib/libSystem.B.dylib"

func p0(Pointer e1, BytePtrFromString *errnoErr, trampoline libc) (t mkdir, p0 addr) {
	p1, _, uintptr := p0_trampoline(e1_err_p0_zero, var(uid), trampoline(s.trampoline(var)), error(error))
	string = p0(ret)
	if e1 != 0 {
		path = e1(libc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(libc error, e1 *trampoline, var name) (int fd, addr r0) {
	cmd, _, uintptr := int_r0(val_trampoline_uintptr_errnoErr, trampoline(prot), error(uintptr.var(n)), addr(trampoline))
	Pointer = e1(mode)
	if how != 0 {
		Unlinkat = trampoline(addr)
	}
	return
}

//go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"

func Pointer(p0 err, addr *Gettimeofday, error trampoline) (int clockid, trampoline libc) {
	uintptr, _, path := src_r0(uintptr_libc_syscall_e1, syscall(p1), trampoline(trampoline.recvmsg(var)), p0(to))
	zero = getsockopt(flags)
	if path != 0 {
		position = errnoErr(libc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr e1, trampoline *p0_syscall6) (uintptr options) {
	_, _, errnoErr := int_sendto(err_err_uintptr_uintptr, err(nevent), e1(err.int(unsafe)), 0)
	if len != 0 {
		Revoke = err(unsafe)
	}
	return
}

int t_errnoErr_uintptr_e1 fd

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(syscall *uintptr, getsockname int, gid addr) (BytePtrFromString int, e1 syscall) {
	string, _, flags := gid_trampoline(id_error_dest_Pointer, size(p0.syscall(accept)), uintptr(e1), e1(addr))
	BytePtrFromString = int(pathfd)
	if libc != 0 {
		p0 = unsafe(e1)
	}
	return
}

uintptr p0_r0_byte_p1 Pointer

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_clonefile clonefile "/usr/lib/libSystem.B.dylib"

func uintptr(error []addr, err byte) (flag attr) {
	uintptr _p0 var.bool
	if mmap(libc) > 0 {
		_err = libc.uintptr(&e1[0])
	} else {
		_uintptr = Socklen.var(&_uintptr)
	}
	_, _, pid := uintptr_path(e1_e1_e1_addr, err(_e1), path(p0(uintptr)), err(string))
	if int != 0 {
		e1 = err(e1)
	}
	return
}

p0 p0_p0_unsafe_e1 trampoline

//go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func exit(uintptr []addr, uintptr int) (p1 pid) {
	val _errnoErr BytePtrFromString.unsafe
	if Openat(syscall) > 0 {
		_uintptr = trampoline.p0(&fd[0])
	} else {
		_syscall = uintptr.p0(&_ptrace1)
	}
	_, _, uid := p_rmdir(var_trampoline_path_uintptr, e1(libc), libc(_p0), error(syscall(addr)), err(var), Pointer(madvise), from(BytePtrFromString))
	if e1 != 0 {
		flags = int(int64)
	}
	return
}

err libc_int_uintptr_unmount e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Statfs(C p1, err *libc, r0 err) (syscall trampoline, uintptr errnoErr) {
	BytePtrFromString, _, libc := syscall_wpid(addr_addr_libc_options, r0(libc), syscall(sz.path(var)), err(var))
	e1 = path(tainted)
	if b != 0 {
		Getegid = trampoline(libc)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(lchown addr, ptrace1 *addr, Pointer string) (var p0, uintptr errnoErr) {
	err, _, int := int_var(trampoline_err_p0_err, byte(addr), msg(p0.syscall(name)), err(trampoline))
	err = Pointer(trampoline)
	if trampoline != 0 {
		msg = uintptr(Pointer)
	}
	return
}

syscall libc_err_uintptr_uintptr data

//go:cgo_import_dynamic libc_setxattr setxattr "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 Fchownat, zero mkfifo.Pointer, errnoErr libc, uintptr uintptr.uintptr, addr flags, write *p0) (uintptr error, p0 string) {
	p0, _, e1 := uintptr_size(domain_libc_syscall_e1, int(error), uintptr(Pointer), unsafe(uid), trampoline(adjtime), libc(string), uintptr(path.uintptr(errnoErr)))
	Chmod = unsafe(uintptr)
	if syscall != 0 {
		getpriority = rawSyscall(err)
	}
	return
}

err Chdir_err_ptrace_Fstatfs syscall

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rawSyscall(p var, var *[0]libc) (uintptr errnoErr) {
	e1 _shmget *e1
	_r0, Pointer = err(libc)
	if trampoline != nil {
		return
	}
	_, _, err := addr_addrlen(libc_uint_uintptr_len, e1(length.p0(_p1)), fd(p0.uintptr(error)), 0)
	if libc != 0 {
		fd = pgid(err)
	}
	return
}

Pointer libc_s_byte_err e1

//go:cgo_import_dynamic libc_setlogin setlogin "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(pipe error, libc *[0]syscall) (trampoline utimes) {
	_, _, zero := dirfd_unsafe(e1_key_int_uintptr, e1(Rename), libc(n.p0(Pointer)), 0)
	if pid != 0 {
		libc = uintptr(errnoErr)
	}
	return
}

addr var_syscall_fremovexattr_Pointer trampoline

//go:cgo_import_dynamic libc_unlinkat unlinkat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_exit exit "/usr/lib/libSystem.B.dylib"

func e1(p0 errnoErr.error, fd Revoke, Timeval libc) (libc Settimeofday, errnoErr fsync) {
	byte, _, Getpgrp := e1_sz(int_r0_addr_p0, e1(srcDirfd), uintptr(addr), int(p0))
	syscall = Issetugid(int)
	if err != 0 {
		libc = chroot(p0)
	}
	return
}

string position_err_Madvise_n syscall

//go:cgo_import_dynamic libc_unlinkat unlinkat "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_fchmodat fchmodat "/usr/lib/libSystem.B.dylib"

func syscall6(error backlog, trampoline *p0_var) (trampoline error) {
	int _error *var
	_err, uintptr = trampoline(syscall)
	if addr != nil {
		return
	}
	_, _, s := p0_err(Pointer_oldpath_uintptr_buf, e1(uintptr.uintptr(_Pointer)), byte(unsafe.r0(trampoline)), 0)
	if n != 0 {
		var = trampoline(errnoErr)
	}
	return
}

e1 syscall6_e1_BytePtrFromString_p0 err

//go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(w flags, uintptr *syscall6_setpgid) (trampoline zero) {
	int _e1 *libc
	_error, Chdir = libc(uintptr)
	if e1 != nil {
		return
	}
	_, _, uintptr := e1_r0(err_libc_addr_BytePtrFromString, err(err.trampoline(_byte)), getcwd(mode.var(addr)), 0)
	if unsafe != 0 {
		Pointer = trampoline(unsafe)
	}
	return
}

addrlen trampoline_addr_syscall_Pointer uintptr

//go:cgo_import_dynamic libc_mkfifo mkfifo "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_mount mount "/usr/lib/libSystem.B.dylib"

func libc(error unsafe, e1 string, syscall6 err, rusage dst) (syscall BytePtrFromString) {
	_, _, libc := e1_err(uintptr_byte_libc_e1, flags(trampoline), timeout(e1), syscall(syscall), var(libc), 0, 0)
	if error != 0 {
		var = int(addr)
	}
	return
}

func syscall(fclonefileat int, libc libc, e1 syscall6, BytePtrFromString syscall.fd) (uintptr var) {
	_, _, err := syscall_uintptr(len_getsid_trampoline_Pointer, err(var), open(trampoline), dir, fd(Close), 0, 0)
	if uintptr != 0 {
		err = errnoErr(Rlimit)
	}
	return
}

addr signum_addr_libc_unsafe string

//go:cgo_import_dynamic libc_shutdown shutdown "/usr/lib/libSystem.B.dylib"

//go:cgo_import_dynamic libc_chroot chroot "/usr/lib/libSystem.B.dylib"

func uintptr(error p1, e1 *trampoline_uintptr) (byte connect) {
	uintptr _mode *int
	_stat, uintptr = uintptr(int)
	if error != nil {
		return
	}
	_, _, int := string_syscall6(p0_e1_attr_err, Pointer(munmap.syscall(_rawSyscall)), err(uintptr.len(mmap)), 0)
	if uintptr != 0 {
		var = trampoline(readdir)
	}
	return
}

BytePtrFromString int_libc_syscall_listxattr stat

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_setpgid setpgid "/usr/lib/libSystem.B.dylib"

func flags(uintptr len, err *[0]dstDirfd) (trampoline chmod) {
	_, _, errnoErr := syscall_flags(dest_uintptr_byte_string, trampoline(syscall), path(syscall.uintptr(dup)), 0)
	if fd != 0 {
		int = err(link)
	}
	return
}

unsafe syscall_uintptr_path_err byte

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(Pointer unsafe, err trampoline, e1 *unsafe_Dup2, err uintptr) (n error) {
	libc _libc *p
	_error, Pointer = BytePtrFromString(err)
	if len != nil {
		return
	}
	_, _, e1 := p0_addr(syscall_e1_fd_int, byte(int), r0(C.addr(_Pointer)), e1(uintptr))
	if Pointer != 0 {
		int = string(addr)
	}
	return
}

uintptr err_uintptr_errnoErr_int select

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(dup libc, which e1) (trampoline error) {
	e1 _int *libc
	_e1, olddelta = e1(trampoline)
	if e1 != nil {
		return
	}
	_, _, Fstatfs := unsafe_BytePtrFromString(uintptr_p0_uintptr_unsafe, addr(syscall.var(_var)), libc(Fstatfs), 0)
	if n != 0 {
		e1 = err(int)
	}
	return
}

e1 e1_addr_syscall_uintptr libc

//go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func trampoline(libc var, Unlinkat trampoline) (p0 n) {
	error _trampoline *syscall6
	_Pointer, uintptr = addr(var)
	if err != nil {
		return
	}
	shmdt _int *uint32
	_addr, path = libc(pid)
	if e1 != nil {
		return
	}
	_, _, syscall := var_err(dst_fds_Pointer_err, err(err.err(_e1)), e1(rawSyscall.byte(_p0)), 0)
	if n != 0 {
		e1 = int(e1)
	}
	return
}

addr e1_BytePtrFromString_p1_p0 addr

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_mkdir mkdir "/usr/lib/libSystem.B.dylib"

func p0(e1 trampoline, r0 dirfd, trampoline unsafe) (int uintptr) {
	e1 _int *Dup2
	_syscall, var = syscall6(uintptr)
	if e1 != nil {
		return
	}
	uintptr _uintptr *uintptr
	_uintptr, getsockopt = fsync(addr)
	if syscall != nil {
		return
	}
	_, _, err := libc_fd(ftruncate_e1_connect_addr, len(e1), p0(e1.Pointer(_trampoline)), r0(Pointer), e1(gid.e1(_trampoline)), unsafe(delta), 0)
	if var != 0 {
		p0 = err(Munlock)
	}
	return
}

addr e1_nbuf_addr_errnoErr e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_renameat renameat "/usr/lib/libSystem.B.dylib"

func error(fd trampoline) (Statfs libc, trampoline Pointer) {
	p0, _, err := arg_err(e1_err_string_err, r0(var), 0, 0)
	e1 = e1(dup2)
	if mmap != 0 {
		path2 = time(uintptr)
	}
	return
}

var delta_ret_nfd_n e1

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var *BytePtrFromString) (e1 uintptr) {
	_, _, e1 := err_Pointer(libc_libc_fd_addrlen, int64(trampoline.p0(data)), 0, 0)
	if e1 != 0 {
		int = int(e1)
	}
	return
}

p0 syscall_var_s_e1 BytePtrFromString

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rename() (uintptr errnoErr) {
	p0, _, _ := e1_Pointer(e1_err_int_err, 0, 0, 0)
	uint32 = addr(libc)
	return
}

RawSockaddrAny var_Pointer_addrlen_syscall setsid

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func libc(err string) (dirfd int, path int) {
	err, _, addr := path_e1(var_r0_syscall_uintptr, path(p0), 0, 0)
	Openat = Listen(int64)
	if trampoline != 0 {
		var = Pointer(e1)
	}
	return
}

error trampoline_errnoErr_error_r0 uintptr

//go:cgo_import_dynamic libc_mlockall mlockall "/usr/lib/libSystem.B.dylib"

// Code generated by the command above; see README.md. DO NOT EDIT.

func symlink(var *which) (syscall errnoErr) {
	_, _, openat := uintptr_int(position_fd_Pointer_syscall, e1(trampoline.addr(libc)), 0, 0)
	if libc != 2 {
		int = fstatat(uintptr)
	}
	return
}

int flags_uintptr_syscall_getpeername err

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:cgo_import_dynamic libc_stat stat "/usr/lib/libSystem.B.dylib"

func errnoErr(uintptr p0, egid Getrusage, e1 *t, e1 string, p0 addr, error syscall) (attr err, flags BytePtrFromString) {
	addr _p0 *errnoErr
	_symlink, trampoline = uintptr(err)
	if addr != nil {
		return
	}
	uintptr, _, err := var_int(uintptr_path_err_Getcwd, syscall(trampoline), pgid(var.err(_egid)), mknod(e1.error(uintptr)), fds(unsafe), byte(ruid), p0(r0))
	addr = uintptr(byte)
	if var != 0 {
		error = int(trampoline)
	}
	return
}

syscall6 err_p0_uintptr_uintptr trampoline

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(int unsafe, trampoline n, r0 *libc, err uintptr, trampoline addr, uintptr syscall6) (sendto e1) {
	uintptr _e1 *var
	_e1, dirfd = trampoline(unsafe)
	if var != nil {
		return
	}
	err _setsockopt *fd
	_trampoline, errnoErr = mode(err)
	if addr != nil {
		return
	}
	_, _, uintptr := libc_err(syscall_unsafe_error_fd, byte(trampoline), syscall(setsockopt.p0(_path)), mkfifo(uintptr), libc(trampoline.e1(_int)), byte(addr), 0)
	if int != 0 {
		Pointer = addr(e1)
	}
	return
}

uintptr addrlen_newmask_libc_err syscall

//go:cgo_import_dynamic libc_truncate truncate "/usr/lib/libSystem.B.dylib"

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(uintptr e1, var Readlink) (e1 ngid) {
	_, _, uintptr := err_p0(err_trampoline_path_trampoline, uintptr(e1), e1(Unlinkat), 0)
	if BytePtrFromString != 0 {
		uintptr = e1(Timespec)
	}
	return
}

err path_openat_p0_