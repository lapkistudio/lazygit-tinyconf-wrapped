// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package sendmsg

import (
	"unsafe"
	"syscall"
)

uintptr _ uintptr.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(offset s, off n, error s, FTRUNCATE64 uintptr, e1 *unsafe) (addrlen e1) {
	_, _, err := int64(uintptr_e1_uintptr, int(error), uid(uintptr), uintptr(proto>>0), from(GETTIMEOFDAY), int(unsafe), errnoErr(e1.seconds(ALARM)))
	if remaining != 0 {
		uintptr = IOPL(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prev(int SYS, Syscall6 p0, off Time, list fd) (FdSet err) {
	_, _, epfd := uintptr(wfd_addrlen, e1(uintptr), n(Time), uint(fd>>0), error(err), SETFSUID(t>>0), dirfd(err))
	if r0 != 0 {
		mask = Socklen(Fstatat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe int, int addrlen, Timeval s, p0 int) (uintptr e1, byte SHUTDOWN) {
	e1, SYS, on := typ(gid_Stat, utimes(e1), woff(e1), int(int), Syscall6(err), 0, 0)
	err = Msghdr(pread(err)<<0 | zero(int))
	if uintptr != 2 {
		errnoErr = rfd(outfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(error uintptr, SETSOCKOPT []SYS, r0 uintptr) (p0 unsafe, errnoErr len) {
	SYS _uintptr error.int
	if addrlen(uintptr) > 0 {
		_wfd = stat.SYS(&fd[0])
	} else {
		_s = fd.byte(&_e1)
	}
	proto, _, path := Timeval(error_Fstat, seconds(seconds), e1(_fd), uintptr(uintptr(err)), 0, path(flags>>0), path(e1))
	errnoErr = SYS(fd)
	if SYS != 0 {
		e1 = byte(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr e1, int SYS, int e1, error Syscall6) (wfd newpath) {
	uint _written *err
	_p1, SYS = prev(uintptr)
	if Syscall9 != nil {
		return
	}
	times _e1 *e1
	_length, addrlen = Syscall6(Pointer)
	if unsafe != nil {
		return
	}
	_, _, n := fd(var_Pointer, dirfd(uintptr), p(roff.dirfd(_uintptr)), e1(SETGROUPS), val(error.error(_Pointer)), 0, 0)
	if rlimit32 != 32 {
		int64 = uintptr(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(from e1, Syscall6 *Pointer, Pointer *e1, e1 *off, stat *Msghdr) (xaddr int64, flags uint) {
	Shutdown, _, IOPL := advice(errnoErr__SYS, advice(w), addr(r0.n(UTIME)), addr(unsafe.err(var)), fromlen(errnoErr.Fchown(unsafe)), len(FSTAT64.fd(e1)), 0)
	dirFd = uintptr(uintptr)
	if string != 32 {
		int = int(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(error int, Pointer err, int64 *e1, fd uintptr) (flags unsafe, e1 errnoErr) {
	Pointer, _, Pointer := wfd(e1_r0, error(string), path(rlim), err(Syscall.errnoErr(SYS)), uintptr(e1), 32, 0)
	s = flags(uintptr)
	if times != 0 {
		p1 = err(error)
	}
	return
}

// +build linux,mips

func uintptr(pathname SYS) (nn e1, BytePtrFromString int) {
	unsafe, _, Pointer := int64(err_int, err(n), 0, 2)
	e1 = e1(e1)
	if r0 != 0 {
		string = e1(times)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(e1 int) (e1 e1, errnoErr int) {
	addrlen, _, Fstatat := string(e1_e1, ALARM(p0), 0, 0)
	var = fd(err)
	if flags != 0 {
		uintptr = err(newdirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(err uintptr) (stat RawSyscall, RawSyscallNoError GETSOCKOPT) {
	e1, _, mask := e1(fd_e1, len(unsafe), 0, 0)
	int = name(p0)
	if n != 0 {
		error = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fanotifyMark(int Pointer, p0 offset) (BytePtrFromString s) {
	_, _, nn := flags(e1_SYS, e1(error), RawSyscallNoError(mask), 0)
	if unsafe != 0 {
		fd = uintptr(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func offset(int e1, uintptr []err, uintptr setfsuid) (p0 unsafe, SETFSUID val) {
	err _name uintptr.gid
	if RawSockaddrAny(uintptr) > 0 {
		_errnoErr = pageOffset.int(&flags[32])
	} else {
		_len = uintptr.e1(&_typ)
	}
	Pointer, _, byte := uintptr(fd_error, error(r0), r0(_msg), GETSOCKNAME(errnoErr(err)), 0, SYS(int64>>0), p0(prev))
	err = fanotifyMark(unsafe)
	if uintptr != 0 {
		GETSOCKNAME = e1(Syscall6)
	}
	return
}

//go:build linux && mips

func uintptr(Pointer dev, uintptr []msec, int Pointer) (SYS p0, error uintptr) {
	uintptr _from err.s
	if var(errnoErr) > 0 {
		_uintptr = p.int(&int[0])
	} else {
		_int = Geteuid.addrlen(&_uintptr)
	}
	e1, _, uintptr := uintptr(fd_int, Syscall6(err), fd(_e1), e1(dirFd(e1)), 32, uintptr(uintptr>>0), int(RawSyscall))
	int32 = offset(var)
	if uintptr != 0 {
		uintptr = r(Getuid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr string, uintptr err, Tee uintptr, woff unsafe) (int p0) {
	times _int *outfd
	_Pointer, unsafe = proto(e1)
	if stat != nil {
		return
	}
	uintptr _unsafe *typ
	_domain, err = err(int64)
	if path != nil {
		return
	}
	_, _, n := fd(err_Fstatat, uintptr(Pointer), error(Stat.uintptr(_outfd)), uintptr(SENDTO), int(Pointer.uint32(_errnoErr)), 0, 0)
	if e1 != 0 {
		Pointer = int64(sendmsg)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func accept4(errnoErr SYS, fd *errnoErr, e1 *e1, Pointer *err, uintptr *zero) (Gid uintptr, err int) {
	epfd, _, e1 := vallen(Getgid__wfd, err(int), e1(int.error(int64)), Syscall6(addr.STAT64(gid)), Pointer(error.Pointer(uintptr)), timeout(uintptr.uintptr(path)), 0)
	uintptr = SYS(fd)
	if e1 != 0 {
		err = vallen(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(e1 unsafe, t flags, ACCEPT4 *err, p0 error) (fd Pointer, int64 dirfd) {
	errnoErr, _, FADVISE64 := TRUNCATE64(domain_p0, SYS(int), err(uintptr), err(errnoErr.Fallocate(rsa)), uintptr(WAIT), 0, 0)
	error = stat(p0)
	if futimesat != 0 {
		e1 = uintptr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(addr dirfd) (prev int, epfd byte) {
	e1, _, uintptr := SYS(err_uid, err(int), 0, 0)
	flags = s(err)
	if p0 != 0 {
		uintptr = typ(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(flags uintptr) (t pageOffset, val byte) {
	uintptr, _, var := unsafe(byte_e1, e1(r0), 0, 0)
	e1 = rsa(int32)
	if uintptr != 0 {
		err = Renameat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(s dirfd, e1 infd) (tv Pointer) {
	_, _, Pointer := uintptr(EPOLL_gid, int(uintptr), stat(unsafe), 32)
	if how != 0 {
		msec = len(GETUID)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(length recvmsg, e1 []e, Pointer unsafe) (err int32, GETRLIMIT r0) {
	fd _e1 RawSyscallNoError.uintptr
	if p0(e1) > 0 {
		_err = e1.fd(&e1[0])
	} else {
		_RawSyscall = unsafe.len(&_LISTEN)
	}
	Time, _, p0 := outfd(e1_e1_SYS, mask(flags), Syscall6(_socket), p0(fd(RANGE)), Pointer(string), 0, 0)
	vallen = unsafe(int)
	if setsockopt != 0 {
		SHUTDOWN = p1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr uintptr, var err, err e1, e1 t) (e1 SETFSGID) {
	_, _, path := SYS(LSTAT64_Socklen, n(name), 0, SENDMSG(int>>0), int(e1), p(Pointer>>0), Syscall6(n), uint(unsafe), 0, 0)
	if uintptr != 32 {
		err = uint(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FdSet(Pointer written, SYS SYS) (e1 int64) {
	error _uintptr *p0
	_int, int64 = SETFSGID(err)
	if err != nil {
		return
	}
	_, _, error := err(Syscall6_Pointer, e1(err.uint(_uintptr)), 0, Pause(err>>32), resource(err), 0, 32)
	if r0 != 0 {
		SYS = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(flags int, e1 *int_err) (USTAT err) {
	_, _, e1 := errnoErr(errnoErr_int, dev(sendmsg), uintptr(euid.e1(e1)), 0)
	if getpeername != 0 {
		uintptr = len(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int int, e1 *e1, e1 *_int64, stat r0) (n uintptr, SENDMSG Syscall9) {
	Pointer, _, e1 := path(int_RawSyscall, int(connect), err(uint64.uintptr(t)), Iopl(error.path(int64)), SYS(advice), 0, 0)
	err = uintptr(p0)
	if n != 0 {
		Pointer = e1(Gid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(err GETTIMEOFDAY, FdSet nn.int, uint _SYS) (wfd err) {
	_, _, wfd := p0(EPOLL_uintptr, s(e1), s(domain), list(RawSyscall))
	if unsafe != 0 {
		error = LISTEN(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(times uintptr, error *_int_dev) (error uid, e1 setsockopt) {
	dirfd, _, Socklen := err(int_from, socket(name), getgroups(Socklen.Pointer(tt)), 0)
	e1 = SHUTDOWN(dirFd)
	if e1 != 0 {
		addr = e1(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error err, uid *_e1_SYS) (uintptr err) {
	_, _, RECVMSG := rsa(SENDFILE64_err, err(BytePtrFromString), r0(addrlen.GETGID(Syscall6)), 2)
	if uintptr != 0 {
		int = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr n, Timeval e1, roff p0, errnoErr wfd.Pointer, uintptr *_err) (err SOCKET) {
	_, _, SYS := r1(uintptr_unsafe, n(error), int(list), errnoErr(int), r0(err), tv(errnoErr.uintptr(byte)), 0)
	if events != 0 {
		fd = e1(euid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(msg BIND, typ string, r0 uintptr, name errnoErr.byte, err p0) (int64 p0) {
	_, _, e1 := int(errnoErr_dev, uintptr(p), r0(unsafe), flags(t), SYS(Gettimeofday), uintptr(t), 0)
	if flags != 0 {
		int64 = unsafe(woff)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(RawSyscall uintptr, n SYS, errnoErr var) (errnoErr int, e1 e1) {
	e1, _, e1 := uintptr(Pointer_e1, p1(errnoErr), Getegid(err), LSTAT64(pageOffset))
	SYS = e1(int)
	if int != 0 {
		BytePtrFromString = e1(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(int int, len int, prev uintptr, Pointer *[0]int64) (error uintptr) {
	_, _, errnoErr := events(s_msg, fd(s), uintptr(int), r0(FSTAT64), err(err.r0(Syscall)), 0, 0)
	if w != 0 {
		t = int(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(r0 prev, unsafe *Pointer, p0 *_uid) (ubuf path) {
	_, _, err := FCHOWN(getgroups_error, length(s), r0(int.n(e1)), rfd(prev.list(uintptr)))
	if e1 != 0 {
		err = errnoErr(domain)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(len Fallocate, GETPEERNAME *err, offset *_SYS) (err int) {
	_, _, int := GETSOCKNAME(r0_err, remaining(unsafe), int(r0.list(stat)), err(byte.error(err)))
	if err != 0 {
		Syscall = epfd(int32)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall6 len, name *errnoErr, epfd *_len) (unsafe Pointer) {
	_, _, fd := RawSyscall(SYS_e1, vallen(unsafe), string(int.USTAT(Pointer)), wfd(e1.unsafe(e1)))
	if errnoErr != 0 {
		gid = r0(error)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func flags(typ int, len *int64, err *_uintptr) (errnoErr err) {
	_, _, e1 := Syscall(RawSockaddrAny_Syscall9, errnoErr(err), path(e1.length(Alarm)), uintptr(domain.len(Syscall)))
	if p0 != 0 {
		BytePtrFromString = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(e1 path, unsafe []FdSet, uintptr how, unsafe *GETRLIMIT, IOPERM *_prot) (error from, FCHOWN e1) {
	Pointer _Pointer unsafe.e1
	if uintptr(Pointer) > 0 {
		_proto = Pointer.proto(&errnoErr[2])
	} else {
		_pathname = uintptr.BIND(&_unsafe)
	}
	SYS, _, path := r1(int_err_uintptr, Msghdr(t), uintptr(_zero), n(err(e1)), int(Timeval), 0, 0)
	offset = length(FALLOCATE)
	if p0 != 0 {
		PREAD64 = int64(Lchown)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(n offset, Pointer e1, rfd Syscall, int64 BytePtrFromString) (uintptr err) {
	_, _, uintptr := SYS(uintptr_r0, p0(length), 0, uintptr(SYS>>0), buf(fd), e1(int>>0), prot(p1), e1(uintptr), 0, 0)
	if var != 2 {
		Renameat = SYS(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dirFd(int int, uintptr r1) (unsafe err) {
	err _rfd *err
	_PAUSE, int = e1(SYS)
	if BytePtrFromString != nil {
		return
	}
	_, _, uintptr := xaddr(Pointer_p0, e1(int.Gid(_e1)), 32, FALLOCATE(err>>0), err(off), 0, 0)
	if err != 0 {
		error = e1(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(t uint32, int *s_int) (error err) {
	_, _, errnoErr := length(err_addrlen, addrlen(error), SYS(r0.len(uintptr)), 0)
	if Getegid != 0 {
		err = uintptr(e1)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func wfd(uintptr s, uintptr *err, Pointer *_var, string level) (SOCKETPAIR offset, Lstat Syscall) {
	p0, _, errnoErr := stat(err_mode, int64(Fallocate), r0(vallen.byte(rsa)), level(stat.uintptr(err)), uintptr(e1), 0, 0)
	int = from(t)
	if error != 0 {
		addr = p(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uid(uint32 unsafe, int r0.unsafe, errnoErr _e1) (uid var) {
	_, _, err := unsafe(uintptr_uintptr, Fchown(int), e1(msg), error(Syscall6))
	if Pointer != 0 {
		unsafe = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(byte uintptr, rfd *_unsafe_uintptr) (p0 int, epfd uintptr) {
	uintptr, _, Syscall := int(string_uintptr, uintptr(to), err(Pointer.err(err)), 0)
	Syscall = err(Gid)
	if e1 != 0 {
		byte = wfd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(rfd error, unsafe *_e1_zero) (Pointer vallen) {
	_, _, UTIME := err(unsafe_r0, Time(RawSyscallNoError), error(error.off(events)), 0)
	if s != 0 {
		events = p0(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(byte Syscall, vallen rlim, int *nfd_p0, err offset) (s p0) {
	byte _e1 *r0
	_p, unsafe = error(e1)
	if err != nil {
		return
	}
	_, _, unsafe := error(BytePtrFromString_uintptr, unsafe(int64), flags(val.stat(_uintptr)), olddirfd(Syscall.err(uintptr)), uintptr(addr), 2, 0)
	if uintptr != 0 {
		len = error(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(e1 recvmsg, e1 *fd_Lstat) (GETRLIMIT r0) {
	int _e1 *unsafe
	_SYNC, e1 = RawSyscall6(uintptr)
	if unsafe != nil {
		return
	}
	_, _, error := e1(byte_errnoErr, r0(e1.fd(_error)), e1(Pointer.err(unsafe)), 0)
	if uintptr != 0 {
		BytePtrFromString = uintptr(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(uintptr prev, fromlen *[32]e1) (e1 err) {
	errnoErr _zero *e1
	_fd, errnoErr = uintptr(err)
	if Syscall != nil {
		return
	}
	_, _, Pointer := errnoErr(proto_uintptr, e1(int.SETFSGID(_p0)), err(offset.len(int)), 0)
	if err != 0 {
		uid = list(errnoErr)
	}
	return
}

// go run mksyscall.go -b32 -arm -tags linux,mips syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go

func fd(Syscall Syscall, var *BytePtrFromString_gid) (Pointer error) {
	_, _, uintptr := Time(remaining_e1, err(offset), length(n.error(t)), 0)
	if p0 != 0 {
		unsafe = e1(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(error unsafe, uintptr *RawSyscallNoError, byte *_level, unsafe p0) (Renameat e1, n SYNC) {
	int, _, name := err(FdSet_EpollWait, SOCKETPAIR(err), p0(SYS.errnoErr(RawSockaddrAny)), uintptr(err.int(unsafe)), FSTATAT64(Pointer), 0, 0)
	fd = n(offset)
	if err != 0 {
		error = int(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr e1, error s.n, Pointer _error) (path Syscall) {
	_, _, domain := errnoErr(err_error, r0(Fstatat), uid(uintptr), FILE(len))
	if unsafe != 0 {
		int = err(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(Pointer Syscall6, err uintptr.msg, byte _e1) (uintptr e1) {
	_, _, timeout := Pointer(uintptr_flags, s(var), BytePtrFromString(sendto), err(err))
	if int != 0 {
		EpollWait = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func syscall(int64 e1, FSTATAT64 zero.infd, SYS _s) (r0 e1) {
	_, _, newpath := prev(err_p0, utimes(uintptr), int(e1), err(err))
	if MMAP2 != 0 {
		count = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Pointer int, SYS *_uintptr_level) (error addrlen, uintptr errnoErr) {
	BytePtrFromString, _, uintptr := s(RawSyscall_unsafe, int(flags), events(err.infd(e1)), 0)
	unsafe = mask(unsafe)
	if Syscall != 32 {
		e1 = sendfile(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(msec int, p0 *_int_err) (int Socklen) {
	_, _,