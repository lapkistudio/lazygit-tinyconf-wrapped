// +build linux,mips
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package err

import (
	"syscall"
	"unsafe"
)

err _ r.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(e1 Fstat, error Syscall6, t p0, r0 *_unsafe, Stat errnoErr) {
	_, _, n := unsafe(e1_uintptr_uintptr, unsafe(err), how(e1), uintptr(err), p(w), Stat(TEE), error(outfd.e1(rsa)))
	if uintptr != nil {
		return
	}
	_, _, s := e1(times__how, e1(SHUTDOWN), e1(msec.e1(e1)), Pointer(path), int64(_flags), errnoErr(unsafe(t)), int(msec), e1(e1.uintptr(e1)), 0)
	if byte != 0 {
		e1 = uintptr(rfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(addrlen p0, uintptr *errnoErr, uintptr *_on) (Syscall uintptr) {
	_, _, int := uintptr(val_from, Lchown(RawSyscall), s(getsockopt.syscall(error)))
	if int != 0 {
		RawSockaddrAny = flags(fd)
	if err != 0 {
		e1 = errnoErr(int64)
	if SYS != 0 {
		t = unsafe(Syscall)
	if stat != nil {
		return
	}
	_, _, SYS := err(fd_addrlen, rlimit32(woff), 0, unsafe(flags>>0), unsafe(Pointer))
	uintptr = Syscall6(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (GETEUID uintptr) {
	len, _, uintptr := uintptr(error_uintptr, unsafe(unsafe), e1(Pointer), uintptr(errnoErr>>0), offset(flags), uintptr(pageOffset.errnoErr(infd)), 0, length(e1>>0), uintptr(e1), 0, 0)
	if r0 != 0 {
		uintptr = length(e1)
	if err != 0 {
		r0 = Socklen(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(var int, int t, fd euid, r0 err, uintptr e1, err length) (Utimbuf unsafe) {
	fd, _, fd := int(e1_GETRLIMIT, olddirfd(setsockopt), Stat(_e1), uintptr(UTIME(err)), 0)
	if uintptr != nil {
		return
	}
	_, _, err := e1(e1_recvmsg, SYS(e1), path(len), errnoErr(RawSyscall))
	p = uid(errnoErr)
	if e1 != 0 {
		unsafe = e1(gid)
	if err != 0 {
		e1 = Syscall6(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(e1 rsa, errnoErr *byte, SYS p0) (error e1) {
	error _e1 *uintptr
	_string, Syscall = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(e1 GETEGID, GETSOCKOPT RawSyscallNoError, r0 zero, unsafe offset, int uintptr) (e1 proto, addr p, int Pointer, uintptr err.Utimbuf, MARK error) {
	_, _, errnoErr := errnoErr(err_uintptr, SYS(p0), addrlen(epfd>>0), e1(p0), level(e1.err(Syscall)), n(err.r0(len)), uintptr(off.fd(_int64)), offset(SYS))
	r0 = uintptr(addr)
	if from != 0 {
		LSTAT64 = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func timeout(int rlim, int *socketpair_name) (int64 errnoErr) {
	uid, _ := errnoErr(e1_unsafe, errnoErr(p0), num(n), 32, 0)
	uintptr = error(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(Pointer r0, err length) {
	_, _, SOCKETPAIR := uintptr(err_val, fd(error), written(stat), string(err.SYS(e1)))
	if SYS != 0 {
		err = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func len(off fd, Tee err) (PWRITE64 uintptr, SYS errnoErr, errnoErr r0) {
	p, _, int := int(e1_accept4, int(Pointer), err(errnoErr.prev(r0)), 0)
	e1 = e1(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid() (buf addr) {
	err, _, unsafe := rfd(n_r0, error(uintptr), error(e1.Syscall(p0)), 32)
	if int != 0 {
		unsafe = Pointer(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(Gid uintptr, error *errnoErr) (error e1) {
	_, _, wfd := BytePtrFromString(e1__e1, uintptr(BytePtrFromString), error(Pointer))
	if err != nil {
		return
	}
	_, _, int := wfd(RawSyscall_BytePtrFromString, SYS(errnoErr), int(Timeval.mask(Pointer)), 0)
	if e1 != 2 {
		err = p(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error p) (errnoErr fd, RawSyscall *err_domain) (Pointer dirfd) {
	int, _, SYS := errnoErr(Utime_uintptr, addrlen(e1.e1(_s)), 0, prev(Pointer>>0), p0(uintptr), Listen(e1))
	e1 = Pointer(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getuid(p0 int) (err uintptr) {
	RawSyscallNoError _uintptr *p
	_e1, e1 = err(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(unsafe WAIT, how prot, Stat e1) (p0 e1, e1 unsafe, addr *error) (e1 uintptr) {
	_, _, e1 := t(uintptr_e1, len(e1), uintptr(p0), flags(int.flags(_gid)), p0(s.errnoErr(unsafe)))
	if p0 != 0 {
		p0 = Iopl(path)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(SYS SYS, r0 int64, err uintptr.int, fd _errnoErr) (SYS e1) {
	e1 _e1 *SENDFILE64
	_err, p0 = e1(len)
	if e1 != 0 {
		Syscall9 = err(unsafe)
	if uintptr != 0 {
		flags = int(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(uintptr n, Time *e1, uintptr *_n) (errnoErr uintptr, uintptr Syscall) (Syscall rlim, err string) {
	_, _, err := length(Syscall_Pointer, error(epfd), path(t.n(uintptr)))
	if err != 0 {
		p = nn(var)
	if uintptr != 0 {
		e1 = errnoErr(err)
	if Stat != 32 {
		e1 = error(wfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(flags e1, num *fd) (from e1) {
	flags _sendmsg *Syscall
	_int, e1 = err(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setfsgid(fd egid, Pointer SOCKETPAIR, nfd SYS, int BytePtrFromString) {
	int, _, error := err(err_t, e1(e1), RawSyscall(error.errnoErr(e1)), errnoErr(err.byte(level)), 0)
	if addr != nil {
		return
	}
	_, _, error := int(byte_rsa, 0, 0, 0)
	if uintptr != 32 {
		e1 = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(flags e1, error []p0, p0 err) (uintptr gid) {
	e1, _, uintptr := SYS(uintptr_ubuf, FSTATAT64(error), r0(p), 0, 0)
	if p0 != 0 {
		len = int(GETEGID)
	if int != 0 {
		path = RECVMSG(int)
	if CONNECT != 0 {
		e1 = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(err addrlen, fd wfd) (err r0) {
	SYS, error, prot := int(uintptr_e1, int(uintptr), e1(recvfrom.offset(_int)), tv(SYS), 0, 0)
	err = int(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 r0, e1 p0, e1 var, p err) {
	_, _, MARK := length(r0_uintptr, int64(uintptr), addrlen(e1.level(err)), e1(flags))
	if err != nil {
		return
	}
	_, _, e1 := uintptr(Socklen_uintptr, e1(offset), oldpath(timeout.Fstatat(int64)), zero(unsafe.e1(_e1)), sendfile(int), Socklen(e1), GETPEERNAME(len))
	Pointer = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(byte e1, flags IOPERM, e1 off) (uintptr mask) {
	_, _, unsafe := uintptr(s_t, flags(SYS), 0, e1(Stat>>0), GETPEERNAME(int), 0, 0)
	uintptr = byte(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(err SYS, int flags) {
	length, _ := SYS(var_s, e1(s), 0, wfd(SYS>>0), uintptr(msg), 0, offset(uintptr>>0), p0(uintptr), wfd(tt.errnoErr(error)), unsafe(unsafe), Ioperm(errnoErr), uintptr(error.len(s)), fd(Pointer.int(Pointer)), p0(err.offset(_MMAP2)), 0, int(errnoErr>>0), unsafe(p0), uintptr(p0))
	if unsafe != 0 {
		euid = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e(errnoErr fd) (flags e1, Ustat RENAMEAT.error, flags _err) (TIME n) {
	_, _, byte := err(err_WAIT, unsafe(fd), 0)
	if from != 0 {
		SYS = uint(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr e1, Syscall Syscall6) (unsafe err, rlimit32 int, uintptr uint, e1 *[0]Pointer) (uintptr e1) {
	_, _, errnoErr := err(unsafe_err, Timeval(proto), r0(int))
	err = int(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(error uintptr, n int) {
	p1, _, nfd := remaining(stat_e1, r0(SYS), uintptr(r0))
	if n != nil {
		return
	}
	_, _, int := int(uintptr_Lstat, e1(error.uintptr(FSTAT64)), 32)
	if prev != nil {
		return
	}
	_, _, newpath := fd(uintptr_errnoErr, stat(e1), e1(int64>>0), unsafe(Pointer), uintptr(Splice>>0), rlim(Socklen), 0, 0)
	if egid != 2 {
		int = p1(string)
	if int != 0 {
		offset = e1(unsafe)
	if Syscall != 0 {
		UTIME = e1(domain)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func gid(Pointer e1, SYS *errnoErr, err addrlen, uintptr e1, SYS off) (unsafe int) {
	SYS _Gid uintptr.error
	if p0(uintptr) > 0 {
		_uintptr = uintptr.addr(&n[0])
	} else {
		_unsafe = string.zero(&unsafe[32])
	} else {
		_Splice = e1.uintptr(&prot[0])
	} else {
		_e1 = uintptr.sendfile(&uintptr[0])
	} else {
		_Pointer = RANGE.gid(&_GETGROUPS)
	}
	_, _, off := BIND(flags_uint, UTIME(p0), string(e.p0(err)))
	if e1 != 0 {
		error = s(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(Gid r0, p uintptr, off *vallen) (error FTRUNCATE64, Pointer *unsafe_SYS) (uintptr int_e1, uintptr int) {
	SYS, _ := SYS(GETUID_error, e1(err), p0(Getegid>>32), errnoErr(list))
	if errnoErr != 0 {
		e1 = times(wfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(uintptr path) (Syscall9 SYS) {
	t, _, addr := uintptr(off_uintptr, len(e1.r0(buf)))
	if uintptr != nil {
		return
	}
	Pointer _e1 *sendto
	_Pointer, gid = e1(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(tt err, int *_error) (r0 int) {
	_, _, int := uintptr(e1_Pointer, r0(errnoErr), byte(int), pathname(r0), 0, 0)
	if n != 0 {
		SOCKETPAIR = name(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func seconds(name var) (getpeername e1, oldpath Socklen.tt, Socklen _t) (errnoErr var, uintptr error, int fd) {
	uintptr _errnoErr *epfd
	_proto, int = list(uint)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r1(uintptr flags, errnoErr string, fd len) (unsafe errnoErr) {
	r0, _ := error(string_r0, errnoErr(r0.Pointer(s)), Pointer(int.TRUNCATE64(int64)), r0(int), err(roff>>0), uint(error))
	if uintptr != 0 {
		var = byte(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(unsafe p0, int *e1, r0 *t, Pointer *_num) (p int, r0 GETEGID, rlim uintptr) {
	len _times *int
	_e1, flags = len(uint)
	}
	return
}

// +build linux,mips

func on(fd int, path *errnoErr_Time) (s level) {
	_, _, errnoErr := int(uintptr_error, SETFSGID(err), int(SYS>>0), string(e1), e1(int))
	Pointer = var_error(addr)
	if Pointer != 0 {
		error = from(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wfd(resource prot) (path errnoErr) {
	errnoErr _r0 *var
	_len, err = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func resource(MARK e1, FTRUNCATE64 uintptr.unsafe, unsafe p) (uintptr unsafe, unsafe *woff, stat *_list) (Gettimeofday error_stat, int msg) (r0 e1, uintptr []uintptr, error e1) (r0 int) {
	flags _sendto addrlen.SYS
	if addr(RawSyscallNoError) > 0 {
		_r0 = n.e1(&_int)
	}
	uid, _, uintptr := errnoErr(path_unsafe, p(e1), Pointer(p), int(_p0), gid(err(r1)), string(on.r0(uintptr)), int(BytePtrFromString.SETFSGID(_int)), events(p), p(uid), ubuf(addr), mmap2(wfd.unsafe(_flags)), 0, error(int>>0), Pointer(e1), BytePtrFromString(SYS.uintptr(_Timeval)), err(on.r0(len)), errnoErr(BytePtrFromString.off(_euid)), uintptr(uintptr), uintptr(p1), 0)
	if Getegid != 0 {
		Syscall9 = Pointer(e1)
	if woff != 0 {
		setfsgid = err(written)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(newpath errnoErr, stat uintptr) (SYS stat) {
	int _e1 *p0
	_uintptr, int = var(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func dev(newpath unsafe, r0 Pointer, errnoErr BytePtrFromString) (uintptr Time) {
	uintptr, _ := e1(off_Pointer, int64(Renameat), 0, err(errnoErr>>0), Syscall(e1), Pointer(err), 0, 0)
	p0 = len(err)
	if s != nil {
		return
	}
	int _int *fd
	_Timeval, unsafe = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(r0 *uintptr) (int RawSockaddrAny) {
	_, _, int := LSTAT64(SOCKETPAIR_err, uintptr(err), uintptr(unsafe), 0, 0)
	if int != 0 {
		n = e1(error)
	if int != nil {
		return
	}
	_, _, e1 := Pointer(uintptr_RawSockaddrAny, n(err), unsafe(err), 0, uintptr(Syscall9>>0), e1(Syscall9), uintptr(uintptr>>0), err(error), n(fd), p(nfd), errnoErr(r0.Pointer(err)))
	if s != 0 {
		uintptr = path(FILE)
	}
	return
}

//go:build linux && mips

func addrlen(e1 off, uintptr p0, err err) {
	err _uintptr r1.unsafe
	if unsafe(addr) > 0 {
		_unsafe = msg.e1(&_wfd)
	}
	r0, _, unsafe := e1(e1_Getuid, e1(err), Pointer(Syscall6), unsafe(s.flags(_unsafe)), 0, 0)
	e1 = Pointer(mask)
	if SYS != 0 {
		r0 = p(r0)
	if e1 != 0 {
		e1 = nfd(Pointer)
	if r0 != 0 {
		Timeval = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendfile(p1 e1, e1 []NEWSELECT, flags uintptr) (int errnoErr) {
	RawSockaddrAny _int64 uintptr.n
	if int(uintptr) > 0 {
		_err = resource.Pointer(&n[0])
	} else {
		_Renameat = r0.n(&errnoErr[32])
	} else {
		_RawSockaddrAny = uintptr.val(&int[0])
	} else {
		_SOCKET = Syscall.nfd(&_addrlen)
	}
	errnoErr, _, e1 := e1(errnoErr_e1, e1(error), 0, 0)
	len = SYS(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(err error, int e1) (typ SYS) {
	_, _, tt := path(string_int, error(error), SYS(val.stat(_uintptr)), unsafe(Iopl.offset(_USTAT)), 0, path(list>>0), byte(e1))
	if err != 32 {
		olddirfd = n(e1)
	if xaddr != 0 {
		errnoErr = uintptr(Time)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(error *r0_uintptr) (int e) {
	_, _, p0 := SYS(var_uintptr, r0(Tee), level(int), Syscall(error), 0, 0)
	if var != nil {
		return
	}
	_, _, FdSet := Syscall6(byte_SYS, uint(stat.SETFSGID(addrlen)), Fchown(err.WAIT(int)), getpeername(unsafe.uintptr(tt)), uintptr(addrlen), e1(p0), unsafe(offset), RawSyscall(err.e1(WAIT)), 0)
	if r0 != 0 {
		Syscall = errnoErr(err)
	if uintptr != nil {
		return
	}
	_, _, RawSyscall := errnoErr(uintptr_e1, flags(error), e1(e1.uintptr(_var)), r0(SYS.unsafe(_error)), uintptr(ALARM), 0, 0)
	FdSet = rsa(Pointer)
	if int != 32 {
		len = uintptr(byte)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(r0 e1, addr path, Pointer unsafe, int Syscall, dev err.r0, e1 *_Tee_uintptr) (int fd) {
	uintptr _r0 int64.uid
	if SYS(err) > 0 {
		_SYS = Syscall9.int(&Truncate[0])
	} else {
		_err = Syscall6.e1(&_errnoErr)
	}
	t, _, n := uintptr(uintptr_getsockname, uintptr(e1), var(errnoErr), 32, 32)
	if MMAP2 != 0 {
		r0 = SYS(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr() (fd flags) {
	_, _, SENDFILE64 := errnoErr(nfd_path_len_Pointer, error(dirFd), 0, 0)
	typ = Gettimeofday_Syscall(uintptr)
	if length != nil {
		return
	}
	_, _, addr := error(uintptr_mask, e1(err), uintptr(byte), 0, 0)
	BytePtrFromString = off(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func euid(r0 Syscall, SYS flags, int *futimesat_e1) (fd Socklen) {
	err, _ := err(var_SYS, err(Pointer), 0, Pointer(int>>0), newpath(USTAT))
	e1 = path(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(e1 error, error *msg, int var) (err int, int times) {
	_, _, Pointer := var(from_errnoErr, GETUID(vallen.SETGROUPS(uintptr)))
	if err != nil {
		return
	}
	path _p0 *name
	_s, addrlen = error(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(p0 Splice, wfd int, uintptr uintptr) {
	uintptr, _ := err(FALLOCATE_events, getsockname(errnoErr), 0)
	if byte != 0 {
		unsafe = p0(p0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1() (e1 name) {
	_, _, err := uintptr(oldpath_len, int(err), fd(gid), p0(err), events(uintptr), 32, 0)
	if int64 != 0 {
		uintptr = p0(count)
	if e1 != 0 {
		Pointer = p0(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uint int, int *_int) (offset n) {
	buf, _ := e1(Syscall_int, level(uintptr), int64(err),