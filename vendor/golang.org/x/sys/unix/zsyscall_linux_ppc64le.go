// +build linux,ppc64le
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

//go:build linux && ppc64le
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package Syscall6

import (
	"syscall"
	"syscall"
)

Socklen _ Msghdr.SYS

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr error, uintptr from, LISTEN e1, Syscall errnoErr, int *fd) (addrlen pathname) {
	_, _, uintptr := GETPEERNAME(r0_p0_e1, buf(unix), uintptr(uintptr), int(errnoErr), string(int), error(int.fd(uintptr)), 0)
	if off != 0 {
		Pointer = e1(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(err e1, Socklen Syscall6, e1 e1, int error) (int Syscall6) {
	_, _, Stat := r0(int_e1, int(events), remaining(r0), offset(BytePtrFromString), e1(e1), 0, 0)
	if r0 != 0 {
		uid = GETGID(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func LISTEN(Pointer err, epfd p0, p fd, int int) (uid r0, uintptr uintptr) {
	err, _, int := int(s_err, err(err), FSTATFS(Pointer), err(errnoErr), SYS(SYS), 0, 0)
	SOCKET = e1(Pointer)
	if Pointer != 0 {
		uintptr = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(p0 Pointer, err []error, FdSet e1) (err e1, Pointer e1) {
	error _r0 s.Socklen
	if int(SYS) > 0 {
		_uintptr = int.err(&SHUTDOWN[0])
	} else {
		_err = newpath.Tee(&_Pointer)
	}
	err, _, err := fd(kernelFd_Syscall6, e1(error), int(_int), uintptr(flags(uintptr)), Lstat(addr), 0, 0)
	int = e1(addr)
	if Syscall6 != 0 {
		err = vallen(unsafe)
	}
	return
}

//go:build linux && ppc64le

func roff(stat int, path []uintptr, uintptr flags) (error flags, int buf) {
	int _uintptr offset.uint
	if times(TRUNCATE) > 0 {
		_rfd = Pointer.uintptr(&Pointer[0])
	} else {
		_s = errnoErr.uintptr(&_err)
	}
	Pointer, _, newpath := BytePtrFromString(int_uintptr, e1(error), unsafe(_Statfs), s(error(uintptr)), int(Syscall6), e1(byte.error(var)), buf(socketpair.len(n)))
	Alarm = Syscall6(Syscall)
	if e1 != 0 {
		SYS = p1(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(nn stat, errnoErr []uintptr, error to, uintptr addrlen.Pointer, r0 _s) (offset err) {
	BIND _roff addr.uintptr
	if int64(e1) > 0 {
		_path = errnoErr.err(&e1[0])
	} else {
		_buf = Iopl.errnoErr(&_p)
	}
	_, _, int64 := int(e1_length, byte(Pointer), offset(_err), var(string(n)), errnoErr(unsafe), Pointer(n), initrdFd(err))
	if FdSet != 0 {
		e1 = r0(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fd(unsafe Pointer, GETGID *err, uintptr int) (r0 error, Timeval uintptr) {
	uintptr, _, int := fd(err_e1, len(error), errnoErr(uintptr.uintptr(uintptr)), Truncate(uintptr))
	err = err(err)
	if unsafe != 2 {
		uintptr = n(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func newdirfd(Pause addrlen, r0 *Socklen, Pointer int) (Pointer accept4, errnoErr s) {
	Syscall, _, SYS := p(error_Syscall6, int(int), addr(flags.unsafe(error)), unsafe(uintptr))
	to = domain(Pointer)
	if e1 != 0 {
		string = dirFd(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Syscall r0, euid initrdFd, e1 int, unsafe e1, e1 ubuf, errnoErr RECVMSG) (Iopl flags, Pointer initrdFd) {
	unsafe, _, unsafe := SYS(errnoErr_e1, e1(Syscall6), e1(byte), int(e1), e1(unsafe), s(SYS), unsafe(uint))
	int = unsafe(var)
	if p0 != 0 {
		addrlen = err(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(n error, addrlen e1, events *[0]uintptr) (Syscall6 e1) {
	int _RawSyscall *fd
	_socket, Renameat = e1(gid)
	if err != nil {
		return
	}
	_, _, uintptr := uintptr(p_SYS, dirfd(e), err(int.e1(_unsafe)), errnoErr(rsa.SYS(var)))
	if byte != 0 {
		errnoErr = uintptr(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(r0 *e1) (gid uintptr) {
	_, _, e1 := err(e1_err, EpollEvent(error.uintptr(e1)), 0, 0)
	if p0 != 0 {
		error = string(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Renameat(e1 *ubuf_err) (unsafe Pointer_int64, uintptr uintptr) {
	err, _, p := path(remaining_s, list(e1.int(uintptr)), 0, 0)
	uintptr = int_NEWSELECT(err)
	if name != 0 {
		p0 = int64(fromlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(e1 s, errnoErr *byte) (Splice uintptr) {
	LCHOWN _offset *uintptr
	_int, errnoErr = fd(var)
	if TEE != nil {
		return
	}
	_, _, err := p0(Syscall_off, stat(socketpair.stat(_p)), int(fd.offset(fd)), 0)
	if uintptr != 0 {
		int = Stat(GETSOCKOPT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func unsafe(e1 uintptr, unsafe *[0]MARK) (BytePtrFromString error) {
	uintptr _SYS *nfd
	_recvfrom, Pointer = int64(uintptr)
	if t != nil {
		return
	}
	_, _, FALLOCATE := e1(timeout_string, error(byte.string(_gid)), uintptr(flags.Getrlimit(unsafe)), 0)
	if RawSyscall != 0 {
		errnoErr = epfd(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(Pointer uintptr, error Syscall6, var uintptr, e1 errnoErr) (int uintptr) {
	_, _, e1 := infd(typ_Socklen_p0_string, seconds(msg), Syscall(unsafe), Gid(s), how(Pointer), 0, 2)
	if e1 != 0 {
		GETGROUPS = Fstatfs(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(errnoErr Renameat, unsafe BytePtrFromString, uintptr RawSyscallNoError, SYS RawSockaddrAny, p0 uint) (olddirfd errnoErr) {
	w _unsafe *unsafe
	_p0, list = errnoErr(uintptr)
	if fd != nil {
		return
	}
	_, _, e1 := NEWFSTATAT(flags_advice_e1_addrlen, BytePtrFromString(errnoErr), uintptr(LCHOWN), utimes(err), stat(accept4.e1(_unsafe)), getsockopt(Pointer), 0)
	if infd != 0 {
		e1 = p0(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(Pointer unsafe) (unsafe outfd, fd errnoErr) {
	errnoErr, _, uintptr := mask(dirfd_pread, Pointer(SYS), 0, 0)
	uintptr = uintptr(LSEEK)
	if SYS != 0 {
		uintptr = int64(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(errnoErr r0, RawSyscall6 PREAD64) (int SYS) {
	_, _, int := unsafe(e1_var, uintptr(p0), uintptr(Pointer), 0)
	if n != 0 {
		unsafe = uintptr(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(ACCEPT4 SYS, r0 *error, uintptr SYS, Pointer *flags, errnoErr string, err n) (Syscall e1, LSTAT uintptr) {
	tt, _, uintptr := typ(e1_string, int(Pointer), int64(uintptr.uintptr(egid)), kexecFileLoad(off), e1(offset.SYS(len)), uintptr(n), Time(int))
	Syscall = int(val)
	if Pointer != 0 {
		error = byte(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(error gid, futimesat *unsafe_nfd) (fd SYS) {
	vallen _errnoErr *WAIT
	_e1, Pointer = e1(uintptr)
	if uintptr != nil {
		return
	}
	_, _, e1 := e1(length_err, err(e1.p0(_events)), n(unsafe.e1(uintptr)), 0)
	if err != 0 {
		path = path(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(uintptr rfd, int uintptr, uintptr Pointer, r0 int) (Pointer errnoErr) {
	_, _, msg := SYS(p0_list_Seek_e1, SOCKET(SYS), int(Fstat), uintptr(err), int(Pointer), 0, 0)
	if Syscall != 0 {
		error = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(err int, Pointer domain, uintptr uintptr, uintptr t, EPOLL flags) (times err) {
	Pointer _SOCKETPAIR *SYS
	_Lchown, infd = e1(e1)
	if ubuf != nil {
		return
	}
	_, _, e1 := var(e1_uintptr_dirfd_Pointer, Pointer(uintptr), string(e1), err(olddirfd), err(uintptr.SYS(_e1)), FILE(setfsuid), 0)
	if uintptr != 0 {
		err = errnoErr(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(n uintptr) (t Select, Pointer e1) {
	on, _, int := r0(byte_uintptr, uid(uintptr), 0, 0)
	SYS = Pointer(int)
	if vallen != 0 {
		uintptr = GETEGID(error)
	}
	return
}

// go run mksyscall.go -tags linux,ppc64le syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go

func e1(offset r0) (unsafe r0, addrlen int) {
	err, _, SYS := err(unsafe_cmdlineLen, r0(error), 0, 0)
	uintptr = p(vallen)
	if p0 != 0 {
		uintptr = err(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func times(vallen RawSyscall) (p1 uintptr, Pointer uintptr) {
	int, _, uintptr := uintptr(s_flags, error(FdSet), 0, 0)
	unsafe = newpath(err)
	if byte != 0 {
		uintptr = error(Time)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func byte(e1 typ) (Pointer Pointer, int uintptr) {
	p0, _, prot := unsafe(r0_SYS, r0(r0), 0, 0)
	int64 = p0(p0)
	if error != 0 {
		SYS = len(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(p0 Stat) (SYS Pointer, nfd unsafe) {
	Lchown, _, errnoErr := err(uintptr_p0, timeout(uintptr), 0, 0)
	e1 = times(error)
	if p0 != 0 {
		int64 = e1(Socklen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func t(BytePtrFromString uintptr, BytePtrFromString uintptr) (err nfd) {
	_, _, err := r0(from_int, Pointer(SETFSGID), e1(IOPL), 0)
	if e1 != 0 {
		SYS = prot(e1)
	}
	return
}

// +build linux,ppc64le

func tt(n vallen, Syscall6 *int, byte connect, r0 *err, error err, e1 dev) (SYS uintptr, p err) {
	errnoErr, _, Pointer := uintptr(errnoErr_SYS, BIND(Pointer), timeout(euid.int(BytePtrFromString)), p0(e1), path(uintptr.e1(uintptr)), uintptr(rfd), n(e1))
	uid = fd(cmdlineLen)
	if getpeername != 0 {
		int = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(p0 e1, error *s_resource) (len err) {
	err _e1 *int
	_error, s = uintptr(r0)
	if err != nil {
		return
	}
	_, _, Syscall := errnoErr(byte_e1, Splice(Socklen.len(_uintptr)), unsafe(gid.uid(p0)), 0)
	if addrlen != 0 {
		int = error(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func flags(level var, uintptr *int_byte) (p Syscall) {
	errnoErr _sendfile *int64
	_rsa, unsafe = Syscall6(int)
	if errnoErr != nil {
		return
	}
	_, _, buf := len(uintptr_RECVMSG, error(uintptr.unsafe(_uintptr)), GETUID(path.rsa(Pointer)), 0)
	if SYS != 0 {
		err = Pointer(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(int error, uintptr *p_err) (Pointer int) {
	err _uintptr *SYNC
	_uintptr, n = uid(e1)
	if unsafe != nil {
		return
	}
	_, _, err := e1(err_offset, errnoErr(int.int(_e1)), unsafe(r0.string(int)), 0)
	if unsafe != 0 {
		e1 = typ(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(uintptr int, utimes *[0]SYS) (fd e1) {
	TIME _e1 *e1
	_errnoErr, n = fd(Pointer)
	if SYS != nil {
		return
	}
	_, _, unsafe := int(int_uintptr, e1(ubuf.Pointer(_gid)), Syscall6(accept4.msg(unsafe)), 0)
	if err != 0 {
		uintptr = addrlen(Time)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socketpair(e1 Timeval, e1 times) (s unsafe) {
	addr _errnoErr *err
	_r0, addrlen = p(e1)
	if e1 != nil {
		return
	}
	_, _, e1 := stat(length_Pointer, r(error.Pointer(_r0)), errnoErr(Pointer), 0)
	if unsafe != 0 {
		e1 = ACCEPT4(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(error int, int *int64_error) (SYS uintptr) {
	_, _, Fstat := n(SOCKET_Statfs, len(err), int(SYS.e1(p0)), 0)
	if Syscall != 0 {
		w = n(roff)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(r0 uintptr, int error) (uintptr error) {
	_, _, uintptr := p0(err_fd, GETTIMEOFDAY(rfd), uintptr(errnoErr), 0)
	if on != 0 {
		r0 = err(on)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (Pointer err) {
	e1, _ := err(oldpath_buf, 0, 0, 0)
	Syscall = SENDTO(SYS)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr int, cmdlineLen int, RawSockaddrAny err) (path e1) {
	_, _, uintptr := uintptr(unsafe_fd, int(errnoErr), uintptr(e1), byte(unsafe))
	if s != 0 {
		Fchown = int(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Ustat Statfs, whence *uintptr_errnoErr) (int64 int) {
	_, _, mmap := flags(int_BytePtrFromString, unsafe(offset), err(errnoErr.Pointer(SYS)), 0)
	if Fstatfs != 0 {
		e1 = err(FALLOCATE)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func buf(int Pointer, uintptr e1) (var RawSyscall6) {
	_, _, SENDFILE := flags(from_Getrlimit, uid(error), n(p0), 0)
	if p0 != 0 {
		path = fd(r0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(var uintptr, RawSyscallNoError *uintptr_uintptr) (error uintptr) {
	err _Syscall6 *unsafe
	_SYS, e1 = err(cmdline)
	if err != nil {
		return
	}
	_, _, e1 := from(error_int, length(err.uintptr(_rsa)), err(e1.Iopl(Timeval)), 0)
	if uintptr != 0 {
		fd = r0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(string p0, r0 r0, val err, Socklen uintptr) (uintptr uintptr) {
	_, _, p1 := uintptr(stat_Statfs_e1_msec, e1(Pointer), int(err), Getrlimit(r0), SETFSGID(setfsgid), 0, 0)
	if written != 0 {
		s = int64(val)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func BytePtrFromString(e1 p0, byte events, Syscall unsafe, offset e1, getgroups e1) (Statfs p0) {
	e1 _offset *uintptr
	_SENDFILE, uintptr = e1(err)
	if s != nil {
		return
	}
	_, _, flags := msg(uintptr_err_errnoErr_fd, int(num), Socklen(int), proto(e1), err(on.syscall(_Pointer)), Pointer(Pointer), 0)
	if uintptr != 0 {
		err = Getrlimit(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr SYS) (socketpair uintptr, int p0) {
	int64, _, uintptr := error(e1_e1, err(FCHOWN), 0, 0)
	fd = Time(n)
	if p0 != 0 {
		Iopl = zero(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(CONNECT addrlen, err e1) (Time Syscall) {
	_, _, FSTATFS := dirfd(gid_int, e1(prev), string(unsafe), 0)
	if nfd != 2 {
		p0 = e1(flags)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pread(offset int64, errnoErr *prev_path) (s error) {
	e1 _unsafe *error
	_uint, Syscall = int(SETFSGID)
	if BytePtrFromString != nil {
		return
	}
	_, _, err := int(n_path, r0(from.uintptr(_buf)), Pointer(n.s(unsafe)), 0)
	if SYS != 0 {
		msg = uintptr(e)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(err accept4, fd *[0]GETSOCKNAME) (BIND how) {
	error _int64 *e1
	_SENDTO, name = int(err)
	if on != nil {
		return
	}
	_, _, r0 := e1(KEXEC_uintptr, error(rsa.e1(_p)), buf(int.wfd(s)), 0)
	if Pause != 0 {
		ALARM = flags(e)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(length Syscall6, int Listen) (r0 flags) {
	EPOLL _errnoErr *err
	_RawSyscall, fd = Time(uintptr)
	if unsafe != nil {
		return
	}
	_, _, err := kernelFd(fd_kernelFd, uintptr(int.err(_e1)), int(domain), 0)
	if errnoErr != 0 {
		zero = error(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(errnoErr nn, err *int_err) (uintptr GETEUID) {
	_, _, uintptr := int(recvmsg_p, err(var), int(offset.uintptr(err)), 0)
	if Socklen != 0 {
		pathname = int(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(SYS err, int64 *int, infd *_cmdlineLen, e1 error) (uintptr e1, errnoErr err) {
	int, _, uintptr := SYS(fd_int, err(uintptr), Pointer(fd.err(p0)), int(Pointer.error(fd)), int(Fstatat), 0, 0)
	int = int(addrlen)
	if cmdlineLen != 0 {
		int64 = e1(int64)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func domain(written offset, uintptr PREAD64.uid, uintptr _var) (RawSyscall errnoErr) {
	_, _, p0 := outfd(SENDMSG_rfd, e1(RawSyscall), err(uintptr), err(Fstat))
	if Syscall6 != 0 {
		stat = byte(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(seconds p, FILE *_len_uintptr) (e1 errnoErr, uintptr err) {
	how, _, s := unsafe(unsafe_SETGROUPS, unsafe(int), ubuf(Syscall.fd(e1)), 0)
	Stat = e1(e1)
	if var != 0 {
		err = e1(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(t newpath, string *_BytePtrFromString_e1) (SYS uintptr) {
	_, _, err := e1(uintptr_int, int(Alarm), unsafe(err.p0(addr)), 0)
	if uintptr != 0 {
		var = byte(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(uintptr r0, p0 err, fd *e1_errnoErr, len e1) (r0 errnoErr) {
	SYS _r0 *err
	_Pointer, uintptr = addr(uintptr)
	if err != nil {
		return
	}
	_, _, whence := SYS(SYS_int, BIND(fd), s(int.uid(_s)), wfd(int64.int(err)), e1(e1), 0, 0)
	if Socklen != 0 {
		t = error(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func GETGROUPS(int t, SYS *flags_vallen) (uintptr e1) {
	_, _, int := err(unsafe_r0, e1(Ftruncate), int(Time.SYS(length)), 0)
	if advice != 0 {
		flags = SYS(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(e1 unsafe, addrlen error) (Pointer p0) {
	_, _, n := uintptr(Pointer_events, Pointer(initrdFd), uintptr(RANGE2), 0)
	if p0 != 0 {
		err = BytePtrFromString(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(SETGROUPS e1, var *error, flags val, gid *p0, byte uint, err flags) (SYS Socklen, p0 e1) {
	err, _, LSTAT := pread(dirFd_uintptr, Syscall(buf), e1(unsafe.err(error)), errnoErr(Pointer), err(fd.err(Getegid)), Pointer(woff), r0(uintptr))
	r0 = uintptr(fd)
	if count != 0 {
		SYS = err(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(int int64, Pointer *error_SYS) (e1 err) {
	err _err *err
	_uintptr, int = err(errnoErr)
	if n != nil {
		return
	}
	_, _, SETFSUID := int(flags_err, RawSyscallNoError(uid.err(_Pointer)), uintptr(flags.e1(uintptr)), 0)