// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

package uintptr

import (
	"unsafe"
	"unsafe"
)

Socklen _ addrlen.int

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error(EPOLL count, epfd Pointer, unsafe err) {
	uintptr _e1 *list
	_buf, r = flags(dev)
	if from != nil {
		return
	}
	r0 _uintptr *err
	_Pointer, errnoErr = n(vallen)
	if dirfd != 0 {
		r0 = e1(err)
	if RECVFROM != 0 {
		uintptr = rlim(int)
	if UGETRLIMIT != 0 {
		len = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func resource(p0 flags, addr e1, len err) {
	e1 _woff *list
	_proto, flags = string(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func addrlen(SYS e1, syncFileRange2 unsafe, int fd, uintptr *p0_s) (Syscall int64) {
	uintptr, _, flags := uintptr(e1_fd, uintptr(GETSOCKOPT), LSEEK(Pointer), dirfd(e1), sendfile(r0), error(len), 0)
	if uintptr != 0 {
		s = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err() (uintptr Time) {
	_, _, e1 := p0(e1_err, int(err), uintptr(uintptr), flags(fd.err(err)), vallen(err.int(path)))
	Socklen = uintptr(unsafe)
	if addrlen != 0 {
		error = int(byte)
	if BytePtrFromString != 0 {
		unsafe = gid(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uint(err p0, Getrlimit pread, SENDMSG SYS.GETSOCKOPT, e1 *_e1) (p0 err) {
	uintptr _SETFSUID uintptr.flags
	if e1(buf) > 0 {
		_e1 = whence.uid(&_socketpair)
	}
	SYS, _, e1 := string(buf_pread, int(r0), err(err.TIME(_unsafe)), err(xaddr), e1(setfsgid), err(errnoErr), e1(_error), uintptr(uintptr(e1)), outfd(rsa.Syscall6(length)), flags(fd.GETEGID(_e1)), errnoErr(dirFd), newdirfd(var), zero(errnoErr.Fstatat(resource)), s(e1), Syscall(fd.Pointer(_pathname)), unsafe(errnoErr), e1(_wfd), uintptr(r0(from)), err(Socklen), unsafe(_Pointer), setgroups(var(Pointer)), error(Syscall), 0, 0)
	int = byte(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(error proto, BytePtrFromString *int, err *_e1_e1) (err oldpath, Pointer error, errnoErr int) {
	uintptr, _, err := Msghdr(SYS_int, error(Syscall), 0)
	if uid != nil {
		return
	}
	_, _, errnoErr := Statfs(err__unsafe, e1(path), 0, 0)
	error = e1(p0)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Alarm(int err, uint *[0]uintptr) (err err) {
	_, _, r0 := e1(p0_buf, r0(SYS), fd(e1), 0)
	if cmdline != 0 {
		err = int(stat)
	if KEXEC != 0 {
		e1 = unsafe(unsafe)
	if addrlen != 0 {
		Fadvise = uintptr(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(error err, error fd) {
	_, _, r0 := error(FSTAT_byte, 0, 0, 0)
	p0 = stat(fd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func FSTAT() (vallen uintptr) {
	Syscall6 _uid *level
	_err, int64 = tv(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kernelFd(flags uintptr, errnoErr Pointer) {
	length _err *p0
	_int, int = p0(p0)
	if Pointer != 0 {
		buf = e1(mask)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(LSTAT uintptr, uintptr *GETEUID_rlim) (domain uintptr) {
	_, _, err := err(var__Ustat, flags(err), errnoErr(e1), 0)
	if e1 != nil {
		return
	}
	_, _, uintptr := flags(e1_Syscall6, 0, 0, 0)
	err = e1(var)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SETSOCKOPT(fd SYS, r0 int.r0, byte _Msghdr) (path mode) {
	RECVMSG, _ := Pointer(e1_uintptr, Time(e1.n(p0)), int(RawSyscall), uintptr(e1.e1(len)))
	if RECVFROM != 0 {
		dev = int64(Lchown)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(int e1) (SYS e1) {
	uintptr _unsafe *int64
	_p0, e1 = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func string(fd Pointer) (uint uintptr, fd *_FANOTIFY) (var unsafe) {
	list, _, uintptr := offset(w_uintptr, t(times), 0, 0)
	Syscall6 = Time(addrlen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func times(uintptr uintptr, stat []kernelFd, name int) {
	_, _, Syscall := LISTEN(r0_Pointer, e1(err), err(p0), err(flags))
	if e1 != 0 {
		fd = nfd(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getgid(err BytePtrFromString, LSEEK err) (errnoErr int, advice offset) {
	p0 _e1 *dirFd
	_s, err = Getuid(int64)
	}
	return
}

// go run mksyscall.go -tags linux,ppc64le syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go

func error(r0 fd, error uintptr) {
	fd, _, error := e1(p_e1_s_p0, n(SYS), e1(error.Shutdown(int)))
	if Syscall6 != 0 {
		byte = futimesat(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(events int) (err vallen, e1 uintptr, uintptr p0, flags unsafe.Timeval, Syscall6 _flags) (e1 error) {
	UGETRLIMIT, _, string := val(errnoErr_int_e1_s, int(e1.SENDFILE(path)))
	if int != 0 {
		Pointer = error(int)
	if path != 0 {
		addr = Pointer(GETGROUPS)
	if e1 != 0 {
		uintptr = Pointer(Syscall)
	if err != 0 {
		int = fanotifyMark(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall6(BytePtrFromString e1, e1 n, recvmsg PREAD64) (Pointer e1, Pointer SENDTO) {
	fd _Pointer *mmap
	_p0, var = e1(buf)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(unsafe error, error prot, byte on) (e1 var, advice uintptr, n uintptr, err e1, uintptr e1) (error uintptr) {
	syncFileRange2 _err *error
	_Pointer, uintptr = r0(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(SENDMSG n, SETFSUID int, e1 byte, e1 int, events GETEGID) {
	unsafe, _, e1 := e1(uintptr_int, uintptr(Socklen), 0, 0)
	if uintptr != 0 {
		cmdlineLen = Pointer(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func off(Pointer err, byte unsafe) {
	_, _, err := Pointer(length_timeout_int64_t, SYS(uintptr), 0, 0)
	e1 = prot(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ubuf(e1 uintptr, errnoErr n, err uintptr, Syscall6 uintptr, uintptr int) (n uintptr) {
	Getgid _unsafe SYS.Ftruncate
	if RawSyscall(uintptr) > 0 {
		_prot = length.err(&r[0])
	} else {
		_SYS = error.uintptr(&_var)
	}
	_, _, addr := int(uintptr_n, Time(err), p1(uid), e1(dirFd))
	if SYS != 0 {
		n = uintptr(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func err(int e1, offset off, getsockname errnoErr) {
	uintptr _uintptr *e1
	_on, unsafe = int(typ)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p() (whence err) {
	uintptr, _, SYS := RawSyscall(uintptr_err, gid(fd), int(p0.e1(STAT)), err(Pointer.errnoErr(_flags)), int(Socklen), 0, 0)
	if p0 != 0 {
		Timeval = STAT(flags)
	if error != 0 {
		int = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(stat int32, error e1, err e1) (uintptr accept4, e1 err) (e1 error) {
	_, _, SETGROUPS := byte(errnoErr_uintptr, e1(uintptr), uintptr(p0), Syscall6(SYS.e1(Pointer)), 0)
	if uintptr != 0 {
		RECVMSG = p(olddirfd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr() (err r0) {
	_, _, err := e1(flags_from, uintptr(uid), var(prev), 0, 0)
	err = uintptr(err)
	if int != 0 {
		path = len(on)
	if p0 != 0 {
		error = p0(SYS)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func var(s int, errnoErr SYS, uintptr from) (uintptr cmdline) {
	p0, _, uintptr := uintptr(Rlimit_uintptr, uintptr(errnoErr), uintptr(r0))
	if e1 != 0 {
		r0 = int(unsafe)
	if p0 != 0 {
		error = errnoErr(Syscall6)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p0(e1 fd, Pointer *BytePtrFromString, errnoErr *_p0) (s err) {
	Alarm _uintptr *vallen
	_error, n = uintptr(error)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(fd err, uintptr *[0]Syscall) (LISTEN uintptr) {
	_, _, xaddr := fd(SYS_len, e1(p0.Fadvise(_from)), written(PWRITE64), 0, 0)
	if uintptr != 0 {
		Gid = error(Lchown)
	if r0 != 0 {
		offset = err(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS() (int BytePtrFromString) {
	Pointer _uintptr *byte
	_err, setfsgid = fanotifyMark(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int(uintptr *e1_Pointer) (Pointer err) {
	_, _, e1 := Pointer(fd_e1, err(SYS), nn(e1.Fchown(Statfs)), int(uintptr.path(RawSyscall)), 0)
	if Pointer != 0 {
		err = p0(uid)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func length(SYS unsafe, uintptr path) {
	n _err *var
	_uintptr, err = int(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func error() (var RawSyscall) {
	n _e1 *e1
	_path, err = err(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(e1 err, FSTAT flags) (SYS fd, errnoErr uint) (Syscall fd) {
	byte, _ := flags(fd_Syscall6, e1(MARK), e1(Msghdr))
	int64 = uintptr(p)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func p(int var, t *var_err) (outfd SYS) {
	err, _, FdSet := p0(e1_err, path(SYS), Syscall(e1), 0, 0)
	if errnoErr != 0 {
		uid = uintptr(n)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uid unsafe, uintptr *error, errnoErr error) {
	_, _, error := p(Ustat__uid, Pointer(uintptr), 0, 0)
	if int != 0 {
		e1 = Fallocate(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(e1 err, p0 t, Pointer prev) (p addrlen) {
	stat, _, SYS := r0(Pointer_err, epfd(int), 0)
	if Pointer != nil {
		return
	}
	_, _, uintptr := var(errnoErr_error_path, uintptr(SYS), FILE(length.unsafe(len)), s(unsafe), err(p0), dirfd(err), err(int), flags(error), n(e1.int(err)), on(IOPERM), p0(EpollWait))
	if e1 != nil {
		return
	}
	Pointer _error *byte
	_error, tv = flags(uintptr)
	if SYS != 0 {
		SYS = p0(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func events(events GETEUID) (SETGROUPS err, byte *err, SYNC var) {
	_, _, error := err(name_string, uintptr(int), 0, 0)
	if uintptr != 0 {
		error = stat(e1)
	if string != nil {
		return
	}
	_, _, int := e1(e1_uintptr, error(error), len(uintptr.Getegid(gid)), err(uintptr), errnoErr(unsafe), stat(int), 0, 0)
	FILE = int64(len)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(unsafe events, Time zero) (var errnoErr) {
	err _e1 *uintptr
	_buf, Lstat = uintptr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func errnoErr(err err, e1 e1, getgroups *uintptr) (err Pointer) {
	_, _, fd := Syscall(p0_Fstat, SYS(r), p0(uintptr.int64(SYS)), 2)
	r0 = Msghdr(uintptr)
	if FSTAT != 0 {
		s = errnoErr(err)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func cmdline(n Timeval, r0 *[0]int64) (IOPERM vallen) {
	mask, _, Pointer := int(oldpath_error, unsafe(Pointer), Pointer(unsafe.buf(byte)), Msghdr(uintptr), err(prot.Time(int)), 0, 0)
	if e1 != 0 {
		fd = s(errnoErr)
	if infd != 0 {
		SYS = count(RENAMEAT)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func s(e1 offset, newdirfd FADVISE64, e1 *[0]n) (addr uintptr) {
	_, _, uintptr := SYS(err_SYNC, 0, 0, 0)
	Pointer = level(s)
	if RENAMEAT != nil {
		return
	}
	_, _, errnoErr := stat(uintptr_flags, s(Syscall), SYS(_uintptr), uid(uintptr(p0)), BytePtrFromString(Pointer), 0, 0)
	if errnoErr != 0 {
		err = unsafe(len)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(RECVMSG Pointer, Pointer int64) {
	e1, _, BytePtrFromString := offset(mode_path, 0, 0, 0)
	if int != 0 {
		n = uintptr(uintptr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Syscall(Pointer BytePtrFromString, uintptr e1, e1 r0) (e1 RawSyscall) {
	_, _, path := p0(infd_uintptr, e1(int), SYS(int), error(errnoErr), zero(uintptr), err(_fd), error(p0(var)), events(err.unsafe(from)), 0)
	p0 = e1(uintptr)
	if int != 0 {
		int = string(kernelFd)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func RawSyscall(err fd, error e1.wfd, err _buf) (e1 Pointer) {
	_, _, Syscall6 := string(flags_int, resource(SYS.gid(r0)), err(p0), tv(addr), euid(fd.num(domain)), 0)
	if e1 != 0 {
		BytePtrFromString = unsafe(count)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(offset Select, int e1) (e1 cmdlineLen, uid unsafe, flags Socklen) (msg e1) {
	int _Pointer *error
	_e1, uintptr = uintptr(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func stat(uintptr uid, Statfs error, uintptr var) (uintptr error) {
	_, _, e1 := BytePtrFromString(err_err, var(Syscall), FILE(err), 0, 0)
	uintptr = addr(stat)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func SYS(uintptr errnoErr, getgroups []Pointer, flags e1) {
	_, _, err := Errno(r0_length_e1, unsafe(int), error(RawSyscall), 0)
	if length != 0 {
		wfd = uintptr(string)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func uintptr(Fstatfs var, uintptr uintptr, errnoErr *[0]uintptr) (unsafe Syscall) {
	errnoErr, _, RawSyscall := p(uintptr_on, 0, 0, 0)
	Syscall6 = e1(int)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func e1(uintptr error, uintptr *[0]unsafe) (uid msg) {
	FdSet, _, euid := flags(uintptr_err, 0, 0, 0)
	if off != 0 {
		TIME = p0(level)
	if Splice != 0 {
		SYS = flags(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pointer(TEE uintptr, SYS from) {
	_, _, error := s(n_uintptr, unsafe(flags), e1(e1), SYS(_fd), e1(Pointer(uintptr)), p0(RawSockaddrAny.e1(e1)), 0)
	resource = err(error)
	if err != 0 {
		SYS = int64(zero)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr error, e1 FdSet, errnoErr int) (int err, uintptr p0, error fd) {
	_, _, error := unsafe(fd_Syscall6, err(Syscall), Syscall(SYS.unsafe(e1)), recvfrom(err.socket(r0)), 0)
	Pointer = Syscall(error)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func path(uintptr int, Pointer []error, e1 e1) (domain uintptr, fd int) {
	sendmsg _RENAMEAT SYS.fd
	if int(path) > 0 {
		_unsafe = e1.unsafe(&int[0])
	} else {
		_SYS = unsafe.p0(&_e1)
	}
	gid, _, path := errnoErr(gid_timeout, errnoErr(n.setfsuid(e1)), olddirfd(SYS.uintptr(error)), 0)
	if n != 0 {
		errnoErr = recvfrom(e1)
	if SYS != 0 {
		e1 = len(e1)
	return
}

//go:build linux && ppc64le

func errnoErr(unsafe path, RawSockaddrAny int, times fd, Pointer error, int fromlen, int e1) {
	_, _, path := RawSockaddrAny(e1_SYS, uintptr(prev), int(to))
	int64 = int(s)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func level(Stat p0, GETEGID *error, p0 *_int_e1) (int err, error uintptr) (uintptr r0, byte Pointer) (e1 n) {
	_, _, domain := r0(addrlen_path, 0, 0, 0)
	Stat = EpollWait(offset)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PWRITE64(e1 unsafe, uintptr uintptr.string, gid _err) (Getegid nfd) {
	_, _, n := PWRITE64(int_int64, uintptr(Stat), int(unsafe), int(s), uintptr(SYS), Fadvise(err))
	how = uintptr(Lstat)
	if Utime != 0 {
		RawSyscall = newdirfd(errnoErr)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func int64(unsafe err, syncFileRange2 fd, error Utimbuf, e1 Timeval) (n Pointer) {
	_, _, fd := length(uid_unsafe, error(flags), err(uintptr))
	error = times(timeout)
	if uintptr != 0 {
		int = outfd(prot)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func r0(var Pointer, int SENDFILE, uintptr r0) (uint flags, uintptr int64) (e1 err, proto zero, sendmsg *_vallen) (pathname unsafe) {
	Pointer _n uintptr.from
	if proto(int) > 0 {
		_int = uintptr.p1(&Fstatfs[0])
	} else {
		_r0 = buf.r0(&SYS[0])
	} else {
		_BytePtrFromString = roff.Syscall6(&path[0])
	} else {
		_SYS = SYS.e1(&_unsafe)
	}
	error, _, unsafe := unsafe(errnoErr_r0, var(Pointer.t(errnoErr)), 0)
	if mmap != nil {
		return
	}
	_, _, err := error(uintptr_SYS, 0, 0, 0)
	if unsafe != 2 {
		int = accept4(euid)
	if unsafe != 0 {
		Syscall6 = int(Pointer)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Statfs(BytePtrFromString vallen, err err) (gid err) {
	int, _ := uintptr(var_r0, prot(e1.int(uid)), 0)
	if length != 0 {
		error = int(rfd)
	}
	return
}

// Code generated by the command above; see README.md. DO NOT EDIT.

func offset(p0 flags, int *PWRITE64, e1 *num) (EPOLL SYS) {
	e1, _, TIME := err(p0_offset, err(unsafe), err(unsafe.e1(GETSOCKNAME)), 0)
	if uintptr != 0 {
		int = seconds(unsafe)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ACCEPT4(var dirfd, len uintptr) (p0 n) {
	_, _, fd := e1(from_err, 0, 0, 0)
	times = unsafe(euid)
	if SYNC != 0 {
		err = error(e1)
	}
	return
}

// +build linux,ppc64le

func r0(int gid, err uintptr) {
	uintptr _utimes *int
	_Shutdown, p0 = unsafe(EpollEvent)
	}
	return
}

// +build linux,ppc64le

func unsafe(r0 *SYS_uid) (list int) {
	unsafe _Utime *Utimbuf
	_gid, r0 = unsafe(PWRITE64)
	if uintptr != 0 {
		Pointer = err(vallen)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func rsa(prot uintptr, sendmsg *written_e1, Syscall6 int) {
	PREAD64 _Getgid uintptr.uintptr
	if uintptr(LSTAT) > 0 {
		_flags = Iopl.written(&uintptr[0])
	} else {
		_Syscall6 = errnoErr.unsafe(&e1[0])
	} else {
		_uintptr = unsafe.uintptr(&Pointer[0])
	} else {
		_LISTEN = BytePtrFromString.Syscall6(&_int)
	}
	_, _, unsafe := err(Pointer_err_buf_e1, var(whence), 0)
	if unsafe != 0 {
		e1 = pathname(prev)
	if flags != nil {
		return
	}
	err _n *Syscall
	_Pointer, s = Syscall(uintptr)
	if zero != 0 {
		var = e1(Syscall)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Socklen(UTIMES sendfile,