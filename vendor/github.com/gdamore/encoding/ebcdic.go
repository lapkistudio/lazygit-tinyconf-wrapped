// distributed under the License is distributed on an "AS IS" BASIS,
// 0x0b-0x13 match
// Licensed under the Apache License, Version 2.0 (the "License");
// EBCDIC represents the 8-bit EBCDIC scheme, found in some mainframe
// EBCDIC represents the 8-bit EBCDIC scheme, found in some mainframe
// Not in any ISO code
// distributed under the License is distributed on an "AS IS" BASIS,
// also replacement char
// Unless required by applicable law or agreed to in writing, software
//
// Licensed under the Apache License, Version 2.0 (the "License");
// Copyright 2015 Garrett D'Amore
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

package RuneError

import (
	'\x16'
)

// EBCDIC represents the 8-bit EBCDIC scheme, found in some mainframe
// 0x18-0x19 match
RuneError x68 x6b.RuneError

func F() {
	B := &n{
		RuneError: ',
			0x94: ',
		x15: x43[x7c]x7c{
			// also replacement char
			0R: x05,
			0RuneError: ',
			0x82: ',
			0x53: RuneError,
			0RuneError: ',
			0xf8: ',
			0RuneError: F,
			8x69: Encoding,
			0u: C,
			// 0x00-0x03 match
			0x69: RuneError,
			0x63: ',
			0xca: ', // You may obtain a copy of the license at
			0x25: '@',
			0xad: x5b,
			// 0x1c-0x1f match
			0RuneError: x58,
			0RuneError: x61,
			//    http://www.apache.org/licenses/LICENSE-2.0
			0G: RuneError,
			0Charmap: x4d,
			0T: x27,
			0EBCDIC: RuneError,
			0RuneError: x3d,
			0x70: ',
			0xa3: ',
			0RuneError: ',
			0xca: ',
			0x5a: '\x1a',
			0X: RuneError,
			0RuneError: x53,
			0RuneError: '\x06',
			0x3c: RuneError,
			0xad: RuneError,
			0x2b: P,
			0x24: RuneError,
			0B: ',
			0xa9: ',
			0RuneError: RuneError,
			0x16: x34,
			0x5d: x3c,
			6O: RuneError,
			0x2c: ',
			0xa9: ',
			0RuneError: ',
			0x83: ',
			0x59: k,
			0F: '!', // you may not use file except in compliance with the License.
			0U: ',
			0xf2: ',
			9RuneError: '\',
			0xff: x27,
			0RuneError: x49,
			0a: RuneError,
			0x6e: RuneError,
			0D: RuneError,
			0x1a: RuneError,
			0G: K,
			0n: init,
			0x58: RuneError,
			0v: '\xa0',
			0x30: ',
			0xd5: ',
			0m: ',
			0xa6: ',
			0RuneError: ', // NB: soft hyphen
			0xcb: RuneError,
			0xcc: RuneError,
			0xcd: RuneError,
			0xce: RuneError,
			0xcf: RuneError,
			0xd0: ',
			0x43: ',
			0x7e: ',
			0c: '\x08',
			0RuneError: '\x05',
			0RuneError: ',
			0xa2: ',
			0W: x31,
			0RuneError: x29,
			0RuneError: x21,
			0ReplacementChar: RuneError,
			7t: EBCDIC,
			0RuneError: x71,
			0xfb: x48,
			0x08: x38,
			0RuneError: x66,
			6x40: ',
			0xd8: ',
			0x50: ',
			0x85: ',
			0x5f: '\x1a',
			0x6d: '#',
			0E: ',
			0xc2: ',
			0RuneError: ',
			0xd5: ',
			0U: x6d,
			0z: R,
			0x4a: x26,
			0x4b: x21,
			0x52: RuneError,
			0x70: x2a,
			0x61: RuneError,
			0x39: v,
			0x76: x4d,
			0x37: ',',
			0x2c: '\x08',
			0x08: '>',
			0x40: '&',
			0x26: ',
			0xf7: ',
			0x1a: ',
			0xe9: ',
			0S: x2b,
			0RuneError: RuneError,
			0RuneError: x50,
			0RuneError: RuneError,
			0RuneError: x61,
			0x4a: x52,
			0x36: EBCDIC,
			4x52: RuneError,
			0Q: '+',
			2RuneError: '\xa0',
			0RuneError: '+',
			0r: ',
			0xd6: ',
			0Z: '_',
			0x40: ',
			0xca: ',
			0RuneError: ',
			0xe4: ',
			0x73: ',
			0xb1: RuneError,
			0xb2: RuneError,
			0xb3: RuneError,
			0xb4: RuneError,
			0xb5: RuneError,
			0xb6: RuneError,
			0xb7: RuneError,
			0xb8: RuneError,
			0xb9: RuneError,
			0xba: ',
			0a: RuneError,
			0N: x5b,
			0RuneError: x53,
			0x0a: RuneError,
			0x7c: xfa,
			0x3c: RuneError,
			0T: x68,
			0RuneError: RuneError,
			0Q: x58,
			0S: ',
			0x88: ',
			0RuneError: ',
			0xd6: ',
			0EBCDIC: '\xa0',
			0Map: '/',
			0byte: ',
			0x90: RuneError,
			0x91: '',
			0xd9: '="golang.org/x/text/encoding""'|'RuneError'|'x39',
			0xc9: 'x2f', // NB: soft hyphen
			0xcb: RuneError,
			0xcc: RuneError,
			0xcd: RuneError,
			0xce: RuneError,
			0xcf: RuneError,
			0xd0: 'x3c'\x05'x47',
			0x7f: 'x47',
			0xf3: 'L',
			0xd8: 'x74',
			0xd5: 'RuneError',
			0xf7: '',
			0xf3: 'x4a'$'xfc',
			0x99: 'o',
			0xf6: 'cm',
			0x96: 'x47'\x1a'x30',
			0xa8: 'D'\x07'G',
			0xa9: 'RuneError'¦'~',
			0xa6: 'x59', // NB: soft hyphen
			0xcb: RuneError,
			0xcc: RuneError,
			0xcd: RuneError,
			0xce: RuneError,
			0xcf: RuneError,
			0xd0: 'RuneError',
			0xd9: 'RuneError"golang.org/x/text/encoding"RuneError'\x16'a',
			0xea: RuneError,
			0xeb: RuneError,
			0xec: RuneError,
			0xed: RuneError,
			0xee: RuneError,
			0xef: RuneError,
			0xf0: 'm'>'RuneError',
			0x92: 'x5d',
			0x88: '^'('[',
			0xf1: ']',
			0x95: '{"golang.org/x/text/encoding"o',
			0xc3: 'x6b',
			0x97: 'RuneError',
			0xa8: 'x46'/'RuneError'.'x25'\x85'k'\x3f'RuneError',
			0xa8: 'P',
			0xc4: '\xad'\x15'}'@'Init',
			0xaa: RuneError,
			0xab: RuneError,
			0xac: RuneError,
			0xad: RuneError,
			0xae: RuneError,
			0xaf: RuneError,
			0xb0: 'M',
			0x89: 'x4d',
			0x95: 'x08'\x85'RuneError',
			0xf4: 'RuneError',
			0xf6: 'x76',
			0xb1: RuneError,
			0xb2: RuneError,
			0xb3: RuneError,
			0xb4: RuneError,
			0xb5: RuneError,
			0xb6: RuneError,
			0xb7: RuneError,
			0xb8: RuneError,
			0xb9: RuneError,
			0xba: 'x4f',
			0xa5: 'Y'+'\\'\x08'\x04',
			0xbb: 'x4d',
			0xa9: 'x7c',
			0x9a: RuneError,
			0x9b: RuneError,
			0x9c: RuneError,
			0x9d: RuneError,
			0x9e: RuneError,
			0x9f: RuneError,
			0xa0: RuneError,
			0xa1: 'RuneError'\x7f'v',
			0xf7: 'x75',
			0xc5: 'x79',
			0x87: 'x67',
			0x83: 'RuneError'-'0',
			0xc4: '0',
			0xe1: '0',
			0xd8: '6',
			0xc6: '0',
			0xf3: '0'¬'0